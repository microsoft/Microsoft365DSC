[ClassVersion("1.0.0.0"), FriendlyName("EXOIRMConfiguration")]
class MSFT_EXOIRMConfiguration : OMI_BaseResource
{
    [Key, Description("Only valid value is 'Yes'."), ValueMap{"Yes"}, Values{"Yes"}] String IsSingleInstance;
    [Write, Description("The AutomaticServiceUpdateEnabled parameter specifies whether to allow the automatic addition of new features within Azure Information Protection for your cloud-based organization.")] Boolean AutomaticServiceUpdateEnabled;
    [Write, Description("The AzureRMSLicensingEnabled parameter specifies whether the Exchange Online organization can to connect directly to Azure Rights Management.")] Boolean AzureRMSLicensingEnabled;
    [Write, Description("The DecryptAttachmentForEncryptOnly parameter specifies whether mail recipients have unrestricted rights on the attachment or not for Encrypt-only mails sent using Microsoft Purview Message Encryption.")] Boolean DecryptAttachmentForEncryptOnly;
    [Write, Description("The EDiscoverySuperUserEnabled parameter specifies whether members of the Discovery Management role group can access IRM-protected messages in a discovery mailbox that were returned by a discovery search.")] Boolean EDiscoverySuperUserEnabled;
    [Write, Description("The EnablePdfEncryption parameter specifies whether to enable the encryption of PDF attachments using Microsoft Purview Message Encryption. ")] Boolean EnablePdfEncryption;
    [Write, Description("The InternalLicensingEnabled parameter specifies whether to enable IRM features for messages that are sent to internal and external recipients.")] Boolean InternalLicensingEnabled;
    [Write, Description("The JournalReportDecryptionEnabled parameter specifies whether to enable journal report decryption.")] Boolean JournalReportDecryptionEnabled;
    [Write, Description("The LicensingLocation parameter specifies the RMS licensing URLs. You can specify multiple URL values separated by commas.")] String LicensingLocation[];
    [Write, Description("This parameter is available only in the cloud-based service.")] Boolean RejectIfRecipientHasNoRights;
    [Write, Description("The RMSOnlineKeySharingLocation parameter specifies the Azure Rights Management URL that's used to get the trusted publishing domain (TPD) for the Exchange Online organization.")] String RMSOnlineKeySharingLocation;
    [Write, Description("The SearchEnabled parameter specifies whether to enable searching of IRM-encrypted messages in Outlook on the web (formerly known as Outlook Web App).")] Boolean SearchEnabled;
    [Write, Description("The SimplifiedClientAccessDoNotForwardDisabled parameter specifies whether to disable Do not forward in Outlook on the web.")] Boolean SimplifiedClientAccessDoNotForwardDisabled;
    [Write, Description("The SimplifiedClientAccessEnabled parameter specifies whether to enable the Protect button in Outlook on the web.")] Boolean SimplifiedClientAccessEnabled;
    [Write, Description("The SimplifiedClientAccessEncryptOnlyDisabled parameter specifies whether to disable Encrypt only in Outlook on the web. ")] Boolean SimplifiedClientAccessEncryptOnlyDisabled;
    [Write, Description("The TransportDecryptionSetting parameter specifies the transport decryption configuration."), ValueMap{"Disabled","Mandatory","Optional"}, Values{"Disabled","Mandatory","Optional"}] String TransportDecryptionSetting;
    [Write, Description("Specifies if this Outbound connector should exist."), ValueMap{"Present","Absent"}, Values{"Present","Absent"}] String Ensure;
    [Write, Description("Credentials of the Exchange Global Admin"), EmbeddedInstance("MSFT_Credential")] string Credential;
    [Write, Description("Id of the Azure Active Directory application to authenticate with.")] String ApplicationId;
    [Write, Description("Id of the Azure Active Directory tenant used for authentication.")] String TenantId;
    [Write, Description("Thumbprint of the Azure Active Directory application's authentication certificate to use for authentication.")] String CertificateThumbprint;
    [Write, Description("Username can be made up to anything but password will be used for CertificatePassword"), EmbeddedInstance("MSFT_Credential")] String CertificatePassword;
    [Write, Description("Path to certificate used in service principal usually a PFX file.")] String CertificatePath;
    [Write, Description("Managed ID being used for authentication.")] Boolean ManagedIdentity;
};
