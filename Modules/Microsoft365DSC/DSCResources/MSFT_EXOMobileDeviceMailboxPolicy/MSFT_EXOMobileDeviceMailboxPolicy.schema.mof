[ClassVersion("1.0.0.0"), FriendlyName("EXOMobileDeviceMailboxPolicy")]
class MSFT_EXOMobileDeviceMailboxPolicy : OMI_BaseResource
{
    [Key, Description("The Name parameter specifies the friendly name of the mobile device mailbox policy.")] String Name;
    [Write, Description("The AllowApplePushNotifications parameter specifies whether push notifications are allowed to Apple mobile devices.")] Boolean AllowApplePushNotifications;
    [Write, Description("The AllowBluetooth parameter specifies whether the Bluetooth capabilities are allowed on the mobile phone. The available options are Disable, HandsfreeOnly, and Allow. The default value is Allow."), ValueMap{"Disable","HandsfreeOnly","Allow"}, Values{"Disable","HandsfreeOnly","Allow"}] String AllowBluetooth;
    [Write, Description("The AllowBrowser parameter indicates whether Microsoft Pocket Internet Explorer is allowed on the mobile phone. This parameter doesn't affect third-party browsers.")] Boolean AllowBrowser;
    [Write, Description("The AllowCamera parameter specifies whether the mobile phone's camera is allowed.")] Boolean AllowCamera;
    [Write, Description("The AllowConsumerEmail parameter specifies whether the mobile phone user can configure a personal email account on the mobile phone.")] Boolean AllowConsumerEmail;
    [Write, Description("The AllowDesktopSync parameter specifies whether the mobile phone can synchronize with a desktop computer through a cable.")] Boolean AllowDesktopSync;
    [Write, Description("The AllowExternalDeviceManagement parameter specifies whether an external device management program is allowed to manage the mobile phone.")] Boolean AllowExternalDeviceManagement;
    [Write, Description("The AllowGooglePushNotifications parameter controls whether the user can receive push notifications from Google for Outlook on the web for devices.")] Boolean AllowGooglePushNotifications;
    [Write, Description("The AllowHTMLEmail parameter specifies whether HTML email is enabled on the mobile phone.")] Boolean AllowHTMLEmail;
    [Write, Description("The AllowInternetSharing parameter specifies whether the mobile phone can be used as a modem to connect a computer to the Internet.")] Boolean AllowInternetSharing;
    [Write, Description("The AllowIrDA parameter specifies whether infrared connections are allowed to the mobile phone.")] Boolean AllowIrDA;
    [Write, Description("The AllowMobileOTAUpdate parameter specifies whether the Exchange ActiveSync mailbox policy can be sent to the mobile phone over a cellular data connection.")] Boolean AllowMobileOTAUpdate;
    [Write, Description("The AllowMicrosoftPushNotifications parameter specifies whether push notifications are enabled on the mobile device.")] Boolean AllowMicrosoftPushNotifications;
    [Write, Description("The AllowNonProvisionableDevices parameter specifies whether all mobile phones can synchronize with the server running Exchange.")] Boolean AllowNonProvisionableDevices;
    [Write, Description("The AllowPOPIMAPEmail parameter specifies whether the user can configure a POP3 or IMAP4 email account on the mobile phone.")] Boolean AllowPOPIMAPEmail;
    [Write, Description("The AllowRemoteDesktop parameter specifies whether the mobile phone can initiate a remote desktop connection.")] Boolean AllowRemoteDesktop;
    [Write, Description("The AllowSimplePassword parameter specifies whether a simple device password is allowed. A simple device password is a password that has a specific pattern, such as 1111 or 1234.")] Boolean AllowSimplePassword;
    [Write, Description("The AllowSMIMEEncryptionAlgorithmNegotiation parameter specifies whether the messaging application on the mobile device can negotiate the encryption algorithm if a recipient's certificate doesn't support the specified encryption algorithm."), ValueMap{"AllowAnyAlgorithmNegotiation","BlockNegotiation","OnlyStrongAlgorithmNegotiation"}, Values{"AllowAnyAlgorithmNegotiation","BlockNegotiation","OnlyStrongAlgorithmNegotiation"}] String AllowSMIMEEncryptionAlgorithmNegotiation;
    [Write, Description("The AllowSMIMESoftCerts parameter specifies whether S/MIME software certificates are allowed.")] Boolean AllowSMIMESoftCerts;
    [Write, Description("The AllowStorageCard parameter specifies whether the mobile phone can access information stored on a storage card.")] Boolean AllowStorageCard;
    [Write, Description("The AllowTextMessaging parameter specifies whether text messaging is allowed from the mobile phone.")] Boolean AllowTextMessaging;
    [Write, Description("The AllowUnsignedApplications parameter specifies whether unsigned applications can be installed on the mobile phone.")] Boolean AllowUnsignedApplications;
    [Write, Description("The AllowUnsignedInstallationPackages parameter specifies whether unsigned installation packages can be executed on the mobile phone.")] Boolean AllowUnsignedInstallationPackages;
    [Write, Description("The AllowWiFi parameter specifies whether wireless Internet access is allowed on the mobile phone. ")] Boolean AllowWiFi;
    [Write, Description("The AlphanumericPasswordRequired parameter specifies whether the password for the mobile phone must be alphanumeric.")] Boolean AlphanumericPasswordRequired;
    [Write, Description("The ApprovedApplicationList parameter specifies a list of approved applications for the mobile phone.")] String ApprovedApplicationList[];
    [Write, Description("The AttachmentsEnabled parameter specifies whether attachments can be downloaded.")] Boolean AttachmentsEnabled;
    [Write, Description("The DeviceEncryptionEnabled parameter specifies whether encryption is enabled.")] Boolean DeviceEncryptionEnabled;
    [Write, Description("The DevicePolicyRefreshInterval parameter specifies how often the policy is sent from the server to the mobile phone.")] String DevicePolicyRefreshInterval;
    [Write, Description("The IrmEnabled parameter specifies whether Information Rights Management (IRM) is enabled for the mailbox policy.")] Boolean IrmEnabled;
    [Write, Description("The IsDefault parameter specifies whether this policy is the default Mobile Device mailbox policy.")] Boolean IsDefault;
    [Write, Description("The MaxAttachmentSize parameter specifies the maximum size of attachments that can be downloaded to the mobile phone.")] String MaxAttachmentSize;
    [Write, Description("The MaxCalendarAgeFilter parameter specifies the maximum range of calendar days that can be synchronized to the device."), ValueMap{"All","TwoWeeks","OneMonth","ThreeMonths","SixMonths"}, Values{"All","TwoWeeks","OneMonth","ThreeMonths","SixMonths"}] String MaxCalendarAgeFilter;
    [Write, Description("The MaxEmailAgeFilter parameter specifies the maximum number of days of email items to synchronize to the mobile phone."), ValueMap{"All","OneDay","ThreeDays","OneWeek","TwoWeeks","OneMonth"}, Values{"All","OneDay","ThreeDays","OneWeek","TwoWeeks","OneMonth"}] String MaxEmailAgeFilter;
    [Write, Description("The MaxEmailBodyTruncationSize parameter specifies the maximum size at which email messages are truncated when synchronized to the mobile phone. The value is specified in kilobytes (KB).")] String MaxEmailBodyTruncationSize;
    [Write, Description("The MaxEmailHTMLBodyTruncationSize parameter specifies the maximum size at which HTML-formatted email messages are synchronized to the mobile phone. The value is specified in KB.")] String MaxEmailHTMLBodyTruncationSize;
    [Write, Description("The MaxInactivityTimeDeviceLock parameter specifies the length of time that the mobile phone can be inactive before the password is required to reactivate it.")] String MaxInactivityTimeLock;
    [Write, Description("The MaxPasswordFailedAttempts parameter specifies the number of attempts a user can make to enter the correct password for the mobile phone. You can enter any number from 4 through 16 or the value Unlimited.")] String MaxPasswordFailedAttempts;
    [Write, Description("The MinPasswordComplexCharacters parameter specifies the character sets that are required in the password of the mobile device.")] String MinPasswordComplexCharacters;
    [Write, Description("The MinPasswordLength parameter specifies the minimum number of characters in the mobile device password.")] String MinPasswordLength;
    [Write, Description("The PasswordEnabled parameter specifies whether a password is required on the mobile device.")] Boolean PasswordEnabled;
    [Write, Description("The PasswordExpiration parameter specifies how long a password can be used on a mobile device before the user is forced to change the password.")] String PasswordExpiration;
    [Write, Description("The PasswordHistory parameter specifies the number of unique new passwords that need to be created on the mobile device before an old password can be reused.")] String PasswordHistory;
    [Write, Description("The PasswordRecoveryEnabled parameter specifies whether the recovery password for the mobile device is stored in Exchange.")] Boolean PasswordRecoveryEnabled;
    [Write, Description("The RequireDeviceEncryption parameter specifies whether encryption is required on the mobile device.")] Boolean RequireDeviceEncryption;
    [Write, Description("The RequireEncryptedSMIMEMessages parameter specifies whether the mobile device must send encrypted S/MIME messages.")] Boolean RequireEncryptedSMIMEMessages;
    [Write, Description("The RequireEncryptionSMIMEAlgorithm parameter specifies the algorithm that's required to encrypt S/MIME messages on a mobile device."), ValueMap{"DES","TripleDES","RC240bit","RC264bit","RC2128bit"}, Values{"DES","TripleDES","RC240bit","RC264bit","RC2128bit"}] String RequireEncryptionSMIMEAlgorithm;
    [Write, Description("The RequireSignedSMIMEAlgorithm parameter specifies the algorithm that's used to sign S/MIME messages on the mobile device.")] Boolean RequireManualSyncWhenRoaming;
    [Write, Description("The RequireSignedSMIMEAlgorithm parameter specifies the algorithm that's used to sign S/MIME messages on the mobile device."), ValueMap{"SHA1","MD5"}, Values{"SHA1","MD5"}] String RequireSignedSMIMEAlgorithm;
    [Write, Description("The RequireSignedSMIMEMessages parameter specifies whether the mobile device must send signed S/MIME messages.")] Boolean RequireSignedSMIMEMessages;
    [Write, Description("The RequireStorageCardEncryption parameter specifies whether storage card encryption is required on the mobile device.")] Boolean RequireStorageCardEncryption;
    [Write, Description("The UnapprovedInROMApplicationList parameter specifies a list of applications that can't be run in ROM on the mobile device.")] String UnapprovedInROMApplicationList[];
    [Write, Description("The UNCAccessEnabled parameter specifies whether access to Microsoft Windows file shares is enabled from the mobile device.")] Boolean UNCAccessEnabled;
    [Write, Description("The WSSAccessEnabled parameter specifies whether access to Microsoft Windows SharePoint Services is enabled from the mobile device.")] Boolean WSSAccessEnabled;
    [Write, Description("Specify if the Mobile Device Mailbox Policy should exist or not."), ValueMap{"Present","Absent"}, Values{"Present","Absent"}] String Ensure;
    [Required, Description("Credentials of the Exchange Global Admin"), EmbeddedInstance("MSFT_Credential")] string GlobalAdminAccount;
};
