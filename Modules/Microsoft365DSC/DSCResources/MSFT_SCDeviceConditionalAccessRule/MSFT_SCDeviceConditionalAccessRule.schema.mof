[ClassVersion("1.0.0.0"), FriendlyName("SCDeviceConditionalAccessRule")]
class MSFT_SCDeviceConditionalAccessRule : OMI_BaseResource
{
    [Key, Description("Name for the rule.")] String Name;
    [Write, Description("Name of the associated policy.")] String Policy;
    [Write, Description("The display names of the graoups targeted by the policy.")] String TargetGroups[];
    [Write, Description("The AccountName parameter specifies the account name.")] String AccountName;
    [Write, Description("The AccountUserName parameter specifies the account user name.")] String AccountUserName;
    [Write, Description("The AllowAppStore parameter specifies whether to allow access to the app store on devices.")] Boolean AllowAppStore;
    [Write, Description("The AllowAssistantWhileLocked parameter specifies whether to allow the use of the voice assistant while devices are locked.")] Boolean AllowAssistantWhileLocked;
    [Write, Description("The AllowConvenienceLogon parameter specifies whether to allow convenience logons on devices.")] Boolean AllowConvenienceLogon;
    [Write, Description("The AllowDiagnosticSubmission parameter specifies whether to allow diagnostic submissions from devices.")] Boolean AllowDiagnosticSubmission;
    [Write, Description("The AllowiCloudBackup parameter specifies whether to allow Apple iCloud Backup from devices.")] Boolean AllowiCloudBackup;
    [Write, Description("The AllowiCloudDocSync parameter specifies whether to allow Apple iCloud Documents & Data sync on devices.")] Boolean AllowiCloudDocSync;
    [Write, Description("The AllowiCloudPhotoSync parameter specifies whether to allow Apple iCloud Photos sync on devices.")] Boolean AllowiCloudPhotoSync;
    [Write, Description("The AllowJailbroken parameter specifies whether to allow access to your organization by jailbroken or rooted devices.")] Boolean AllowJailbroken;
    [Write, Description("The AllowPassbookWhileLocked parameter specifies whether to allow the use of Apple Passbook while devices are locked.")] Boolean AllowPassbookWhileLocked;
    [Write, Description("The AllowScreenshot parameter specifies whether to allow screenshots on devices.")] Boolean AllowScreenshot;
    [Write, Description("The AllowSimplePassword parameter specifies whether to allow simple or non-complex passwords on devices.")] Boolean AllowSimplePassword;
    [Write, Description("The AllowVideoConferencing parameter specifies whether to allow video conferencing on devices. ")] Boolean AllowVideoConferencing;
    [Write, Description("The AllowVoiceAssistant parameter specifies whether to allow using the voice assistant on devices.")] Boolean AllowVoiceAssistant;
    [Write, Description("The AllowVoiceDialing parameter specifies whether to allow voice-activated telephone dialing.")] Boolean AllowVoiceDialing;
    [Write, Description("The AntiVirusSignatureStatus parameter specifies the antivirus signature status.")] UInt32 AntiVirusSignatureStatus;
    [Write, Description("The AntiVirusStatus parameter specifies the antivirus status.")] UInt32 AntiVirusStatus;
    [Write, Description("The AppsRating parameter species the maximum or most restrictive rating of apps that are allowed on devices.")] String AppsRating;
    [Write, Description("The AutoUpdateStatus parameter specifies the update settings for devices.")] String AutoUpdateStatus;
    [Write, Description("The BluetoothEnabled parameter specifies whether to enable or disable Bluetooth on devices.")] Boolean BluetoothEnabled;
    [Write, Description("The BluetoothEnabled parameter specifies whether to enable or disable Bluetooth on devices.")] Boolean CameraEnabled;
    [Write, Description("The EmailAddress parameter specifies the email address.")] String EmailAddress;
    [Write, Description("The EnableRemovableStorage parameter specifies whether removable storage can be used by devices.")] Boolean EnableRemovableStorage;
    [Write, Description("The ExchangeActiveSyncHost parameter specifies the Exchange ActiveSync host.")] String ExchangeActiveSyncHost;
    [Write, Description("The FirewallStatus parameter specifies the acceptable firewall status values on devices.")] Boolean FirewallStatus;
    [Write, Description("The ForceAppStorePassword parameter specifies whether to require a password to use the app store on devices.")] Boolean ForceAppStorePassword;
    [Write, Description("The ForceEncryptedBackup parameter specifies whether to force encrypted backups for devices.")] Boolean ForceEncryptedBackup;
    [Write, Description("The MaxPasswordAttemptsBeforeWipe parameter specifies the number of incorrect password attempts that cause devices to be automatically wiped.")] UInt32 MaxPasswordAttemptsBeforeWipe;
    [Write, Description("The MaxPasswordGracePeriod parameter specifies the length of time users are allowed to reset expired passwords on devices.")] UInt32 MaxPasswordGracePeriod;
    [Write, Description("The MoviesRating parameter species the maximum or most restrictive rating of movies that are allowed on devices. You specify the country/region rating system to use with the RegionRatings parameter.")] String MoviesRating;
    [Write, Description("The PasswordComplexity parameter specifies the password complexity.")] UInt32 PasswordComplexity;
    [Write, Description("The PasswordExpirationDays parameter specifies the number of days that the same password can be used on devices before users are required to change their passwords.")] UInt32 PasswordExpirationDays;
    [Write, Description("The PasswordHistoryCount parameter specifies the minimum number of unique new passwords that are required on devices before an old password can be reused.")] UInt32 PasswordHistoryCount;
    [Write, Description("The PasswordMinComplexChars parameter specifies the minimum number of complex characters that are required for device passwords. A complex character isn't a letter.")] UInt32 PasswordMinComplexChars;
    [Write, Description("The PasswordMinimumLength parameter specifies the minimum number of characters that are required for device passwords.")] UInt32 PasswordMinimumLength;
    [Write, Description("The PasswordQuality parameter specifies the minimum password quality rating that's required for device passwords. Password quality is a numeric scale that indicates the security and complexity of the password. A higher quality value indicates a more secure password.")] UInt32 PasswordQuality;
    [Write, Description("The PasswordRequired parameter specifies whether a password is required to access devices.")] Boolean PasswordRequired;
    [Write, Description("The PasswordTimeout parameter specifies the length of time that devices can be inactive before a password is required to reactivate them.")] String PasswordTimeout;
    [Write, Description("The PhoneMemoryEncrypted parameter specifies whether to encrypt the memory on devices.")] Boolean PhoneMemoryEncrypted;
    [Write, Description("The RegionRatings parameter specifies the rating system (country/region) to use for movie and television ratings with the MoviesRating and TVShowsRating parameters.")] String RegionRatings;
    [Write, Description("The RequireEmailProfile parameter specifies whether an email profile is required on devices.")] Boolean RequireEmailProfile;
    [Write, Description("The SmartScreenEnabled parameter specifies whether to requireWindows SmartScreen on devices.")] Boolean SmartScreenEnabled;
    [Write, Description("The SystemSecurityTLS parameter specifies whether TLS encryption is used on devices.")] Boolean SystemSecurityTLS;
    [Write, Description("The TVShowsRating parameter species the maximum or most restrictive rating of television shows that are allowed on devices. You specify the country/region rating system to use with the RegionRatings parameter.")] String TVShowsRating;
    [Write, Description("The UserAccountControlStatus parameter specifies how User Account Control messages are presented on devices.")] String UserAccountControlStatus;
    [Write, Description("The WLANEnabled parameter specifies whether Wi-Fi is enabled devices.")] Boolean WLANEnabled;
    [Write, Description("The WorkFoldersSyncUrl parameter specifies the URL that's used to synchronize company data on devices.")] String WorkFoldersSyncUrl;

    [Write, Description("Present ensures the instance exists, absent ensures it is removed."), ValueMap{"Absent", "Present"}, Values{"Absent", "Present"}] string Ensure;
    [Write, Description("Credentials of the workload's Admin"), EmbeddedInstance("MSFT_Credential")] string Credential;
    [Write, Description("Id of the Azure Active Directory application to authenticate with.")] String ApplicationId;
    [Write, Description("Id of the Azure Active Directory tenant used for authentication.")] String TenantId;
    [Write, Description("Thumbprint of the Azure Active Directory application's authentication certificate to use for authentication.")] String CertificateThumbprint;
    [Write, Description("Managed ID being used for authentication.")] Boolean ManagedIdentity;
    [Write, Description("Access token used for authentication.")] String AccessTokens[];
};
