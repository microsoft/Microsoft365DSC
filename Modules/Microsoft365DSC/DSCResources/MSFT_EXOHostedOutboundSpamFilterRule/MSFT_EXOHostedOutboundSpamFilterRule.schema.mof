[ClassVersion("1.0.0.0"), FriendlyName("EXOHostedOutboundSpamFilterRule")]
class MSFT_EXOHostedOutboundSpamFilterRule : OMI_BaseResource
{
    [Key, Description("The Identity parameter specifies the name of the HostedOutboundSpamFilter rule that you want to modify.")] String Identity;
    [Required, Description("The HostedOutboundSpamFilterPolicy parameter specifies the name of the HostedOutboundSpamFilter policy that's associated with the HostedOutboundSpamFilter rule.")] String HostedOutboundSpamFilterPolicy;
    [Write, Description("Specify if this rule should be enabled. Default is $true.")] Boolean Enabled;
    [Write, Description("The Priority parameter specifies a priority value for the rule that determines the order of rule processing. A lower integer value indicates a higher priority, the value 0 is the highest priority, and rules can't have the same priority value.")] uint32 Priority;
    [Write, Description("The Comments parameter specifies informative comments for the rule, such as what the rule is used for or how it has changed over time. The length of the comment can't exceed 1024 characters.")] String Comments;
    [Write, Description("The ExceptIfSenderDomainIs parameter specifies an exception that looks for senders with email address in the specified domains. You can specify multiple domains separated by commas.")] String ExceptIfSenderDomainIs[];
    [Write, Description("The ExceptIfFrom parameter specifies an exception that looks for messages from specific senders. You can use any value that uniquely identifies the sender.")] String ExceptIfFrom[];
    [Write, Description("The ExceptIfFromMemberOf parameter specifies an exception that looks for messages sent by group members. You can use any value that uniquely identifies the group.")] String ExceptIfFromMemberOf[];
    [Write, Description("The SenderDomainIs parameter specifies a condition that looks for senders with email address in the specified domains. You can specify multiple domains separated by commas.")] String SenderDomainIs[];
    [Write, Description("The From parameter specifies a condition that looks for messages from specific senders. You can use any value that uniquely identifies the sender.")] String From[];
    [Write, Description("The FromMemberOf parameter specifies a condition that looks for messages sent by group members. You can use any value that uniquely identifies the group.")] String FromMemberOf[];
    [Write, Description("Specify if this rule should exist or not."), ValueMap{"Present","Absent"}, Values{"Present","Absent"}] String Ensure;
    [Write, Description("Credentials of the Exchange Global Admin"), EmbeddedInstance("MSFT_Credential")] string Credential;
    [Write, Description("Id of the Azure Active Directory application to authenticate with.")] String ApplicationId;
    [Write, Description("Id of the Azure Active Directory tenant used for authentication.")] String TenantId;
    [Write, Description("Thumbprint of the Azure Active Directory application's authentication certificate to use for authentication.")] String CertificateThumbprint;
    [Write, Description("Username can be made up to anything but password will be used for CertificatePassword"), EmbeddedInstance("MSFT_Credential")] String CertificatePassword;
    [Write, Description("Path to certificate used in service principal usually a PFX file.")] String CertificatePath;
    [Write, Description("Managed ID being used for authentication.")] Boolean ManagedIdentity;
};
