[ClassVersion("1.0.0.0"), FriendlyName("EXOActiveSyncMailboxPolicy")]
class MSFT_EXOActiveSyncMailboxPolicy : OMI_BaseResource
{
    [Write, Description("Specifies the name of the policy.")] String Name;
    [Write, Description("Specifies whether push notifications are allowed for Apple mobile devices.")] Boolean AllowApplePushNotifications;
    [Write, Description("Specifies whether the Bluetooth capabilities of the mobile phone are allowed."), ValueMap{"Disable", "HandsfreeOnly", "Allow"}, Values{"Disable", "HandsfreeOnly", "Allow"}] String AllowBluetooth;
    [Write, Description("Specifies whether Microsoft Pocket Internet Explorer is allowed on the mobile phone.")] Boolean AllowBrowser;
    [Write, Description("Specifies whether the mobile phone's camera is allowed.")] Boolean AllowCamera;
    [Write, Description("Specifies whether the mobile phone user can configure a personal email account on the device.")] Boolean AllowConsumerEmail;
    [Write, Description("Specifies whether the mobile phone can synchronize with a desktop computer through a cable.")] Boolean AllowDesktopSync;
    [Write, Description("Specifies whether an external device management program is allowed to manage the device.")] Boolean AllowExternalDeviceManagement;
    [Write, Description("Specifies whether HTML email is enabled on the device.")] Boolean AllowHTMLEmail;
    [Write, Description("Specifies whether the mobile phone can be used as a modem to connect a computer to the Internet.")] Boolean AllowInternetSharing;
    [Write, Description("Specifies whether infrared connections are allowed to the mobile phone.")] Boolean AllowIrDA;
    [Write, Description("Specifies whether certain updates are seen by devices that implemented support for this restricting functionality.")] Boolean AllowMobileOTAUpdate;
    [Write, Description("Enables all devices to synchronize with the computer running Exchange, regardless of whether the device can enforce all the specific settings established in the Mobile Device mailbox policy.")] Boolean AllowNonProvisionableDevices;
    [Write, Description("Specifies whether the user can configure a POP3 or IMAP4 email account on the device.")] Boolean AllowPOPIMAPEmail;
    [Write, Description("Specifies whether the mobile phone can initiate a remote desktop connection.")] Boolean AllowRemoteDesktop;
    [Write, Description("Specifies whether a simple device password is allowed.")] Boolean AllowSimpleDevicePassword;
    [Write, Description("Specifies whether the messaging application on the device can negotiate the encryption algorithm in case a recipient's certificate doesn't support the specified encryption algorithm.")] String AllowSMIMEEncryptionAlgorithmNegotiation;
    [Write, Description("Specifies whether S/MIME software certificates are allowed.")] Boolean AllowSMIMESoftCerts;
    [Write, Description("Specifies whether the device can access information stored on a storage card.")] Boolean AllowStorageCard;
    [Write, Description("Specifies whether text messaging is allowed from the device.")] Boolean AllowTextMessaging;
    [Write, Description("Specifies whether unsigned applications can be installed on the device.")] Boolean AllowUnsignedApplications;
    [Write, Description("Specifies whether unsigned installation packages can be run on the device.")] Boolean AllowUnsignedInstallationPackages;
    [Write, Description("Specifies whether wireless Internet access is allowed on the device.")] Boolean AllowWiFi;
    [Write, Description("Specifies whether the device password must be alphanumeric.")] Boolean AlphanumericDevicePasswordRequired;
    [Write, Description("Specifies a list of approved applications for the device.")] String ApprovedApplicationList[];
    [Write, Description("Specifies whether the user can download attachments.")] Boolean AttachmentsEnabled;
    [Write, Description("Enables device encryption on the mobile phone.")] Boolean DeviceEncryptionEnabled;
    [Write, Description("Specifies that the user set a password for the device.")] Boolean DevicePasswordEnabled;
    [Write, Description("Specifies the length of time, in days, that a password can be used.")] String DevicePasswordExpiration;
    [Write, Description("Specifies the number of previously used passwords to store.")] Sint32 DevicePasswordHistory;
    [Write, Description("Specifies how often the policy is sent from the server to the mobile phone")] String DevicePolicyRefreshInterval;
    [Write, Description("Specifies whether Information Rights Management (IRM) is enabled for the mailbox policy.")] Boolean IrmEnabled;
    [Write, Description("Specifies whether this policy is the default Mobile Device mailbox policy.")] Boolean IsDefault;
    [Write, Description("Specifies whether this policy is the default Mobile Device mailbox policy.")] Boolean IsDefaultPolicy;
    [Write, Description("Specifies the maximum size of attachments that can be downloaded to the mobile phone.")] String MaxAttachmentSize;
    [Write, Description("Specifies the maximum range of calendar days that can be synchronized to the device."), ValueMap{"All", "TwoWeeks", "OneMonth", "ThreeMonths", "SixMonths"}, Values{"All", "TwoWeeks", "OneMonth", "ThreeMonths", "SixMonths"}] String MaxCalendarAgeFilter;
    [Write, Description("Specifies the number of attempts a user can make to enter the correct password for the device.")] String MaxDevicePasswordFailedAttempts;
    [Write, Description("Specifies the maximum number of days of email items to synchronize to the device."), ValueMap{"All", "OneDay", "ThreeDays", "OneWeek", "TwoWeeks", "OneMonth", "ThreeMonths", "SixMonths"}, Values{"All", "OneDay", "ThreeDays", "OneWeek", "TwoWeeks", "OneMonth", "ThreeMonths", "SixMonths"}] String MaxEmailAgeFilter;
    [Write, Description("Specifies the maximum size at which email messages are truncated when synchronized to the device.")] String MaxEmailBodyTruncationSize;
    [Write, Description("Specifies the maximum size at which HTML-formatted email messages are synchronized to the device.")] String MaxEmailHTMLBodyTruncationSize;
    [Write, Description("Specifies the length of time that the device can be inactive before the password is required to reactivate the device.")] String MaxInactivityTimeDeviceLock;
    [Write, Description("Specifies the minimum number of complex characters required in a device password.")] Sint32 MinDevicePasswordComplexCharacters;
    [Write, Description("Specifies the minimum number of characters in the device password.")] Sint32 MinDevicePasswordLength;
    [Write, Description("Specifies whether you can store the recovery password for the device on an Exchange server.")] Boolean PasswordRecoveryEnabled;
    [Write, Description("Specifies whether encryption is required on the device.")] Boolean RequireDeviceEncryption;
    [Write, Description("Specifies whether you must encrypt S/MIME messages.")] Boolean RequireEncryptedSMIMEMessages;
    [Write, Description("Specifies what required algorithm must be used when encrypting a message.")] String RequireEncryptionSMIMEAlgorithm;
    [Write, Description("Specifies whether the device must synchronize manually while roaming.")] Boolean RequireManualSyncWhenRoaming;
    [Write, Description("Specifies what required algorithm must be used when signing a message.")] String RequireSignedSMIMEAlgorithm;
    [Write, Description("Specifies whether the device must send signed S/MIME messages.")] Boolean RequireSignedSMIMEMessages;
    [Write, Description("Specifies whether encryption of a storage card is required.")] Boolean RequireStorageCardEncryption;
    [Write, Description("Specifies a list of applications that can't be run in ROM.")] String UnapprovedInROMApplicationList[];
    [Write, Description("Specifies whether access to Microsoft Windows file shares is enabled.")] Boolean UNCAccessEnabled;
    [Write, Description("Specifies whether access to Microsoft Windows SharePoint Services is enabled.")] Boolean WSSAccessEnabled;
    [Key, Description("Specifies the Mobile Device mailbox policy.")] String Identity;
    [Write, Description("Specifies if this AddressList should exist."), ValueMap{"Present","Absent"}, Values{"Present","Absent"}] String Ensure;
    [Write, Description("Credentials of the workload's Admin"), EmbeddedInstance("MSFT_Credential")] string Credential;
    [Write, Description("Id of the Azure Active Directory application to authenticate with.")] String ApplicationId;
    [Write, Description("Id of the Azure Active Directory tenant used for authentication.")] String TenantId;
    [Write, Description("Thumbprint of the Azure Active Directory application's authentication certificate to use for authentication.")] String CertificateThumbprint;
    [Write, Description("Managed ID being used for authentication.")] Boolean ManagedIdentity;
    [Write, Description("Access token used for authentication.")] String AccessTokens[];
};
