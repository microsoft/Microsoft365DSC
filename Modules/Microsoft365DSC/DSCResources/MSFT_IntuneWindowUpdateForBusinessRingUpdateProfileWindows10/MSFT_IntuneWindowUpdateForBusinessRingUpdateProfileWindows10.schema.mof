[ClassVersion("1.0.0.0")]
class MSFT_DeviceManagementConfigurationPolicyAssignments
{
    [Write, Description("The type of the target assignment."), ValueMap{"#microsoft.graph.groupAssignmentTarget","#microsoft.graph.allLicensedUsersAssignmentTarget","#microsoft.graph.allDevicesAssignmentTarget","#microsoft.graph.exclusionGroupAssignmentTarget","#microsoft.graph.configurationManagerCollectionAssignmentTarget"}, Values{"#microsoft.graph.groupAssignmentTarget","#microsoft.graph.allLicensedUsersAssignmentTarget","#microsoft.graph.allDevicesAssignmentTarget","#microsoft.graph.exclusionGroupAssignmentTarget","#microsoft.graph.configurationManagerCollectionAssignmentTarget"}] String dataType;
    [Write, Description("The type of filter of the target assignment i.e. Exclude or Include. Possible values are:none, include, exclude."), ValueMap{"none","include","exclude"}, Values{"none","include","exclude"}] String deviceAndAppManagementAssignmentFilterType;
    [Write, Description("The Id of the filter for the target assignment.")] String deviceAndAppManagementAssignmentFilterId;
    [Write, Description("The group Id that is the target of the assignment.")] String groupId;
    [Write, Description("The collection Id that is the target of the assignment.(ConfigMgr)")] String collectionId;
};
[ClassVersion("1.0.0")]
class MSFT_MicrosoftGraphWindowsUpdateInstallScheduleType
{
    [Write, Description("Active Hours End")] String ActiveHoursEnd;
    [Write, Description("Active Hours Start")] String ActiveHoursStart;
    [Write, Description("Scheduled Install Day in week. Possible values are: userDefined, everyday, sunday, monday, tuesday, wednesday, thursday, friday, saturday, noScheduledScan."), ValueMap{"userDefined","everyday","sunday","monday","tuesday","wednesday","thursday","friday","saturday","noScheduledScan"}, Values{"userDefined","everyday","sunday","monday","tuesday","wednesday","thursday","friday","saturday","noScheduledScan"}] String ScheduledInstallDay;
    [Write, Description("Scheduled Install Time during day")] String ScheduledInstallTime;
    [Write, Description("The type of the entity."), ValueMap{"#microsoft.graph.windowsUpdateActiveHoursInstall","#microsoft.graph.windowsUpdateScheduledInstall"}, Values{"#microsoft.graph.windowsUpdateActiveHoursInstall","#microsoft.graph.windowsUpdateScheduledInstall"}] String odataType;
};

[ClassVersion("1.0.0.0"), FriendlyName("IntuneWindowUpdateForBusinessRingUpdateProfileWindows10")]
class MSFT_IntuneWindowUpdateForBusinessRingUpdateProfileWindows10 : OMI_BaseResource
{
    [Write, Description("When TRUE, allows eligible Windows 10 devices to upgrade to Windows 11. When FALSE, implies the device stays on the existing operating system. Returned by default. Query parameters are not supported.")] Boolean AllowWindows11Upgrade;
    [Write, Description("The Automatic Update Mode. Possible values are: UserDefined, NotifyDownload, AutoInstallAtMaintenanceTime, AutoInstallAndRebootAtMaintenanceTime, AutoInstallAndRebootAtScheduledTime, AutoInstallAndRebootWithoutEndUserControl, WindowsDefault. UserDefined is the default value, no intent. Returned by default. Query parameters are not supported. Possible values are: userDefined, notifyDownload, autoInstallAtMaintenanceTime, autoInstallAndRebootAtMaintenanceTime, autoInstallAndRebootAtScheduledTime, autoInstallAndRebootWithoutEndUserControl, windowsDefault."), ValueMap{"userDefined","notifyDownload","autoInstallAtMaintenanceTime","autoInstallAndRebootAtMaintenanceTime","autoInstallAndRebootAtScheduledTime","autoInstallAndRebootWithoutEndUserControl","windowsDefault"}, Values{"userDefined","notifyDownload","autoInstallAtMaintenanceTime","autoInstallAndRebootAtMaintenanceTime","autoInstallAndRebootAtScheduledTime","autoInstallAndRebootWithoutEndUserControl","windowsDefault"}] String AutomaticUpdateMode;
    [Write, Description("Specify the method by which the auto-restart required notification is dismissed. Possible values are: NotConfigured, Automatic, User. Returned by default. Query parameters are not supported. Possible values are: notConfigured, automatic, user, unknownFutureValue."), ValueMap{"notConfigured","automatic","user","unknownFutureValue"}, Values{"notConfigured","automatic","user","unknownFutureValue"}] String AutoRestartNotificationDismissal;
    [Write, Description("Determines which branch devices will receive their updates from. Possible values are: UserDefined, All, BusinessReadyOnly, WindowsInsiderBuildFast, WindowsInsiderBuildSlow, WindowsInsiderBuildRelease. Returned by default. Query parameters are not supported. Possible values are: userDefined, all, businessReadyOnly, windowsInsiderBuildFast, windowsInsiderBuildSlow, windowsInsiderBuildRelease."), ValueMap{"userDefined","all","businessReadyOnly","windowsInsiderBuildFast","windowsInsiderBuildSlow","windowsInsiderBuildRelease"}, Values{"userDefined","all","businessReadyOnly","windowsInsiderBuildFast","windowsInsiderBuildSlow","windowsInsiderBuildRelease"}] String BusinessReadyUpdatesOnly;
    [Write, Description("Number of days before feature updates are installed automatically with valid range from 0 to 30 days. Returned by default. Query parameters are not supported.")] UInt32 DeadlineForFeatureUpdatesInDays;
    [Write, Description("Number of days before quality updates are installed automatically with valid range from 0 to 30 days. Returned by default. Query parameters are not supported.")] UInt32 DeadlineForQualityUpdatesInDays;
    [Write, Description("Number of days after deadline until restarts occur automatically with valid range from 0 to 7 days. Returned by default. Query parameters are not supported.")] UInt32 DeadlineGracePeriodInDays;
    [Write, Description("The Delivery Optimization Mode. Possible values are: UserDefined, HttpOnly, HttpWithPeeringNat, HttpWithPeeringPrivateGroup, HttpWithInternetPeering, SimpleDownload, BypassMode. UserDefined allows the user to set. Returned by default. Query parameters are not supported. Possible values are: userDefined, httpOnly, httpWithPeeringNat, httpWithPeeringPrivateGroup, httpWithInternetPeering, simpleDownload, bypassMode."), ValueMap{"userDefined","httpOnly","httpWithPeeringNat","httpWithPeeringPrivateGroup","httpWithInternetPeering","simpleDownload","bypassMode"}, Values{"userDefined","httpOnly","httpWithPeeringNat","httpWithPeeringPrivateGroup","httpWithInternetPeering","simpleDownload","bypassMode"}] String DeliveryOptimizationMode;
    [Write, Description("When TRUE, excludes Windows update Drivers. When FALSE, does not exclude Windows update Drivers. Returned by default. Query parameters are not supported.")] Boolean DriversExcluded;
    [Write, Description("Deadline in days before automatically scheduling and executing a pending restart outside of active hours, with valid range from 2 to 30 days. Returned by default. Query parameters are not supported.")] UInt32 EngagedRestartDeadlineInDays;
    [Write, Description("Number of days a user can snooze Engaged Restart reminder notifications with valid range from 1 to 3 days. Returned by default. Query parameters are not supported.")] UInt32 EngagedRestartSnoozeScheduleInDays;
    [Write, Description("Number of days before transitioning from Auto Restarts scheduled outside of active hours to Engaged Restart, which requires the user to schedule, with valid range from 0 to 30 days. Returned by default. Query parameters are not supported.")] UInt32 EngagedRestartTransitionScheduleInDays;
    [Write, Description("Defer Feature Updates by these many days with valid range from 0 to 30 days. Returned by default. Query parameters are not supported.")] UInt32 FeatureUpdatesDeferralPeriodInDays;
    [Write, Description("When TRUE, assigned devices are paused from receiving feature updates for up to 35 days from the time you pause the ring. When FALSE, does not pause Feature Updates. Returned by default. Query parameters are not supported.s")] Boolean FeatureUpdatesPaused;
    [Write, Description("The Feature Updates Pause Expiry datetime. This value is 35 days from the time admin paused or extended the pause for the ring. Returned by default. Query parameters are not supported.")] String FeatureUpdatesPauseExpiryDateTime;
    [Write, Description("The Feature Updates Pause start date. This value is the time when the admin paused or extended the pause for the ring. Returned by default. Query parameters are not supported. This property is read-only.")] String FeatureUpdatesPauseStartDate;
    [Write, Description("The Feature Updates Rollback Start datetime.This value is the time when the admin rolled back the Feature update for the ring.Returned by default.Query parameters are not supported.")] String FeatureUpdatesRollbackStartDateTime;
    [Write, Description("The number of days after a Feature Update for which a rollback is valid with valid range from 2 to 60 days. Returned by default. Query parameters are not supported.")] UInt32 FeatureUpdatesRollbackWindowInDays;
    [Write, Description("The Installation Schedule. Possible values are: ActiveHoursStart, ActiveHoursEnd, ScheduledInstallDay, ScheduledInstallTime. Returned by default. Query parameters are not supported."), EmbeddedInstance("MSFT_MicrosoftGraphwindowsUpdateInstallScheduleType")] String InstallationSchedule;
    [Write, Description("When TRUE, allows Microsoft Update Service. When FALSE, does not allow Microsoft Update Service. Returned by default. Query parameters are not supported.")] Boolean MicrosoftUpdateServiceAllowed;
    [Write, Description("When TRUE the device should wait until deadline for rebooting outside of active hours. When FALSE the device should not wait until deadline for rebooting outside of active hours. Returned by default. Query parameters are not supported.")] Boolean PostponeRebootUntilAfterDeadline;
    [Write, Description("The Pre-Release Features. Possible values are: UserDefined, SettingsOnly, SettingsAndExperimentations, NotAllowed. UserDefined is the default value, no intent. Returned by default. Query parameters are not supported. Possible values are: userDefined, settingsOnly, settingsAndExperimentations, notAllowed."), ValueMap{"userDefined","settingsOnly","settingsAndExperimentations","notAllowed"}, Values{"userDefined","settingsOnly","settingsAndExperimentations","notAllowed"}] String PrereleaseFeatures;
    [Write, Description("Defer Quality Updates by these many days with valid range from 0 to 30 days. Returned by default. Query parameters are not supported.")] UInt32 QualityUpdatesDeferralPeriodInDays;
    [Write, Description("When TRUE, assigned devices are paused from receiving quality updates for up to 35 days from the time you pause the ring. When FALSE, does not pause Quality Updates. Returned by default. Query parameters are not supported.")] Boolean QualityUpdatesPaused;
    [Write, Description("The Quality Updates Pause Expiry datetime. This value is 35 days from the time admin paused or extended the pause for the ring. Returned by default. Query parameters are not supported.")] String QualityUpdatesPauseExpiryDateTime;
    [Write, Description("The Quality Updates Pause start date. This value is the time when the admin paused or extended the pause for the ring. Returned by default. Query parameters are not supported. This property is read-only.")] String QualityUpdatesPauseStartDate;
    [Write, Description("The Quality Updates Rollback Start datetime. This value is the time when the admin rolled back the Quality update for the ring. Returned by default. Query parameters are not supported.")] String QualityUpdatesRollbackStartDateTime;
    [Write, Description("Specify the period for auto-restart imminent warning notifications. Supported values: 15, 30 or 60 (minutes). Returned by default. Query parameters are not supported.")] UInt32 ScheduleImminentRestartWarningInMinutes;
    [Write, Description("Specify the period for auto-restart warning reminder notifications. Supported values: 2, 4, 8, 12 or 24 (hours). Returned by default. Query parameters are not supported.")] UInt32 ScheduleRestartWarningInHours;
    [Write, Description("When TRUE, skips all checks before restart: Battery level = 40%, User presence, Display Needed, Presentation mode, Full screen mode, phone call state, game mode etc. When FALSE, does not skip all checks before restart. Returned by default. Query parameters are not supported.")] Boolean SkipChecksBeforeRestart;
    [Write, Description("Specifies what Windows Update notifications users see. Possible values are: NotConfigured, DefaultNotifications, RestartWarningsOnly, DisableAllNotifications. Returned by default. Query parameters are not supported. Possible values are: notConfigured, defaultNotifications, restartWarningsOnly, disableAllNotifications, unknownFutureValue."), ValueMap{"notConfigured","defaultNotifications","restartWarningsOnly","disableAllNotifications","unknownFutureValue"}, Values{"notConfigured","defaultNotifications","restartWarningsOnly","disableAllNotifications","unknownFutureValue"}] String UpdateNotificationLevel;
    [Write, Description("Schedule the update installation on the weeks of the month. Possible values are: UserDefined, FirstWeek, SecondWeek, ThirdWeek, FourthWeek, EveryWeek. Returned by default. Query parameters are not supported. Possible values are: userDefined, firstWeek, secondWeek, thirdWeek, fourthWeek, everyWeek, unknownFutureValue."), ValueMap{"userDefined","firstWeek","secondWeek","thirdWeek","fourthWeek","everyWeek","unknownFutureValue"}, Values{"userDefined","firstWeek","secondWeek","thirdWeek","fourthWeek","everyWeek","unknownFutureValue"}] String UpdateWeeks;
    [Write, Description("Specifies whether to enable end user�s access to pause software updates. Possible values are: NotConfigured, Enabled, Disabled. Returned by default. Query parameters are not supported. Possible values are: notConfigured, enabled, disabled."), ValueMap{"notConfigured","enabled","disabled"}, Values{"notConfigured","enabled","disabled"}] String UserPauseAccess;
    [Write, Description("Specifies whether to disable user�s access to scan Windows Update. Possible values are: NotConfigured, Enabled, Disabled. Returned by default. Query parameters are not supported. Possible values are: notConfigured, enabled, disabled."), ValueMap{"notConfigured","enabled","disabled"}, Values{"notConfigured","enabled","disabled"}] String UserWindowsUpdateScanAccess;
    [Write, Description("Admin provided description of the Device Configuration.")] String Description;
    [Write, Description("Admin provided name of the device configuration.")] String DisplayName;
    [Key, Description("The unique identifier for an entity. Read-only.")] String Id;
    [Write, Description("Represents the assignment to the Intune policy."), EmbeddedInstance("MSFT_DeviceManagementConfigurationPolicyAssignments")] String Assignments[];
    [Write, Description("Present ensures the policy exists, absent ensures it is removed."), ValueMap{"Present","Absent"}, Values{"Present","Absent"}] string Ensure;
    [Write, Description("Credentials of the Admin"), EmbeddedInstance("MSFT_Credential")] string Credential;
    [Write, Description("Id of the Azure Active Directory application to authenticate with.")] String ApplicationId;
    [Write, Description("Id of the Azure Active Directory tenant used for authentication.")] String TenantId;
    [Write, Description("Secret of the Azure Active Directory tenant used for authentication."), EmbeddedInstance("MSFT_Credential")] String ApplicationSecret;
    [Write, Description("Thumbprint of the Azure Active Directory application's authentication certificate to use for authentication.")] String CertificateThumbprint;
	[Write, Description("Managed ID being used for authentication.")] Boolean ManagedIdentity;
};
