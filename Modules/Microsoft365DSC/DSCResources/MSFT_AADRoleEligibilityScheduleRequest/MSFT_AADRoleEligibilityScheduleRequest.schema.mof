[ClassVersion("1.0.0")]
class MSFT_AADRoleEligibilityScheduleRequestScheduleRange
{
    [Required, Description("The date to stop applying the recurrence pattern. Depending on the recurrence pattern of the event, the last occurrence of the meeting may not be this date.")] String endDate;
    [Write, Description("The number of times to repeat the event. Required and must be positive if type is numbered.")] UInt32 numberOfOccurrences;
    [Write, Description("Time zone for the startDate and endDate properties.")] String recurrenceTimeZone;
    [Required, Description("The date to start applying the recurrence pattern. The first occurrence of the meeting may be this date or later, depending on the recurrence pattern of the event. Must be the same value as the start property of the recurring event.")] String startDate;
    [Required, Description("The recurrence range. The possible values are: endDate, noEnd, numbered."),ValueMap{"endDate","noEnd","numbered"}, Values{"endDate","noEnd","numbered"}] String type;
};

[ClassVersion("1.0.0")]
class MSFT_AADRoleEligibilityScheduleRequestScheduleRecurrencePattern
{
    [Write, Description("The day of the month on which the event occurs.")] UInt32 dayOfMonth;
    [Write, Description("A collection of the days of the week on which the event occurs. The possible values are: sunday, monday, tuesday, wednesday, thursday, friday, saturday"), ValueMap{"sunday","monday","tuesday","wednesday","thursday","friday","saturday"}, Values{"sunday","monday","tuesday","wednesday","thursday","friday","saturday"}] String daysOfWeek[];
    [Write, Description("The first day of the week."), ValueMap{"sunday","monday","tuesday","wednesday","thursday","friday","saturday"}, Values{"sunday","monday","tuesday","wednesday","thursday","friday","saturday"}] String firstDayOfWeek;
    [Write, Description("Specifies on which instance of the allowed days specified in daysOfWeek the event occurs, counted from the first instance in the month. The possible values are: first, second, third, fourth, last."), ValueMap{"first","second","third","fourth","last"}, Values{"first","second","third","fourth","last"}] String index;
    [Write, Description("The number of units between occurrences, where units can be in days, weeks, months, or years, depending on the type.")] UInt32 interval;
    [Write, Description("The month in which the event occurs. This is a number from 1 to 12.")] UInt32 month;
    [Write, Description("The recurrence pattern type: daily, weekly, absoluteMonthly, relativeMonthly, absoluteYearly, relativeYearly."), ValueMap{"daily","weekly","absoluteMonthly","relativeMonthly","absoluteYearly","relativeYearly"}, Values{"daily","weekly","absoluteMonthly","relativeMonthly","absoluteYearly","relativeYearly"}] String type;
};

[ClassVersion("1.0.0")]
class MSFT_AADRoleEligibilityScheduleRequestScheduleRecurrence
{
    [Write, Description("The frequency of an event."), EmbeddedInstance("MSFT_AADRoleEligibilityScheduleRequestScheduleRecurrencePattern")] String pattern;
    [Write, Description("The duration of an event."), EmbeddedInstance("MSFT_AADRoleEligibilityScheduleRequestScheduleRecurrenceRange")] String range;
};

[ClassVersion("1.0.0")]
class MSFT_AADRoleEligibilityScheduleRequestScheduleExpiration
{
    [Write, Description("The requestor's desired duration of access represented in ISO 8601 format for durations. For example, PT3H refers to three hours. If specified in a request, endDateTime should not be present and the type property should be set to afterDuration.")] String duration;
    [Write, Description("Timestamp of date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.")] String endDateTime;
    [Write, Description("The requestor's desired expiration pattern type. The possible values are: notSpecified, noExpiration, afterDateTime, afterDuration."), ValueMap{"notSpecified","noExpiration","afterDateTime","afterDuration"}, Values{"notSpecified","noExpiration","afterDateTime","afterDuration"}] String type;
};

[ClassVersion("1.0.0")]
class MSFT_AADRoleEligibilityScheduleRequestSchedule
{
    [Write, Description("When the eligible or active assignment expires."), EmbeddedInstance("MSFT_AADRoleEligibilityScheduleRequestScheduleExpiration")] String expiration;
    [Write, Description("The frequency of the eligible or active assignment. This property is currently unsupported in PIM."), EmbeddedInstance("MSFT_AADRoleEligibilityScheduleRequestScheduleRecurrence")] String recurrence;
    [Write, Description("When the eligible or active assignment becomes active.")] String startDateTime;
};

[ClassVersion("1.0.0")]
class MSFT_AADRoleEligibilityScheduleRequestTicketInfo
{
    [Write, Description("The ticket number.")] String ticketNumber;
    [Write, Description("The description of the ticket system.")] String ticketSystem;
};

[ClassVersion("1.0.0.0"), FriendlyName("AADRoleEligibilityScheduleRequest")]
class MSFT_AADRoleEligibilityScheduleRequest : OMI_BaseResource
{
    [Key, Description("User Principal Name of the eligibility request.")] String Principal;
    [Key, Description("Role associated with the eligibility request.")] String RoleDefinition;
    [Write, Description("Represented the type of principal to assign the request to. Accepted values are: Group and User."), ValueMap{"Group","User"}, Values{"Group","User"}] String PrincipalType;
    [Write, Description("Identifier of the directory object representing the scope of the role eligibility. The scope of an role eligibility determines the set of resources for which the principal has been granted access. Directory scopes are shared scopes stored in the directory that are understood by multiple applications. Use / for tenant-wide scope. Use appScopeId to limit the scope to an application only. Either directoryScopeId or appScopeId is required.")] String DirectoryScopeId;
    [Write, Description("Identifier for the Role Eligibility Schedule Request.")] String Id;
    [Write, Description("Identifier of the app-specific scope when the role eligibility is scoped to an app. The scope of a role eligibility determines the set of resources for which the principal is eligible to access. App scopes are scopes that are defined and understood by this application only. Use / for tenant-wide app scopes. Use directoryScopeId to limit the scope to particular directory objects, for example, administrative units. Either directoryScopeId or appScopeId is required.")] String AppScopeId;
    [Write, Description("Represents the type of operation on the role eligibility request.The possible values are: adminAssign, adminUpdate, adminRemove, selfActivate, selfDeactivate, adminExtend, adminRenew, selfExtend, selfRenew, unknownFutureValue."), ValueMap{"adminAssign","adminUpdate","adminRemove","selfActivate","selfDeactivate","adminExtend","adminRenew","selfExtend","selfRenew","unknownFutureValue"}, Values{"adminAssign","adminUpdate","adminRemove","selfActivate","selfDeactivate","adminExtend","adminRenew","selfExtend","selfRenew","unknownFutureValue"}] String Action;
    [Write, Description("Determines whether the call is a validation or an actual call. Only set this property if you want to check whether an activation is subject to additional rules like MFA before actually submitting the request.")] Boolean IsValidationOnly;
    [Write, Description("A message provided by users and administrators when create they create the unifiedRoleEligibilityScheduleRequest object. Optional when action is adminRemove. Whether this property is required or optional is also dependent on the settings for the Azure AD role.")] String Justification;
    [Write, Description("The period of the role eligibility. Optional when action is adminRemove. The period of eligibility is dependent on the settings of the Azure AD role."), EmbeddedInstance("MSFT_AADRoleEligibilityScheduleRequestSchedule")] String ScheduleInfo;
    [Write, Description("Ticket details linked to the role eligibility request including details of the ticket number and ticket system."), EmbeddedInstance("MSFT_AADRoleEligibilityScheduleRequestTicketInfo")] String TicketInfo;
    [Write, Description("Present ensures the instance exists, absent ensures it is removed."), ValueMap{"Present","Absent"}, Values{"Present","Absent"}] string Ensure;
    [Write, Description("Credentials of the Intune Admin"), EmbeddedInstance("MSFT_Credential")] string Credential;
    [Write, Description("Id of the Azure Active Directory application to authenticate with.")] String ApplicationId;
    [Write, Description("Id of the Azure Active Directory tenant used for authentication.")] String TenantId;
    [Write, Description("Secret of the Azure Active Directory application to authenticate with."), EmbeddedInstance("MSFT_Credential")] String ApplicationSecret;
    [Write, Description("Thumbprint of the Azure Active Directory application's authentication certificate to use for authentication.")] String CertificateThumbprint;
    [Write, Description("Managed ID being used for authentication.")] Boolean ManagedIdentity;
};
