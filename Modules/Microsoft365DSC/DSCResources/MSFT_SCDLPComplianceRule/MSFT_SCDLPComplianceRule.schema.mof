[ClassVersion("1.0.0")]
Class MSFT_SCDLPSensitiveInformation
{
    [Required, Description("Name of the Sensitive Information Content")] String name;
    [Write, Description("Id of the Sensitive Information Content")] String id;
    [Write, Description("Maximum Confidence level value for the Sensitive Information")] String maxconfidence;
    [Write, Description("Minimum Confidence level value for the Sensitive Information")] String minconfidence;
    [Write, Description("Type of Classifier value for the Sensitive Information")] String classifiertype;
    [Write, Description("Minimum Count value for the Sensitive Information")] String mincount;
    [Write, Description("Maximum Count value for the Sensitive Information")] String maxcount;
};
[ClassVersion("1.0.0.0"), FriendlyName("SCDLPComplianceRule")]
class MSFT_SCDLPComplianceRule : OMI_BaseResource
{
    [Key, Description("Name of the Rule.")] String Name;
    [Required, Description("Name of the associated DLP Compliance Policy.")] String Policy;
    [Write, Description("The AccessScope parameter specifies a condition for the DLP rule that's based on the access scope of the content. The rule is applied to content that matches the specified access scope."), ValueMap{"InOrganization","NotInOrganization", "None"}, Values{"InOrganization","NotInOrganization", "None"}] String AccessScope[];
    [Write, Description("The BlockAccess parameter specifies an action for the DLP rule that blocks access to the source item when the conditions of the rule are met. $true: Blocks further access to the source item that matched the rule. The owner, author, and site owner can still access the item. $false: Allows access to the source item that matched the rule. This is the default value.")] Boolean BlockAccess;
    [Write, Description("The BlockAccessScope parameter specifies the scope of the block access action."), ValueMap{"All", "PerUser"}, Values{"All", "PerUser"}] String BlockAccessScope;
    [Write, Description("The Comment parameter specifies an optional comment. If you specify a value that contains spaces, enclose the value in quotation marks.")] String Comment;
    [Write, Description("The ContentContainsSensitiveInformation parameter specifies a condition for the rule that's based on a sensitive information type match in content. The rule is applied to content that contains the specified sensitive information type."), EmbeddedInstance("MSFT_SCDLPSensitiveInformation")] String ContentContainsSensitiveInformation[];
    [Write, Description("The ContentPropertyContainsWords parameter specifies a condition for the DLP rule that's based on a property match in content. The rule is applied to content that contains the specified property.")] String ContentPropertyContainsWords[];
    [Write, Description("The Disabled parameter specifies whether the DLP rule is disabled.")] Boolean Disabled;
    [Write, Description("The GenerateAlert parameter specifies an action for the DLP rule that notifies the specified users when the conditions of the rule are met.")] String GenerateAlert[];
    [Write, Description("The GenerateIncidentReport parameter specifies an action for the DLP rule that sends an incident report to the specified users when the conditions of the rule are met.")] String GenerateIncidentReport[];
    [Write, Description("The IncidentReportContent parameter specifies the content to include in the report when you use the GenerateIncidentReport parameter."), ValueMap{"All", "Default", "DetectionDetails", "Detections", "DocumentAuthor", "DocumentLastModifier", "MatchedItem", "OriginalContent", "RulesMatched", "Service", "Severity", "Title"}, Values{"All", "Default", "DetectionDetails", "Detections", "DocumentAuthor", "DocumentLastModifier", "MatchedItem", "OriginalContent", "RulesMatched", "Service", "Severity", "Title"}] String IncidentReportContent[];
    [Write, Description("The NotifyAllowOverride parameter specifies the notification override options when the conditions of the rule are met."), ValueMap{"FalsePositive", "WithoutJustification", "WithJustification"}, Values{"FalsePositive", "WithoutJustification", "WithJustification"}] String NotifyAllowOverride[];
    [Write, Description("The NotifyEmailCustomText parameter specifies the custom text in the email notification message that's sent to recipients when the conditions of the rule are met.")] String NotifyEmailCustomText;
    [Write, Description("The NotifyPolicyTipCustomText parameter specifies the custom text in the Policy Tip notification message that's shown to recipients when the conditions of the rule are met. The maximum length is 256 characters. HTML tags and tokens (variables) aren't supported.")] String NotifyPolicyTipCustomText;
    [Write, Description("The NotifyUser parameter specifies an action for the DLP rule that notifies the specified users when the conditions of the rule are met.")] String NotifyUser[];
    [Write, Description("The ReportSeverityLevel parameter specifies the severity level of the incident report for content detections based on the rule."), ValueMap{"Low", "Medium", "High", "None"}, Values{"Low", "Medium", "High", "None"}] String ReportSeverityLevel;
    [Write, Description("The RuleErrorAction parameter specifies what to do if an error is encountered during the evaluation of the rule."), ValueMap{"Ignore", "RetryThenBlock"}, Values{"Ignore", "RetryThenBlock"}] String RuleErrorAction;
    [Write, Description("Specify if this rule should exist or not."), ValueMap{"Present","Absent"}, Values{"Present","Absent"}] String Ensure;
    [Required, Description("Credentials of the Exchange Global Admin"), EmbeddedInstance("MSFT_Credential")] String GlobalAdminAccount;
};
