#region AzureAD
function Add-AzureADAdministrativeUnitMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $RefObjectId,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Add-AzureADApplicationOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $RefObjectId,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Add-AzureADApplicationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $RefObjectId
    )
}
function Add-AzureADDeviceRegisteredOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $RefObjectId,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Add-AzureADDeviceRegisteredUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $RefObjectId,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Add-AzureADDirectoryRoleMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $RefObjectId,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Add-AzureADGroupMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $RefObjectId,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Add-AzureADGroupOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $RefObjectId,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Add-AzureADMSApplicationOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $RefObjectId,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Add-AzureADMSFeatureRolloutPolicyDirectoryObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $RefObjectId
    )
}
function Add-AzureADMSLifecyclePolicyGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $GroupId
    )
}
function Add-AzureADMSPrivilegedResource
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ExternalId,

        [Parameter()]
        [System.String]
        $ProviderId
    )
}
function Add-AzureADMSServicePrincipalDelegatedPermissionClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $PermissionId,

        [Parameter()]
        [System.Nullable`1[Microsoft.Open.MSGraph.Model.DelegatedPermissionClassification+ClassificationEnum]]
        $Classification,

        [Parameter()]
        [System.String]
        $ServicePrincipalId,

        [Parameter()]
        [System.String]
        $PermissionName
    )
}
function Add-AzureADScopedRoleMembership
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Open.AzureAD.Model.RoleMemberInfo]
        $RoleMemberInfo,

        [Parameter()]
        [System.String]
        $RoleObjectId,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $AdministrativeUnitObjectId
    )
}
function Add-AzureADServicePrincipalOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $RefObjectId,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Add-AzureADServicePrincipalPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $RefObjectId
    )
}
function Close-AzureADMSPrivilegedRoleAssignmentRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $ProviderId
    )
}
function Confirm-AzureADDomain
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.CrossCloudVerificationCodeBody]
        $CrossCloudVerificationCode
    )
}
function Connect-AzureAD
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $TenantId,

        [Parameter()]
        [System.String]
        $AccountId,

        [Parameter()]
        [Microsoft.Open.Azure.AD.CommonLibrary.LogLevel]
        $LogLevel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.String]
        $LogFilePath,

        [Parameter()]
        [System.String]
        $MsAccessToken,

        [Parameter()]
        [System.Management.Automation.PSCredential]
        $Credential,

        [Parameter()]
        [System.String]
        $CertificateThumbprint,

        [Parameter()]
        [Microsoft.Open.Azure.AD.CommonLibrary.AzureEnvironment+EnvironmentName]
        $AzureEnvironmentName,

        [Parameter()]
        [System.String]
        $AadAccessToken,

        [Parameter()]
        [System.String]
        $ApplicationId
    )
}
function Disconnect-AzureAD
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm
    )
}
function Enable-AzureADDirectoryRole
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $RoleTemplateId
    )
}
function Get-AzureADAdministrativeUnit
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADAdministrativeUnitMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $SearchString,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADApplicationExtensionProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Get-AzureADApplicationKeyCredential
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Get-AzureADApplicationLogo
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $FilePath,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $View,

        [Parameter()]
        [System.String]
        $FileName
    )
}
function Get-AzureADApplicationOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADApplicationPasswordCredential
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Get-AzureADApplicationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Get-AzureADApplicationProxyApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Get-AzureADApplicationProxyApplicationConnectorGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Get-AzureADApplicationProxyConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $SearchString,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.Boolean]
        $All,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADApplicationProxyConnectorGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $SearchString,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.Boolean]
        $All,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADApplicationProxyConnectorGroupMembers
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.Boolean]
        $All,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADApplicationProxyConnectorMemberOf
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Get-AzureADApplicationServiceEndpoint
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADApplicationSignInDetailedSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADApplicationSignInSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Days,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADAuditDirectoryLogs
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.Boolean]
        $All,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADAuditSignInLogs
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.Boolean]
        $All,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADContact
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADContactDirectReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADContactManager
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Get-AzureADContactMembership
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADContactThumbnailPhoto
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $FilePath,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $View,

        [Parameter()]
        [System.String]
        $FileName
    )
}
function Get-AzureADContract
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADCurrentSessionInfo
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm
    )
}
function Get-AzureADDeletedApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $SearchString,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.Boolean]
        $All,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $SearchString,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADDeviceConfiguration
{
    [CmdletBinding()]
    param(

    )
}
function Get-AzureADDeviceRegisteredOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADDeviceRegisteredUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADDirectoryRole
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Get-AzureADDirectoryRoleMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Get-AzureADDirectoryRoleTemplate
{
    [CmdletBinding()]
    param(

    )
}
function Get-AzureADDirectorySetting
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADDirectorySettingTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Get-AzureADDomain
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name
    )
}
function Get-AzureADDomainNameReference
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name
    )
}
function Get-AzureADDomainServiceConfigurationRecord
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name
    )
}
function Get-AzureADDomainVerificationDnsRecord
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name
    )
}
function Get-AzureADExtensionProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $IsSyncedFromOnPremises
    )
}
function Get-AzureADExternalDomainFederation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.Boolean]
        $All,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $ExternalDomainName
    )
}
function Get-AzureADGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $SearchString,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADGroupAppRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADGroupMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADGroupOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADMSApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $SearchString,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADMSApplicationExtensionProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Get-AzureADMSApplicationOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADMSApplicationTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Get-AzureADMSAuthorizationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Get-AzureADMSConditionalAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $PolicyId
    )
}
function Get-AzureADMSDeletedDirectoryObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Get-AzureADMSDeletedGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $SearchString,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.Boolean]
        $All,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADMSFeatureRolloutPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $SearchString,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADMSGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $SearchString,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.Boolean]
        $All,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Select
    )
}
function Get-AzureADMSGroupLifecyclePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Get-AzureADMSIdentityProvider
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Get-AzureADMSLifecyclePolicyGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Get-AzureADMSNamedLocationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $PolicyId
    )
}
function Get-AzureADMSPasswordSingleSignOnCredential
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Open.MSGraph.Model.PasswordSSOObjectId]
        $PasswordSSOObjectId,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Get-AzureADMSPermissionGrantConditionSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $ConditionSetType,

        [Parameter()]
        [System.String]
        $PolicyId
    )
}
function Get-AzureADMSPermissionGrantPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Get-AzureADMSPrivilegedResource
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $ProviderId
    )
}
function Get-AzureADMSPrivilegedRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $ResourceId,

        [Parameter()]
        [System.String]
        $ProviderId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADMSPrivilegedRoleAssignmentRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $ProviderId
    )
}
function Get-AzureADMSPrivilegedRoleDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $ResourceId,

        [Parameter()]
        [System.String]
        $ProviderId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADMSPrivilegedRoleSetting
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $ProviderId
    )
}
function Get-AzureADMSRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $SearchString,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.Boolean]
        $All,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADMSRoleDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $SearchString,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.Boolean]
        $All,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADMSServicePrincipalDelegatedPermissionClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $ServicePrincipalId
    )
}
function Get-AzureADMSTrustFrameworkPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $OutputFilePath
    )
}
function Get-AzureADOAuth2PermissionGrant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADObjectByObjectId
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $ObjectIds,

        [Parameter()]
        [System.String[]]
        $Types
    )
}
function Get-AzureADObjectSetting
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.Boolean]
        $All,

        [Parameter()]
        [System.String]
        $TargetType,

        [Parameter()]
        [System.String]
        $TargetObjectId
    )
}
function Get-AzureADPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADPolicyAppliedObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Get-AzureADPrivilegedRole
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADPrivilegedRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADScopedRoleMembership
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $ScopedRoleMembershipId
    )
}
function Get-AzureADServiceAppRoleAssignedTo
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADServiceAppRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADServicePrincipal
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $SearchString,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADServicePrincipalCreatedObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADServicePrincipalKeyCredential
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Get-AzureADServicePrincipalMembership
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADServicePrincipalOAuth2PermissionGrant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADServicePrincipalOwnedObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADServicePrincipalOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADServicePrincipalPasswordCredential
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Get-AzureADServicePrincipalPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Get-AzureADSubscribedSku
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Get-AzureADTenantDetail
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADTrustedCertificateAuthority
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $TrustedIssuer,

        [Parameter()]
        [System.String]
        $TrustedIssuerSki
    )
}
function Get-AzureADUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $SearchString,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-AzureADUserAppRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADUserCreatedObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADUserDirectReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADUserExtension
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Get-AzureADUserLicenseDetail
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Get-AzureADUserManager
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Get-AzureADUserMembership
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADUserOAuth2PermissionGrant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADUserOwnedDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADUserOwnedObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADUserRegisteredDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $All
    )
}
function Get-AzureADUserThumbnailPhoto
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $FilePath,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $View,

        [Parameter()]
        [System.String]
        $FileName
    )
}
function Get-CrossCloudVerificationCode
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name
    )
}
function New-AzureADAdministrativeUnit
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $DisplayName
    )
}
function New-AzureADApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.AddIn]]
        $AddIns,

        [Parameter()]
        [System.String]
        $SignInAudience,

        [Parameter()]
        [System.Boolean]
        $Oauth2AllowImplicitFlow,

        [Parameter()]
        [System.String[]]
        $ReplyUrls,

        [Parameter()]
        [System.String]
        $WwwHomepage,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.Boolean]
        $IsDisabled,

        [Parameter()]
        [System.Boolean]
        $AllowGuestsSignIn,

        [Parameter()]
        [System.String[]]
        $KnownClientApplications,

        [Parameter()]
        [System.String]
        $PublisherDomain,

        [Parameter()]
        [System.String[]]
        $OrgRestrictions,

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.ParentalControlSettings]
        $ParentalControlSettings,

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.OptionalClaims]
        $OptionalClaims,

        [Parameter()]
        [System.Boolean]
        $Oauth2AllowUrlPathMatching,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.KeyCredential]]
        $KeyCredentials,

        [Parameter()]
        [System.String[]]
        $IdentifierUris,

        [Parameter()]
        [System.String]
        $GroupMembershipClaims,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.OAuth2Permission]]
        $Oauth2Permissions,

        [Parameter()]
        [System.String]
        $LogoutUrl,

        [Parameter()]
        [System.String]
        $ErrorUrl,

        [Parameter()]
        [System.String]
        $SamlMetadataUrl,

        [Parameter()]
        [System.Boolean]
        $IsDeviceOnlyAuthSupported,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.PreAuthorizedApplication]]
        $PreAuthorizedApplications,

        [Parameter()]
        [System.Boolean]
        $AvailableToOtherTenants,

        [Parameter()]
        [System.Boolean]
        $AllowPassthroughUsers,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.RequiredResourceAccess]]
        $RequiredResourceAccess,

        [Parameter()]
        [System.Boolean]
        $PublicClient,

        [Parameter()]
        [System.String]
        $RecordConsentConditions,

        [Parameter()]
        [System.Boolean]
        $Oauth2RequirePostResponse,

        [Parameter()]
        [System.String]
        $AppLogoUrl,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.PasswordCredential]]
        $PasswordCredentials,

        [Parameter()]
        [System.String]
        $Homepage,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.AppRole]]
        $AppRoles,

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.InformationalUrl]
        $InformationalUrls
    )
}
function New-AzureADApplicationExtensionProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $DataType,

        [Parameter()]
        [System.String[]]
        $TargetObjects
    )
}
function New-AzureADApplicationKeyCredential
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Value,

        [Parameter()]
        [System.Nullable`1[System.DateTime]]
        $EndDate,

        [Parameter()]
        [System.Nullable`1[Microsoft.Open.AzureAD.Graph.PowerShell.Custom.KeyType]]
        $Type,

        [Parameter()]
        [System.Nullable`1[Microsoft.Open.AzureAD.Graph.PowerShell.Custom.KeyUsage]]
        $Usage,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $CustomKeyIdentifier,

        [Parameter()]
        [System.Nullable`1[System.DateTime]]
        $StartDate
    )
}
function New-AzureADApplicationPasswordCredential
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Value,

        [Parameter()]
        [System.Nullable`1[System.DateTime]]
        $EndDate,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $CustomKeyIdentifier,

        [Parameter()]
        [System.Nullable`1[System.DateTime]]
        $StartDate
    )
}
function New-AzureADApplicationProxyApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ConnectorGroupId,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $ExternalUrl,

        [Parameter()]
        [System.Boolean]
        $IsTranslateHostHeaderEnabled,

        [Parameter()]
        [System.Boolean]
        $IsTranslateLinksInBodyEnabled,

        [Parameter()]
        [System.String]
        $InternalUrl,

        [Parameter()]
        [System.Nullable`1[Microsoft.Open.MSGraph.Model.ApplicationProxyApplicationObject+ExternalAuthenticationTypeEnum]]
        $ExternalAuthenticationType,

        [Parameter()]
        [System.Nullable`1[Microsoft.Open.MSGraph.Model.ApplicationProxyApplicationObject+ApplicationServerTimeoutEnum]]
        $ApplicationServerTimeout
    )
}
function New-AzureADApplicationProxyConnectorGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Open.MSGraph.Model.Name]
        $Name
    )
}
function New-AzureADDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $AccountEnabled,

        [Parameter()]
        [System.String[]]
        $DevicePhysicalIds,

        [Parameter()]
        [System.String]
        $ProfileType,

        [Parameter()]
        [System.String]
        $DeviceOSVersion,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $DeviceObjectVersion,

        [Parameter()]
        [System.Nullable`1[System.DateTime]]
        $ApproximateLastLogonTimeStamp,

        [Parameter()]
        [System.String]
        $DeviceTrustType,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.AlternativeSecurityId]]
        $AlternativeSecurityIds,

        [Parameter()]
        [System.String]
        $DeviceOSType,

        [Parameter()]
        [System.Boolean]
        $IsManaged,

        [Parameter()]
        [System.String[]]
        $SystemLabels,

        [Parameter()]
        [System.Boolean]
        $IsCompliant,

        [Parameter()]
        [System.String]
        $DeviceMetadata,

        [Parameter()]
        [System.String]
        $DeviceId
    )
}
function New-AzureADDirectorySetting
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Open.MSGraph.Model.DirectorySetting]
        $DirectorySetting
    )
}
function New-AzureADDomain
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $IsDefaultForCloudRedirections,

        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String[]]
        $SupportedServices,

        [Parameter()]
        [System.Boolean]
        $IsDefault
    )
}
function New-AzureADExternalDomainFederation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Open.AzureAD.Model.DomainFederationSettings]
        $FederationSettings,

        [Parameter()]
        [System.String]
        $ExternalDomainName
    )
}
function New-AzureADGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $MailNickName,

        [Parameter()]
        [System.Boolean]
        $SecurityEnabled,

        [Parameter()]
        [System.Boolean]
        $MailEnabled
    )
}
function New-AzureADGroupAppRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $ResourceId,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $PrincipalId
    )
}
function New-AzureADMSApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AddIn]]
        $AddIns,

        [Parameter()]
        [System.String]
        $SignInAudience,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.RequiredResourceAccess]]
        $RequiredResourceAccess,

        [Parameter()]
        [System.String[]]
        $OrgRestrictions,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.ParentalControlSettings]
        $ParentalControlSettings,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.OptionalClaims]
        $OptionalClaims,

        [Parameter()]
        [System.String]
        $TokenEncryptionKeyId,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.KeyCredential]]
        $KeyCredentials,

        [Parameter()]
        [System.String[]]
        $IdentifierUris,

        [Parameter()]
        [System.String]
        $GroupMembershipClaims,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.WebApplication]
        $Web,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.ApiApplication]
        $Api,

        [Parameter()]
        [System.Boolean]
        $IsDeviceOnlyAuthSupported,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PreAuthorizedApplication]]
        $PreAuthorizedApplications,

        [Parameter()]
        [System.Boolean]
        $IsFallbackPublicClient,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.PublicClientApplication]
        $PublicClient,

        [Parameter()]
        [System.String[]]
        $Tags,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.InformationalUrl]
        $InformationalUrl,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PasswordCredential]]
        $PasswordCredentials,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AppRole]]
        $AppRoles
    )
}
function New-AzureADMSApplicationExtensionProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $DataType,

        [Parameter()]
        [System.String[]]
        $TargetObjects
    )
}
function New-AzureADMSApplicationFromApplicationTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.ApplicationTemplateDisplayName]
        $DisplayName
    )
}
function New-AzureADMSApplicationKey
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Open.MSGraph.Model.KeyCredential]
        $KeyCredential,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.PasswordCredential]
        $PasswordCredential,

        [Parameter()]
        [System.String]
        $Proof,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function New-AzureADMSApplicationPassword
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Open.MSGraph.Model.PasswordCredential]
        $PasswordCredential,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function New-AzureADMSConditionalAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.ConditionalAccessSessionControls]
        $SessionControls,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.ConditionalAccessGrantControls]
        $GrantControls,

        [Parameter()]
        [System.String]
        $State,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.ConditionalAccessConditionSet]
        $Conditions
    )
}
function New-AzureADMSFeatureRolloutPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.MsDirectoryObject]]
        $AppliesTo,

        [Parameter()]
        [System.Nullable`1[Microsoft.Open.MSGraph.Model.MsFeatureRolloutPolicy+FeatureEnum]]
        $Feature,

        [Parameter()]
        [System.Boolean]
        $IsEnabled,

        [Parameter()]
        [System.Boolean]
        $IsAppliedToOrganization
    )
}
function New-AzureADMSGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $MembershipRuleProcessingState,

        [Parameter()]
        [System.String[]]
        $GroupTypes,

        [Parameter()]
        [System.Boolean]
        $SecurityEnabled,

        [Parameter()]
        [System.String]
        $Visibility,

        [Parameter()]
        [System.Boolean]
        $MailEnabled,

        [Parameter()]
        [System.String]
        $MailNickname,

        [Parameter()]
        [System.String]
        $MembershipRule,

        [Parameter()]
        [System.Boolean]
        $IsAssignableToRole,

        [Parameter()]
        [System.String]
        $LabelId
    )
}
function New-AzureADMSGroupLifecyclePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $AlternateNotificationEmails,

        [Parameter()]
        [System.String]
        $ManagedGroupTypes,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $GroupLifetimeInDays
    )
}
function New-AzureADMSIdentityProvider
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ClientId,

        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String]
        $Type,

        [Parameter()]
        [System.String]
        $ClientSecret
    )
}
function New-AzureADMSInvitation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $ResetRedemption,

        [Parameter()]
        [System.String]
        $InvitedUserEmailAddress,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.User]
        $InvitedUser,

        [Parameter()]
        [System.String]
        $InvitedUserDisplayName,

        [Parameter()]
        [System.Boolean]
        $SendInvitationMessage,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.InvitedUserMessageInfo]
        $InvitedUserMessageInfo,

        [Parameter()]
        [System.String]
        $InvitedUserType,

        [Parameter()]
        [System.String]
        $InviteRedirectUrl
    )
}
function New-AzureADMSNamedLocationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $OdataType,

        [Parameter()]
        [System.Boolean]
        $IsTrusted,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.IpRange]]
        $IpRanges,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.CountriesAndRegion]]
        $CountriesAndRegions,

        [Parameter()]
        [System.Boolean]
        $IncludeUnknownCountriesAndRegions
    )
}
function New-AzureADMSPasswordSingleSignOnCredential
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Open.MSGraph.Model.PasswordSSOCredentials]
        $PasswordSSOCredential,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function New-AzureADMSPermissionGrantConditionSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $ClientApplicationIds,

        [Parameter()]
        [System.Boolean]
        $ClientApplicationsFromVerifiedPublisherOnly,

        [Parameter()]
        [System.String[]]
        $ClientApplicationTenantIds,

        [Parameter()]
        [System.String[]]
        $Permissions,

        [Parameter()]
        [System.String]
        $ConditionSetType,

        [Parameter()]
        [System.String]
        $ResourceApplication,

        [Parameter()]
        [System.String[]]
        $ClientApplicationPublisherIds,

        [Parameter()]
        [System.String]
        $PermissionClassification,

        [Parameter()]
        [System.String]
        $PolicyId,

        [Parameter()]
        [System.String]
        $PermissionType
    )
}
function New-AzureADMSPermissionGrantPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $Id
    )
}
function New-AzureADMSRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $RoleDefinitionId,

        [Parameter()]
        [System.String]
        $ResourceScope,

        [Parameter()]
        [System.String]
        $PrincipalId
    )
}
function New-AzureADMSRoleDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $TemplateId,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $Version,

        [Parameter()]
        [System.String[]]
        $RolePermissions,

        [Parameter()]
        [System.Boolean]
        $IsEnabled,

        [Parameter()]
        [System.String[]]
        $ResourceScopes,

        [Parameter()]
        [System.String]
        $Description
    )
}
function New-AzureADMSTrustFrameworkPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $InputFilePath,

        [Parameter()]
        [System.String]
        $Content,

        [Parameter()]
        [System.String]
        $OutputFilePath
    )
}
function New-AzureADObjectSetting
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $TargetType,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.DirectorySetting]
        $DirectorySetting,

        [Parameter()]
        [System.String]
        $TargetObjectId
    )
}
function New-AzureADPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Definition,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $Type,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.KeyCredential]]
        $KeyCredentials,

        [Parameter()]
        [System.Boolean]
        $IsOrganizationDefault,

        [Parameter()]
        [System.String]
        $AlternativeIdentifier
    )
}
function New-AzureADPrivilegedRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.DateTime]]
        $ExpirationDateTime,

        [Parameter()]
        [System.Boolean]
        $IsElevated,

        [Parameter()]
        [System.String]
        $ResultMessage,

        [Parameter()]
        [System.String]
        $UserId,

        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $RoleId
    )
}
function New-AzureADServiceAppRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $ResourceId,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $PrincipalId
    )
}
function New-AzureADServicePrincipal
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $PublisherName,

        [Parameter()]
        [System.String[]]
        $ReplyUrls,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $ServicePrincipalType,

        [Parameter()]
        [System.Boolean]
        $AppRoleAssignmentRequired,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.KeyCredential]]
        $KeyCredentials,

        [Parameter()]
        [System.String[]]
        $ServicePrincipalNames,

        [Parameter()]
        [System.String]
        $LogoutUrl,

        [Parameter()]
        [System.String]
        $ErrorUrl,

        [Parameter()]
        [System.String]
        $SamlMetadataUrl,

        [Parameter()]
        [System.String]
        $AccountEnabled,

        [Parameter()]
        [System.String[]]
        $Tags,

        [Parameter()]
        [System.String[]]
        $AlternativeNames,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.PasswordCredential]]
        $PasswordCredentials,

        [Parameter()]
        [System.String]
        $Homepage,

        [Parameter()]
        [System.String]
        $AppId
    )
}
function New-AzureADServicePrincipalKeyCredential
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Value,

        [Parameter()]
        [System.Nullable`1[System.DateTime]]
        $EndDate,

        [Parameter()]
        [System.Nullable`1[Microsoft.Open.AzureAD.Graph.PowerShell.Custom.KeyType]]
        $Type,

        [Parameter()]
        [System.Nullable`1[Microsoft.Open.AzureAD.Graph.PowerShell.Custom.KeyUsage]]
        $Usage,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $CustomKeyIdentifier,

        [Parameter()]
        [System.Nullable`1[System.DateTime]]
        $StartDate
    )
}
function New-AzureADServicePrincipalPasswordCredential
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Value,

        [Parameter()]
        [System.Nullable`1[System.DateTime]]
        $EndDate,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $CustomKeyIdentifier,

        [Parameter()]
        [System.Nullable`1[System.DateTime]]
        $StartDate
    )
}
function New-AzureADTrustedCertificateAuthority
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Open.AzureAD.Model.CertificateAuthorityInformation]
        $CertificateAuthorityInformation
    )
}
function New-AzureADUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $PostalCode,

        [Parameter()]
        [System.String]
        $MailNickName,

        [Parameter()]
        [System.Boolean]
        $ShowInAddressList,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $Mobile,

        [Parameter()]
        [System.String]
        $JobTitle,

        [Parameter()]
        [System.String]
        $ConsentProvidedForMinor,

        [Parameter()]
        [System.String]
        $PhysicalDeliveryOfficeName,

        [Parameter()]
        [System.String[]]
        $OtherMails,

        [Parameter()]
        [System.String]
        $PasswordPolicies,

        [Parameter()]
        [System.Boolean]
        $IsCompromised,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.SignInName]]
        $SignInNames,

        [Parameter()]
        [System.String]
        $UserState,

        [Parameter()]
        [System.String]
        $PreferredLanguage,

        [Parameter()]
        [System.String]
        $State,

        [Parameter()]
        [System.String]
        $TelephoneNumber,

        [Parameter()]
        [System.String]
        $AgeGroup,

        [Parameter()]
        [System.Collections.Generic.Dictionary`2[System.String,System.String]]
        $ExtensionProperty,

        [Parameter()]
        [System.String]
        $UsageLocation,

        [Parameter()]
        [System.String]
        $UserStateChangedOn,

        [Parameter()]
        [System.Boolean]
        $AccountEnabled,

        [Parameter()]
        [System.String]
        $Country,

        [Parameter()]
        [System.String]
        $GivenName,

        [Parameter()]
        [System.String]
        $UserType,

        [Parameter()]
        [System.String]
        $StreetAddress,

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.PasswordProfile]
        $PasswordProfile,

        [Parameter()]
        [System.String]
        $City,

        [Parameter()]
        [System.String]
        $Department,

        [Parameter()]
        [System.String]
        $CompanyName,

        [Parameter()]
        [System.String]
        $FacsimileTelephoneNumber,

        [Parameter()]
        [System.String]
        $Surname,

        [Parameter()]
        [System.String]
        $UserPrincipalName,

        [Parameter()]
        [System.String]
        $CreationType,

        [Parameter()]
        [System.String]
        $ImmutableId
    )
}
function New-AzureADUserAppRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $ResourceId,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $PrincipalId
    )
}
function Open-AzureADMSPrivilegedRoleAssignmentRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ProviderId,

        [Parameter()]
        [System.String]
        $Type,

        [Parameter()]
        [System.String]
        $ResourceId,

        [Parameter()]
        [System.String]
        $AssignmentState,

        [Parameter()]
        [System.String]
        $SubjectId,

        [Parameter()]
        [System.String]
        $Reason,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.AzureADMSPrivilegedSchedule]
        $Schedule,

        [Parameter()]
        [System.String]
        $RoleDefinitionId
    )
}
function Remove-AzureADAdministrativeUnit
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADAdministrativeUnitMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $MemberId
    )
}
function Remove-AzureADApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADApplicationExtensionProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ExtensionPropertyId,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADApplicationKeyCredential
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $KeyId,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADApplicationOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $OwnerId
    )
}
function Remove-AzureADApplicationPasswordCredential
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $KeyId,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADApplicationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $PolicyId
    )
}
function Remove-AzureADApplicationProxyApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $RemoveADApplication,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADApplicationProxyApplicationConnectorGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADApplicationProxyConnectorGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Remove-AzureADContact
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADContactManager
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADDeletedApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADDeviceRegisteredOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $OwnerId
    )
}
function Remove-AzureADDeviceRegisteredUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $UserId,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADDirectoryRoleMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $MemberId
    )
}
function Remove-AzureADDirectorySetting
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Remove-AzureADDomain
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name
    )
}
function Remove-AzureADExternalDomainFederation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ExternalDomainName
    )
}
function Remove-AzureADGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADGroupAppRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $AppRoleAssignmentId,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADGroupMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $MemberId
    )
}
function Remove-AzureADGroupOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $OwnerId
    )
}
function Remove-AzureADMSApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADMSApplicationExtensionProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ExtensionPropertyId,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADMSApplicationKey
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Proof,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $KeyId
    )
}
function Remove-AzureADMSApplicationOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $OwnerId
    )
}
function Remove-AzureADMSApplicationPassword
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $KeyId,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADMSApplicationVerifiedPublisher
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $AppObjectId
    )
}
function Remove-AzureADMSConditionalAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $PolicyId
    )
}
function Remove-AzureADMSDeletedDirectoryObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Remove-AzureADMSFeatureRolloutPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Remove-AzureADMSFeatureRolloutPolicyDirectoryObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADMSGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Remove-AzureADMSGroupLifecyclePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Remove-AzureADMSIdentityProvider
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Remove-AzureADMSLifecyclePolicyGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $GroupId
    )
}
function Remove-AzureADMSNamedLocationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $PolicyId
    )
}
function Remove-AzureADMSPasswordSingleSignOnCredential
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Open.MSGraph.Model.PasswordSSOObjectId]
        $PasswordSSOObjectId,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADMSPermissionGrantConditionSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $ConditionSetType,

        [Parameter()]
        [System.String]
        $PolicyId
    )
}
function Remove-AzureADMSPermissionGrantPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Remove-AzureADMSRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Remove-AzureADMSRoleDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Remove-AzureADMSServicePrincipalDelegatedPermissionClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $ServicePrincipalId
    )
}
function Remove-AzureADMSTrustFrameworkPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Remove-AzureADOAuth2PermissionGrant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADObjectSetting
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $TargetType,

        [Parameter()]
        [System.String]
        $TargetObjectId
    )
}
function Remove-AzureADPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Remove-AzureADScopedRoleMembership
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $ScopedRoleMembershipId
    )
}
function Remove-AzureADServiceAppRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $AppRoleAssignmentId,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADServicePrincipal
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADServicePrincipalKeyCredential
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $KeyId,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADServicePrincipalOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $OwnerId
    )
}
function Remove-AzureADServicePrincipalPasswordCredential
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $KeyId,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADServicePrincipalPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $PolicyId
    )
}
function Remove-AzureADTrustedCertificateAuthority
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Open.AzureAD.Model.CertificateAuthorityInformation]
        $CertificateAuthorityInformation
    )
}
function Remove-AzureADUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADUserAppRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $AppRoleAssignmentId,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADUserExtension
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $ExtensionNames,

        [Parameter()]
        [System.String]
        $ExtensionName,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Remove-AzureADUserManager
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Reset-AzureADMSLifeCycleGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $GroupId
    )
}
function Restore-AzureADDeletedApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $IdentifierUris,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Restore-AzureADMSDeletedDirectoryObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Revoke-AzureADSignedInUserAllRefreshToken
{
    [CmdletBinding()]
    param(

    )
}
function Revoke-AzureADUserAllRefreshToken
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Select-AzureADGroupIdsContactIsMemberOf
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.GroupIdsForMembershipCheck]
        $GroupIdsForMembershipCheck
    )
}
function Select-AzureADGroupIdsGroupIsMemberOf
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.GroupIdsForMembershipCheck]
        $GroupIdsForMembershipCheck
    )
}
function Select-AzureADGroupIdsServicePrincipalIsMemberOf
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.GroupIdsForMembershipCheck]
        $GroupIdsForMembershipCheck
    )
}
function Select-AzureADGroupIdsUserIsMemberOf
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.GroupIdsForMembershipCheck]
        $GroupIdsForMembershipCheck
    )
}
function Set-AzureADAdministrativeUnit
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Set-AzureADApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.AddIn]]
        $AddIns,

        [Parameter()]
        [System.String]
        $SignInAudience,

        [Parameter()]
        [System.Boolean]
        $Oauth2AllowImplicitFlow,

        [Parameter()]
        [System.String[]]
        $ReplyUrls,

        [Parameter()]
        [System.String]
        $WwwHomepage,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.Boolean]
        $IsDisabled,

        [Parameter()]
        [System.Boolean]
        $AllowGuestsSignIn,

        [Parameter()]
        [System.String[]]
        $KnownClientApplications,

        [Parameter()]
        [System.String]
        $PublisherDomain,

        [Parameter()]
        [System.String[]]
        $OrgRestrictions,

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.ParentalControlSettings]
        $ParentalControlSettings,

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.OptionalClaims]
        $OptionalClaims,

        [Parameter()]
        [System.Boolean]
        $Oauth2AllowUrlPathMatching,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.KeyCredential]]
        $KeyCredentials,

        [Parameter()]
        [System.String[]]
        $IdentifierUris,

        [Parameter()]
        [System.String]
        $GroupMembershipClaims,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.OAuth2Permission]]
        $Oauth2Permissions,

        [Parameter()]
        [System.String]
        $LogoutUrl,

        [Parameter()]
        [System.String]
        $ErrorUrl,

        [Parameter()]
        [System.String]
        $SamlMetadataUrl,

        [Parameter()]
        [System.Boolean]
        $IsDeviceOnlyAuthSupported,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.PreAuthorizedApplication]]
        $PreAuthorizedApplications,

        [Parameter()]
        [System.Boolean]
        $AvailableToOtherTenants,

        [Parameter()]
        [System.Boolean]
        $AllowPassthroughUsers,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.RequiredResourceAccess]]
        $RequiredResourceAccess,

        [Parameter()]
        [System.Boolean]
        $PublicClient,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $RecordConsentConditions,

        [Parameter()]
        [System.Boolean]
        $Oauth2RequirePostResponse,

        [Parameter()]
        [System.String]
        $AppLogoUrl,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.PasswordCredential]]
        $PasswordCredentials,

        [Parameter()]
        [System.String]
        $Homepage,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.AppRole]]
        $AppRoles,

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.InformationalUrl]
        $InformationalUrls
    )
}
function Set-AzureADApplicationLogo
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Byte[]]
        $ImageByteArray,

        [Parameter()]
        [System.String]
        $FilePath,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.IO.Stream]
        $FileStream
    )
}
function Set-AzureADApplicationProxyApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ExternalUrl,

        [Parameter()]
        [System.Boolean]
        $IsTranslateHostHeaderEnabled,

        [Parameter()]
        [System.Boolean]
        $IsTranslateLinksInBodyEnabled,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Nullable`1[Microsoft.Open.MSGraph.Model.ApplicationProxyApplicationObject+ExternalAuthenticationTypeEnum]]
        $ExternalAuthenticationType,

        [Parameter()]
        [System.String]
        $InternalUrl,

        [Parameter()]
        [System.String]
        $ConnectorGroupId,

        [Parameter()]
        [System.Nullable`1[Microsoft.Open.MSGraph.Model.ApplicationProxyApplicationObject+ApplicationServerTimeoutEnum]]
        $ApplicationServerTimeout
    )
}
function Set-AzureADApplicationProxyApplicationConnectorGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $ConnectorGroupId
    )
}
function Set-AzureADApplicationProxyApplicationCustomDomainCertificate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Security.SecureString]
        $Password,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $PfxFilePath
    )
}
function Set-AzureADApplicationProxyApplicationSingleSignOn
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $KerberosInternalApplicationServicePrincipalName,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Nullable`1[Microsoft.Open.MSGraph.Model.OnPremisesPublishingSingleSignOnObject+SingleSignOnModeEnum]]
        $SingleSignOnMode,

        [Parameter()]
        [System.Nullable`1[Microsoft.Open.MSGraph.Model.OnPremisesPublishingKerberosSignOnSettingsObject+KerberosSignOnMappingAttributeTypeEnum]]
        $KerberosDelegatedLoginIdentity
    )
}
function Set-AzureADApplicationProxyConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $ConnectorGroupId
    )
}
function Set-AzureADApplicationProxyConnectorGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.Name]
        $Name
    )
}
function Set-AzureADDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $DevicePhysicalIds,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.AlternativeSecurityId]]
        $AlternativeSecurityIds,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $DeviceId,

        [Parameter()]
        [System.String]
        $ProfileType,

        [Parameter()]
        [System.Boolean]
        $IsManaged,

        [Parameter()]
        [System.Nullable`1[System.DateTime]]
        $ApproximateLastLogonTimeStamp,

        [Parameter()]
        [System.String[]]
        $SystemLabels,

        [Parameter()]
        [System.Boolean]
        $AccountEnabled,

        [Parameter()]
        [System.String]
        $DeviceTrustType,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $DeviceMetadata,

        [Parameter()]
        [System.Boolean]
        $IsCompliant,

        [Parameter()]
        [System.String]
        $DeviceOSVersion,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $DeviceObjectVersion,

        [Parameter()]
        [System.String]
        $DeviceOSType
    )
}
function Set-AzureADDirectorySetting
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.DirectorySetting]
        $DirectorySetting
    )
}
function Set-AzureADDomain
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.Boolean]
        $IsDefaultForCloudRedirections,

        [Parameter()]
        [System.String[]]
        $SupportedServices,

        [Parameter()]
        [System.Boolean]
        $IsDefault
    )
}
function Set-AzureADGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $MailNickName,

        [Parameter()]
        [System.Boolean]
        $SecurityEnabled,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $MailEnabled
    )
}
function Set-AzureADMSApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AddIn]]
        $AddIns,

        [Parameter()]
        [System.String]
        $SignInAudience,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.RequiredResourceAccess]]
        $RequiredResourceAccess,

        [Parameter()]
        [System.String[]]
        $OrgRestrictions,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.ParentalControlSettings]
        $ParentalControlSettings,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.OptionalClaims]
        $OptionalClaims,

        [Parameter()]
        [System.String]
        $TokenEncryptionKeyId,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.KeyCredential]]
        $KeyCredentials,

        [Parameter()]
        [System.String[]]
        $IdentifierUris,

        [Parameter()]
        [System.String]
        $GroupMembershipClaims,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.WebApplication]
        $Web,

        [Parameter()]
        [System.Boolean]
        $IsDeviceOnlyAuthSupported,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PreAuthorizedApplication]]
        $PreAuthorizedApplications,

        [Parameter()]
        [System.Boolean]
        $IsFallbackPublicClient,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.PublicClientApplication]
        $PublicClient,

        [Parameter()]
        [System.String[]]
        $Tags,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.ApiApplication]
        $Api,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.InformationalUrl]
        $InformationalUrl,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PasswordCredential]]
        $PasswordCredentials,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AppRole]]
        $AppRoles
    )
}
function Set-AzureADMSApplicationLogo
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Byte[]]
        $Content,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Set-AzureADMSApplicationVerifiedPublisher
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Open.MSGraph.Model.SetVerifiedPublisherRequest]
        $SetVerifiedPublisherRequest,

        [Parameter()]
        [System.String]
        $AppObjectId
    )
}
function Set-AzureADMSAuthorizationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String[]]
        $EnabledPreviewFeatures,

        [Parameter()]
        [System.String[]]
        $PermissionGrantPolicyIdsAssignedToDefaultUserRole,

        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.Boolean]
        $BlockMsolPowerShell,

        [Parameter()]
        [System.String]
        $GuestUserRoleId
    )
}
function Set-AzureADMSConditionalAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.ConditionalAccessSessionControls]
        $SessionControls,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.ConditionalAccessGrantControls]
        $GrantControls,

        [Parameter()]
        [System.String]
        $State,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.ConditionalAccessConditionSet]
        $Conditions,

        [Parameter()]
        [System.String]
        $PolicyId
    )
}
function Set-AzureADMSFeatureRolloutPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.Boolean]
        $IsAppliedToOrganization,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.MsDirectoryObject]]
        $AppliesTo,

        [Parameter()]
        [System.Nullable`1[Microsoft.Open.MSGraph.Model.MsFeatureRolloutPolicy+FeatureEnum]]
        $Feature,

        [Parameter()]
        [System.Boolean]
        $IsEnabled,

        [Parameter()]
        [System.String]
        $Id
    )
}
function Set-AzureADMSGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $MembershipRule,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $MailNickname,

        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String[]]
        $GroupTypes,

        [Parameter()]
        [System.Boolean]
        $SecurityEnabled,

        [Parameter()]
        [System.String]
        $LabelId,

        [Parameter()]
        [System.String]
        $Visibility,

        [Parameter()]
        [System.Boolean]
        $MailEnabled,

        [Parameter()]
        [System.String]
        $MembershipRuleProcessingState,

        [Parameter()]
        [System.Boolean]
        $IsAssignableToRole
    )
}
function Set-AzureADMSGroupLifecyclePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $AlternateNotificationEmails,

        [Parameter()]
        [System.String]
        $ManagedGroupTypes,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $GroupLifetimeInDays
    )
}
function Set-AzureADMSIdentityProvider
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $ClientId,

        [Parameter()]
        [System.String]
        $ClientSecret,

        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String]
        $Type
    )
}
function Set-AzureADMSNamedLocationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.Boolean]
        $IncludeUnknownCountriesAndRegions,

        [Parameter()]
        [System.String]
        $OdataType,

        [Parameter()]
        [System.Boolean]
        $IsTrusted,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.CountriesAndRegion]]
        $CountriesAndRegions,

        [Parameter()]
        [System.String]
        $PolicyId,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.IpRange]]
        $IpRanges
    )
}
function Set-AzureADMSPasswordSingleSignOnCredential
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Open.MSGraph.Model.PasswordSSOCredentials]
        $PasswordSSOCredential,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Set-AzureADMSPermissionGrantConditionSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String[]]
        $ClientApplicationIds,

        [Parameter()]
        [System.Boolean]
        $ClientApplicationsFromVerifiedPublisherOnly,

        [Parameter()]
        [System.String[]]
        $ClientApplicationTenantIds,

        [Parameter()]
        [System.String[]]
        $Permissions,

        [Parameter()]
        [System.String]
        $ConditionSetType,

        [Parameter()]
        [System.String]
        $ResourceApplication,

        [Parameter()]
        [System.String[]]
        $ClientApplicationPublisherIds,

        [Parameter()]
        [System.String]
        $PermissionClassification,

        [Parameter()]
        [System.String]
        $PolicyId,

        [Parameter()]
        [System.String]
        $PermissionType
    )
}
function Set-AzureADMSPermissionGrantPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $Id
    )
}
function Set-AzureADMSPrivilegedRoleAssignmentRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $AssignmentState,

        [Parameter()]
        [System.String]
        $Decision,

        [Parameter()]
        [System.String]
        $Reason,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.AzureADMSPrivilegedSchedule]
        $Schedule,

        [Parameter()]
        [System.String]
        $ProviderId
    )
}
function Set-AzureADMSPrivilegedRoleSetting
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AzureADMSPrivilegedRuleSetting]]
        $AdminEligibleSettings,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AzureADMSPrivilegedRuleSetting]]
        $AdminMemberSettings,

        [Parameter()]
        [System.String]
        $ResourceId,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AzureADMSPrivilegedRuleSetting]]
        $UserEligibleSettings,

        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $RoleDefinitionId,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AzureADMSPrivilegedRuleSetting]]
        $UserMemberSettings,

        [Parameter()]
        [System.String]
        $ProviderId
    )
}
function Set-AzureADMSRoleDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $TemplateId,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $Version,

        [Parameter()]
        [System.String[]]
        $RolePermissions,

        [Parameter()]
        [System.Boolean]
        $IsEnabled,

        [Parameter()]
        [System.String[]]
        $ResourceScopes,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $Id
    )
}
function Set-AzureADMSTrustFrameworkPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $InputFilePath,

        [Parameter()]
        [System.String]
        $Content,

        [Parameter()]
        [System.String]
        $OutputFilePath
    )
}
function Set-AzureADObjectSetting
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.DirectorySetting]
        $DirectorySetting,

        [Parameter()]
        [System.String]
        $TargetType,

        [Parameter()]
        [System.String]
        $TargetObjectId
    )
}
function Set-AzureADPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Definition,

        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $Type,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.KeyCredential]]
        $KeyCredentials,

        [Parameter()]
        [System.Boolean]
        $IsOrganizationDefault,

        [Parameter()]
        [System.String]
        $AlternativeIdentifier
    )
}
function Set-AzureADServicePrincipal
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $AlternativeNames,

        [Parameter()]
        [System.String]
        $PublisherName,

        [Parameter()]
        [System.String[]]
        $ReplyUrls,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $ServicePrincipalType,

        [Parameter()]
        [System.Boolean]
        $AppRoleAssignmentRequired,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.KeyCredential]]
        $KeyCredentials,

        [Parameter()]
        [System.String[]]
        $ServicePrincipalNames,

        [Parameter()]
        [System.String]
        $LogoutUrl,

        [Parameter()]
        [System.String]
        $ErrorUrl,

        [Parameter()]
        [System.String]
        $SamlMetadataUrl,

        [Parameter()]
        [System.String]
        $AccountEnabled,

        [Parameter()]
        [System.String[]]
        $Tags,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $Homepage,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.PasswordCredential]]
        $PasswordCredentials,

        [Parameter()]
        [System.String]
        $AppId
    )
}
function Set-AzureADTenantDetail
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Open.AzureAD.Model.PrivacyProfile]
        $PrivacyProfile,

        [Parameter()]
        [System.String[]]
        $SecurityComplianceNotificationPhones,

        [Parameter()]
        [System.String[]]
        $TechnicalNotificationMails,

        [Parameter()]
        [System.String[]]
        $SecurityComplianceNotificationMails,

        [Parameter()]
        [System.String[]]
        $MarketingNotificationEmails
    )
}
function Set-AzureADTrustedCertificateAuthority
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Open.AzureAD.Model.CertificateAuthorityInformation]
        $CertificateAuthorityInformation
    )
}
function Set-AzureADUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $PostalCode,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $MailNickName,

        [Parameter()]
        [System.Boolean]
        $ShowInAddressList,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $Mobile,

        [Parameter()]
        [System.String]
        $JobTitle,

        [Parameter()]
        [System.String]
        $ConsentProvidedForMinor,

        [Parameter()]
        [System.String]
        $PhysicalDeliveryOfficeName,

        [Parameter()]
        [System.String[]]
        $OtherMails,

        [Parameter()]
        [System.String]
        $PasswordPolicies,

        [Parameter()]
        [System.Boolean]
        $IsCompromised,

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.SignInName]]
        $SignInNames,

        [Parameter()]
        [System.String]
        $UserState,

        [Parameter()]
        [System.String]
        $PreferredLanguage,

        [Parameter()]
        [System.String]
        $State,

        [Parameter()]
        [System.String]
        $TelephoneNumber,

        [Parameter()]
        [System.String]
        $AgeGroup,

        [Parameter()]
        [System.Collections.Generic.Dictionary`2[System.String,System.String]]
        $ExtensionProperty,

        [Parameter()]
        [System.String]
        $UsageLocation,

        [Parameter()]
        [System.String]
        $UserStateChangedOn,

        [Parameter()]
        [System.Boolean]
        $AccountEnabled,

        [Parameter()]
        [System.String]
        $Country,

        [Parameter()]
        [System.String]
        $GivenName,

        [Parameter()]
        [System.String]
        $UserType,

        [Parameter()]
        [System.String]
        $StreetAddress,

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.PasswordProfile]
        $PasswordProfile,

        [Parameter()]
        [System.String]
        $City,

        [Parameter()]
        [System.String]
        $Department,

        [Parameter()]
        [System.String]
        $CompanyName,

        [Parameter()]
        [System.String]
        $FacsimileTelephoneNumber,

        [Parameter()]
        [System.String]
        $Surname,

        [Parameter()]
        [System.String]
        $UserPrincipalName,

        [Parameter()]
        [System.String]
        $CreationType,

        [Parameter()]
        [System.String]
        $ImmutableId
    )
}
function Set-AzureADUserExtension
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ExtensionValue,

        [Parameter()]
        [System.String]
        $ExtensionName,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Collections.Generic.Dictionary`2[System.String,System.String]]
        $ExtensionNameValues
    )
}
function Set-AzureADUserLicense
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.AssignedLicenses]
        $AssignedLicenses
    )
}
function Set-AzureADUserManager
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $RefObjectId,

        [Parameter()]
        [System.String]
        $ObjectId
    )
}
function Set-AzureADUserPassword
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Security.SecureString]
        $Password,

        [Parameter()]
        [System.Boolean]
        $ForceChangePasswordNextLogin,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Boolean]
        $EnforceChangePasswordPolicy
    )
}
function Set-AzureADUserThumbnailPhoto
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Byte[]]
        $ImageByteArray,

        [Parameter()]
        [System.String]
        $FilePath,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.IO.Stream]
        $FileStream
    )
}
function Update-AzureADSignedInUserPassword
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Security.SecureString]
        $CurrentPassword,

        [Parameter()]
        [System.Security.SecureString]
        $NewPassword
    )
}
#endregion
#region ExchangeOnline
function Add-AvailabilityAddressSpace
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Credentials,

        [Parameter()]
        [System.Object]
        $ForestName,

        [Parameter()]
        [System.Object]
        $TargetAutodiscoverEpr,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AccessMethod,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Add-DistributionGroupMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BypassSecurityGroupManagerCheck,

        [Parameter()]
        [System.Object]
        $Member,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Add-MailboxFolderPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AccessRights,

        [Parameter()]
        [System.Object]
        $SharingPermissionFlags,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GroupMailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $User,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $SendNotificationToUser,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Add-MailboxLocation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Add-MailboxPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AccessRights,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GroupMailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Deny,

        [Parameter()]
        [System.Object]
        $AutoMapping,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $User,

        [Parameter()]
        [System.Object]
        $Owner,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreDefaultScope,

        [Parameter()]
        [System.Object]
        $InheritanceType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Add-ManagementRoleEntry
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ParentRoleEntry,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Parameters,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Overwrite,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Type,

        [Parameter()]
        [System.Object]
        $Role,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Add-PublicFolderClientPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AccessRights,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $User,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Add-RecipientPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipDomainValidationForMailContact,

        [Parameter()]
        [System.Object]
        $AccessRights,

        [Parameter()]
        [System.Object]
        $Trustee,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipDomainValidationForMailUser,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipDomainValidationForSharedMailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Add-RoleGroupMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BypassSecurityGroupManagerCheck,

        [Parameter()]
        [System.Object]
        $Member,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Add-UnifiedGroupLinks
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $LinkType,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Links,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Approve-ElevatedAccessRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RequestId,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $RequestContext,

        [Parameter()]
        [System.Object]
        $Organization,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Clear-ActiveSyncDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Cancel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $NotificationEmailAddresses,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Clear-MobileDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Cancel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AccountOnly,

        [Parameter()]
        [System.Object]
        $NotificationEmailAddresses,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Clear-TextMessagingAccount
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreDefaultScope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Compare-TextMessagingVerificationCode
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $VerificationCode,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Complete-MigrationBatch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SyncAndComplete,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Partition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function ConvertFrom-ExoJobData.ps1
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $InputObject,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Delete-QuarantineMessage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Identities,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Deny-ElevatedAccessRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RequestId,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Organization,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-AntiPhishRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-App
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-ATPProtectionPolicyRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-ElevatedAccessControl
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-EOPProtectionPolicyRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-HostedContentFilterRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-HostedOutboundSpamFilterRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-InboxRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AlwaysDeleteOutlookRulesBlob,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-JournalArchiving
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PreserveMailUser,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-JournalRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-Mailbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Archive,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PermanentlyDisable,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-MailPublicFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-MalwareFilterRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-OutlookProtectionRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-SafeAttachmentRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-SafeLinksRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-SweepRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-TransportRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-UMAutoAttendant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-UMCallAnsweringRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-UMIPGateway
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Immediate,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-UMMailbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $KeepProperties,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-AntiPhishRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-App
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-ATPProtectionPolicyRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-ElevatedAccessControl
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SystemAccounts,

        [Parameter()]
        [System.Object]
        $AdminGroup,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-EOPProtectionPolicyRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-HostedContentFilterRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-HostedOutboundSpamFilterRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-InboxRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AlwaysDeleteOutlookRulesBlob,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-JournalRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-Mailbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RoleAssignmentPolicy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Archive,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AutoExpandingArchive,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ArchiveName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-MailPublicFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $HiddenFromAddressListsEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OverrideRecipientQuotas,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-MalwareFilterRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-OrganizationCustomization
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-OutlookProtectionRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-SafeAttachmentRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-SafeLinksRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-SweepRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-TransportRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Mode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-UMAutoAttendant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-UMCallAnsweringRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-UMIPGateway
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-UMMailbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AutomaticSpeechRecognitionEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ValidateOnly,

        [Parameter()]
        [System.Object]
        $SendWelcomeMail,

        [Parameter()]
        [System.Object]
        $Extensions,

        [Parameter()]
        [System.Object]
        $PinExpired,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $EnableCloudVoiceMail,

        [Parameter()]
        [System.Object]
        $NotifyEmail,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $SIPResourceIdentifier,

        [Parameter()]
        [System.Object]
        $UMMailboxPolicy,

        [Parameter()]
        [System.Object]
        $Pin,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PilotNumber,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Export-DlpPolicyCollection
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Export-MailboxDiagnosticLogs
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ComponentName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ExtendedProperties,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeInactiveMailboxes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Export-MigrationReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $StartingRowIndex,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Partition,

        [Parameter()]
        [System.Object]
        $RowCount,

        [Parameter()]
        [System.Object]
        $CsvStream,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Export-QuarantineMessage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Identities,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Export-TransportRuleCollection
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Export-UMCallDataRecord
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ClientStream,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $UMIPGateway,

        [Parameter()]
        [System.Object]
        $Date,

        [Parameter()]
        [System.Object]
        $UMDialPlan,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Export-UMPrompt
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $UMDialPlan,

        [Parameter()]
        [System.Object]
        $PromptFileName,

        [Parameter()]
        [System.Object]
        $UMAutoAttendant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AcceptedDomain
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AccessToCustomerDataRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RequestId,

        [Parameter()]
        [System.Object]
        $ApprovalStatus,

        [Parameter()]
        [System.Object]
        $CreatedAfter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ActiveSyncDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ActiveSyncDeviceAccessRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ActiveSyncDeviceClass
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ActiveSyncDeviceStatistics
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ShowRecoveryPassword,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GetMailboxLog,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $NotificationEmailAddresses,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ActiveSyncMailboxPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ActiveSyncOrganizationSettings
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AddressBookPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AdminAuditLogConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AdministrativeUnit
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AdvancedThreatProtectionDocumentDetail
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AdvancedThreatProtectionDocumentReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $AggregateBy,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Object]
        $SummarizeBy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AdvancedThreatProtectionTrafficReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Direction,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $AggregateBy,

        [Parameter()]
        [System.Object]
        $DisplayBy,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $MalwareName,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AntiPhishPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Impersonation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Advanced,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Spoof,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AntiPhishRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $State,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-App
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OrganizationApp,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PrivateCatalog,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ApplicationAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AtpPolicyForO365
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ATPProtectionPolicyRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $State,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ATPTotalTrafficReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Direction,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $AggregateBy,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Object]
        $SummarizeBy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AuditConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AuditConfigurationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AuditConfigurationRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AuditLogSearch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Type,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $CreatedAfter,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $CreatedBefore,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AuthenticationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AuthServer
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AvailabilityAddressSpace
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AvailabilityConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-BlockedSenderAddress
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SenderAddress,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CalendarDiagnosticAnalysis
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $GlobalObjectId,

        [Parameter()]
        [System.Object]
        $LogLocation,

        [Parameter()]
        [System.Object]
        $OutputAs,

        [Parameter()]
        [System.Object]
        $DetailLevel,

        [Parameter()]
        [System.Object]
        $CalendarLogs,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CalendarDiagnosticLog
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Latest,

        [Parameter()]
        [System.Object]
        $Subject,

        [Parameter()]
        [System.Object]
        $LogLocation,

        [Parameter()]
        [System.Object]
        $ItemClass,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ItemIds,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $MeetingId,

        [Parameter()]
        [System.Object]
        $EntryId,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $ExactMatch,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CalendarDiagnosticObjects
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ShouldDecodeEnums,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ShouldFetchAttendeeCollection,

        [Parameter()]
        [System.Object]
        $Subject,

        [Parameter()]
        [System.Object]
        $ExactMatch,

        [Parameter()]
        [System.Object]
        $ItemIds,

        [Parameter()]
        [System.Object]
        $ShouldBindToItem,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Object]
        $EwsId,

        [Parameter()]
        [System.Object]
        $ShouldFetchRecurrenceExceptions,

        [Parameter()]
        [System.Object]
        $MeetingId,

        [Parameter()]
        [System.Object]
        $ItemClass,

        [Parameter()]
        [System.Object]
        $ConfigurationName,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ODataId,

        [Parameter()]
        [System.Object]
        $CustomPropertyNames,

        [Parameter()]
        [System.Object]
        $EntryId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CalendarNotification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReadFromDomainController,

        [Parameter()]
        [System.Object]
        $Credential,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CalendarProcessing
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CalendarViewDiagnostics
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BindToResults,

        [Parameter()]
        [System.Object]
        $CalendarId,

        [Parameter()]
        [System.Object]
        $TimeZonePreference,

        [Parameter()]
        [System.Object]
        $WindowEndUtc,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReturnSeriesMasters,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreCorruptItems,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $WindowStartUtc,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CASMailbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReadIsOptimizedForAccessibility,

        [Parameter()]
        [System.Object]
        $Credential,

        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ActiveSyncDebugLogging,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreDefaultScope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ProtocolSettings,

        [Parameter()]
        [System.Object]
        $RecipientTypeDetails,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RecalculateHasActiveSyncDevicePartnership,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ActiveSyncSuppressReadReceipt,

        [Parameter()]
        [System.Object]
        $Anr,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CASMailboxPlan
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Object]
        $Credential,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreDefaultScope,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ClassificationRuleCollection
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ClientAccessRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-Clutter
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CompliancePolicyFileSyncNotification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CompliancePolicySyncNotification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ComplianceTag
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludingLabelState,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ComplianceTagStorage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CompromisedUserAggregateReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CompromisedUserDetailReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ConfigAnalyzerPolicyRecommendation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RecommendedPolicyType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsAppliedToDisabled,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ConnectionByClientTypeDetailReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $ReportType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ConnectionByClientTypeReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $ReportType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ConnectSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeReport,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $AggregationType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-Contact
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $RecipientTypeDetails,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $Anr,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsActiveUserReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $ReportType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsAVConferenceTimeReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $ReportType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsClientDeviceDetailReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $UserName,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsClientDeviceReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsConferenceReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $ReportType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsP2PAVTimeReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $ReportType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsP2PSessionReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $ReportType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsPSTNConferenceTimeReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $ReportType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsPSTNUsageDetailReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsUserActivitiesReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $UserName,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsUsersBlockedReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CustomizedUserSubmission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SubmissionNetworkMessageId,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $SubmittedBy,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $AggregateBy,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DataClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ClassificationRuleCollectionIdentity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DataClassificationConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DataEncryptionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DataRetentionReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceComplianceDetailsReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DeviceUserName,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $DeviceComplianceStatus,

        [Parameter()]
        [System.Object]
        $DevicePlatform,

        [Parameter()]
        [System.Object]
        $DeviceCompliancePolicy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceComplianceDetailsReportFilter
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceCompliancePolicyInventory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceComplianceReportDate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceComplianceSummaryReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DeviceUserName,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $DeviceComplianceStatus,

        [Parameter()]
        [System.Object]
        $DevicePlatform,

        [Parameter()]
        [System.Object]
        $DeviceCompliancePolicy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceComplianceUserInventory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceComplianceUserReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceConditionalAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceConditionalAccessRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceConfigurationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceConfigurationRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DevicePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceTenantPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceTenantRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DistributionGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Object]
        $Credential,

        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $RecipientTypeDetails,

        [Parameter()]
        [System.Object]
        $ManagedBy,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $Anr,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DistributionGroupMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeSoftDeletedObjects,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Credential,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DkimSigningConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DlpDetailReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Source,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $Actor,

        [Parameter()]
        [System.Object]
        $DlpCompliancePolicy,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $DlpComplianceRule,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DlpDetectionsReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Source,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $DlpCompliancePolicy,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $AggregateBy,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $DlpComplianceRule,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Object]
        $SummarizeBy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DlpIncidentDetailReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Source,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $Actor,

        [Parameter()]
        [System.Object]
        $DlpCompliancePolicy,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $DlpComplianceRule,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DlpKeywordDictionary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DlpPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DlpPolicyTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DlpSensitiveInformationTypeConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DlpSensitiveInformationTypeRulePackage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DlpSiDetectionsReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $SensitiveType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DynamicDistributionGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Object]
        $Credential,

        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ManagedBy,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $Anr,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ElevatedAccessApprovalPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ElevatedAccessAuthorization
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RequestId,

        [Parameter()]
        [System.Object]
        $Requestor,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ElevatedAccessRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RequestId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-EligibleDistributionGroupForMigration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $ManagedBy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-EmailAddressPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-EOPProtectionPolicyRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $State,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-EvaluationModeReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RecipientDomain,

        [Parameter()]
        [System.Object]
        $Direction,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $EventSubType,

        [Parameter()]
        [System.Object]
        $IsScanAndDrop,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $AggregateBy,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $IsComplexRouted,

        [Parameter()]
        [System.Object]
        $IsEvaluationMode,

        [Parameter()]
        [System.Object]
        $ConnectorId,

        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-EventsFromEmailConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-FailedContentIndexDocuments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ErrorCode,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $FailureMode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Archive,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-FederatedOrganizationIdentifier
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeExtendedDomainInfo,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-FederationInformation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TrustedHostnames,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BypassAdditionalDomainValidation,

        [Parameter()]
        [System.Object]
        $DomainName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-FederationTrust
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-FfoMigrationReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-FocusedInbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-Group
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $RecipientTypeDetails,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $Anr,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-GroupActivityReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $ReportType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-GroupMailbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeMailboxUrls,

        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeMembers,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-HistoricalSearch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $JobId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-HostedConnectionFilterPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-HostedContentFilterPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-HostedContentFilterRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $State,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-HostedOutboundSpamFilterPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-HostedOutboundSpamFilterRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $State,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-HotmailSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeReport,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $AggregationType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-HybridMailflow
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-HybridMailflowDatacenterIPs
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ImapSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeReport,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $AggregationType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-InboundConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-InboxRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DescriptionTimeFormat,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeHidden,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BypassScopeCheck,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DescriptionTimeZone,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-InformationBarrierReportDetails
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Source,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $AggregateBy,

        [Parameter()]
        [System.Object]
        $TargetUsers,

        [Parameter()]
        [System.Object]
        $InformationBarrierPolicy,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $InitiatingUser,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-InformationBarrierReportSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Source,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $TargetUsers,

        [Parameter()]
        [System.Object]
        $InformationBarrierPolicy,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $InitiatingUser,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-IntraOrganizationConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $OrganizationGuid,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-IntraOrganizationConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-IRMConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-JournalRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-LicenseVsUsageSummaryReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-LinkedUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $Anr,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-LogonStatistics
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-Mailbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeInactiveMailbox,

        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InactiveMailboxOnly,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GroupMailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PublicFolder,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Archive,

        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SoftDeletedMailbox,

        [Parameter()]
        [System.Object]
        $RecipientTypeDetails,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $MailboxPlan,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Migration,

        [Parameter()]
        [System.Object]
        $Anr,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxActivityReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $ReportType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxAuditBypassAssociation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxAutoReplyConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReadFromDomainController,

        [Parameter()]
        [System.Object]
        $Credential,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxCalendarConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxCalendarFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GetChildren,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $MailFolderOnly,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recurse,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxFolderPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GroupMailbox,

        [Parameter()]
        [System.Object]
        $User,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxFolderStatistics
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DiagnosticInfo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeOldestAndNewestItems,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Archive,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeSoftDeletedRecipients,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeAnalysis,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $FolderScope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxJunkEmailConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReadFromDomainController,

        [Parameter()]
        [System.Object]
        $Credential,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxLocation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludePreviousPrimary,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $User,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $MailboxLocationType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxMessageConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReadFromDomainController,

        [Parameter()]
        [System.Object]
        $Credential,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxOverrideConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReadFromDomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GroupMailbox,

        [Parameter()]
        [System.Object]
        $Credential,

        [Parameter()]
        [System.Object]
        $User,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Owner,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SoftDeletedMailbox,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxPlan
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Object]
        $Credential,

        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreDefaultScope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllMailboxPlanReleases,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxPreferredLocation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxRegionalConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $VerifyDefaultFolderNameLanguage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Archive,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxRestoreRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $BatchName,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Suspend,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $Status,

        [Parameter()]
        [System.Object]
        $HighPriority,

        [Parameter()]
        [System.Object]
        $TargetMailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxRestoreRequestStatistics
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeReport,

        [Parameter()]
        [System.Object]
        $DiagnosticInfo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReportOnly,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxSearch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ShowDeletionInProgressSearches,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $InPlaceHoldIdentity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxSpellingConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxStatistics
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeMoveReport,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Archive,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeMoveHistory,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeSoftDeletedRecipients,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxUsageDetailReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxUsageReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailboxUserConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailContact
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $RecipientTypeDetails,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $Anr,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailDetailATPReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Direction,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $DataSource,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $MessageTraceId,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $MalwareName,

        [Parameter()]
        [System.Object]
        $RecipientAddress,

        [Parameter()]
        [System.Object]
        $MessageId,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Object]
        $SenderAddress,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailDetailDlpPolicyReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Direction,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $MessageTraceId,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $DlpPolicy,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $TransportRule,

        [Parameter()]
        [System.Object]
        $SenderAddress,

        [Parameter()]
        [System.Object]
        $RecipientAddress,

        [Parameter()]
        [System.Object]
        $MessageId,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailDetailEvaluationModeReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RecipientDomain,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $EventSubType,

        [Parameter()]
        [System.Object]
        $IsScanAndDrop,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $IsComplexRouted,

        [Parameter()]
        [System.Object]
        $IsEvaluationMode,

        [Parameter()]
        [System.Object]
        $ConnectorId,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailDetailMalwareReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Direction,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $MessageTraceId,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $MalwareName,

        [Parameter()]
        [System.Object]
        $RecipientAddress,

        [Parameter()]
        [System.Object]
        $MessageId,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Object]
        $SenderAddress,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailDetailReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Direction,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $AggregateBy,

        [Parameter()]
        [System.Object]
        $MessageTraceId,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $MessageId,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailDetailSpamReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Direction,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $MessageTraceId,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $SenderAddress,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $RecipientAddress,

        [Parameter()]
        [System.Object]
        $MessageId,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailDetailTransportRuleReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Direction,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $MessageTraceId,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $SenderAddress,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $TransportRule,

        [Parameter()]
        [System.Object]
        $RecipientAddress,

        [Parameter()]
        [System.Object]
        $MessageId,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailFilterListReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $SelectionTarget,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailFlowStatusReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Direction,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailPublicFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Object]
        $Credential,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreDefaultScope,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $Anr,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailTrafficATPReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $NumberOfRows,

        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Direction,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $AggregateBy,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $PivotBy,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Object]
        $SummarizeBy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailTrafficPolicyReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Direction,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $AggregateBy,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $DlpPolicy,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $TransportRule,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Object]
        $SummarizeBy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailTrafficReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Direction,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $AggregateBy,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Object]
        $SummarizeBy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailTrafficSummaryReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $DlpPolicy,

        [Parameter()]
        [System.Object]
        $TransportRule,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Object]
        $Category,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailTrafficTopReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Direction,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $AggregateBy,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Object]
        $SummarizeBy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SoftDeletedMailUser,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $Anr,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MalwareFilterPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MalwareFilterRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $State,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ManagementRole
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RoleType,

        [Parameter()]
        [System.Object]
        $CmdletParameters,

        [Parameter()]
        [System.Object]
        $ScriptParameters,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Cmdlet,

        [Parameter()]
        [System.Object]
        $Script,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GetChildren,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recurse,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ManagementRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RoleAssigneeType,

        [Parameter()]
        [System.Object]
        $CustomRecipientWriteScope,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $RecipientWriteScope,

        [Parameter()]
        [System.Object]
        $WritableRecipient,

        [Parameter()]
        [System.Object]
        $ConfigWriteScope,

        [Parameter()]
        [System.Object]
        $RoleAssignee,

        [Parameter()]
        [System.Object]
        $Delegating,

        [Parameter()]
        [System.Object]
        $Exclusive,

        [Parameter()]
        [System.Object]
        $AssignmentMethod,

        [Parameter()]
        [System.Object]
        $Role,

        [Parameter()]
        [System.Object]
        $RecipientAdministrativeUnitScope,

        [Parameter()]
        [System.Object]
        $ExclusiveRecipientWriteScope,

        [Parameter()]
        [System.Object]
        $RecipientOrganizationalUnitScope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GetEffectiveUsers,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ManagementRoleEntry
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Type,

        [Parameter()]
        [System.Object]
        $PSSnapinName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Parameters,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ManagementScope
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Exclusive,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Orphan,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MessageCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MessageClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeLocales,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MessageRecallResult
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $NetworkMessageId,

        [Parameter()]
        [System.Object]
        $Recipients,

        [Parameter()]
        [System.Object]
        $Sender,

        [Parameter()]
        [System.Object]
        $RequestTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MessageTrace
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $FromIP,

        [Parameter()]
        [System.Object]
        $MessageTraceId,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $SenderAddress,

        [Parameter()]
        [System.Object]
        $ToIP,

        [Parameter()]
        [System.Object]
        $RecipientAddress,

        [Parameter()]
        [System.Object]
        $Status,

        [Parameter()]
        [System.Object]
        $MessageId,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MessageTraceDetail
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $Event,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $MessageTraceId,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $SenderAddress,

        [Parameter()]
        [System.Object]
        $RecipientAddress,

        [Parameter()]
        [System.Object]
        $MessageId,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MessageTrackingReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RecipientPathFilter,

        [Parameter()]
        [System.Object]
        $ReportTemplate,

        [Parameter()]
        [System.Object]
        $Recipients,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BypassDelegateChecking,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DoNotResolve,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $Status,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MigrationBatch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DiagnosticInfo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeReport,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Partition,

        [Parameter()]
        [System.Object]
        $Status,

        [Parameter()]
        [System.Object]
        $Endpoint,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MigrationConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Partition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MigrationEndpoint
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DiagnosticInfo,

        [Parameter()]
        [System.Object]
        $Type,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Partition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MigrationStatistics
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DiagnosticInfo,

        [Parameter()]
        [System.Object]
        $Partition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MigrationUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $MailboxGuid,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $BatchId,

        [Parameter()]
        [System.Object]
        $Partition,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $Status,

        [Parameter()]
        [System.Object]
        $StatusSummary,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MigrationUserStatistics
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DiagnosticInfo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeSkippedItems,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeReport,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Partition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipSubscription,

        [Parameter()]
        [System.Object]
        $LimitSkippedItemsTo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MobileDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OWAforDevices,

        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UniversalOutlook,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ActiveSync,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RestApi,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MobileDeviceDashboardSummaryReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $DeviceType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MobileDeviceMailboxPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MobileDeviceStatistics
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ShowRecoveryPassword,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OWAforDevices,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UniversalOutlook,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GetMailboxLog,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ActiveSync,

        [Parameter()]
        [System.Object]
        $NotificationEmailAddresses,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RestApi,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MoveRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Flags,

        [Parameter()]
        [System.Object]
        $BatchName,

        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Object]
        $MoveStatus,

        [Parameter()]
        [System.Object]
        $ProxyToMailbox,

        [Parameter()]
        [System.Object]
        $Suspend,

        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $RemoteHostName,

        [Parameter()]
        [System.Object]
        $SuspendWhenReadyToComplete,

        [Parameter()]
        [System.Object]
        $Offline,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MoveRequestStatistics
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeReport,

        [Parameter()]
        [System.Object]
        $DiagnosticInfo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReportOnly,

        [Parameter()]
        [System.Object]
        $ProxyToMailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DiagnosticOnly,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MxRecordReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MxRecordsReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-Notification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Summary,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $ProcessType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-O365ClientBrowserDetailReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $WindowsLiveID,

        [Parameter()]
        [System.Object]
        $Browser,

        [Parameter()]
        [System.Object]
        $BrowserVersion,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-O365ClientBrowserReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $Browser,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-O365ClientOSDetailReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $OperatingSystem,

        [Parameter()]
        [System.Object]
        $OperatingSystemVersion,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $WindowsLiveID,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-O365ClientOSReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $OS,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-OMEConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-OMEMessageStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $MessageId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-OnlineMeetingConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-OnPremisesOrganization
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-OrganizationalUnit
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SearchText,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SingleNodeOnly,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeContainers,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-OrganizationConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-OrganizationRelationship
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-OutboundConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $IncludeTestModeConnectors,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $IsTransportRuleScoped,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-OutboundConnectorReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-OutlookProtectionRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-OwaMailboxPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-PartnerApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-PartnerCustomerUserReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-PerimeterConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-PerimeterMessageTrace
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $End,

        [Parameter()]
        [System.Object]
        $Start,

        [Parameter()]
        [System.Object]
        $Recipient,

        [Parameter()]
        [System.Object]
        $Sender,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-PhishFilterPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Detailed,

        [Parameter()]
        [System.Object]
        $DecisionSetBy,

        [Parameter()]
        [System.Object]
        $SpoofType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WidgetData,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SpoofAllowBlockList,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $AllowedToSpoof,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-Place
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-PolicyConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-PolicyTipConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Locale,

        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Original,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-PopSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeReport,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $AggregationType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-PublicFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GetChildren,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LostAndFound,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ResidentFolders,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recurse,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-PublicFolderClientPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $User,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-PublicFolderItemStatistics
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-PublicFolderMailboxDiagnostics
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeHierarchyInfo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeDumpsterInfo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-PublicFolderMailboxMigrationRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $BatchName,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Suspend,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $Status,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-PublicFolderMailboxMigrationRequestStatistics
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeReport,

        [Parameter()]
        [System.Object]
        $DiagnosticInfo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReportOnly,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-PublicFolderStatistics
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-QuarantineMessage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $MessageId,

        [Parameter()]
        [System.Object]
        $PolicyTypes,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Reported,

        [Parameter()]
        [System.Object]
        $Direction,

        [Parameter()]
        [System.Object]
        $QuarantineTypes,

        [Parameter()]
        [System.Object]
        $EndReceivedDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $RecipientAddress,

        [Parameter()]
        [System.Object]
        $StartExpiresDate,

        [Parameter()]
        [System.Object]
        $SenderAddress,

        [Parameter()]
        [System.Object]
        $Subject,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $StartReceivedDate,

        [Parameter()]
        [System.Object]
        $Type,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $MyItems,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $EndExpiresDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-QuarantineMessageHeader
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-RbacDiagnosticInfo
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $UserName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-Recipient
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $RecipientPreviewFilter,

        [Parameter()]
        [System.Object]
        $Anr,

        [Parameter()]
        [System.Object]
        $BookmarkDisplayName,

        [Parameter()]
        [System.Object]
        $Capabilities,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $RecipientTypeDetails,

        [Parameter()]
        [System.Object]
        $Properties,

        [Parameter()]
        [System.Object]
        $PropertySet,

        [Parameter()]
        [System.Object]
        $AuthenticationType,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeSoftDeletedRecipients,

        [Parameter()]
        [System.Object]
        $RecipientType,

        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Object]
        $IncludeBookmarkObject,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-RecipientPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReadFromDomainController,

        [Parameter()]
        [System.Object]
        $AccessRights,

        [Parameter()]
        [System.Object]
        $Trustee,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-RecipientStatisticsReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-RemoteDomain
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ReportExecutionInstance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ScheduleId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ReportSchedule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeDLP,

        [Parameter()]
        [System.Object]
        $ScheduleId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ReportScheduleList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeDLP,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ReportSubmissionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ResourceConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-RetentionEvent
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllStatus,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-RetentionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-RetentionPolicyTag
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OptionalInMailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeSystemTags,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Types,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-RMSTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Type,

        [Parameter()]
        [System.Object]
        $TrustedPublishingDomain,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-RMSTrustedPublishingDomain
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Default,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-RoleAssignmentPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-RoleGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ShowPartnerLinked,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-RoleGroupMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SafeAttachmentPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SafeAttachmentRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $State,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SafeLinksAggregateReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $AppNameList,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Object]
        $SummarizeBy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SafeLinksDetailReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $AppNameList,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $RecipientAddress,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SafeLinksPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SafeLinksRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $State,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SCInsights
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ScorecardClientDeviceReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $Category,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ScorecardClientOSReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $Category,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ScorecardClientOutlookReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $Category,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ScorecardMetricsReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SearchDocumentFormat
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SecurityPrincipal
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $Types,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RoleGroupAssignable,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SendAddress
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AddressId,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SenderPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Recipients,

        [Parameter()]
        [System.Object]
        $Sender,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SensitivityLabelActivityDetailsReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Source,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $Sender,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Object]
        $MIPLabelName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SensitivityLabelActivityReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Source,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $AggregateBy,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Object]
        $MIPLabelName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ServiceDeliveryReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $Recipient,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ServiceStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $MaintenanceWindowDays,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SharingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SiteMailbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReadFromDomainController,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BypassOwnerCheck,

        [Parameter()]
        [System.Object]
        $Anr,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SiteMailboxDiagnostics
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SendMeEmail,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BypassOwnerCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SiteMailboxProvisioningPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SmimeConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SPOActiveUserReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $ReportType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SpoofMailReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Direction,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SPOSkyDriveProDeployedReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $ReportType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SPOSkyDriveProStorageReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $ReportType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SPOTeamSiteDeployedReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $ReportType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SPOTeamSiteStorageReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $ReportType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SPOTenantStorageMetricReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $ReportType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-StaleMailboxDetailReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-StaleMailboxReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-Subscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeReport,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $SubscriptionType,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $AggregationType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SupervisoryReviewActivity
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PolicyId,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SupervisoryReviewPolicyReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $Policies,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SupervisoryReviewPolicyV2
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SupervisoryReviewReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $Policies,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $Reviewers,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SupervisoryReviewRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Policy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SweepRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Provider,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BypassScopeCheck,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SyncConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SyncRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $WorkloadType,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $SyncProtocol,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SyncRequestStatistics
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeReport,

        [Parameter()]
        [System.Object]
        $DiagnosticInfo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReportOnly,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-TenantAnalyticsConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-TextMessagingAccount
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReadFromDomainController,

        [Parameter()]
        [System.Object]
        $Credential,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ToolInformation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Version,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-TransportConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-TransportRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DlpPolicy,

        [Parameter()]
        [System.Object]
        $ExcludeConditionActionDetails,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $State,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-TransportRuleAction
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-TransportRulePredicate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-UMAutoAttendant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $UMDialPlan,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-UMCallAnsweringRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-UMCallDataRecord
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-UMCallSummaryReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $GroupBy,

        [Parameter()]
        [System.Object]
        $UMIPGateway,

        [Parameter()]
        [System.Object]
        $UMDialPlan,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-UMDialPlan
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-UMHuntGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $UMDialPlan,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-UMIPGateway
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeSimulator,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-UMMailbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $Anr,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-UMMailboxConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-UMMailboxPIN
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Credential,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreErrors,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-UMMailboxPlan
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Object]
        $Credential,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreDefaultScope,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-UMMailboxPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $UMDialPlan,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-UMPhoneSession
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-UnifiedAuditSetting
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-UnifiedGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeSoftDeletedGroups,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeAllProperties,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $Anr,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-UnifiedGroupLinks
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $LinkType,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-UrlTrace
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Workloads,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $ClickId,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $RecipientAddress,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Object]
        $UrlOrDomain,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-User
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PublicFolder,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsVIP,

        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $RecipientTypeDetails,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $Anr,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-UserAnalyticsConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-UserPhoto
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReadFromDomainController,

        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GroupMailbox,

        [Parameter()]
        [System.Object]
        $Credential,

        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreDefaultScope,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $PhotoType,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Preview,

        [Parameter()]
        [System.Object]
        $Anr,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Import-ContactList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DateCultureName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CSV,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $CSVData,

        [Parameter()]
        [System.Object]
        $CSVStream,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Import-DlpPolicyCollection
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $FileData,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Import-RecipientDataProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Picture,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SpokenName,

        [Parameter()]
        [System.Object]
        $FileData,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Import-RMSTrustedPublishingDomain
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Password,

        [Parameter()]
        [System.Object]
        $ExtranetCertificationUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RMSOnline,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Default,

        [Parameter()]
        [System.Object]
        $ExtranetLicensingUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RefreshTemplates,

        [Parameter()]
        [System.Object]
        $IntranetLicensingUrl,

        [Parameter()]
        [System.Object]
        $IntranetCertificationUrl,

        [Parameter()]
        [System.Object]
        $FileData,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Import-TransportRuleCollection
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $FileData,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Import-UMPrompt
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PromptFileData,

        [Parameter()]
        [System.Object]
        $UMDialPlan,

        [Parameter()]
        [System.Object]
        $PromptFileName,

        [Parameter()]
        [System.Object]
        $UMAutoAttendant,

        [Parameter()]
        [System.Object]
        $PromptFileStream,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Invoke-ShadowCalendarSync
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $CalendarId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $MaxEventsToSync,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ActiveSyncDeviceAccessRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $QueryString,

        [Parameter()]
        [System.Object]
        $Characteristic,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AccessLevel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ActiveSyncMailboxPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AllowUnsignedApplications,

        [Parameter()]
        [System.Object]
        $AllowUnsignedInstallationPackages,

        [Parameter()]
        [System.Object]
        $MaxInactivityTimeDeviceLock,

        [Parameter()]
        [System.Object]
        $AllowExternalDeviceManagement,

        [Parameter()]
        [System.Object]
        $RequireDeviceEncryption,

        [Parameter()]
        [System.Object]
        $AllowStorageCard,

        [Parameter()]
        [System.Object]
        $AllowIrDA,

        [Parameter()]
        [System.Object]
        $AllowNonProvisionableDevices,

        [Parameter()]
        [System.Object]
        $UnapprovedInROMApplicationList,

        [Parameter()]
        [System.Object]
        $DevicePasswordEnabled,

        [Parameter()]
        [System.Object]
        $RequireEncryptedSMIMEMessages,

        [Parameter()]
        [System.Object]
        $DevicePasswordHistory,

        [Parameter()]
        [System.Object]
        $AllowInternetSharing,

        [Parameter()]
        [System.Object]
        $MinDevicePasswordComplexCharacters,

        [Parameter()]
        [System.Object]
        $RequireSignedSMIMEAlgorithm,

        [Parameter()]
        [System.Object]
        $MaxEmailHTMLBodyTruncationSize,

        [Parameter()]
        [System.Object]
        $DevicePasswordExpiration,

        [Parameter()]
        [System.Object]
        $UNCAccessEnabled,

        [Parameter()]
        [System.Object]
        $AllowCamera,

        [Parameter()]
        [System.Object]
        $AllowTextMessaging,

        [Parameter()]
        [System.Object]
        $MaxDevicePasswordFailedAttempts,

        [Parameter()]
        [System.Object]
        $AllowBrowser,

        [Parameter()]
        [System.Object]
        $MaxEmailAgeFilter,

        [Parameter()]
        [System.Object]
        $RequireManualSyncWhenRoaming,

        [Parameter()]
        [System.Object]
        $AllowSMIMEEncryptionAlgorithmNegotiation,

        [Parameter()]
        [System.Object]
        $DeviceEncryptionEnabled,

        [Parameter()]
        [System.Object]
        $MaxEmailBodyTruncationSize,

        [Parameter()]
        [System.Object]
        $AllowBluetooth,

        [Parameter()]
        [System.Object]
        $RequireEncryptionSMIMEAlgorithm,

        [Parameter()]
        [System.Object]
        $DevicePolicyRefreshInterval,

        [Parameter()]
        [System.Object]
        $AllowMobileOTAUpdate,

        [Parameter()]
        [System.Object]
        $MaxAttachmentSize,

        [Parameter()]
        [System.Object]
        $AllowConsumerEmail,

        [Parameter()]
        [System.Object]
        $AllowDesktopSync,

        [Parameter()]
        [System.Object]
        $PasswordRecoveryEnabled,

        [Parameter()]
        [System.Object]
        $AlphanumericDevicePasswordRequired,

        [Parameter()]
        [System.Object]
        $RequireStorageCardEncryption,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AllowSMIMESoftCerts,

        [Parameter()]
        [System.Object]
        $AllowRemoteDesktop,

        [Parameter()]
        [System.Object]
        $AllowSimpleDevicePassword,

        [Parameter()]
        [System.Object]
        $AttachmentsEnabled,

        [Parameter()]
        [System.Object]
        $MaxCalendarAgeFilter,

        [Parameter()]
        [System.Object]
        $AllowWiFi,

        [Parameter()]
        [System.Object]
        $AllowApplePushNotifications,

        [Parameter()]
        [System.Object]
        $AllowPOPIMAPEmail,

        [Parameter()]
        [System.Object]
        $IsDefault,

        [Parameter()]
        [System.Object]
        $IsDefaultPolicy,

        [Parameter()]
        [System.Object]
        $ApprovedApplicationList,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $WSSAccessEnabled,

        [Parameter()]
        [System.Object]
        $RequireSignedSMIMEMessages,

        [Parameter()]
        [System.Object]
        $AllowHTMLEmail,

        [Parameter()]
        [System.Object]
        $MinDevicePasswordLength,

        [Parameter()]
        [System.Object]
        $IrmEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-AdminAuditLogSearch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ObjectIds,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExternalAccess,

        [Parameter()]
        [System.Object]
        $StatusMailRecipients,

        [Parameter()]
        [System.Object]
        $Parameters,

        [Parameter()]
        [System.Object]
        $Cmdlets,

        [Parameter()]
        [System.Object]
        $UserIds,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-AntiPhishPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EnableMailboxIntelligenceProtection,

        [Parameter()]
        [System.Object]
        $PhishThresholdLevel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $EnableTargetedDomainsProtection,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $EnableViaTag,

        [Parameter()]
        [System.Object]
        $MailboxIntelligenceProtectionAction,

        [Parameter()]
        [System.Object]
        $TargetedDomainsToProtect,

        [Parameter()]
        [System.Object]
        $EnableOrganizationDomainsProtection,

        [Parameter()]
        [System.Object]
        $EnableSpoofIntelligence,

        [Parameter()]
        [System.Object]
        $EnableSimilarUsersSafetyTips,

        [Parameter()]
        [System.Object]
        $ExcludedDomains,

        [Parameter()]
        [System.Object]
        $EnableAntiSpoofEnforcement,

        [Parameter()]
        [System.Object]
        $TargetedDomainActionRecipients,

        [Parameter()]
        [System.Object]
        $EnableMailboxIntelligence,

        [Parameter()]
        [System.Object]
        $SimilarUsersSafetyTipsCustomText,

        [Parameter()]
        [System.Object]
        $ImpersonationProtectionState,

        [Parameter()]
        [System.Object]
        $TargetedDomainProtectionAction,

        [Parameter()]
        [System.Object]
        $AdminDisplayName,

        [Parameter()]
        [System.Object]
        $AuthenticationFailAction,

        [Parameter()]
        [System.Object]
        $TargetedUsersToProtect,

        [Parameter()]
        [System.Object]
        $TargetedUserProtectionAction,

        [Parameter()]
        [System.Object]
        $RecommendedPolicyType,

        [Parameter()]
        [System.Object]
        $MailboxIntelligenceProtectionActionRecipients,

        [Parameter()]
        [System.Object]
        $UnusualCharactersSafetyTipsCustomText,

        [Parameter()]
        [System.Object]
        $EnableSimilarDomainsSafetyTips,

        [Parameter()]
        [System.Object]
        $EnableTargetedUserProtection,

        [Parameter()]
        [System.Object]
        $EnableUnauthenticatedSender,

        [Parameter()]
        [System.Object]
        $PolicyTag,

        [Parameter()]
        [System.Object]
        $EnableUnusualCharactersSafetyTips,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $TargetedUserActionRecipients,

        [Parameter()]
        [System.Object]
        $ExcludedSenders,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-AntiPhishRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $SentToMemberOf,

        [Parameter()]
        [System.Object]
        $AntiPhishPolicy,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $Comments,

        [Parameter()]
        [System.Object]
        $RecipientDomainIs,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientDomainIs,

        [Parameter()]
        [System.Object]
        $ExceptIfSentTo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExceptIfSentToMemberOf,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-App
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Etoken,

        [Parameter()]
        [System.Object]
        $FileStream,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $Url,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $MarketplaceServicesUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PrivateCatalog,

        [Parameter()]
        [System.Object]
        $MarketplaceCorrelationID,

        [Parameter()]
        [System.Object]
        $DefaultStateForUser,

        [Parameter()]
        [System.Object]
        $MarketplaceQueryMarket,

        [Parameter()]
        [System.Object]
        $MarketplaceUserProfileType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DownloadOnly,

        [Parameter()]
        [System.Object]
        $ProvidedTo,

        [Parameter()]
        [System.Object]
        $UserList,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OrganizationApp,

        [Parameter()]
        [System.Object]
        $MarketplaceAssetID,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $FileData,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowReadWriteMailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ApplicationAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $AppId,

        [Parameter()]
        [System.Object]
        $PolicyScopeGroupId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AccessRight,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ATPProtectionPolicyRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $SentToMemberOf,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $Comments,

        [Parameter()]
        [System.Object]
        $RecipientDomainIs,

        [Parameter()]
        [System.Object]
        $SafeAttachmentPolicy,

        [Parameter()]
        [System.Object]
        $SafeLinksPolicy,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientDomainIs,

        [Parameter()]
        [System.Object]
        $ExceptIfSentTo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExceptIfSentToMemberOf,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-AuthenticationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthRpc,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthPop,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthSmtp,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthMapi,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthImap,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthAutodiscover,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthPowershell,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthActiveSync,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthOfflineAddressBook,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthReportingWebServices,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthOutlookService,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthWebServices,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-AvailabilityConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $OrgWideAccount,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ClassificationRuleCollection
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $FileData,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ClientAccessRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $UsernameMatchesAnyOfPatterns,

        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $AnyOfClientIPAddressesOrRanges,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $ExceptAnyOfClientIPAddressesOrRanges,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $UserRecipientFilter,

        [Parameter()]
        [System.Object]
        $ExceptAnyOfProtocols,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $ExceptUsernameMatchesAnyOfPatterns,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AnyOfAuthenticationTypes,

        [Parameter()]
        [System.Object]
        $AnyOfProtocols,

        [Parameter()]
        [System.Object]
        $ExceptAnyOfAuthenticationTypes,

        [Parameter()]
        [System.Object]
        $Scope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CompliancePolicySyncNotification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Workload,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $SyncChangeInfos,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $FullSync,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SyncNow,

        [Parameter()]
        [System.Object]
        $SyncSvcUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ConnectSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RequestToken,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $OAuthVerifier,

        [Parameter()]
        [System.Object]
        $RequestSecret,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LinkedIn,

        [Parameter()]
        [System.Object]
        $RedirectUri,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-DataClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Locale,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ClassificationRuleCollectionIdentity,

        [Parameter()]
        [System.Object]
        $Fingerprints,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-DataEncryptionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $AzureKeyIDs,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-DistributionGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ModeratedBy,

        [Parameter()]
        [System.Object]
        $RequireSenderAuthenticationEnabled,

        [Parameter()]
        [System.Object]
        $ModerationEnabled,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $MemberDepartRestriction,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreNamingPolicy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RoomList,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $HiddenGroupMembershipEnabled,

        [Parameter()]
        [System.Object]
        $BypassNestedModerationEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CopyOwnerToMember,

        [Parameter()]
        [System.Object]
        $Members,

        [Parameter()]
        [System.Object]
        $MemberJoinRestriction,

        [Parameter()]
        [System.Object]
        $Type,

        [Parameter()]
        [System.Object]
        $Alias,

        [Parameter()]
        [System.Object]
        $ManagedBy,

        [Parameter()]
        [System.Object]
        $PrimarySmtpAddress,

        [Parameter()]
        [System.Object]
        $SendModerationNotifications,

        [Parameter()]
        [System.Object]
        $Notes,

        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-DkimSigningConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AdminDisplayName,

        [Parameter()]
        [System.Object]
        $BodyCanonicalization,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $KeySize,

        [Parameter()]
        [System.Object]
        $HeaderCanonicalization,

        [Parameter()]
        [System.Object]
        $DomainName,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-DlpPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $TemplateData,

        [Parameter()]
        [System.Object]
        $Parameters,

        [Parameter()]
        [System.Object]
        $Template,

        [Parameter()]
        [System.Object]
        $State,

        [Parameter()]
        [System.Object]
        $Mode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-DynamicDistributionGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute5,

        [Parameter()]
        [System.Object]
        $ModeratedBy,

        [Parameter()]
        [System.Object]
        $ModerationEnabled,

        [Parameter()]
        [System.Object]
        $RecipientFilter,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute8,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute10,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute9,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute2,

        [Parameter()]
        [System.Object]
        $IncludedRecipients,

        [Parameter()]
        [System.Object]
        $ConditionalCompany,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute6,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute3,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute13,

        [Parameter()]
        [System.Object]
        $RecipientContainer,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute12,

        [Parameter()]
        [System.Object]
        $ConditionalDepartment,

        [Parameter()]
        [System.Object]
        $ConditionalStateOrProvince,

        [Parameter()]
        [System.Object]
        $DirectMembershipOnly,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute7,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute14,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute4,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute1,

        [Parameter()]
        [System.Object]
        $Alias,

        [Parameter()]
        [System.Object]
        $PrimarySmtpAddress,

        [Parameter()]
        [System.Object]
        $SendModerationNotifications,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute15,

        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute11,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ElevatedAccessApprovalPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RoleGroup,

        [Parameter()]
        [System.Object]
        $Task,

        [Parameter()]
        [System.Object]
        $ApprovalType,

        [Parameter()]
        [System.Object]
        $ApproverGroup,

        [Parameter()]
        [System.Object]
        $Role,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ElevatedAccessRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RoleGroup,

        [Parameter()]
        [System.Object]
        $ExternalIdentity,

        [Parameter()]
        [System.Object]
        $DurationHours,

        [Parameter()]
        [System.Object]
        $Reason,

        [Parameter()]
        [System.Object]
        $Task,

        [Parameter()]
        [System.Object]
        $RequestContext,

        [Parameter()]
        [System.Object]
        $Role,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-EmailAddressPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $EnabledEmailAddressTemplates,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $EnabledPrimarySMTPAddressTemplate,

        [Parameter()]
        [System.Object]
        $ManagedByFilter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeUnifiedGroupRecipients,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-EOPProtectionPolicyRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $SentToMemberOf,

        [Parameter()]
        [System.Object]
        $AntiPhishPolicy,

        [Parameter()]
        [System.Object]
        $HostedContentFilterPolicy,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $Comments,

        [Parameter()]
        [System.Object]
        $RecipientDomainIs,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientDomainIs,

        [Parameter()]
        [System.Object]
        $MalwareFilterPolicy,

        [Parameter()]
        [System.Object]
        $ExceptIfSentTo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExceptIfSentToMemberOf,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-Fingerprint
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $FileData,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-HostedConnectionFilterPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ConfigurationXmlRaw,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $AdminDisplayName,

        [Parameter()]
        [System.Object]
        $EnableSafeList,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $IPBlockList,

        [Parameter()]
        [System.Object]
        $IPAllowList,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-HostedContentFilterPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $HighConfidenceSpamAction,

        [Parameter()]
        [System.Object]
        $TestModeAction,

        [Parameter()]
        [System.Object]
        $QuarantineRetentionPeriod,

        [Parameter()]
        [System.Object]
        $MarkAsSpamWebBugsInHtml,

        [Parameter()]
        [System.Object]
        $EndUserSpamNotificationCustomFromName,

        [Parameter()]
        [System.Object]
        $MarkAsSpamFromAddressAuthFail,

        [Parameter()]
        [System.Object]
        $EndUserSpamNotificationCustomFromAddress,

        [Parameter()]
        [System.Object]
        $IncreaseScoreWithRedirectToOtherPort,

        [Parameter()]
        [System.Object]
        $BulkThreshold,

        [Parameter()]
        [System.Object]
        $EnableLanguageBlockList,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $EndUserSpamNotificationCustomSubject,

        [Parameter()]
        [System.Object]
        $MarkAsSpamSensitiveWordList,

        [Parameter()]
        [System.Object]
        $MarkAsSpamFormTagsInHtml,

        [Parameter()]
        [System.Object]
        $MarkAsSpamNdrBackscatter,

        [Parameter()]
        [System.Object]
        $AddXHeaderValue,

        [Parameter()]
        [System.Object]
        $BulkSpamAction,

        [Parameter()]
        [System.Object]
        $ModifySubjectValue,

        [Parameter()]
        [System.Object]
        $IncreaseScoreWithImageLinks,

        [Parameter()]
        [System.Object]
        $MarkAsSpamEmptyMessages,

        [Parameter()]
        [System.Object]
        $MarkAsSpamSpfRecordHardFail,

        [Parameter()]
        [System.Object]
        $PhishSpamAction,

        [Parameter()]
        [System.Object]
        $HighConfidencePhishAction,

        [Parameter()]
        [System.Object]
        $MarkAsSpamJavaScriptInHtml,

        [Parameter()]
        [System.Object]
        $EnableRegionBlockList,

        [Parameter()]
        [System.Object]
        $EnableEndUserSpamNotifications,

        [Parameter()]
        [System.Object]
        $RedirectToRecipients,

        [Parameter()]
        [System.Object]
        $AllowedSenderDomains,

        [Parameter()]
        [System.Object]
        $MarkAsSpamObjectTagsInHtml,

        [Parameter()]
        [System.Object]
        $MarkAsSpamFramesInHtml,

        [Parameter()]
        [System.Object]
        $TestModeBccToRecipients,

        [Parameter()]
        [System.Object]
        $MarkAsSpamEmbedTagsInHtml,

        [Parameter()]
        [System.Object]
        $EndUserSpamNotificationLanguage,

        [Parameter()]
        [System.Object]
        $EndUserSpamNotificationLimit,

        [Parameter()]
        [System.Object]
        $SpamAction,

        [Parameter()]
        [System.Object]
        $InlineSafetyTipsEnabled,

        [Parameter()]
        [System.Object]
        $RecommendedPolicyType,

        [Parameter()]
        [System.Object]
        $SpamZapEnabled,

        [Parameter()]
        [System.Object]
        $PhishZapEnabled,

        [Parameter()]
        [System.Object]
        $BlockedSenders,

        [Parameter()]
        [System.Object]
        $AllowedSenders,

        [Parameter()]
        [System.Object]
        $LanguageBlockList,

        [Parameter()]
        [System.Object]
        $RegionBlockList,

        [Parameter()]
        [System.Object]
        $IncreaseScoreWithBizOrInfoUrls,

        [Parameter()]
        [System.Object]
        $AdminDisplayName,

        [Parameter()]
        [System.Object]
        $EndUserSpamNotificationFrequency,

        [Parameter()]
        [System.Object]
        $IncreaseScoreWithNumericIps,

        [Parameter()]
        [System.Object]
        $BlockedSenderDomains,

        [Parameter()]
        [System.Object]
        $MarkAsSpamBulkMail,

        [Parameter()]
        [System.Object]
        $DownloadLink,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-HostedContentFilterRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $SentToMemberOf,

        [Parameter()]
        [System.Object]
        $HostedContentFilterPolicy,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $Comments,

        [Parameter()]
        [System.Object]
        $RecipientDomainIs,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientDomainIs,

        [Parameter()]
        [System.Object]
        $ExceptIfSentTo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExceptIfSentToMemberOf,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-HostedOutboundSpamFilterPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RecommendedPolicyType,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $AdminDisplayName,

        [Parameter()]
        [System.Object]
        $BccSuspiciousOutboundAdditionalRecipients,

        [Parameter()]
        [System.Object]
        $NotifyOutboundSpamRecipients,

        [Parameter()]
        [System.Object]
        $RecipientLimitInternalPerHour,

        [Parameter()]
        [System.Object]
        $RecipientLimitPerDay,

        [Parameter()]
        [System.Object]
        $ActionWhenThresholdReached,

        [Parameter()]
        [System.Object]
        $AutoForwardingMode,

        [Parameter()]
        [System.Object]
        $NotifyOutboundSpam,

        [Parameter()]
        [System.Object]
        $BccSuspiciousOutboundMail,

        [Parameter()]
        [System.Object]
        $RecipientLimitExternalPerHour,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-HostedOutboundSpamFilterRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $ExceptIfFrom,

        [Parameter()]
        [System.Object]
        $ExceptIfSenderDomainIs,

        [Parameter()]
        [System.Object]
        $Comments,

        [Parameter()]
        [System.Object]
        $FromMemberOf,

        [Parameter()]
        [System.Object]
        $SenderDomainIs,

        [Parameter()]
        [System.Object]
        $HostedOutboundSpamFilterPolicy,

        [Parameter()]
        [System.Object]
        $ExceptIfFromMemberOf,

        [Parameter()]
        [System.Object]
        $From,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-InboundConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RestrictDomainsToIPAddresses,

        [Parameter()]
        [System.Object]
        $CloudServicesMailEnabled,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $EFSkipMailGateway,

        [Parameter()]
        [System.Object]
        $EFTestMode,

        [Parameter()]
        [System.Object]
        $TlsSenderCertificateName,

        [Parameter()]
        [System.Object]
        $ScanAndDropRecipients,

        [Parameter()]
        [System.Object]
        $AssociatedAcceptedDomains,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $RequireTls,

        [Parameter()]
        [System.Object]
        $SenderDomains,

        [Parameter()]
        [System.Object]
        $SenderIPAddresses,

        [Parameter()]
        [System.Object]
        $EFSkipLastIP,

        [Parameter()]
        [System.Object]
        $EFUsers,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ConnectorType,

        [Parameter()]
        [System.Object]
        $RestrictDomainsToCertificate,

        [Parameter()]
        [System.Object]
        $EFSkipIPs,

        [Parameter()]
        [System.Object]
        $TreatMessagesAsInternal,

        [Parameter()]
        [System.Object]
        $ConnectorSource,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-InboxRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ExceptIfMyNameNotInToBox,

        [Parameter()]
        [System.Object]
        $ExceptIfMyNameInToOrCcBox,

        [Parameter()]
        [System.Object]
        $PinMessage,

        [Parameter()]
        [System.Object]
        $WithinSizeRangeMaximum,

        [Parameter()]
        [System.Object]
        $ReceivedBeforeDate,

        [Parameter()]
        [System.Object]
        $ExceptIfFromAddressContainsWords,

        [Parameter()]
        [System.Object]
        $HasClassification,

        [Parameter()]
        [System.Object]
        $ExceptIfFromSubscription,

        [Parameter()]
        [System.Object]
        $ExceptIfWithinSizeRangeMaximum,

        [Parameter()]
        [System.Object]
        $WithinSizeRangeMinimum,

        [Parameter()]
        [System.Object]
        $MyNameInToOrCcBox,

        [Parameter()]
        [System.Object]
        $ExceptIfReceivedBeforeDate,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $ExceptIfFrom,

        [Parameter()]
        [System.Object]
        $RedirectTo,

        [Parameter()]
        [System.Object]
        $ReceivedAfterDate,

        [Parameter()]
        [System.Object]
        $ForwardTo,

        [Parameter()]
        [System.Object]
        $ExceptIfReceivedAfterDate,

        [Parameter()]
        [System.Object]
        $ExceptIfWithImportance,

        [Parameter()]
        [System.Object]
        $HeaderContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfSentOnlyToMe,

        [Parameter()]
        [System.Object]
        $ExceptIfSubjectOrBodyContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfMessageTypeMatches,

        [Parameter()]
        [System.Object]
        $ExceptIfHasAttachment,

        [Parameter()]
        [System.Object]
        $DeleteMessage,

        [Parameter()]
        [System.Object]
        $ExceptIfMyNameInToBox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AlwaysDeleteOutlookRulesBlob,

        [Parameter()]
        [System.Object]
        $From,

        [Parameter()]
        [System.Object]
        $RecipientAddressContainsWords,

        [Parameter()]
        [System.Object]
        $FlaggedForAction,

        [Parameter()]
        [System.Object]
        $WithSensitivity,

        [Parameter()]
        [System.Object]
        $CopyToFolder,

        [Parameter()]
        [System.Object]
        $FromMessageId,

        [Parameter()]
        [System.Object]
        $ExceptIfSubjectContainsWords,

        [Parameter()]
        [System.Object]
        $MarkImportance,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $ApplyCategory,

        [Parameter()]
        [System.Object]
        $SubjectContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfHeaderContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientAddressContainsWords,

        [Parameter()]
        [System.Object]
        $HasAttachment,

        [Parameter()]
        [System.Object]
        $SubjectOrBodyContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfFlaggedForAction,

        [Parameter()]
        [System.Object]
        $FromSubscription,

        [Parameter()]
        [System.Object]
        $BodyContainsWords,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $StopProcessingRules,

        [Parameter()]
        [System.Object]
        $DeleteSystemCategory,

        [Parameter()]
        [System.Object]
        $ExceptIfWithinSizeRangeMinimum,

        [Parameter()]
        [System.Object]
        $MessageTypeMatches,

        [Parameter()]
        [System.Object]
        $ApplySystemCategory,

        [Parameter()]
        [System.Object]
        $SendTextMessageNotificationTo,

        [Parameter()]
        [System.Object]
        $MarkAsRead,

        [Parameter()]
        [System.Object]
        $MoveToFolder,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $MyNameInCcBox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ValidateOnly,

        [Parameter()]
        [System.Object]
        $WithImportance,

        [Parameter()]
        [System.Object]
        $MyNameInToBox,

        [Parameter()]
        [System.Object]
        $ExceptIfSentTo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $SentOnlyToMe,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $ForwardAsAttachmentTo,

        [Parameter()]
        [System.Object]
        $ExceptIfBodyContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfMyNameInCcBox,

        [Parameter()]
        [System.Object]
        $FromAddressContainsWords,

        [Parameter()]
        [System.Object]
        $MyNameNotInToBox,

        [Parameter()]
        [System.Object]
        $ExceptIfWithSensitivity,

        [Parameter()]
        [System.Object]
        $ExceptIfHasClassification,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-IntraOrganizationConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $TargetAddressDomains,

        [Parameter()]
        [System.Object]
        $DiscoveryEndpoint,

        [Parameter()]
        [System.Object]
        $TargetSharingEpr,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-JournalRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Scope,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $JournalEmailAddress,

        [Parameter()]
        [System.Object]
        $Recipient,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-Mailbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $MailboxRegion,

        [Parameter()]
        [System.Object]
        $ModeratedBy,

        [Parameter()]
        [System.Object]
        $ModerationEnabled,

        [Parameter()]
        [System.Object]
        $Office,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $Password,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $TargetAllMDBs,

        [Parameter()]
        [System.Object]
        $RemovedMailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PublicFolder,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $LastName,

        [Parameter()]
        [System.Object]
        $EnableRoomMailboxAccount,

        [Parameter()]
        [System.Object]
        $RoleAssignmentPolicy,

        [Parameter()]
        [System.Object]
        $ResourceCapacity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Archive,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Equipment,

        [Parameter()]
        [System.Object]
        $ImmutableId,

        [Parameter()]
        [System.Object]
        $RoomMailboxPassword,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Shared,

        [Parameter()]
        [System.Object]
        $IsExcludedFromServingHierarchy,

        [Parameter()]
        [System.Object]
        $MailboxPlan,

        [Parameter()]
        [System.Object]
        $MicrosoftOnlineServicesID,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Migration,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Room,

        [Parameter()]
        [System.Object]
        $ResetPasswordOnNextLogon,

        [Parameter()]
        [System.Object]
        $Initials,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $FederatedIdentity,

        [Parameter()]
        [System.Object]
        $ActiveSyncMailboxPolicy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $HoldForMigration,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Discovery,

        [Parameter()]
        [System.Object]
        $Alias,

        [Parameter()]
        [System.Object]
        $FirstName,

        [Parameter()]
        [System.Object]
        $Phone,

        [Parameter()]
        [System.Object]
        $PrimarySmtpAddress,

        [Parameter()]
        [System.Object]
        $SendModerationNotifications,

        [Parameter()]
        [System.Object]
        $InactiveMailbox,

        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $RemotePowerShellEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-MailboxAuditLogSearch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ShowDetails,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $LogonTypes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GroupMailbox,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExternalAccess,

        [Parameter()]
        [System.Object]
        $StatusMailRecipients,

        [Parameter()]
        [System.Object]
        $Operations,

        [Parameter()]
        [System.Object]
        $Mailboxes,

        [Parameter()]
        [System.Object]
        $HasAttachments,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-MailboxFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Parent,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-MailboxRestoreRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ExcludeDumpster,

        [Parameter()]
        [System.Object]
        $TargetType,

        [Parameter()]
        [System.Object]
        $ConflictResolutionOption,

        [Parameter()]
        [System.Object]
        $RemoteDatabaseGuid,

        [Parameter()]
        [System.Object]
        $AssociatedMessagesCopyOption,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $SuspendComment,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $TargetIsArchive,

        [Parameter()]
        [System.Object]
        $IncludeFolders,

        [Parameter()]
        [System.Object]
        $LargeItemLimit,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Suspend,

        [Parameter()]
        [System.Object]
        $BatchName,

        [Parameter()]
        [System.Object]
        $RemoteRestoreType,

        [Parameter()]
        [System.Object]
        $RemoteHostName,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $SourceMailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AcceptLargeDataLoss,

        [Parameter()]
        [System.Object]
        $BadItemLimit,

        [Parameter()]
        [System.Object]
        $SourceStoreMailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SourceIsArchive,

        [Parameter()]
        [System.Object]
        $RemoteCredential,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowLegacyDNMismatch,

        [Parameter()]
        [System.Object]
        $ExcludeFolders,

        [Parameter()]
        [System.Object]
        $TargetRootFolder,

        [Parameter()]
        [System.Object]
        $SourceRootFolder,

        [Parameter()]
        [System.Object]
        $CompletedRequestAgeLimit,

        [Parameter()]
        [System.Object]
        $TargetMailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-MailboxSearch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $InPlaceHoldEnabled,

        [Parameter()]
        [System.Object]
        $ItemHoldPeriod,

        [Parameter()]
        [System.Object]
        $SourceMailboxes,

        [Parameter()]
        [System.Object]
        $InPlaceHoldIdentity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-MailContact
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ModeratedBy,

        [Parameter()]
        [System.Object]
        $ModerationEnabled,

        [Parameter()]
        [System.Object]
        $MacAttachmentFormat,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $LastName,

        [Parameter()]
        [System.Object]
        $UsePreferMessageFormat,

        [Parameter()]
        [System.Object]
        $MessageBodyFormat,

        [Parameter()]
        [System.Object]
        $Initials,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExternalEmailAddress,

        [Parameter()]
        [System.Object]
        $Alias,

        [Parameter()]
        [System.Object]
        $MessageFormat,

        [Parameter()]
        [System.Object]
        $FirstName,

        [Parameter()]
        [System.Object]
        $SendModerationNotifications,

        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-MailMessage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Body,

        [Parameter()]
        [System.Object]
        $Subject,

        [Parameter()]
        [System.Object]
        $BodyFormat,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-MailUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $MailboxRegion,

        [Parameter()]
        [System.Object]
        $ModeratedBy,

        [Parameter()]
        [System.Object]
        $ModerationEnabled,

        [Parameter()]
        [System.Object]
        $MacAttachmentFormat,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $Password,

        [Parameter()]
        [System.Object]
        $LastName,

        [Parameter()]
        [System.Object]
        $UsePreferMessageFormat,

        [Parameter()]
        [System.Object]
        $ImmutableId,

        [Parameter()]
        [System.Object]
        $MicrosoftOnlineServicesID,

        [Parameter()]
        [System.Object]
        $MessageBodyFormat,

        [Parameter()]
        [System.Object]
        $Initials,

        [Parameter()]
        [System.Object]
        $FederatedIdentity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExternalEmailAddress,

        [Parameter()]
        [System.Object]
        $Alias,

        [Parameter()]
        [System.Object]
        $MessageFormat,

        [Parameter()]
        [System.Object]
        $FirstName,

        [Parameter()]
        [System.Object]
        $PrimarySmtpAddress,

        [Parameter()]
        [System.Object]
        $SendModerationNotifications,

        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $RemotePowerShellEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-MalwareFilterPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $CustomFromName,

        [Parameter()]
        [System.Object]
        $AdminDisplayName,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $CustomExternalBody,

        [Parameter()]
        [System.Object]
        $EnableExternalSenderNotifications,

        [Parameter()]
        [System.Object]
        $CustomNotifications,

        [Parameter()]
        [System.Object]
        $EnableInternalSenderNotifications,

        [Parameter()]
        [System.Object]
        $EnableExternalSenderAdminNotifications,

        [Parameter()]
        [System.Object]
        $InternalSenderAdminAddress,

        [Parameter()]
        [System.Object]
        $CustomAlertText,

        [Parameter()]
        [System.Object]
        $FileTypes,

        [Parameter()]
        [System.Object]
        $EnableInternalSenderAdminNotifications,

        [Parameter()]
        [System.Object]
        $CustomFromAddress,

        [Parameter()]
        [System.Object]
        $CustomExternalSubject,

        [Parameter()]
        [System.Object]
        $ZapEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExternalSenderAdminAddress,

        [Parameter()]
        [System.Object]
        $RecommendedPolicyType,

        [Parameter()]
        [System.Object]
        $CustomInternalSubject,

        [Parameter()]
        [System.Object]
        $CustomInternalBody,

        [Parameter()]
        [System.Object]
        $EnableFileFilter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-MalwareFilterRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $SentToMemberOf,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $Comments,

        [Parameter()]
        [System.Object]
        $RecipientDomainIs,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientDomainIs,

        [Parameter()]
        [System.Object]
        $MalwareFilterPolicy,

        [Parameter()]
        [System.Object]
        $ExceptIfSentTo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExceptIfSentToMemberOf,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ManagementRole
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $EnabledCmdlets,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Parent,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ManagementRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $CustomRecipientWriteScope,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $RecipientAdministrativeUnitScope,

        [Parameter()]
        [System.Object]
        $ExclusiveRecipientWriteScope,

        [Parameter()]
        [System.Object]
        $User,

        [Parameter()]
        [System.Object]
        $RecipientOrganizationalUnitScope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Delegating,

        [Parameter()]
        [System.Object]
        $Policy,

        [Parameter()]
        [System.Object]
        $SecurityGroup,

        [Parameter()]
        [System.Object]
        $Role,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $RecipientRelativeWriteScope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ManagementScope
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Exclusive,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $RecipientRestrictionFilter,

        [Parameter()]
        [System.Object]
        $RecipientRoot,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-MessageClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Locale,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $RecipientDescription,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $PermissionMenuVisible,

        [Parameter()]
        [System.Object]
        $ClassificationID,

        [Parameter()]
        [System.Object]
        $SenderDescription,

        [Parameter()]
        [System.Object]
        $DisplayPrecedence,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $RetainClassificationEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-MigrationBatch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipMail,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AdoptPreexisting,

        [Parameter()]
        [System.Object]
        $SourceEndpoint,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AutoStart,

        [Parameter()]
        [System.Object]
        $Users,

        [Parameter()]
        [System.Object]
        $MoveOptions,

        [Parameter()]
        [System.Object]
        $WorkflowControlFlags,

        [Parameter()]
        [System.Object]
        $SkipMerging,

        [Parameter()]
        [System.Object]
        $ExcludeFolders,

        [Parameter()]
        [System.Object]
        $TargetDatabases,

        [Parameter()]
        [System.Object]
        $TargetEndpoint,

        [Parameter()]
        [System.Object]
        $CSVData,

        [Parameter()]
        [System.Object]
        $NotificationEmails,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipReports,

        [Parameter()]
        [System.Object]
        $TargetArchiveDatabases,

        [Parameter()]
        [System.Object]
        $ReportInterval,

        [Parameter()]
        [System.Object]
        $IncludeFolders,

        [Parameter()]
        [System.Object]
        $LargeItemLimit,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipPrimaryCalendarRename,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipContacts,

        [Parameter()]
        [System.Object]
        $SkipMoving,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AutoComplete,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PublicFolderToUnifiedGroup,

        [Parameter()]
        [System.Object]
        $CompleteAfter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PrimaryOnly,

        [Parameter()]
        [System.Object]
        $Partition,

        [Parameter()]
        [System.Object]
        $SourcePFPrimaryMailboxGuid,

        [Parameter()]
        [System.Object]
        $TargetDeliveryDomain,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ArchiveOnly,

        [Parameter()]
        [System.Object]
        $BadItemLimit,

        [Parameter()]
        [System.Object]
        $ArchiveDomain,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ExcludeDumpsters,

        [Parameter()]
        [System.Object]
        $UserIds,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DisableOnCopy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveOnCopy,

        [Parameter()]
        [System.Object]
        $ForwardingDisposition,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipCalendar,

        [Parameter()]
        [System.Object]
        $AllowUnknownColumnsInCsv,

        [Parameter()]
        [System.Object]
        $StartAfter,

        [Parameter()]
        [System.Object]
        $WorkflowTemplate,

        [Parameter()]
        [System.Object]
        $TimeZone,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-MigrationEndpoint
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AcceptUntrustedCertificates,

        [Parameter()]
        [System.Object]
        $Security,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ExchangeRemoteMove,

        [Parameter()]
        [System.Object]
        $MaxConcurrentMigrations,

        [Parameter()]
        [System.Object]
        $ServiceAccountKeyFileData,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PublicFolder,

        [Parameter()]
        [System.Object]
        $TestMailbox,

        [Parameter()]
        [System.Object]
        $ExchangeServer,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipVerification,

        [Parameter()]
        [System.Object]
        $Authentication,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ExchangeOutlookAnywhere,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Gmail,

        [Parameter()]
        [System.Object]
        $Credentials,

        [Parameter()]
        [System.Object]
        $AppSecretKeyVaultUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Compliance,

        [Parameter()]
        [System.Object]
        $Port,

        [Parameter()]
        [System.Object]
        $EmailAddress,

        [Parameter()]
        [System.Object]
        $ApplicationId,

        [Parameter()]
        [System.Object]
        $RemoteTenant,

        [Parameter()]
        [System.Object]
        $RemoteServer,

        [Parameter()]
        [System.Object]
        $Partition,

        [Parameter()]
        [System.Object]
        $MailboxPermission,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $SourceMailboxLegacyDN,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IMAP,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Autodiscover,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PublicFolderToUnifiedGroup,

        [Parameter()]
        [System.Object]
        $NspiServer,

        [Parameter()]
        [System.Object]
        $PublicFolderDatabaseServerLegacyDN,

        [Parameter()]
        [System.Object]
        $RpcProxyServer,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $MaxConcurrentIncrementalSyncs,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-MobileDeviceMailboxPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AllowMicrosoftPushNotifications,

        [Parameter()]
        [System.Object]
        $AllowUnsignedApplications,

        [Parameter()]
        [System.Object]
        $AllowUnsignedInstallationPackages,

        [Parameter()]
        [System.Object]
        $MaxPasswordFailedAttempts,

        [Parameter()]
        [System.Object]
        $AllowExternalDeviceManagement,

        [Parameter()]
        [System.Object]
        $RequireDeviceEncryption,

        [Parameter()]
        [System.Object]
        $RequireSignedSMIMEMessages,

        [Parameter()]
        [System.Object]
        $AllowStorageCard,

        [Parameter()]
        [System.Object]
        $AllowIrDA,

        [Parameter()]
        [System.Object]
        $PasswordHistory,

        [Parameter()]
        [System.Object]
        $AllowNonProvisionableDevices,

        [Parameter()]
        [System.Object]
        $UnapprovedInROMApplicationList,

        [Parameter()]
        [System.Object]
        $RequireEncryptedSMIMEMessages,

        [Parameter()]
        [System.Object]
        $AllowInternetSharing,

        [Parameter()]
        [System.Object]
        $PasswordEnabled,

        [Parameter()]
        [System.Object]
        $MaxEmailHTMLBodyTruncationSize,

        [Parameter()]
        [System.Object]
        $MinPasswordComplexCharacters,

        [Parameter()]
        [System.Object]
        $UNCAccessEnabled,

        [Parameter()]
        [System.Object]
        $AllowCamera,

        [Parameter()]
        [System.Object]
        $IrmEnabled,

        [Parameter()]
        [System.Object]
        $PasswordExpiration,

        [Parameter()]
        [System.Object]
        $AllowBrowser,

        [Parameter()]
        [System.Object]
        $MaxEmailAgeFilter,

        [Parameter()]
        [System.Object]
        $RequireSignedSMIMEAlgorithm,

        [Parameter()]
        [System.Object]
        $RequireManualSyncWhenRoaming,

        [Parameter()]
        [System.Object]
        $AlphanumericPasswordRequired,

        [Parameter()]
        [System.Object]
        $AllowSMIMEEncryptionAlgorithmNegotiation,

        [Parameter()]
        [System.Object]
        $MaxEmailBodyTruncationSize,

        [Parameter()]
        [System.Object]
        $AllowBluetooth,

        [Parameter()]
        [System.Object]
        $RequireEncryptionSMIMEAlgorithm,

        [Parameter()]
        [System.Object]
        $DevicePolicyRefreshInterval,

        [Parameter()]
        [System.Object]
        $AllowGooglePushNotifications,

        [Parameter()]
        [System.Object]
        $AllowMobileOTAUpdate,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $MaxAttachmentSize,

        [Parameter()]
        [System.Object]
        $AllowSimplePassword,

        [Parameter()]
        [System.Object]
        $AllowConsumerEmail,

        [Parameter()]
        [System.Object]
        $AllowDesktopSync,

        [Parameter()]
        [System.Object]
        $RequireStorageCardEncryption,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AttachmentsEnabled,

        [Parameter()]
        [System.Object]
        $AllowSMIMESoftCerts,

        [Parameter()]
        [System.Object]
        $AllowRemoteDesktop,

        [Parameter()]
        [System.Object]
        $PasswordRecoveryEnabled,

        [Parameter()]
        [System.Object]
        $MaxCalendarAgeFilter,

        [Parameter()]
        [System.Object]
        $AllowApplePushNotifications,

        [Parameter()]
        [System.Object]
        $AllowPOPIMAPEmail,

        [Parameter()]
        [System.Object]
        $IsDefault,

        [Parameter()]
        [System.Object]
        $MaxInactivityTimeLock,

        [Parameter()]
        [System.Object]
        $AllowWiFi,

        [Parameter()]
        [System.Object]
        $ApprovedApplicationList,

        [Parameter()]
        [System.Object]
        $AllowTextMessaging,

        [Parameter()]
        [System.Object]
        $WSSAccessEnabled,

        [Parameter()]
        [System.Object]
        $DeviceEncryptionEnabled,

        [Parameter()]
        [System.Object]
        $MinPasswordLength,

        [Parameter()]
        [System.Object]
        $AllowHTMLEmail,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-MoveRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $IncrementalSyncInterval,

        [Parameter()]
        [System.Object]
        $ProxyToMailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SuspendWhenReadyToComplete,

        [Parameter()]
        [System.Object]
        $MoveOptions,

        [Parameter()]
        [System.Object]
        $RemoteArchiveTargetDatabase,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceOffline,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Suspend,

        [Parameter()]
        [System.Object]
        $RequestExpiryInterval,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PreventCompletion,

        [Parameter()]
        [System.Object]
        $SuspendComment,

        [Parameter()]
        [System.Object]
        $LargeItemLimit,

        [Parameter()]
        [System.Object]
        $RemoteTargetDatabase,

        [Parameter()]
        [System.Object]
        $BatchName,

        [Parameter()]
        [System.Object]
        $SkipMoving,

        [Parameter()]
        [System.Object]
        $RemoteHostName,

        [Parameter()]
        [System.Object]
        $RemoteTenant,

        [Parameter()]
        [System.Object]
        $CompleteAfter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PrimaryOnly,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Remote,

        [Parameter()]
        [System.Object]
        $TargetDeliveryDomain,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AcceptLargeDataLoss,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ArchiveOnly,

        [Parameter()]
        [System.Object]
        $StartAfter,

        [Parameter()]
        [System.Object]
        $BadItemLimit,

        [Parameter()]
        [System.Object]
        $ArchiveDomain,

        [Parameter()]
        [System.Object]
        $RemoteGlobalCatalog,

        [Parameter()]
        [System.Object]
        $RemoteCredential,

        [Parameter()]
        [System.Object]
        $CompletedRequestAgeLimit,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Outbound,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-OMEConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $IntroductionText,

        [Parameter()]
        [System.Object]
        $ExternalMailExpiryInDays,

        [Parameter()]
        [System.Object]
        $ReadButtonText,

        [Parameter()]
        [System.Object]
        $PortalText,

        [Parameter()]
        [System.Object]
        $Image,

        [Parameter()]
        [System.Object]
        $OTPEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $BackgroundColor,

        [Parameter()]
        [System.Object]
        $DisclaimerText,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $PrivacyStatementUrl,

        [Parameter()]
        [System.Object]
        $SocialIdSignIn,

        [Parameter()]
        [System.Object]
        $EmailText,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-OnPremisesOrganization
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $InboundConnector,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $OutboundConnector,

        [Parameter()]
        [System.Object]
        $OrganizationName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $OrganizationGuid,

        [Parameter()]
        [System.Object]
        $OrganizationRelationship,

        [Parameter()]
        [System.Object]
        $HybridDomains,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-OrganizationRelationship
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TargetApplicationUri,

        [Parameter()]
        [System.Object]
        $MailTipsAccessLevel,

        [Parameter()]
        [System.Object]
        $TargetAutodiscoverEpr,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $DeliveryReportEnabled,

        [Parameter()]
        [System.Object]
        $OAuthApplicationId,

        [Parameter()]
        [System.Object]
        $OrganizationContact,

        [Parameter()]
        [System.Object]
        $ArchiveAccessEnabled,

        [Parameter()]
        [System.Object]
        $FreeBusyAccessEnabled,

        [Parameter()]
        [System.Object]
        $MailTipsAccessScope,

        [Parameter()]
        [System.Object]
        $TargetOwaURL,

        [Parameter()]
        [System.Object]
        $MailTipsAccessEnabled,

        [Parameter()]
        [System.Object]
        $PhotosEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $MailboxMovePublishedScopes,

        [Parameter()]
        [System.Object]
        $MailboxMoveEnabled,

        [Parameter()]
        [System.Object]
        $MailboxMoveCapability,

        [Parameter()]
        [System.Object]
        $TargetSharingEpr,

        [Parameter()]
        [System.Object]
        $FreeBusyAccessLevel,

        [Parameter()]
        [System.Object]
        $DomainNames,

        [Parameter()]
        [System.Object]
        $FreeBusyAccessScope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-OutboundConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RouteAllMessagesViaOnPremises,

        [Parameter()]
        [System.Object]
        $RecipientDomains,

        [Parameter()]
        [System.Object]
        $CloudServicesMailEnabled,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $LinkForModifiedConnector,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $TestMode,

        [Parameter()]
        [System.Object]
        $AllAcceptedDomains,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $IsTransportRuleScoped,

        [Parameter()]
        [System.Object]
        $UseMXRecord,

        [Parameter()]
        [System.Object]
        $TlsSettings,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ConnectorType,

        [Parameter()]
        [System.Object]
        $SmartHosts,

        [Parameter()]
        [System.Object]
        $TlsDomain,

        [Parameter()]
        [System.Object]
        $ConnectorSource,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-OutlookProtectionRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $SentToScope,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $UserCanOverride,

        [Parameter()]
        [System.Object]
        $FromDepartment,

        [Parameter()]
        [System.Object]
        $ApplyRightsProtectionTemplate,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-OwaMailboxPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsDefault,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-PartnerApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ApplicationIdentifier,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $LinkedAccount,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AcceptSecurityIdentifierInformation,

        [Parameter()]
        [System.Object]
        $AccountType,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-PhishFilterPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SpoofType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $SpoofedUser,

        [Parameter()]
        [System.Object]
        $AllowedToSpoof,

        [Parameter()]
        [System.Object]
        $Sender,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-PolicyTipConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Value,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-PrivilegedIdentityManagementRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RoleGroup,

        [Parameter()]
        [System.Object]
        $ExternalIdentity,

        [Parameter()]
        [System.Object]
        $DurationHours,

        [Parameter()]
        [System.Object]
        $Reason,

        [Parameter()]
        [System.Object]
        $Task,

        [Parameter()]
        [System.Object]
        $RequestContext,

        [Parameter()]
        [System.Object]
        $Role,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ProtectionServicePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-PublicFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $EformsLocaleId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Path,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-RemoteDomain
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $DomainName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ReportSchedule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Locale,

        [Parameter()]
        [System.Object]
        $Direction,

        [Parameter()]
        [System.Object]
        $EncryptionTemplate,

        [Parameter()]
        [System.Object]
        $TransportRuleId,

        [Parameter()]
        [System.Object]
        $ScheduleName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeDLP,

        [Parameter()]
        [System.Object]
        $DlpRuleId,

        [Parameter()]
        [System.Object]
        $EncryptionType,

        [Parameter()]
        [System.Object]
        $ExpiryDate,

        [Parameter()]
        [System.Object]
        $SenderAddress,

        [Parameter()]
        [System.Object]
        $RecipientAddress,

        [Parameter()]
        [System.Object]
        $NotificationEmail,

        [Parameter()]
        [System.Object]
        $ReportFrequency,

        [Parameter()]
        [System.Object]
        $ReportType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ReportSubmissionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PreSubmitMessageTitle,

        [Parameter()]
        [System.Object]
        $PostSubmitMessage,

        [Parameter()]
        [System.Object]
        $EnableReportToMicrosoft,

        [Parameter()]
        [System.Object]
        $EnableCustomizedMsg,

        [Parameter()]
        [System.Object]
        $PostSubmitMessageForNotJunk,

        [Parameter()]
        [System.Object]
        $PreSubmitMessage,

        [Parameter()]
        [System.Object]
        $PreSubmitMessageTitleForPhishing,

        [Parameter()]
        [System.Object]
        $PreSubmitMessageForJunk,

        [Parameter()]
        [System.Object]
        $PostSubmitMessageForPhishing,

        [Parameter()]
        [System.Object]
        $ReportPhishToCustomizedAddress,

        [Parameter()]
        [System.Object]
        $PreSubmitMessageTitleForNotJunk,

        [Parameter()]
        [System.Object]
        $ReportJunkAddresses,

        [Parameter()]
        [System.Object]
        $PreSubmitMessageTitleForJunk,

        [Parameter()]
        [System.Object]
        $PostSubmitMessageTitleForPhishing,

        [Parameter()]
        [System.Object]
        $ReportNotJunkAddresses,

        [Parameter()]
        [System.Object]
        $ReportPhishAddresses,

        [Parameter()]
        [System.Object]
        $ReportJunkToCustomizedAddress,

        [Parameter()]
        [System.Object]
        $PostSubmitMessageTitle,

        [Parameter()]
        [System.Object]
        $EnableThirdPartyAddress,

        [Parameter()]
        [System.Object]
        $PreSubmitMessageForNotJunk,

        [Parameter()]
        [System.Object]
        $ThirdPartyReportAddresses,

        [Parameter()]
        [System.Object]
        $UserSubmissionOptions,

        [Parameter()]
        [System.Object]
        $PostSubmitMessageTitleForNotJunk,

        [Parameter()]
        [System.Object]
        $ReportNotJunkToCustomizedAddress,

        [Parameter()]
        [System.Object]
        $PreSubmitMessageForPhishing,

        [Parameter()]
        [System.Object]
        $PostSubmitMessageTitleForJunk,

        [Parameter()]
        [System.Object]
        $PostSubmitMessageForJunk,

        [Parameter()]
        [System.Object]
        $UserSubmissionOptionsMessage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-RetentionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $RetentionPolicyTagLinks,

        [Parameter()]
        [System.Object]
        $RetentionId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsDefaultArbitrationMailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsDefault,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-RetentionPolicyTag
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $MessageClass,

        [Parameter()]
        [System.Object]
        $MustDisplayCommentEnabled,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsDefaultAutoGroupPolicyTag,

        [Parameter()]
        [System.Object]
        $LocalizedRetentionPolicyTagName,

        [Parameter()]
        [System.Object]
        $AgeLimitForRetention,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsDefaultModeratedRecipientsPolicyTag,

        [Parameter()]
        [System.Object]
        $RetentionAction,

        [Parameter()]
        [System.Object]
        $LocalizedComment,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $RetentionId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $RetentionEnabled,

        [Parameter()]
        [System.Object]
        $Type,

        [Parameter()]
        [System.Object]
        $SystemTag,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-RoleAssignmentPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Roles,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsDefault,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-RoleGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $CustomRecipientWriteScope,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $Members,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $WellKnownObject,

        [Parameter()]
        [System.Object]
        $ManagedBy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Roles,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-SafeAttachmentPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Redirect,

        [Parameter()]
        [System.Object]
        $RecommendedPolicyType,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $AdminDisplayName,

        [Parameter()]
        [System.Object]
        $Enable,

        [Parameter()]
        [System.Object]
        $RedirectAddress,

        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ActionOnError,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-SafeAttachmentRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $SentToMemberOf,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $Comments,

        [Parameter()]
        [System.Object]
        $RecipientDomainIs,

        [Parameter()]
        [System.Object]
        $SafeAttachmentPolicy,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientDomainIs,

        [Parameter()]
        [System.Object]
        $ExceptIfSentTo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExceptIfSentToMemberOf,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-SafeLinksPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ExcludedUrls,

        [Parameter()]
        [System.Object]
        $AdminDisplayName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $WhiteListedUrls,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $DoNotTrackUserClicks,

        [Parameter()]
        [System.Object]
        $DoNotRewriteUrls,

        [Parameter()]
        [System.Object]
        $EnableSafeLinksForTeams,

        [Parameter()]
        [System.Object]
        $ScanUrls,

        [Parameter()]
        [System.Object]
        $TrackClicks,

        [Parameter()]
        [System.Object]
        $AllowClickThrough,

        [Parameter()]
        [System.Object]
        $RecommendedPolicyType,

        [Parameter()]
        [System.Object]
        $DoNotAllowClickThrough,

        [Parameter()]
        [System.Object]
        $DeliverMessageAfterScan,

        [Parameter()]
        [System.Object]
        $IsEnabled,

        [Parameter()]
        [System.Object]
        $EnableForInternalSenders,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-SafeLinksRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $SentToMemberOf,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $Comments,

        [Parameter()]
        [System.Object]
        $RecipientDomainIs,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientDomainIs,

        [Parameter()]
        [System.Object]
        $SafeLinksPolicy,

        [Parameter()]
        [System.Object]
        $ExceptIfSentTo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExceptIfSentToMemberOf,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-SchedulingMailbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ReplyToAddress,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $Alias,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $BusinessType,

        [Parameter()]
        [System.Object]
        $Owner,

        [Parameter()]
        [System.Object]
        $Culture,

        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Object]
        $TimeZone,

        [Parameter()]
        [System.Object]
        $PrimarySmtpAddress,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $BookingServiceName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-SharingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Domains,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Default,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-SiteMailbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Alias,

        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Object]
        $SharePointUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-SiteMailboxProvisioningPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-SweepRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Provider,

        [Parameter()]
        [System.Object]
        $SystemCategory,

        [Parameter()]
        [System.Object]
        $KeepLatest,

        [Parameter()]
        [System.Object]
        $ExceptIfFlagged,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $SourceFolder,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $DestinationFolder,

        [Parameter()]
        [System.Object]
        $ExceptIfPinned,

        [Parameter()]
        [System.Object]
        $Sender,

        [Parameter()]
        [System.Object]
        $KeepForDays,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-SyncMailPublicFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $WindowsEmailAddress,

        [Parameter()]
        [System.Object]
        $CustomAttribute12,

        [Parameter()]
        [System.Object]
        $CustomAttribute10,

        [Parameter()]
        [System.Object]
        $RequireSenderAuthenticationEnabled,

        [Parameter()]
        [System.Object]
        $DeliverToMailboxAndForward,

        [Parameter()]
        [System.Object]
        $CustomAttribute8,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $CustomAttribute3,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $CustomAttribute7,

        [Parameter()]
        [System.Object]
        $ForwardingAddress,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $HiddenFromAddressListsEnabled,

        [Parameter()]
        [System.Object]
        $MaxSendSize,

        [Parameter()]
        [System.Object]
        $CustomAttribute6,

        [Parameter()]
        [System.Object]
        $CustomAttribute1,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OverrideRecipientQuotas,

        [Parameter()]
        [System.Object]
        $CustomAttribute9,

        [Parameter()]
        [System.Object]
        $CustomAttribute14,

        [Parameter()]
        [System.Object]
        $RejectMessagesFrom,

        [Parameter()]
        [System.Object]
        $MaxReceiveSize,

        [Parameter()]
        [System.Object]
        $Contacts,

        [Parameter()]
        [System.Object]
        $AcceptMessagesOnlyFrom,

        [Parameter()]
        [System.Object]
        $CustomAttribute15,

        [Parameter()]
        [System.Object]
        $CustomAttribute5,

        [Parameter()]
        [System.Object]
        $OnPremisesObjectId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExternalEmailAddress,

        [Parameter()]
        [System.Object]
        $CustomAttribute4,

        [Parameter()]
        [System.Object]
        $Alias,

        [Parameter()]
        [System.Object]
        $GrantSendOnBehalfTo,

        [Parameter()]
        [System.Object]
        $CustomAttribute2,

        [Parameter()]
        [System.Object]
        $CustomAttribute13,

        [Parameter()]
        [System.Object]
        $CustomAttribute11,

        [Parameter()]
        [System.Object]
        $EmailAddresses,

        [Parameter()]
        [System.Object]
        $EntryId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-SyncRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Password,

        [Parameter()]
        [System.Object]
        $IncrementalSyncInterval,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Unified,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Mail,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $TokenSecret,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AcceptUntrustedCertificates,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $WorkloadType,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $RequestExpiryInterval,

        [Parameter()]
        [System.Object]
        $TargetRootFolder,

        [Parameter()]
        [System.Object]
        $OAuthProvider,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Calendar,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Contact,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SendOnly,

        [Parameter()]
        [System.Object]
        $ContentFilterLanguage,

        [Parameter()]
        [System.Object]
        $RemoteServerPort,

        [Parameter()]
        [System.Object]
        $Authentication,

        [Parameter()]
        [System.Object]
        $SmtpPassword,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Pop,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DoNotLeaveOnServer,

        [Parameter()]
        [System.Object]
        $SmtpUserName,

        [Parameter()]
        [System.Object]
        $IncludeFolders,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UseTokenStore,

        [Parameter()]
        [System.Object]
        $UserName,

        [Parameter()]
        [System.Object]
        $TokenStoreId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoteSendEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Eas,

        [Parameter()]
        [System.Object]
        $SmtpServerName,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipInitialConnectionValidation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Imap,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ThirdPartyCalendarSync,

        [Parameter()]
        [System.Object]
        $GroupMailbox,

        [Parameter()]
        [System.Object]
        $RemoteEmailAddress,

        [Parameter()]
        [System.Object]
        $RemoteUserIdentifier,

        [Parameter()]
        [System.Object]
        $SmtpServerPort,

        [Parameter()]
        [System.Object]
        $AccessToken,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Xrm,

        [Parameter()]
        [System.Object]
        $ExcludeFolders,

        [Parameter()]
        [System.Object]
        $SkipMerging,

        [Parameter()]
        [System.Object]
        $Security,

        [Parameter()]
        [System.Object]
        $RefreshToken,

        [Parameter()]
        [System.Object]
        $ProviderArgs,

        [Parameter()]
        [System.Object]
        $CompletedRequestAgeLimit,

        [Parameter()]
        [System.Object]
        $RemoteServerName,

        [Parameter()]
        [System.Object]
        $ContentFilter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-TransportRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ActivationDate,

        [Parameter()]
        [System.Object]
        $AddToRecipients,

        [Parameter()]
        [System.Object]
        $ApplyHtmlDisclaimerFallbackAction,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientADAttributeContainsWords,

        [Parameter()]
        [System.Object]
        $RecipientADAttributeMatchesPatterns,

        [Parameter()]
        [System.Object]
        $AttachmentSizeOver,

        [Parameter()]
        [System.Object]
        $ExceptIfSenderADAttributeContainsWords,

        [Parameter()]
        [System.Object]
        $SetSCL,

        [Parameter()]
        [System.Object]
        $AnyOfToHeaderMemberOf,

        [Parameter()]
        [System.Object]
        $Disconnect,

        [Parameter()]
        [System.Object]
        $ExceptIfSentToMemberOf,

        [Parameter()]
        [System.Object]
        $ExceptIfAnyOfCcHeader,

        [Parameter()]
        [System.Object]
        $ExceptIfAttachmentMatchesPatterns,

        [Parameter()]
        [System.Object]
        $RecipientDomainIs,

        [Parameter()]
        [System.Object]
        $ManagerForEvaluatedUser,

        [Parameter()]
        [System.Object]
        $SmtpRejectMessageRejectStatusCode,

        [Parameter()]
        [System.Object]
        $ExceptIfHeaderMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfFromScope,

        [Parameter()]
        [System.Object]
        $ADComparisonAttribute,

        [Parameter()]
        [System.Object]
        $ExceptIfAttachmentContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfHeaderContainsWords,

        [Parameter()]
        [System.Object]
        $HeaderMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfAttachmentIsPasswordProtected,

        [Parameter()]
        [System.Object]
        $DeleteMessage,

        [Parameter()]
        [System.Object]
        $HasSenderOverride,

        [Parameter()]
        [System.Object]
        $ExceptIfSubjectOrBodyMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfHasClassification,

        [Parameter()]
        [System.Object]
        $Quarantine,

        [Parameter()]
        [System.Object]
        $ExceptIfAnyOfRecipientAddressMatchesPatterns,

        [Parameter()]
        [System.Object]
        $RecipientAddressType,

        [Parameter()]
        [System.Object]
        $ExceptIfContentCharacterSetContainsWords,

        [Parameter()]
        [System.Object]
        $BlindCopyTo,

        [Parameter()]
        [System.Object]
        $ApplyHtmlDisclaimerLocation,

        [Parameter()]
        [System.Object]
        $ExceptIfMessageTypeMatches,

        [Parameter()]
        [System.Object]
        $SenderIpRanges,

        [Parameter()]
        [System.Object]
        $ExceptIfMessageContainsDataClassifications,

        [Parameter()]
        [System.Object]
        $ModerateMessageByUser,

        [Parameter()]
        [System.Object]
        $HasNoClassification,

        [Parameter()]
        [System.Object]
        $ExceptIfSenderInRecipientList,

        [Parameter()]
        [System.Object]
        $HeaderContainsMessageHeader,

        [Parameter()]
        [System.Object]
        $RemoveHeader,

        [Parameter()]
        [System.Object]
        $HasClassification,

        [Parameter()]
        [System.Object]
        $MessageContainsDataClassifications,

        [Parameter()]
        [System.Object]
        $ExceptIfFromMemberOf,

        [Parameter()]
        [System.Object]
        $RuleSubType,

        [Parameter()]
        [System.Object]
        $SentToScope,

        [Parameter()]
        [System.Object]
        $AnyOfToCcHeaderMemberOf,

        [Parameter()]
        [System.Object]
        $From,

        [Parameter()]
        [System.Object]
        $ExceptIfAnyOfRecipientAddressContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfWithImportance,

        [Parameter()]
        [System.Object]
        $ContentCharacterSetContainsWords,

        [Parameter()]
        [System.Object]
        $SubjectContainsWords,

        [Parameter()]
        [System.Object]
        $RejectMessageEnhancedStatusCode,

        [Parameter()]
        [System.Object]
        $SenderADAttributeMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfSenderADAttributeMatchesPatterns,

        [Parameter()]
        [System.Object]
        $IncidentReportContent,

        [Parameter()]
        [System.Object]
        $UseLegacyRegex,

        [Parameter()]
        [System.Object]
        $FromMemberOf,

        [Parameter()]
        [System.Object]
        $AttachmentContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfSCLOver,

        [Parameter()]
        [System.Object]
        $ExceptIfBetweenMemberOf1,

        [Parameter()]
        [System.Object]
        $GenerateNotification,

        [Parameter()]
        [System.Object]
        $NotifySender,

        [Parameter()]
        [System.Object]
        $ExceptIfAttachmentNameMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfSenderManagementRelationship,

        [Parameter()]
        [System.Object]
        $SetAuditSeverity,

        [Parameter()]
        [System.Object]
        $AttachmentPropertyContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfAnyOfToHeader,

        [Parameter()]
        [System.Object]
        $ApplyRightsProtectionCustomizationTemplate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $RouteMessageOutboundRequireTls,

        [Parameter()]
        [System.Object]
        $WithImportance,

        [Parameter()]
        [System.Object]
        $RuleErrorAction,

        [Parameter()]
        [System.Object]
        $FromScope,

        [Parameter()]
        [System.Object]
        $AttachmentNameMatchesPatterns,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $ExceptIfFromAddressMatchesPatterns,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $ExceptIfAttachmentSizeOver,

        [Parameter()]
        [System.Object]
        $ExceptIfManagerForEvaluatedUser,

        [Parameter()]
        [System.Object]
        $RemoveOMEv2,

        [Parameter()]
        [System.Object]
        $ExceptIfFromAddressContainsWords,

        [Parameter()]
        [System.Object]
        $AttachmentHasExecutableContent,

        [Parameter()]
        [System.Object]
        $RouteMessageOutboundConnector,

        [Parameter()]
        [System.Object]
        $SubjectMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientDomainIs,

        [Parameter()]
        [System.Object]
        $ExceptIfSenderDomainIs,

        [Parameter()]
        [System.Object]
        $SenderManagementRelationship,

        [Parameter()]
        [System.Object]
        $ExceptIfBetweenMemberOf2,

        [Parameter()]
        [System.Object]
        $RedirectMessageTo,

        [Parameter()]
        [System.Object]
        $ApplyOME,

        [Parameter()]
        [System.Object]
        $AddManagerAsRecipientType,

        [Parameter()]
        [System.Object]
        $ExceptIfMessageSizeOver,

        [Parameter()]
        [System.Object]
        $RecipientInSenderList,

        [Parameter()]
        [System.Object]
        $SenderADAttributeContainsWords,

        [Parameter()]
        [System.Object]
        $MessageSizeOver,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientInSenderList,

        [Parameter()]
        [System.Object]
        $ExceptIfAttachmentHasExecutableContent,

        [Parameter()]
        [System.Object]
        $ExceptIfAttachmentIsUnsupported,

        [Parameter()]
        [System.Object]
        $RemoveOME,

        [Parameter()]
        [System.Object]
        $RejectMessageReasonText,

        [Parameter()]
        [System.Object]
        $RecipientAddressContainsWords,

        [Parameter()]
        [System.Object]
        $GenerateIncidentReport,

        [Parameter()]
        [System.Object]
        $FromAddressContainsWords,

        [Parameter()]
        [System.Object]
        $AnyOfRecipientAddressMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ApplyHtmlDisclaimerText,

        [Parameter()]
        [System.Object]
        $RecipientAddressMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfSubjectContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfFrom,

        [Parameter()]
        [System.Object]
        $AnyOfToCcHeader,

        [Parameter()]
        [System.Object]
        $ExceptIfSentToScope,

        [Parameter()]
        [System.Object]
        $ExceptIfAnyOfToCcHeaderMemberOf,

        [Parameter()]
        [System.Object]
        $ModerateMessageByManager,

        [Parameter()]
        [System.Object]
        $ADComparisonOperator,

        [Parameter()]
        [System.Object]
        $BetweenMemberOf2,

        [Parameter()]
        [System.Object]
        $SetHeaderName,

        [Parameter()]
        [System.Object]
        $AttachmentProcessingLimitExceeded,

        [Parameter()]
        [System.Object]
        $ExceptIfAnyOfCcHeaderMemberOf,

        [Parameter()]
        [System.Object]
        $ExceptIfSubjectMatchesPatterns,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientAddressContainsWords,

        [Parameter()]
        [System.Object]
        $HeaderMatchesMessageHeader,

        [Parameter()]
        [System.Object]
        $AnyOfRecipientAddressContainsWords,

        [Parameter()]
        [System.Object]
        $HeaderContainsWords,

        [Parameter()]
        [System.Object]
        $Comments,

        [Parameter()]
        [System.Object]
        $SentToMemberOf,

        [Parameter()]
        [System.Object]
        $ExceptIfADComparisonAttribute,

        [Parameter()]
        [System.Object]
        $ExceptIfSentTo,

        [Parameter()]
        [System.Object]
        $ExceptIfADComparisonOperator,

        [Parameter()]
        [System.Object]
        $ExceptIfAnyOfToHeaderMemberOf,

        [Parameter()]
        [System.Object]
        $Mode,

        [Parameter()]
        [System.Object]
        $ExceptIfAnyOfToCcHeader,

        [Parameter()]
        [System.Object]
        $SubjectOrBodyMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfAttachmentExtensionMatchesWords,

        [Parameter()]
        [System.Object]
        $SenderDomainIs,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientAddressMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfHasNoClassification,

        [Parameter()]
        [System.Object]
        $ExceptIfSenderIpRanges,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientADAttributeMatchesPatterns,

        [Parameter()]
        [System.Object]
        $RecipientADAttributeContainsWords,

        [Parameter()]
        [System.Object]
        $AttachmentIsUnsupported,

        [Parameter()]
        [System.Object]
        $ExpiryDate,

        [Parameter()]
        [System.Object]
        $AttachmentExtensionMatchesWords,

        [Parameter()]
        [System.Object]
        $ExceptIfSubjectOrBodyContainsWords,

        [Parameter()]
        [System.Object]
        $LogEventText,

        [Parameter()]
        [System.Object]
        $ExceptIfManagerAddresses,

        [Parameter()]
        [System.Object]
        $SenderInRecipientList,

        [Parameter()]
        [System.Object]
        $AttachmentMatchesPatterns,

        [Parameter()]
        [System.Object]
        $DlpPolicy,

        [Parameter()]
        [System.Object]
        $ManagerAddresses,

        [Parameter()]
        [System.Object]
        $SenderAddressLocation,

        [Parameter()]
        [System.Object]
        $CopyTo,

        [Parameter()]
        [System.Object]
        $SubjectOrBodyContainsWords,

        [Parameter()]
        [System.Object]
        $ApplyClassification,

        [Parameter()]
        [System.Object]
        $SetHeaderValue,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $AttachmentIsPasswordProtected,

        [Parameter()]
        [System.Object]
        $BetweenMemberOf1,

        [Parameter()]
        [System.Object]
        $AnyOfCcHeader,

        [Parameter()]
        [System.Object]
        $ExceptIfAttachmentProcessingLimitExceeded,

        [Parameter()]
        [System.Object]
        $FromAddressMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfHeaderMatchesMessageHeader,

        [Parameter()]
        [System.Object]
        $SmtpRejectMessageRejectText,

        [Parameter()]
        [System.Object]
        $AnyOfCcHeaderMemberOf,

        [Parameter()]
        [System.Object]
        $AnyOfToHeader,

        [Parameter()]
        [System.Object]
        $ExceptIfHasSenderOverride,

        [Parameter()]
        [System.Object]
        $SCLOver,

        [Parameter()]
        [System.Object]
        $PrependSubject,

        [Parameter()]
        [System.Object]
        $ApplyRightsProtectionTemplate,

        [Parameter()]
        [System.Object]
        $MessageTypeMatches,

        [Parameter()]
        [System.Object]
        $ExceptIfAttachmentPropertyContainsWords,

        [Parameter()]
        [System.Object]
        $StopRuleProcessing,

        [Parameter()]
        [System.Object]
        $ExceptIfHeaderContainsMessageHeader,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-UMAutoAttendant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $SpeechEnabled,

        [Parameter()]
        [System.Object]
        $PilotIdentifierList,

        [Parameter()]
        [System.Object]
        $DTMFFallbackAutoAttendant,

        [Parameter()]
        [System.Object]
        $Status,

        [Parameter()]
        [System.Object]
        $UMDialPlan,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-UMCallAnsweringRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $CallerIds,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $CallersCanInterruptGreeting,

        [Parameter()]
        [System.Object]
        $ScheduleStatus,

        [Parameter()]
        [System.Object]
        $TimeOfDay,

        [Parameter()]
        [System.Object]
        $CheckAutomaticReplies,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExtensionsDialed,

        [Parameter()]
        [System.Object]
        $KeyMappings,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-UMDialPlan
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $CountryOrRegionCode,

        [Parameter()]
        [System.Object]
        $GenerateUMMailboxPolicy,

        [Parameter()]
        [System.Object]
        $NumberOfDigitsInExtension,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $FaxEnabled,

        [Parameter()]
        [System.Object]
        $AccessTelephoneNumbers,

        [Parameter()]
        [System.Object]
        $DefaultLanguage,

        [Parameter()]
        [System.Object]
        $URIType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-UMHuntGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $UMIPGateway,

        [Parameter()]
        [System.Object]
        $PilotIdentifier,

        [Parameter()]
        [System.Object]
        $UMDialPlan,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-UMMailboxPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $UMDialPlan,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-UnifiedGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $MailboxRegion,

        [Parameter()]
        [System.Object]
        $RequireSenderAuthenticationEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ConvertClosedDlToPrivateGroup,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ExoErrorAsWarning,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Classification,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $HiddenGroupMembershipEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AutoSubscribeNewMembers,

        [Parameter()]
        [System.Object]
        $ExecutingUser,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SuppressWarmupMessage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SubscriptionEnabled,

        [Parameter()]
        [System.Object]
        $DlIdentity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AlwaysSubscribeMembersToCalendarEvents,

        [Parameter()]
        [System.Object]
        $Members,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DeleteDlAfterMigration,

        [Parameter()]
        [System.Object]
        $Owner,

        [Parameter()]
        [System.Object]
        $Notes,

        [Parameter()]
        [System.Object]
        $Alias,

        [Parameter()]
        [System.Object]
        $ManagedBy,

        [Parameter()]
        [System.Object]
        $Language,

        [Parameter()]
        [System.Object]
        $PrimarySmtpAddress,

        [Parameter()]
        [System.Object]
        $DataEncryptionPolicy,

        [Parameter()]
        [System.Object]
        $AccessType,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $EmailAddresses,

        [Parameter()]
        [System.Object]
        $SensitivityLabelId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Preview-QuarantineMessage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Release-QuarantineMessage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReportFalsePositive,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowSender,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $User,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReleaseToAll,

        [Parameter()]
        [System.Object]
        $Identities,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ActiveSyncDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ActiveSyncDeviceAccessRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ActiveSyncMailboxPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-AntiPhishPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-AntiPhishRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-App
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OrganizationApp,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PrivateCatalog,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ApplicationAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ATPProtectionPolicyRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-AuditConfigurationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-AuditConfigurationRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-AuditStubFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $FolderName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-AuthenticationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-AvailabilityAddressSpace
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-AvailabilityConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-BlockedSenderAddress
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Reason,

        [Parameter()]
        [System.Object]
        $SenderAddress,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CalendarEvents
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $QueryStartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CancelOrganizedMeetings,

        [Parameter()]
        [System.Object]
        $QueryWindowInDays,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PreviewOnly,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ClassificationRuleCollection
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ClientAccessRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CompliancePolicyFileSyncNotification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CompliancePolicySyncNotification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ConnectSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-DataClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-DistributionGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BypassSecurityGroupManagerCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-DistributionGroupMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BypassSecurityGroupManagerCheck,

        [Parameter()]
        [System.Object]
        $Member,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-DlpPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-DynamicDistributionGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ElevatedAccessApprovalPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-EmailAddressPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-EOPProtectionPolicyRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-HostedConnectionFilterPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-HostedContentFilterPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-HostedContentFilterRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-HostedOutboundSpamFilterPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-HostedOutboundSpamFilterRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-HybridConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-InboundConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-InboxRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AlwaysDeleteOutlookRulesBlob,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-IntraOrganizationConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-JournalRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-Mailbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PublicFolder,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PermanentlyDelete,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Migration,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-MailboxFolderPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GroupMailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $User,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $SendNotificationToUser,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-MailboxLocation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-MailboxPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ClearAutoMapping,

        [Parameter()]
        [System.Object]
        $AccessRights,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GroupMailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BypassMasterAccountSid,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Deny,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $User,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreDefaultScope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SoftDeletedMailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ResetDefault,

        [Parameter()]
        [System.Object]
        $InheritanceType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-MailboxRestoreRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-MailboxSearch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-MailboxUserConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-MailContact
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-MailUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PermanentlyDelete,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-MalwareFilterPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-MalwareFilterRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ManagementRole
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recurse,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ManagementRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ManagementRoleEntry
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ManagementScope
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-MessageClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-MigrationBatch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Partition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-MigrationEndpoint
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Partition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-MigrationUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Partition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-MobileDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-MobileDeviceMailboxPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-MoveRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ProxyToMailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-OMEConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-OnPremisesOrganization
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-OrganizationRelationship
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-OutboundConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-OutlookProtectionRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-OwaMailboxPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-PartnerApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-PolicyTipConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-PublicFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recurse,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-PublicFolderClientPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $User,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-PublicFolderMailboxMigrationRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-RecipientPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AccessRights,

        [Parameter()]
        [System.Object]
        $Trustee,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-RemoteDomain
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ReportSchedule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeDLP,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ScheduleId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ReportSubmissionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-RetentionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-RetentionPolicyTag
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-RMSTrustedPublishingDomain
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-RoleAssignmentPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-RoleGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BypassSecurityGroupManagerCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-RoleGroupMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BypassSecurityGroupManagerCheck,

        [Parameter()]
        [System.Object]
        $Member,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-SafeAttachmentPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-SafeAttachmentRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-SafeLinksPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-SafeLinksRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-SharingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-Subscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-SweepRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-SyncMailPublicFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-SyncRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Xrm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-TransportRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-UMAutoAttendant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-UMCallAnsweringRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-UMDialPlan
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-UMHuntGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-UMIPGateway
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-UMMailboxPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-UnifiedGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-UnifiedGroupLinks
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $LinkType,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Links,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-UserPhoto
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GroupMailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreDefaultScope,

        [Parameter()]
        [System.Object]
        $PhotoType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ClearMailboxPhotoRecord,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Reset-EventsFromEmailBlockStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Reset-ShadowCalendar
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $CalendarId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Resume-MailboxRestoreRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Resume-MoveRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ProxyToMailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SuspendWhenReadyToComplete,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Resume-PublicFolderMailboxMigrationRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Resume-SyncRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Revoke-ElevatedAccessAuthorization
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RequestId,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Organization,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Rotate-DkimSigningConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $KeySize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Search-AdminAuditLog
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ObjectIds,

        [Parameter()]
        [System.Object]
        $StartIndex,

        [Parameter()]
        [System.Object]
        $ExternalAccess,

        [Parameter()]
        [System.Object]
        $Parameters,

        [Parameter()]
        [System.Object]
        $Cmdlets,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $UserIds,

        [Parameter()]
        [System.Object]
        $IsSuccess,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Search-MailboxAuditLog
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ShowDetails,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeInactiveMailbox,

        [Parameter()]
        [System.Object]
        $LogonTypes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GroupMailbox,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ExternalAccess,

        [Parameter()]
        [System.Object]
        $Operations,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Mailboxes,

        [Parameter()]
        [System.Object]
        $HasAttachments,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Search-MessageTrackingReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Subject,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Recipients,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BypassDelegateChecking,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DoNotResolve,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $Sender,

        [Parameter()]
        [System.Object]
        $MessageEntryId,

        [Parameter()]
        [System.Object]
        $MessageId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Search-UnifiedAuditLog
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ObjectIds,

        [Parameter()]
        [System.Object]
        $IPAddresses,

        [Parameter()]
        [System.Object]
        $Operations,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Formatted,

        [Parameter()]
        [System.Object]
        $FreeText,

        [Parameter()]
        [System.Object]
        $SiteIds,

        [Parameter()]
        [System.Object]
        $SessionId,

        [Parameter()]
        [System.Object]
        $SessionCommand,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $UserIds,

        [Parameter()]
        [System.Object]
        $RecordType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Send-TextMessagingVerificationCode
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-AcceptedDomain
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EnableNego2Authentication,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainType,

        [Parameter()]
        [System.Object]
        $MatchSubDomains,

        [Parameter()]
        [System.Object]
        $OutboundOnly,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-AccessToCustomerDataRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RequestId,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $ApprovalDecision,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ActiveSyncDeviceAccessRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $AccessLevel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ActiveSyncMailboxPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AllowUnsignedApplications,

        [Parameter()]
        [System.Object]
        $AllowUnsignedInstallationPackages,

        [Parameter()]
        [System.Object]
        $MaxInactivityTimeDeviceLock,

        [Parameter()]
        [System.Object]
        $AllowExternalDeviceManagement,

        [Parameter()]
        [System.Object]
        $RequireDeviceEncryption,

        [Parameter()]
        [System.Object]
        $AllowStorageCard,

        [Parameter()]
        [System.Object]
        $AllowIrDA,

        [Parameter()]
        [System.Object]
        $AllowNonProvisionableDevices,

        [Parameter()]
        [System.Object]
        $UnapprovedInROMApplicationList,

        [Parameter()]
        [System.Object]
        $DevicePasswordEnabled,

        [Parameter()]
        [System.Object]
        $RequireEncryptedSMIMEMessages,

        [Parameter()]
        [System.Object]
        $DevicePasswordHistory,

        [Parameter()]
        [System.Object]
        $AllowInternetSharing,

        [Parameter()]
        [System.Object]
        $MinDevicePasswordComplexCharacters,

        [Parameter()]
        [System.Object]
        $RequireSignedSMIMEAlgorithm,

        [Parameter()]
        [System.Object]
        $MaxEmailHTMLBodyTruncationSize,

        [Parameter()]
        [System.Object]
        $DevicePasswordExpiration,

        [Parameter()]
        [System.Object]
        $UNCAccessEnabled,

        [Parameter()]
        [System.Object]
        $AllowCamera,

        [Parameter()]
        [System.Object]
        $AllowTextMessaging,

        [Parameter()]
        [System.Object]
        $MaxDevicePasswordFailedAttempts,

        [Parameter()]
        [System.Object]
        $AllowBrowser,

        [Parameter()]
        [System.Object]
        $MaxEmailAgeFilter,

        [Parameter()]
        [System.Object]
        $RequireManualSyncWhenRoaming,

        [Parameter()]
        [System.Object]
        $AllowSMIMEEncryptionAlgorithmNegotiation,

        [Parameter()]
        [System.Object]
        $DeviceEncryptionEnabled,

        [Parameter()]
        [System.Object]
        $MaxEmailBodyTruncationSize,

        [Parameter()]
        [System.Object]
        $AllowBluetooth,

        [Parameter()]
        [System.Object]
        $RequireEncryptionSMIMEAlgorithm,

        [Parameter()]
        [System.Object]
        $DevicePolicyRefreshInterval,

        [Parameter()]
        [System.Object]
        $AllowMobileOTAUpdate,

        [Parameter()]
        [System.Object]
        $MaxAttachmentSize,

        [Parameter()]
        [System.Object]
        $AllowConsumerEmail,

        [Parameter()]
        [System.Object]
        $AllowDesktopSync,

        [Parameter()]
        [System.Object]
        $PasswordRecoveryEnabled,

        [Parameter()]
        [System.Object]
        $AlphanumericDevicePasswordRequired,

        [Parameter()]
        [System.Object]
        $RequireStorageCardEncryption,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AllowSMIMESoftCerts,

        [Parameter()]
        [System.Object]
        $AllowRemoteDesktop,

        [Parameter()]
        [System.Object]
        $AllowSimpleDevicePassword,

        [Parameter()]
        [System.Object]
        $AttachmentsEnabled,

        [Parameter()]
        [System.Object]
        $MaxCalendarAgeFilter,

        [Parameter()]
        [System.Object]
        $AllowWiFi,

        [Parameter()]
        [System.Object]
        $AllowApplePushNotifications,

        [Parameter()]
        [System.Object]
        $AllowPOPIMAPEmail,

        [Parameter()]
        [System.Object]
        $IsDefault,

        [Parameter()]
        [System.Object]
        $IsDefaultPolicy,

        [Parameter()]
        [System.Object]
        $ApprovedApplicationList,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $WSSAccessEnabled,

        [Parameter()]
        [System.Object]
        $RequireSignedSMIMEMessages,

        [Parameter()]
        [System.Object]
        $AllowHTMLEmail,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $MinDevicePasswordLength,

        [Parameter()]
        [System.Object]
        $IrmEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ActiveSyncOrganizationSettings
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AllowRMSSupportForUnenlightenedApps,

        [Parameter()]
        [System.Object]
        $UserMailInsert,

        [Parameter()]
        [System.Object]
        $DefaultAccessLevel,

        [Parameter()]
        [System.Object]
        $OtaNotificationMailInsert,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $EnableMobileMailboxPolicyWhenCAInplace,

        [Parameter()]
        [System.Object]
        $AllowAccessForUnSupportedPlatform,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $TenantAdminPreference,

        [Parameter()]
        [System.Object]
        $AdminMailRecipients,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-AdminAuditLogConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $UnifiedAuditLogIngestionEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-AntiPhishPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $MakeDefault,

        [Parameter()]
        [System.Object]
        $PhishThresholdLevel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $EnableTargetedDomainsProtection,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $EnableViaTag,

        [Parameter()]
        [System.Object]
        $MailboxIntelligenceProtectionAction,

        [Parameter()]
        [System.Object]
        $TargetedDomainsToProtect,

        [Parameter()]
        [System.Object]
        $EnableOrganizationDomainsProtection,

        [Parameter()]
        [System.Object]
        $EnableSpoofIntelligence,

        [Parameter()]
        [System.Object]
        $EnableSimilarUsersSafetyTips,

        [Parameter()]
        [System.Object]
        $ExcludedDomains,

        [Parameter()]
        [System.Object]
        $EnableAntiSpoofEnforcement,

        [Parameter()]
        [System.Object]
        $TargetedDomainActionRecipients,

        [Parameter()]
        [System.Object]
        $EnableMailboxIntelligence,

        [Parameter()]
        [System.Object]
        $ImpersonationProtectionState,

        [Parameter()]
        [System.Object]
        $TargetedDomainProtectionAction,

        [Parameter()]
        [System.Object]
        $AdminDisplayName,

        [Parameter()]
        [System.Object]
        $AuthenticationFailAction,

        [Parameter()]
        [System.Object]
        $TargetedUsersToProtect,

        [Parameter()]
        [System.Object]
        $TargetedUserProtectionAction,

        [Parameter()]
        [System.Object]
        $MailboxIntelligenceProtectionActionRecipients,

        [Parameter()]
        [System.Object]
        $EnableSimilarDomainsSafetyTips,

        [Parameter()]
        [System.Object]
        $EnableTargetedUserProtection,

        [Parameter()]
        [System.Object]
        $EnableUnauthenticatedSender,

        [Parameter()]
        [System.Object]
        $PolicyTag,

        [Parameter()]
        [System.Object]
        $EnableUnusualCharactersSafetyTips,

        [Parameter()]
        [System.Object]
        $EnableMailboxIntelligenceProtection,

        [Parameter()]
        [System.Object]
        $TargetedUserActionRecipients,

        [Parameter()]
        [System.Object]
        $ExcludedSenders,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-AntiPhishRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $SentToMemberOf,

        [Parameter()]
        [System.Object]
        $AntiPhishPolicy,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $Comments,

        [Parameter()]
        [System.Object]
        $RecipientDomainIs,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientDomainIs,

        [Parameter()]
        [System.Object]
        $ExceptIfSentTo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExceptIfSentToMemberOf,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-App
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $DefaultStateForUser,

        [Parameter()]
        [System.Object]
        $UserList,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OrganizationApp,

        [Parameter()]
        [System.Object]
        $ProvidedTo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PrivateCatalog,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ApplicationAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-AtpPolicyForO365
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TrackClicks,

        [Parameter()]
        [System.Object]
        $EnableATPForSPOTeamsODB,

        [Parameter()]
        [System.Object]
        $BlockUrls,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $EnableSafeLinksForO365Clients,

        [Parameter()]
        [System.Object]
        $AllowClickThrough,

        [Parameter()]
        [System.Object]
        $EnableSafeDocs,

        [Parameter()]
        [System.Object]
        $AllowSafeDocsOpen,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ATPProtectionPolicyRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $SentToMemberOf,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $Comments,

        [Parameter()]
        [System.Object]
        $RecipientDomainIs,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientDomainIs,

        [Parameter()]
        [System.Object]
        $ExceptIfSentTo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExceptIfSentToMemberOf,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-AuthenticationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthRpc,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthPop,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthSmtp,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthMapi,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthImap,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthAutodiscover,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthPowershell,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthActiveSync,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthOfflineAddressBook,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthReportingWebServices,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthOutlookService,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowBasicAuthWebServices,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-AvailabilityConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $OrgWideAccount,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CalendarNotification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DailyAgendaNotificationSendTime,

        [Parameter()]
        [System.Object]
        $DailyAgendaNotification,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $MeetingReminderSendDuringWorkHour,

        [Parameter()]
        [System.Object]
        $NextDays,

        [Parameter()]
        [System.Object]
        $CalendarUpdateNotification,

        [Parameter()]
        [System.Object]
        $MeetingReminderNotification,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreDefaultScope,

        [Parameter()]
        [System.Object]
        $CalendarUpdateSendDuringWorkHour,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CalendarProcessing
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $MaximumConflictInstances,

        [Parameter()]
        [System.Object]
        $AllowDistributionGroup,

        [Parameter()]
        [System.Object]
        $ForwardRequestsToDelegates,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $MaximumDurationInMinutes,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResourceDelegates,

        [Parameter()]
        [System.Object]
        $DeleteNonCalendarItems,

        [Parameter()]
        [System.Object]
        $EnforceAdjacencyAsOverlap,

        [Parameter()]
        [System.Object]
        $DeleteComments,

        [Parameter()]
        [System.Object]
        $EnforceSchedulingHorizon,

        [Parameter()]
        [System.Object]
        $EnableResponseDetails,

        [Parameter()]
        [System.Object]
        $RequestInPolicy,

        [Parameter()]
        [System.Object]
        $EnforceCapacity,

        [Parameter()]
        [System.Object]
        $AutoRSVPConfiguration,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreDefaultScope,

        [Parameter()]
        [System.Object]
        $AllowConflicts,

        [Parameter()]
        [System.Object]
        $AllRequestInPolicy,

        [Parameter()]
        [System.Object]
        $AllowMultipleResources,

        [Parameter()]
        [System.Object]
        $BookInPolicy,

        [Parameter()]
        [System.Object]
        $ConflictPercentageAllowed,

        [Parameter()]
        [System.Object]
        $AutomateProcessing,

        [Parameter()]
        [System.Object]
        $AllRequestOutOfPolicy,

        [Parameter()]
        [System.Object]
        $AddNewRequestsTentatively,

        [Parameter()]
        [System.Object]
        $AllBookInPolicy,

        [Parameter()]
        [System.Object]
        $ProcessExternalMeetingMessages,

        [Parameter()]
        [System.Object]
        $DeleteAttachments,

        [Parameter()]
        [System.Object]
        $ScheduleOnlyDuringWorkHours,

        [Parameter()]
        [System.Object]
        $RemovePrivateProperty,

        [Parameter()]
        [System.Object]
        $AdditionalResponse,

        [Parameter()]
        [System.Object]
        $TentativePendingApproval,

        [Parameter()]
        [System.Object]
        $BookingType,

        [Parameter()]
        [System.Object]
        $MinimumDurationInMinutes,

        [Parameter()]
        [System.Object]
        $RequestOutOfPolicy,

        [Parameter()]
        [System.Object]
        $RemoveOldMeetingMessages,

        [Parameter()]
        [System.Object]
        $BookingWindowInDays,

        [Parameter()]
        [System.Object]
        $OrganizerInfo,

        [Parameter()]
        [System.Object]
        $AddAdditionalResponse,

        [Parameter()]
        [System.Object]
        $RemoveForwardedMeetingNotifications,

        [Parameter()]
        [System.Object]
        $DeleteSubject,

        [Parameter()]
        [System.Object]
        $AllowRecurringMeetings,

        [Parameter()]
        [System.Object]
        $AddOrganizerToSubject,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CASMailbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $IsOptimizedForAccessibility,

        [Parameter()]
        [System.Object]
        $ImapEnabled,

        [Parameter()]
        [System.Object]
        $ImapSuppressReadReceipt,

        [Parameter()]
        [System.Object]
        $ActiveSyncSuppressReadReceipt,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $EwsBlockList,

        [Parameter()]
        [System.Object]
        $EwsAllowEntourage,

        [Parameter()]
        [System.Object]
        $OwaMailboxPolicy,

        [Parameter()]
        [System.Object]
        $PopUseProtocolDefaults,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $SmtpClientAuthenticationDisabled,

        [Parameter()]
        [System.Object]
        $PopForceICalForCalendarRetrievalOption,

        [Parameter()]
        [System.Object]
        $ImapForceICalForCalendarRetrievalOption,

        [Parameter()]
        [System.Object]
        $ShowGalAsDefaultView,

        [Parameter()]
        [System.Object]
        $OutlookMobileEnabled,

        [Parameter()]
        [System.Object]
        $ActiveSyncBlockedDeviceIDs,

        [Parameter()]
        [System.Object]
        $MAPIEnabled,

        [Parameter()]
        [System.Object]
        $EwsAllowOutlook,

        [Parameter()]
        [System.Object]
        $PopEnabled,

        [Parameter()]
        [System.Object]
        $ActiveSyncAllowedDeviceIDs,

        [Parameter()]
        [System.Object]
        $EwsEnabled,

        [Parameter()]
        [System.Object]
        $EwsAllowMacOutlook,

        [Parameter()]
        [System.Object]
        $EwsApplicationAccessPolicy,

        [Parameter()]
        [System.Object]
        $PublicFolderClientAccess,

        [Parameter()]
        [System.Object]
        $OWAEnabled,

        [Parameter()]
        [System.Object]
        $ActiveSyncEnabled,

        [Parameter()]
        [System.Object]
        $ActiveSyncMailboxPolicy,

        [Parameter()]
        [System.Object]
        $UniversalOutlookEnabled,

        [Parameter()]
        [System.Object]
        $ImapUseProtocolDefaults,

        [Parameter()]
        [System.Object]
        $ActiveSyncDebugLogging,

        [Parameter()]
        [System.Object]
        $OWAforDevicesEnabled,

        [Parameter()]
        [System.Object]
        $ImapMessagesRetrievalMimeFormat,

        [Parameter()]
        [System.Object]
        $MacOutlookEnabled,

        [Parameter()]
        [System.Object]
        $PopSuppressReadReceipt,

        [Parameter()]
        [System.Object]
        $EwsAllowList,

        [Parameter()]
        [System.Object]
        $PopMessagesRetrievalMimeFormat,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function set-CASMailboxPlan
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ImapEnabled,

        [Parameter()]
        [System.Object]
        $OwaMailboxPolicy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $PopEnabled,

        [Parameter()]
        [System.Object]
        $ActiveSyncEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ClassificationRuleCollection
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $FileData,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ClientAccessRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $UsernameMatchesAnyOfPatterns,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $AnyOfClientIPAddressesOrRanges,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $ExceptAnyOfClientIPAddressesOrRanges,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $UserRecipientFilter,

        [Parameter()]
        [System.Object]
        $ExceptAnyOfProtocols,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $ExceptUsernameMatchesAnyOfPatterns,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AnyOfAuthenticationTypes,

        [Parameter()]
        [System.Object]
        $AnyOfProtocols,

        [Parameter()]
        [System.Object]
        $ExceptAnyOfAuthenticationTypes,

        [Parameter()]
        [System.Object]
        $Scope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-Clutter
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Enable,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ConnectSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RequestToken,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $OAuthVerifier,

        [Parameter()]
        [System.Object]
        $RequestSecret,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LinkedIn,

        [Parameter()]
        [System.Object]
        $RedirectUri,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-Contact
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Company,

        [Parameter()]
        [System.Object]
        $Phone,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Office,

        [Parameter()]
        [System.Object]
        $CountryOrRegion,

        [Parameter()]
        [System.Object]
        $OtherTelephone,

        [Parameter()]
        [System.Object]
        $Pager,

        [Parameter()]
        [System.Object]
        $PhoneticDisplayName,

        [Parameter()]
        [System.Object]
        $Fax,

        [Parameter()]
        [System.Object]
        $PostOfficeBox,

        [Parameter()]
        [System.Object]
        $LastName,

        [Parameter()]
        [System.Object]
        $UMCallingLineIds,

        [Parameter()]
        [System.Object]
        $SeniorityIndex,

        [Parameter()]
        [System.Object]
        $City,

        [Parameter()]
        [System.Object]
        $TelephoneAssistant,

        [Parameter()]
        [System.Object]
        $AllowUMCallsFromNonUsers,

        [Parameter()]
        [System.Object]
        $Title,

        [Parameter()]
        [System.Object]
        $MobilePhone,

        [Parameter()]
        [System.Object]
        $AssistantName,

        [Parameter()]
        [System.Object]
        $CreateDTMFMap,

        [Parameter()]
        [System.Object]
        $StateOrProvince,

        [Parameter()]
        [System.Object]
        $Initials,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $WebPage,

        [Parameter()]
        [System.Object]
        $Manager,

        [Parameter()]
        [System.Object]
        $HomePhone,

        [Parameter()]
        [System.Object]
        $OtherFax,

        [Parameter()]
        [System.Object]
        $SimpleDisplayName,

        [Parameter()]
        [System.Object]
        $Department,

        [Parameter()]
        [System.Object]
        $OtherHomePhone,

        [Parameter()]
        [System.Object]
        $FirstName,

        [Parameter()]
        [System.Object]
        $UMDtmfMap,

        [Parameter()]
        [System.Object]
        $WindowsEmailAddress,

        [Parameter()]
        [System.Object]
        $Notes,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $GeoCoordinates,

        [Parameter()]
        [System.Object]
        $StreetAddress,

        [Parameter()]
        [System.Object]
        $PostalCode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-DataClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Locale,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Fingerprints,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsDefault,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-DataEncryptionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PermanentDataPurgeContact,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PermanentDataPurgeRequested,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Refresh,

        [Parameter()]
        [System.Object]
        $PermanentDataPurgeReason,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-DistributionGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EmailAddresses,

        [Parameter()]
        [System.Object]
        $RejectMessagesFromDLMembers,

        [Parameter()]
        [System.Object]
        $ModerationEnabled,

        [Parameter()]
        [System.Object]
        $AcceptMessagesOnlyFromSendersOrMembers,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute5,

        [Parameter()]
        [System.Object]
        $CustomAttribute8,

        [Parameter()]
        [System.Object]
        $CustomAttribute5,

        [Parameter()]
        [System.Object]
        $AcceptMessagesOnlyFromDLMembers,

        [Parameter()]
        [System.Object]
        $SimpleDisplayName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreNamingPolicy,

        [Parameter()]
        [System.Object]
        $ReportToManagerEnabled,

        [Parameter()]
        [System.Object]
        $MailTip,

        [Parameter()]
        [System.Object]
        $ModeratedBy,

        [Parameter()]
        [System.Object]
        $GrantSendOnBehalfTo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ResetMigrationToUnifiedGroup,

        [Parameter()]
        [System.Object]
        $AcceptMessagesOnlyFrom,

        [Parameter()]
        [System.Object]
        $BypassNestedModerationEnabled,

        [Parameter()]
        [System.Object]
        $MemberDepartRestriction,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute4,

        [Parameter()]
        [System.Object]
        $CustomAttribute15,

        [Parameter()]
        [System.Object]
        $RejectMessagesFromSendersOrMembers,

        [Parameter()]
        [System.Object]
        $WindowsEmailAddress,

        [Parameter()]
        [System.Object]
        $ReportToOriginatorEnabled,

        [Parameter()]
        [System.Object]
        $Alias,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $BypassModerationFromSendersOrMembers,

        [Parameter()]
        [System.Object]
        $RejectMessagesFrom,

        [Parameter()]
        [System.Object]
        $CustomAttribute1,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceUpgrade,

        [Parameter()]
        [System.Object]
        $UMDtmfMap,

        [Parameter()]
        [System.Object]
        $ManagedBy,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute1,

        [Parameter()]
        [System.Object]
        $CustomAttribute14,

        [Parameter()]
        [System.Object]
        $RequireSenderAuthenticationEnabled,

        [Parameter()]
        [System.Object]
        $CustomAttribute9,

        [Parameter()]
        [System.Object]
        $CustomAttribute6,

        [Parameter()]
        [System.Object]
        $SendOofMessageToOriginatorEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BypassSecurityGroupManagerCheck,

        [Parameter()]
        [System.Object]
        $CustomAttribute7,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute2,

        [Parameter()]
        [System.Object]
        $CustomAttribute13,

        [Parameter()]
        [System.Object]
        $CustomAttribute2,

        [Parameter()]
        [System.Object]
        $PrimarySmtpAddress,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $SendModerationNotifications,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $HiddenGroupMembershipEnabled,

        [Parameter()]
        [System.Object]
        $MemberJoinRestriction,

        [Parameter()]
        [System.Object]
        $CreateDTMFMap,

        [Parameter()]
        [System.Object]
        $MailTipTranslations,

        [Parameter()]
        [System.Object]
        $CustomAttribute4,

        [Parameter()]
        [System.Object]
        $CustomAttribute10,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute3,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RoomList,

        [Parameter()]
        [System.Object]
        $CustomAttribute12,

        [Parameter()]
        [System.Object]
        $CustomAttribute3,

        [Parameter()]
        [System.Object]
        $CustomAttribute11,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $HiddenFromAddressListsEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-DkimSigningConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AdminDisplayName,

        [Parameter()]
        [System.Object]
        $BodyCanonicalization,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PublishTxtRecords,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $HeaderCanonicalization,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-DlpPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $State,

        [Parameter()]
        [System.Object]
        $Mode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-DynamicDistributionGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EmailAddresses,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute6,

        [Parameter()]
        [System.Object]
        $ModerationEnabled,

        [Parameter()]
        [System.Object]
        $AcceptMessagesOnlyFromSendersOrMembers,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute7,

        [Parameter()]
        [System.Object]
        $CustomAttribute12,

        [Parameter()]
        [System.Object]
        $CustomAttribute10,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute5,

        [Parameter()]
        [System.Object]
        $CustomAttribute8,

        [Parameter()]
        [System.Object]
        $CustomAttribute5,

        [Parameter()]
        [System.Object]
        $AcceptMessagesOnlyFromDLMembers,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute2,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute1,

        [Parameter()]
        [System.Object]
        $PhoneticDisplayName,

        [Parameter()]
        [System.Object]
        $MailTip,

        [Parameter()]
        [System.Object]
        $ModeratedBy,

        [Parameter()]
        [System.Object]
        $GrantSendOnBehalfTo,

        [Parameter()]
        [System.Object]
        $AcceptMessagesOnlyFrom,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute9,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute4,

        [Parameter()]
        [System.Object]
        $CustomAttribute15,

        [Parameter()]
        [System.Object]
        $RejectMessagesFromSendersOrMembers,

        [Parameter()]
        [System.Object]
        $WindowsEmailAddress,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute13,

        [Parameter()]
        [System.Object]
        $RejectMessagesFromDLMembers,

        [Parameter()]
        [System.Object]
        $RejectMessagesFrom,

        [Parameter()]
        [System.Object]
        $Alias,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $ReportToOriginatorEnabled,

        [Parameter()]
        [System.Object]
        $BypassModerationFromSendersOrMembers,

        [Parameter()]
        [System.Object]
        $IncludedRecipients,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute12,

        [Parameter()]
        [System.Object]
        $CustomAttribute1,

        [Parameter()]
        [System.Object]
        $ReportToManagerEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceUpgrade,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute14,

        [Parameter()]
        [System.Object]
        $UMDtmfMap,

        [Parameter()]
        [System.Object]
        $ManagedBy,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute1,

        [Parameter()]
        [System.Object]
        $Notes,

        [Parameter()]
        [System.Object]
        $CustomAttribute14,

        [Parameter()]
        [System.Object]
        $RequireSenderAuthenticationEnabled,

        [Parameter()]
        [System.Object]
        $CustomAttribute9,

        [Parameter()]
        [System.Object]
        $RecipientFilter,

        [Parameter()]
        [System.Object]
        $CustomAttribute6,

        [Parameter()]
        [System.Object]
        $SendOofMessageToOriginatorEnabled,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute4,

        [Parameter()]
        [System.Object]
        $SimpleDisplayName,

        [Parameter()]
        [System.Object]
        $ConditionalCompany,

        [Parameter()]
        [System.Object]
        $CustomAttribute7,

        [Parameter()]
        [System.Object]
        $ConditionalStateOrProvince,

        [Parameter()]
        [System.Object]
        $CustomAttribute13,

        [Parameter()]
        [System.Object]
        $CustomAttribute2,

        [Parameter()]
        [System.Object]
        $PrimarySmtpAddress,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute15,

        [Parameter()]
        [System.Object]
        $SendModerationNotifications,

        [Parameter()]
        [System.Object]
        $CreateDTMFMap,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute10,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute5,

        [Parameter()]
        [System.Object]
        $CustomAttribute3,

        [Parameter()]
        [System.Object]
        $MailTipTranslations,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute8,

        [Parameter()]
        [System.Object]
        $CustomAttribute4,

        [Parameter()]
        [System.Object]
        $RecipientContainer,

        [Parameter()]
        [System.Object]
        $CustomAttribute11,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute2,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute3,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute3,

        [Parameter()]
        [System.Object]
        $ConditionalDepartment,

        [Parameter()]
        [System.Object]
        $DirectMembershipOnly,

        [Parameter()]
        [System.Object]
        $ConditionalCustomAttribute11,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $HiddenFromAddressListsEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ElevatedAccessApprovalPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ApprovalType,

        [Parameter()]
        [System.Object]
        $ApproverGroup,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ElevatedAccessRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RequestId,

        [Parameter()]
        [System.Object]
        $Decision,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $RequestContext,

        [Parameter()]
        [System.Object]
        $Organization,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-EmailAddressPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $EnabledEmailAddressTemplates,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceUpgrade,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $EnabledPrimarySMTPAddressTemplate,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-EOPProtectionPolicyRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $SentToMemberOf,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $Comments,

        [Parameter()]
        [System.Object]
        $RecipientDomainIs,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientDomainIs,

        [Parameter()]
        [System.Object]
        $ExceptIfSentTo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExceptIfSentToMemberOf,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-EventsFromEmailConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $CreateEventsFromEmailAsPrivate,

        [Parameter()]
        [System.Object]
        $FlightReservationProcessingLevel,

        [Parameter()]
        [System.Object]
        $FoodEstablishmentReservationProcessingLevel,

        [Parameter()]
        [System.Object]
        $ServiceReservationProcessingLevel,

        [Parameter()]
        [System.Object]
        $EventReservationProcessingLevel,

        [Parameter()]
        [System.Object]
        $LodgingReservationProcessingLevel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ResetSettings,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ParcelDeliveryProcessingLevel,

        [Parameter()]
        [System.Object]
        $RentalCarReservationProcessingLevel,

        [Parameter()]
        [System.Object]
        $InvoiceProcessingLevel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-FederatedOrganizationIdentifier
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AccountNamespace,

        [Parameter()]
        [System.Object]
        $DelegationFederationTrust,

        [Parameter()]
        [System.Object]
        $OrganizationContact,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DefaultDomain,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-FocusedInbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $FocusedInboxOn,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-Group
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $IsHierarchicalGroup,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $SimpleDisplayName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Universal,

        [Parameter()]
        [System.Object]
        $Notes,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $PhoneticDisplayName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BypassSecurityGroupManagerCheck,

        [Parameter()]
        [System.Object]
        $SeniorityIndex,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ManagedBy,

        [Parameter()]
        [System.Object]
        $WindowsEmailAddress,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-GroupMailbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PrimarySmtpAddress,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $RequireSenderAuthenticationEnabled,

        [Parameter()]
        [System.Object]
        $Language,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AutoSubscribeNewGroupMembers,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-HostedConnectionFilterPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ConfigurationXmlRaw,

        [Parameter()]
        [System.Object]
        $AdminDisplayName,

        [Parameter()]
        [System.Object]
        $EnableSafeList,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $IPBlockList,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $IPAllowList,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $MakeDefault,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-HostedContentFilterPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $HighConfidenceSpamAction,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $MakeDefault,

        [Parameter()]
        [System.Object]
        $QuarantineRetentionPeriod,

        [Parameter()]
        [System.Object]
        $MarkAsSpamWebBugsInHtml,

        [Parameter()]
        [System.Object]
        $EndUserSpamNotificationCustomFromName,

        [Parameter()]
        [System.Object]
        $MarkAsSpamFromAddressAuthFail,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $EndUserSpamNotificationCustomFromAddress,

        [Parameter()]
        [System.Object]
        $IncreaseScoreWithRedirectToOtherPort,

        [Parameter()]
        [System.Object]
        $BulkThreshold,

        [Parameter()]
        [System.Object]
        $EnableLanguageBlockList,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PhishZapEnabled,

        [Parameter()]
        [System.Object]
        $EndUserSpamNotificationCustomSubject,

        [Parameter()]
        [System.Object]
        $MarkAsSpamSensitiveWordList,

        [Parameter()]
        [System.Object]
        $MarkAsSpamFormTagsInHtml,

        [Parameter()]
        [System.Object]
        $MarkAsSpamNdrBackscatter,

        [Parameter()]
        [System.Object]
        $AddXHeaderValue,

        [Parameter()]
        [System.Object]
        $BulkSpamAction,

        [Parameter()]
        [System.Object]
        $ModifySubjectValue,

        [Parameter()]
        [System.Object]
        $IncreaseScoreWithImageLinks,

        [Parameter()]
        [System.Object]
        $MarkAsSpamEmptyMessages,

        [Parameter()]
        [System.Object]
        $MarkAsSpamSpfRecordHardFail,

        [Parameter()]
        [System.Object]
        $PhishSpamAction,

        [Parameter()]
        [System.Object]
        $HighConfidencePhishAction,

        [Parameter()]
        [System.Object]
        $MarkAsSpamJavaScriptInHtml,

        [Parameter()]
        [System.Object]
        $EnableRegionBlockList,

        [Parameter()]
        [System.Object]
        $EnableEndUserSpamNotifications,

        [Parameter()]
        [System.Object]
        $TestModeAction,

        [Parameter()]
        [System.Object]
        $RedirectToRecipients,

        [Parameter()]
        [System.Object]
        $AllowedSenderDomains,

        [Parameter()]
        [System.Object]
        $MarkAsSpamObjectTagsInHtml,

        [Parameter()]
        [System.Object]
        $MarkAsSpamFramesInHtml,

        [Parameter()]
        [System.Object]
        $TestModeBccToRecipients,

        [Parameter()]
        [System.Object]
        $MarkAsSpamEmbedTagsInHtml,

        [Parameter()]
        [System.Object]
        $EndUserSpamNotificationLanguage,

        [Parameter()]
        [System.Object]
        $EndUserSpamNotificationLimit,

        [Parameter()]
        [System.Object]
        $SpamAction,

        [Parameter()]
        [System.Object]
        $InlineSafetyTipsEnabled,

        [Parameter()]
        [System.Object]
        $SpamZapEnabled,

        [Parameter()]
        [System.Object]
        $BlockedSenders,

        [Parameter()]
        [System.Object]
        $AllowedSenders,

        [Parameter()]
        [System.Object]
        $LanguageBlockList,

        [Parameter()]
        [System.Object]
        $RegionBlockList,

        [Parameter()]
        [System.Object]
        $IncreaseScoreWithBizOrInfoUrls,

        [Parameter()]
        [System.Object]
        $AdminDisplayName,

        [Parameter()]
        [System.Object]
        $EndUserSpamNotificationFrequency,

        [Parameter()]
        [System.Object]
        $IncreaseScoreWithNumericIps,

        [Parameter()]
        [System.Object]
        $BlockedSenderDomains,

        [Parameter()]
        [System.Object]
        $MarkAsSpamBulkMail,

        [Parameter()]
        [System.Object]
        $DownloadLink,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-HostedContentFilterRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $SentToMemberOf,

        [Parameter()]
        [System.Object]
        $HostedContentFilterPolicy,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $Comments,

        [Parameter()]
        [System.Object]
        $RecipientDomainIs,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientDomainIs,

        [Parameter()]
        [System.Object]
        $ExceptIfSentTo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExceptIfSentToMemberOf,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-HostedOutboundSpamFilterPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AdminDisplayName,

        [Parameter()]
        [System.Object]
        $BccSuspiciousOutboundAdditionalRecipients,

        [Parameter()]
        [System.Object]
        $NotifyOutboundSpamRecipients,

        [Parameter()]
        [System.Object]
        $RecipientLimitInternalPerHour,

        [Parameter()]
        [System.Object]
        $RecipientLimitPerDay,

        [Parameter()]
        [System.Object]
        $ActionWhenThresholdReached,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $AutoForwardingMode,

        [Parameter()]
        [System.Object]
        $NotifyOutboundSpam,

        [Parameter()]
        [System.Object]
        $BccSuspiciousOutboundMail,

        [Parameter()]
        [System.Object]
        $RecipientLimitExternalPerHour,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-HostedOutboundSpamFilterRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $ExceptIfFrom,

        [Parameter()]
        [System.Object]
        $ExceptIfSenderDomainIs,

        [Parameter()]
        [System.Object]
        $Comments,

        [Parameter()]
        [System.Object]
        $FromMemberOf,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $SenderDomainIs,

        [Parameter()]
        [System.Object]
        $HostedOutboundSpamFilterPolicy,

        [Parameter()]
        [System.Object]
        $ExceptIfFromMemberOf,

        [Parameter()]
        [System.Object]
        $From,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-HotmailSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $Password,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-HybridMailflow
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $CertificateSubject,

        [Parameter()]
        [System.Object]
        $CentralizedTransportEnabled,

        [Parameter()]
        [System.Object]
        $OnPremisesFQDN,

        [Parameter()]
        [System.Object]
        $SecureMailEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $OutboundDomains,

        [Parameter()]
        [System.Object]
        $InboundIPs,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ImapSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ResendVerification,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $EmailAddress,

        [Parameter()]
        [System.Object]
        $IncomingServer,

        [Parameter()]
        [System.Object]
        $IncomingUserName,

        [Parameter()]
        [System.Object]
        $IncomingSecurity,

        [Parameter()]
        [System.Object]
        $IncomingPort,

        [Parameter()]
        [System.Object]
        $IncomingPassword,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ValidateSecret,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $IncomingAuth,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-InboundConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RestrictDomainsToIPAddresses,

        [Parameter()]
        [System.Object]
        $CloudServicesMailEnabled,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $EFTestMode,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $EFSkipMailGateway,

        [Parameter()]
        [System.Object]
        $TlsSenderCertificateName,

        [Parameter()]
        [System.Object]
        $ScanAndDropRecipients,

        [Parameter()]
        [System.Object]
        $AssociatedAcceptedDomains,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $RequireTls,

        [Parameter()]
        [System.Object]
        $SenderDomains,

        [Parameter()]
        [System.Object]
        $SenderIPAddresses,

        [Parameter()]
        [System.Object]
        $EFSkipLastIP,

        [Parameter()]
        [System.Object]
        $EFUsers,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ConnectorType,

        [Parameter()]
        [System.Object]
        $RestrictDomainsToCertificate,

        [Parameter()]
        [System.Object]
        $EFSkipIPs,

        [Parameter()]
        [System.Object]
        $TreatMessagesAsInternal,

        [Parameter()]
        [System.Object]
        $ConnectorSource,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-InboxRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ExceptIfMyNameNotInToBox,

        [Parameter()]
        [System.Object]
        $ExceptIfMyNameInToOrCcBox,

        [Parameter()]
        [System.Object]
        $PinMessage,

        [Parameter()]
        [System.Object]
        $WithinSizeRangeMaximum,

        [Parameter()]
        [System.Object]
        $ReceivedBeforeDate,

        [Parameter()]
        [System.Object]
        $ExceptIfFromAddressContainsWords,

        [Parameter()]
        [System.Object]
        $HasClassification,

        [Parameter()]
        [System.Object]
        $ExceptIfFromSubscription,

        [Parameter()]
        [System.Object]
        $ExceptIfWithinSizeRangeMaximum,

        [Parameter()]
        [System.Object]
        $WithinSizeRangeMinimum,

        [Parameter()]
        [System.Object]
        $MyNameInToOrCcBox,

        [Parameter()]
        [System.Object]
        $ExceptIfReceivedBeforeDate,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $ExceptIfFrom,

        [Parameter()]
        [System.Object]
        $RedirectTo,

        [Parameter()]
        [System.Object]
        $ReceivedAfterDate,

        [Parameter()]
        [System.Object]
        $ForwardTo,

        [Parameter()]
        [System.Object]
        $ExceptIfReceivedAfterDate,

        [Parameter()]
        [System.Object]
        $ExceptIfWithImportance,

        [Parameter()]
        [System.Object]
        $HeaderContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfSentOnlyToMe,

        [Parameter()]
        [System.Object]
        $ExceptIfSubjectOrBodyContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfMessageTypeMatches,

        [Parameter()]
        [System.Object]
        $ExceptIfHasAttachment,

        [Parameter()]
        [System.Object]
        $DeleteMessage,

        [Parameter()]
        [System.Object]
        $ExceptIfMyNameInToBox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AlwaysDeleteOutlookRulesBlob,

        [Parameter()]
        [System.Object]
        $From,

        [Parameter()]
        [System.Object]
        $RecipientAddressContainsWords,

        [Parameter()]
        [System.Object]
        $FlaggedForAction,

        [Parameter()]
        [System.Object]
        $WithSensitivity,

        [Parameter()]
        [System.Object]
        $CopyToFolder,

        [Parameter()]
        [System.Object]
        $ExceptIfSubjectContainsWords,

        [Parameter()]
        [System.Object]
        $MarkImportance,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $ApplyCategory,

        [Parameter()]
        [System.Object]
        $SubjectContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfHeaderContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientAddressContainsWords,

        [Parameter()]
        [System.Object]
        $HasAttachment,

        [Parameter()]
        [System.Object]
        $SubjectOrBodyContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfFlaggedForAction,

        [Parameter()]
        [System.Object]
        $FromSubscription,

        [Parameter()]
        [System.Object]
        $BodyContainsWords,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $StopProcessingRules,

        [Parameter()]
        [System.Object]
        $DeleteSystemCategory,

        [Parameter()]
        [System.Object]
        $ExceptIfWithinSizeRangeMinimum,

        [Parameter()]
        [System.Object]
        $MessageTypeMatches,

        [Parameter()]
        [System.Object]
        $ApplySystemCategory,

        [Parameter()]
        [System.Object]
        $SendTextMessageNotificationTo,

        [Parameter()]
        [System.Object]
        $MarkAsRead,

        [Parameter()]
        [System.Object]
        $MoveToFolder,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $MyNameInCcBox,

        [Parameter()]
        [System.Object]
        $WithImportance,

        [Parameter()]
        [System.Object]
        $MyNameInToBox,

        [Parameter()]
        [System.Object]
        $ExceptIfSentTo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $SentOnlyToMe,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $ForwardAsAttachmentTo,

        [Parameter()]
        [System.Object]
        $ExceptIfBodyContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfMyNameInCcBox,

        [Parameter()]
        [System.Object]
        $FromAddressContainsWords,

        [Parameter()]
        [System.Object]
        $MyNameNotInToBox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ExceptIfWithSensitivity,

        [Parameter()]
        [System.Object]
        $ExceptIfHasClassification,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-IntraOrganizationConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TargetAddressDomains,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DiscoveryEndpoint,

        [Parameter()]
        [System.Object]
        $TargetSharingEpr,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-IRMConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $TransportDecryptionSetting,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $RMSOnlineKeySharingLocation,

        [Parameter()]
        [System.Object]
        $SimplifiedClientAccessDoNotForwardDisabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $AzureRMSLicensingEnabled,

        [Parameter()]
        [System.Object]
        $EnablePdfEncryption,

        [Parameter()]
        [System.Object]
        $DecryptAttachmentForEncryptOnly,

        [Parameter()]
        [System.Object]
        $InternalLicensingEnabled,

        [Parameter()]
        [System.Object]
        $EDiscoverySuperUserEnabled,

        [Parameter()]
        [System.Object]
        $JournalReportDecryptionEnabled,

        [Parameter()]
        [System.Object]
        $AutomaticServiceUpdateEnabled,

        [Parameter()]
        [System.Object]
        $SimplifiedClientAccessEncryptOnlyDisabled,

        [Parameter()]
        [System.Object]
        $SearchEnabled,

        [Parameter()]
        [System.Object]
        $LicensingLocation,

        [Parameter()]
        [System.Object]
        $SimplifiedClientAccessEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-JournalRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Scope,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $JournalEmailAddress,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Recipient,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-LabelProperties
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ApplyToUsers,

        [Parameter()]
        [System.Object]
        $GrantAccessToNoUsers,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-LinkedUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $CertificateSubject,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-Mailbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EmailAddresses,

        [Parameter()]
        [System.Object]
        $RejectMessagesFromDLMembers,

        [Parameter()]
        [System.Object]
        $AuditOwner,

        [Parameter()]
        [System.Object]
        $AcceptMessagesOnlyFromSendersOrMembers,

        [Parameter()]
        [System.Object]
        $NonCompliantDevices,

        [Parameter()]
        [System.Object]
        $UserCertificate,

        [Parameter()]
        [System.Object]
        $CustomAttribute12,

        [Parameter()]
        [System.Object]
        $CustomAttribute10,

        [Parameter()]
        [System.Object]
        $DeliverToMailboxAndForward,

        [Parameter()]
        [System.Object]
        $RetentionUrl,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute5,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RecalculateInactiveMailbox,

        [Parameter()]
        [System.Object]
        $CustomAttribute8,

        [Parameter()]
        [System.Object]
        $ProhibitSendReceiveQuota,

        [Parameter()]
        [System.Object]
        $CustomAttribute5,

        [Parameter()]
        [System.Object]
        $RoomMailboxPassword,

        [Parameter()]
        [System.Object]
        $MessageRecallProcessingEnabled,

        [Parameter()]
        [System.Object]
        $ElcProcessingDisabled,

        [Parameter()]
        [System.Object]
        $ExcludeFromOrgHolds,

        [Parameter()]
        [System.Object]
        $Type,

        [Parameter()]
        [System.Object]
        $MailTip,

        [Parameter()]
        [System.Object]
        $IssueWarningQuota,

        [Parameter()]
        [System.Object]
        $ModeratedBy,

        [Parameter()]
        [System.Object]
        $GrantSendOnBehalfTo,

        [Parameter()]
        [System.Object]
        $AuditLogAgeLimit,

        [Parameter()]
        [System.Object]
        $UserSMimeCertificate,

        [Parameter()]
        [System.Object]
        $AcceptMessagesOnlyFrom,

        [Parameter()]
        [System.Object]
        $SingleItemRecoveryEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveDisabledArchive,

        [Parameter()]
        [System.Object]
        $Languages,

        [Parameter()]
        [System.Object]
        $UseDatabaseQuotaDefaults,

        [Parameter()]
        [System.Object]
        $JournalArchiveAddress,

        [Parameter()]
        [System.Object]
        $LitigationHoldDuration,

        [Parameter()]
        [System.Object]
        $ModerationEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InactiveMailbox,

        [Parameter()]
        [System.Object]
        $RetentionComment,

        [Parameter()]
        [System.Object]
        $MaxReceiveSize,

        [Parameter()]
        [System.Object]
        $MessageCopyForSendOnBehalfEnabled,

        [Parameter()]
        [System.Object]
        $CustomAttribute15,

        [Parameter()]
        [System.Object]
        $LitigationHoldEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UpdateEnforcedTimestamp,

        [Parameter()]
        [System.Object]
        $ImmutableId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PublicFolder,

        [Parameter()]
        [System.Object]
        $UseDatabaseRetentionDefaults,

        [Parameter()]
        [System.Object]
        $SharingPolicy,

        [Parameter()]
        [System.Object]
        $RemoveOrphanedHolds,

        [Parameter()]
        [System.Object]
        $RejectMessagesFrom,

        [Parameter()]
        [System.Object]
        $RulesQuota,

        [Parameter()]
        [System.Object]
        $Alias,

        [Parameter()]
        [System.Object]
        $EnforcedTimestamps,

        [Parameter()]
        [System.Object]
        $RejectMessagesFromSendersOrMembers,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $ResourceCustom,

        [Parameter()]
        [System.Object]
        $MessageCopyForSMTPClientSubmissionEnabled,

        [Parameter()]
        [System.Object]
        $LitigationHoldDate,

        [Parameter()]
        [System.Object]
        $DefaultPublicFolderMailbox,

        [Parameter()]
        [System.Object]
        $BypassModerationFromSendersOrMembers,

        [Parameter()]
        [System.Object]
        $ProhibitSendQuota,

        [Parameter()]
        [System.Object]
        $DefaultAuditSet,

        [Parameter()]
        [System.Object]
        $AcceptMessagesOnlyFromDLMembers,

        [Parameter()]
        [System.Object]
        $SimpleDisplayName,

        [Parameter()]
        [System.Object]
        $CustomAttribute1,

        [Parameter()]
        [System.Object]
        $CalendarRepairDisabled,

        [Parameter()]
        [System.Object]
        $StsRefreshTokensValidFrom,

        [Parameter()]
        [System.Object]
        $SecondaryDialPlan,

        [Parameter()]
        [System.Object]
        $UMDtmfMap,

        [Parameter()]
        [System.Object]
        $AddressBookPolicy,

        [Parameter()]
        [System.Object]
        $MailboxRegion,

        [Parameter()]
        [System.Object]
        $ResourceCapacity,

        [Parameter()]
        [System.Object]
        $LitigationHoldOwner,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute1,

        [Parameter()]
        [System.Object]
        $AccountDisabled,

        [Parameter()]
        [System.Object]
        $WindowsEmailAddress,

        [Parameter()]
        [System.Object]
        $AuditDelegate,

        [Parameter()]
        [System.Object]
        $CustomAttribute14,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ApplyMandatoryProperties,

        [Parameter()]
        [System.Object]
        $RequireSenderAuthenticationEnabled,

        [Parameter()]
        [System.Object]
        $CustomAttribute9,

        [Parameter()]
        [System.Object]
        $CustomAttribute6,

        [Parameter()]
        [System.Object]
        $DataEncryptionPolicy,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute4,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GroupMailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $EnableRoomMailboxAccount,

        [Parameter()]
        [System.Object]
        $RetentionPolicy,

        [Parameter()]
        [System.Object]
        $RetainDeletedItemsFor,

        [Parameter()]
        [System.Object]
        $MicrosoftOnlineServicesID,

        [Parameter()]
        [System.Object]
        $MessageTrackingReadStatusEnabled,

        [Parameter()]
        [System.Object]
        $AuditAdmin,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute2,

        [Parameter()]
        [System.Object]
        $RetentionHoldEnabled,

        [Parameter()]
        [System.Object]
        $CustomAttribute13,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $CustomAttribute2,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveDelayHoldApplied,

        [Parameter()]
        [System.Object]
        $ExternalOofOptions,

        [Parameter()]
        [System.Object]
        $ImListMigrationCompleted,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveMailboxProvisioningConstraint,

        [Parameter()]
        [System.Object]
        $SendModerationNotifications,

        [Parameter()]
        [System.Object]
        $EndDateForRetentionHold,

        [Parameter()]
        [System.Object]
        $RoleAssignmentPolicy,

        [Parameter()]
        [System.Object]
        $IsExcludedFromServingHierarchy,

        [Parameter()]
        [System.Object]
        $Office,

        [Parameter()]
        [System.Object]
        $MaxSendSize,

        [Parameter()]
        [System.Object]
        $CreateDTMFMap,

        [Parameter()]
        [System.Object]
        $RecipientLimits,

        [Parameter()]
        [System.Object]
        $MessageCopyForSentAsEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ProvisionedForOfficeGraph,

        [Parameter()]
        [System.Object]
        $MailTipTranslations,

        [Parameter()]
        [System.Object]
        $CustomAttribute7,

        [Parameter()]
        [System.Object]
        $CustomAttribute4,

        [Parameter()]
        [System.Object]
        $CalendarVersionStoreDisabled,

        [Parameter()]
        [System.Object]
        $SecondaryAddress,

        [Parameter()]
        [System.Object]
        $ArchiveName,

        [Parameter()]
        [System.Object]
        $StartDateForRetentionHold,

        [Parameter()]
        [System.Object]
        $AuditEnabled,

        [Parameter()]
        [System.Object]
        $Password,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute3,

        [Parameter()]
        [System.Object]
        $ForwardingAddress,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ExcludeFromAllOrgHolds,

        [Parameter()]
        [System.Object]
        $CustomAttribute3,

        [Parameter()]
        [System.Object]
        $CustomAttribute11,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveDelayReleaseHoldApplied,

        [Parameter()]
        [System.Object]
        $ForwardingSmtpAddress,

        [Parameter()]
        [System.Object]
        $HiddenFromAddressListsEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MailboxAuditBypassAssociation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $AuditBypassEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MailboxAutoReplyConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreDefaultScope,

        [Parameter()]
        [System.Object]
        $DeclineMeetingMessage,

        [Parameter()]
        [System.Object]
        $ExternalAudience,

        [Parameter()]
        [System.Object]
        $DeclineEventsForScheduledOOF,

        [Parameter()]
        [System.Object]
        $AutoDeclineFutureRequestsWhenOOF,

        [Parameter()]
        [System.Object]
        $AutoReplyState,

        [Parameter()]
        [System.Object]
        $EventsToDeleteIDs,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $StartTime,

        [Parameter()]
        [System.Object]
        $CreateOOFEvent,

        [Parameter()]
        [System.Object]
        $OOFEventSubject,

        [Parameter()]
        [System.Object]
        $DeclineAllEventsForScheduledOOF,

        [Parameter()]
        [System.Object]
        $EndTime,

        [Parameter()]
        [System.Object]
        $InternalMessage,

        [Parameter()]
        [System.Object]
        $ExternalMessage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MailboxCalendarConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EntertainmentEventsFromEmailEnabled,

        [Parameter()]
        [System.Object]
        $WorkspaceUserEnabled,

        [Parameter()]
        [System.Object]
        $ConversationalSchedulingEnabled,

        [Parameter()]
        [System.Object]
        $HotelEventsFromEmailEnabled,

        [Parameter()]
        [System.Object]
        $SkipAgendaMailOnFreeDays,

        [Parameter()]
        [System.Object]
        $DiningEventsFromEmailEnabled,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $CreateEventsFromEmailAsPrivate,

        [Parameter()]
        [System.Object]
        $WeatherLocationBookmark,

        [Parameter()]
        [System.Object]
        $CalendarFeedsPreferredLanguage,

        [Parameter()]
        [System.Object]
        $PackageDeliveryEventsFromEmailEnabled,

        [Parameter()]
        [System.Object]
        $RentalCarEventsFromEmailEnabled,

        [Parameter()]
        [System.Object]
        $DefaultMeetingDuration,

        [Parameter()]
        [System.Object]
        $ReminderSoundEnabled,

        [Parameter()]
        [System.Object]
        $WorkingHoursEndTime,

        [Parameter()]
        [System.Object]
        $AgendaMailIntroductionEnabled,

        [Parameter()]
        [System.Object]
        $InvoiceEventsFromEmailEnabled,

        [Parameter()]
        [System.Object]
        $UseBrightCalendarColorThemeInOwa,

        [Parameter()]
        [System.Object]
        $DefaultReminderTime,

        [Parameter()]
        [System.Object]
        $WorkDays,

        [Parameter()]
        [System.Object]
        $CalendarFeedsPreferredRegion,

        [Parameter()]
        [System.Object]
        $ServiceAppointmentEventsFromEmailEnabled,

        [Parameter()]
        [System.Object]
        $ShowWeekNumbers,

        [Parameter()]
        [System.Object]
        $RemindersEnabled,

        [Parameter()]
        [System.Object]
        $WeekStartDay,

        [Parameter()]
        [System.Object]
        $FirstWeekOfYear,

        [Parameter()]
        [System.Object]
        $WorkingHoursStartTime,

        [Parameter()]
        [System.Object]
        $CalendarFeedsRootPageId,

        [Parameter()]
        [System.Object]
        $DailyAgendaMailSchedule,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AddOnlineMeetingToAllEvents,

        [Parameter()]
        [System.Object]
        $WeatherLocations,

        [Parameter()]
        [System.Object]
        $OnlineMeetingsByDefaultEnabled,

        [Parameter()]
        [System.Object]
        $TimeIncrement,

        [Parameter()]
        [System.Object]
        $WorkingHoursTimeZone,

        [Parameter()]
        [System.Object]
        $EventsFromEmailEnabled,

        [Parameter()]
        [System.Object]
        $WeatherUnit,

        [Parameter()]
        [System.Object]
        $FlightEventsFromEmailEnabled,

        [Parameter()]
        [System.Object]
        $WeatherEnabled,

        [Parameter()]
        [System.Object]
        $AgendaMailEnabled,

        [Parameter()]
        [System.Object]
        $AgendaPaneEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MailboxCalendarFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DetailLevel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UseHttps,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SetAsSharingSource,

        [Parameter()]
        [System.Object]
        $SharedCalendarSyncStartDate,

        [Parameter()]
        [System.Object]
        $SearchableUrlEnabled,

        [Parameter()]
        [System.Object]
        $PublishEnabled,

        [Parameter()]
        [System.Object]
        $PublishDateRangeTo,

        [Parameter()]
        [System.Object]
        $PublishDateRangeFrom,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ResetUrl,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MailboxFolderPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AccessRights,

        [Parameter()]
        [System.Object]
        $SharingPermissionFlags,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $User,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $SendNotificationToUser,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MailboxJunkEmailConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TrustedSendersAndDomains,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $TrustedListsOnly,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreDefaultScope,

        [Parameter()]
        [System.Object]
        $BlockedSendersAndDomains,

        [Parameter()]
        [System.Object]
        $ContactsTrusted,

        [Parameter()]
        [System.Object]
        $TrustedRecipientsAndDomains,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MailboxLocation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MailboxMessageConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SendAddressDefault,

        [Parameter()]
        [System.Object]
        $AutoAddSignature,

        [Parameter()]
        [System.Object]
        $NewItemNotification,

        [Parameter()]
        [System.Object]
        $SignatureText,

        [Parameter()]
        [System.Object]
        $ShowPreviewTextInListView,

        [Parameter()]
        [System.Object]
        $ShowReadingPaneOnFirstLoad,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $LinkPreviewEnabled,

        [Parameter()]
        [System.Object]
        $AfterMoveOrDeleteBehavior,

        [Parameter()]
        [System.Object]
        $DefaultFontColor,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $GlobalReadingPanePosition,

        [Parameter()]
        [System.Object]
        $PreviewMarkAsReadDelaytime,

        [Parameter()]
        [System.Object]
        $AlwaysShowFrom,

        [Parameter()]
        [System.Object]
        $ShowSenderOnTopInListView,

        [Parameter()]
        [System.Object]
        $IsReplyAllTheDefaultResponse,

        [Parameter()]
        [System.Object]
        $SignatureHtml,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreDefaultScope,

        [Parameter()]
        [System.Object]
        $UseDefaultSignatureOnMobile,

        [Parameter()]
        [System.Object]
        $DefaultFontName,

        [Parameter()]
        [System.Object]
        $NavigationPaneViewOption,

        [Parameter()]
        [System.Object]
        $EmailComposeMode,

        [Parameter()]
        [System.Object]
        $AutoAddSignatureOnReply,

        [Parameter()]
        [System.Object]
        $HideDeletedItems,

        [Parameter()]
        [System.Object]
        $ShowConversationAsTree,

        [Parameter()]
        [System.Object]
        $EchoGroupMessageBackToSubscribedSender,

        [Parameter()]
        [System.Object]
        $CheckForForgottenAttachments,

        [Parameter()]
        [System.Object]
        $IsFavoritesFolderTreeCollapsed,

        [Parameter()]
        [System.Object]
        $SignatureTextOnMobile,

        [Parameter()]
        [System.Object]
        $IsMailRootFolderTreeCollapsed,

        [Parameter()]
        [System.Object]
        $ConversationSortOrder,

        [Parameter()]
        [System.Object]
        $ShowUpNext,

        [Parameter()]
        [System.Object]
        $PreferAccessibleContent,

        [Parameter()]
        [System.Object]
        $EmptyDeletedItemsOnLogoff,

        [Parameter()]
        [System.Object]
        $ReadReceiptResponse,

        [Parameter()]
        [System.Object]
        $DefaultFontSize,

        [Parameter()]
        [System.Object]
        $MailFolderPaneExpanded,

        [Parameter()]
        [System.Object]
        $AlwaysShowBcc,

        [Parameter()]
        [System.Object]
        $AutoAddSignatureOnMobile,

        [Parameter()]
        [System.Object]
        $PreviewMarkAsReadBehavior,

        [Parameter()]
        [System.Object]
        $DefaultFontFlags,

        [Parameter()]
        [System.Object]
        $DefaultFormat,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MailboxPlan
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RoleAssignmentPolicy,

        [Parameter()]
        [System.Object]
        $IssueWarningQuota,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $MaxSendSize,

        [Parameter()]
        [System.Object]
        $RetentionPolicy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ProhibitSendQuota,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $RetainDeletedItemsFor,

        [Parameter()]
        [System.Object]
        $ProhibitSendReceiveQuota,

        [Parameter()]
        [System.Object]
        $RecipientLimits,

        [Parameter()]
        [System.Object]
        $MaxReceiveSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsDefault,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MailboxRegionalConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DateFormat,

        [Parameter()]
        [System.Object]
        $TimeFormat,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Archive,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalizeDefaultFolderName,

        [Parameter()]
        [System.Object]
        $TimeZone,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Language,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MailboxRestoreRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $RequestExpiryInterval,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $SkipMerging,

        [Parameter()]
        [System.Object]
        $LargeItemLimit,

        [Parameter()]
        [System.Object]
        $BatchName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RehomeRequest,

        [Parameter()]
        [System.Object]
        $RemoteHostName,

        [Parameter()]
        [System.Object]
        $SkippedItemApprovalTime,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $InternalFlags,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipInitialConnectionValidation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AcceptLargeDataLoss,

        [Parameter()]
        [System.Object]
        $BadItemLimit,

        [Parameter()]
        [System.Object]
        $CompletedRequestAgeLimit,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MailboxSearch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $InPlaceHoldEnabled,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ItemHoldPeriod,

        [Parameter()]
        [System.Object]
        $SourceMailboxes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MailboxSpellingConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DictionaryLanguage,

        [Parameter()]
        [System.Object]
        $CheckBeforeSend,

        [Parameter()]
        [System.Object]
        $IgnoreMixedDigits,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $IgnoreUppercase,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MailContact
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EmailAddresses,

        [Parameter()]
        [System.Object]
        $RejectMessagesFromDLMembers,

        [Parameter()]
        [System.Object]
        $ModerationEnabled,

        [Parameter()]
        [System.Object]
        $AcceptMessagesOnlyFromSendersOrMembers,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute5,

        [Parameter()]
        [System.Object]
        $CustomAttribute8,

        [Parameter()]
        [System.Object]
        $CustomAttribute5,

        [Parameter()]
        [System.Object]
        $SimpleDisplayName,

        [Parameter()]
        [System.Object]
        $MailTip,

        [Parameter()]
        [System.Object]
        $ModeratedBy,

        [Parameter()]
        [System.Object]
        $GrantSendOnBehalfTo,

        [Parameter()]
        [System.Object]
        $AcceptMessagesOnlyFrom,

        [Parameter()]
        [System.Object]
        $MessageBodyFormat,

        [Parameter()]
        [System.Object]
        $CustomAttribute15,

        [Parameter()]
        [System.Object]
        $RejectMessagesFromSendersOrMembers,

        [Parameter()]
        [System.Object]
        $WindowsEmailAddress,

        [Parameter()]
        [System.Object]
        $RejectMessagesFrom,

        [Parameter()]
        [System.Object]
        $Alias,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $BypassModerationFromSendersOrMembers,

        [Parameter()]
        [System.Object]
        $AcceptMessagesOnlyFromDLMembers,

        [Parameter()]
        [System.Object]
        $CustomAttribute1,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceUpgrade,

        [Parameter()]
        [System.Object]
        $HiddenFromAddressListsEnabled,

        [Parameter()]
        [System.Object]
        $MessageFormat,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute1,

        [Parameter()]
        [System.Object]
        $CustomAttribute14,

        [Parameter()]
        [System.Object]
        $RequireSenderAuthenticationEnabled,

        [Parameter()]
        [System.Object]
        $CustomAttribute9,

        [Parameter()]
        [System.Object]
        $CustomAttribute6,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute4,

        [Parameter()]
        [System.Object]
        $UsePreferMessageFormat,

        [Parameter()]
        [System.Object]
        $CustomAttribute7,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute2,

        [Parameter()]
        [System.Object]
        $CustomAttribute13,

        [Parameter()]
        [System.Object]
        $CustomAttribute2,

        [Parameter()]
        [System.Object]
        $UMDtmfMap,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $UseMapiRichTextFormat,

        [Parameter()]
        [System.Object]
        $SecondaryDialPlan,

        [Parameter()]
        [System.Object]
        $SendModerationNotifications,

        [Parameter()]
        [System.Object]
        $ExternalEmailAddress,

        [Parameter()]
        [System.Object]
        $CreateDTMFMap,

        [Parameter()]
        [System.Object]
        $SecondaryAddress,

        [Parameter()]
        [System.Object]
        $MailTipTranslations,

        [Parameter()]
        [System.Object]
        $CustomAttribute4,

        [Parameter()]
        [System.Object]
        $CustomAttribute10,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute3,

        [Parameter()]
        [System.Object]
        $CustomAttribute12,

        [Parameter()]
        [System.Object]
        $MacAttachmentFormat,

        [Parameter()]
        [System.Object]
        $CustomAttribute3,

        [Parameter()]
        [System.Object]
        $CustomAttribute11,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MailPublicFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EmailAddresses,

        [Parameter()]
        [System.Object]
        $RejectMessagesFromDLMembers,

        [Parameter()]
        [System.Object]
        $ModerationEnabled,

        [Parameter()]
        [System.Object]
        $AcceptMessagesOnlyFromSendersOrMembers,

        [Parameter()]
        [System.Object]
        $CustomAttribute14,

        [Parameter()]
        [System.Object]
        $DeliverToMailboxAndForward,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute5,

        [Parameter()]
        [System.Object]
        $CustomAttribute8,

        [Parameter()]
        [System.Object]
        $CustomAttribute5,

        [Parameter()]
        [System.Object]
        $SimpleDisplayName,

        [Parameter()]
        [System.Object]
        $PhoneticDisplayName,

        [Parameter()]
        [System.Object]
        $MailTip,

        [Parameter()]
        [System.Object]
        $ModeratedBy,

        [Parameter()]
        [System.Object]
        $GrantSendOnBehalfTo,

        [Parameter()]
        [System.Object]
        $AcceptMessagesOnlyFrom,

        [Parameter()]
        [System.Object]
        $MaxReceiveSize,

        [Parameter()]
        [System.Object]
        $EmailAddressPolicyEnabled,

        [Parameter()]
        [System.Object]
        $CustomAttribute15,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreDefaultScope,

        [Parameter()]
        [System.Object]
        $RejectMessagesFromSendersOrMembers,

        [Parameter()]
        [System.Object]
        $WindowsEmailAddress,

        [Parameter()]
        [System.Object]
        $RejectMessagesFrom,

        [Parameter()]
        [System.Object]
        $Alias,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $IgnoreMissingFolderLink,

        [Parameter()]
        [System.Object]
        $BypassModerationFromSendersOrMembers,

        [Parameter()]
        [System.Object]
        $AcceptMessagesOnlyFromDLMembers,

        [Parameter()]
        [System.Object]
        $CustomAttribute1,

        [Parameter()]
        [System.Object]
        $Contacts,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute1,

        [Parameter()]
        [System.Object]
        $EntryId,

        [Parameter()]
        [System.Object]
        $RequireSenderAuthenticationEnabled,

        [Parameter()]
        [System.Object]
        $CustomAttribute9,

        [Parameter()]
        [System.Object]
        $CustomAttribute6,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute4,

        [Parameter()]
        [System.Object]
        $CustomAttribute7,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute2,

        [Parameter()]
        [System.Object]
        $CustomAttribute13,

        [Parameter()]
        [System.Object]
        $CustomAttribute2,

        [Parameter()]
        [System.Object]
        $PrimarySmtpAddress,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $SendModerationNotifications,

        [Parameter()]
        [System.Object]
        $ExternalEmailAddress,

        [Parameter()]
        [System.Object]
        $MaxSendSize,

        [Parameter()]
        [System.Object]
        $MailTipTranslations,

        [Parameter()]
        [System.Object]
        $CustomAttribute4,

        [Parameter()]
        [System.Object]
        $CustomAttribute10,

        [Parameter()]
        [System.Object]
        $OnPremisesObjectId,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute3,

        [Parameter()]
        [System.Object]
        $ForwardingAddress,

        [Parameter()]
        [System.Object]
        $CustomAttribute12,

        [Parameter()]
        [System.Object]
        $CustomAttribute3,

        [Parameter()]
        [System.Object]
        $CustomAttribute11,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $HiddenFromAddressListsEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MailUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EmailAddresses,

        [Parameter()]
        [System.Object]
        $RejectMessagesFromDLMembers,

        [Parameter()]
        [System.Object]
        $ModerationEnabled,

        [Parameter()]
        [System.Object]
        $AcceptMessagesOnlyFromSendersOrMembers,

        [Parameter()]
        [System.Object]
        $UserCertificate,

        [Parameter()]
        [System.Object]
        $CustomAttribute12,

        [Parameter()]
        [System.Object]
        $Password,

        [Parameter()]
        [System.Object]
        $SecondaryAddress,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute5,

        [Parameter()]
        [System.Object]
        $CustomAttribute8,

        [Parameter()]
        [System.Object]
        $CustomAttribute5,

        [Parameter()]
        [System.Object]
        $SimpleDisplayName,

        [Parameter()]
        [System.Object]
        $ExchangeGuid,

        [Parameter()]
        [System.Object]
        $ExcludeFromOrgHolds,

        [Parameter()]
        [System.Object]
        $MailboxRegion,

        [Parameter()]
        [System.Object]
        $MailTip,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $EnableLitigationHoldForMigration,

        [Parameter()]
        [System.Object]
        $ModeratedBy,

        [Parameter()]
        [System.Object]
        $GrantSendOnBehalfTo,

        [Parameter()]
        [System.Object]
        $PrimarySmtpAddress,

        [Parameter()]
        [System.Object]
        $UserSMimeCertificate,

        [Parameter()]
        [System.Object]
        $AcceptMessagesOnlyFrom,

        [Parameter()]
        [System.Object]
        $JournalArchiveAddress,

        [Parameter()]
        [System.Object]
        $MessageBodyFormat,

        [Parameter()]
        [System.Object]
        $CustomAttribute15,

        [Parameter()]
        [System.Object]
        $FederatedIdentity,

        [Parameter()]
        [System.Object]
        $WindowsEmailAddress,

        [Parameter()]
        [System.Object]
        $RemoveOrphanedHolds,

        [Parameter()]
        [System.Object]
        $RejectMessagesFrom,

        [Parameter()]
        [System.Object]
        $Alias,

        [Parameter()]
        [System.Object]
        $RejectMessagesFromSendersOrMembers,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $BypassModerationFromSendersOrMembers,

        [Parameter()]
        [System.Object]
        $AcceptMessagesOnlyFromDLMembers,

        [Parameter()]
        [System.Object]
        $CustomAttribute1,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceUpgrade,

        [Parameter()]
        [System.Object]
        $UMDtmfMap,

        [Parameter()]
        [System.Object]
        $ArchiveGuid,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveMailboxProvisioningConstraint,

        [Parameter()]
        [System.Object]
        $MessageFormat,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute1,

        [Parameter()]
        [System.Object]
        $ResetPasswordOnNextLogon,

        [Parameter()]
        [System.Object]
        $CustomAttribute14,

        [Parameter()]
        [System.Object]
        $RequireSenderAuthenticationEnabled,

        [Parameter()]
        [System.Object]
        $CustomAttribute9,

        [Parameter()]
        [System.Object]
        $CustomAttribute6,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RecalculateInactiveMailUser,

        [Parameter()]
        [System.Object]
        $DataEncryptionPolicy,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute4,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveLitigationHoldEnabled,

        [Parameter()]
        [System.Object]
        $UsePreferMessageFormat,

        [Parameter()]
        [System.Object]
        $MicrosoftOnlineServicesID,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveDelayReleaseHoldApplied,

        [Parameter()]
        [System.Object]
        $ImmutableId,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute2,

        [Parameter()]
        [System.Object]
        $CustomAttribute13,

        [Parameter()]
        [System.Object]
        $CustomAttribute2,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveDelayHoldApplied,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $UseMapiRichTextFormat,

        [Parameter()]
        [System.Object]
        $SecondaryDialPlan,

        [Parameter()]
        [System.Object]
        $SendModerationNotifications,

        [Parameter()]
        [System.Object]
        $ExternalEmailAddress,

        [Parameter()]
        [System.Object]
        $CreateDTMFMap,

        [Parameter()]
        [System.Object]
        $RecipientLimits,

        [Parameter()]
        [System.Object]
        $HiddenFromAddressListsEnabled,

        [Parameter()]
        [System.Object]
        $MailTipTranslations,

        [Parameter()]
        [System.Object]
        $CustomAttribute7,

        [Parameter()]
        [System.Object]
        $CustomAttribute4,

        [Parameter()]
        [System.Object]
        $CustomAttribute10,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute3,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ExcludeFromAllOrgHolds,

        [Parameter()]
        [System.Object]
        $MacAttachmentFormat,

        [Parameter()]
        [System.Object]
        $CustomAttribute3,

        [Parameter()]
        [System.Object]
        $CustomAttribute11,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveComplianceTagHoldApplied,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MalwareFilterPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $MakeDefault,

        [Parameter()]
        [System.Object]
        $CustomFromName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $AdminDisplayName,

        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $CustomExternalBody,

        [Parameter()]
        [System.Object]
        $EnableExternalSenderNotifications,

        [Parameter()]
        [System.Object]
        $CustomNotifications,

        [Parameter()]
        [System.Object]
        $EnableInternalSenderNotifications,

        [Parameter()]
        [System.Object]
        $EnableExternalSenderAdminNotifications,

        [Parameter()]
        [System.Object]
        $InternalSenderAdminAddress,

        [Parameter()]
        [System.Object]
        $CustomAlertText,

        [Parameter()]
        [System.Object]
        $FileTypes,

        [Parameter()]
        [System.Object]
        $EnableInternalSenderAdminNotifications,

        [Parameter()]
        [System.Object]
        $CustomFromAddress,

        [Parameter()]
        [System.Object]
        $CustomExternalSubject,

        [Parameter()]
        [System.Object]
        $ZapEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExternalSenderAdminAddress,

        [Parameter()]
        [System.Object]
        $CustomInternalSubject,

        [Parameter()]
        [System.Object]
        $CustomInternalBody,

        [Parameter()]
        [System.Object]
        $EnableFileFilter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MalwareFilterRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $SentToMemberOf,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $Comments,

        [Parameter()]
        [System.Object]
        $RecipientDomainIs,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientDomainIs,

        [Parameter()]
        [System.Object]
        $MalwareFilterPolicy,

        [Parameter()]
        [System.Object]
        $ExceptIfSentTo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExceptIfSentToMemberOf,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ManagementRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $CustomRecipientWriteScope,

        [Parameter()]
        [System.Object]
        $RecipientAdministrativeUnitScope,

        [Parameter()]
        [System.Object]
        $ExclusiveRecipientWriteScope,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $RecipientRelativeWriteScope,

        [Parameter()]
        [System.Object]
        $RecipientOrganizationalUnitScope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ManagementRoleEntry
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Parameters,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveParameter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AddParameter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ManagementScope
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $RecipientRestrictionFilter,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $RecipientRoot,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MessageClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $RecipientDescription,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PermissionMenuVisible,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ClassificationID,

        [Parameter()]
        [System.Object]
        $SenderDescription,

        [Parameter()]
        [System.Object]
        $DisplayPrecedence,

        [Parameter()]
        [System.Object]
        $RetainClassificationEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MigrationBatch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $MoveOptions,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Update,

        [Parameter()]
        [System.Object]
        $NotificationEmails,

        [Parameter()]
        [System.Object]
        $SkipReports,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ApproveSkippedItems,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SyncNow,

        [Parameter()]
        [System.Object]
        $ReportInterval,

        [Parameter()]
        [System.Object]
        $SkipMoving,

        [Parameter()]
        [System.Object]
        $CompleteAfter,

        [Parameter()]
        [System.Object]
        $Partition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $BadItemLimit,

        [Parameter()]
        [System.Object]
        $SkipMerging,

        [Parameter()]
        [System.Object]
        $AllowUnknownColumnsInCsv,

        [Parameter()]
        [System.Object]
        $StartAfter,

        [Parameter()]
        [System.Object]
        $LargeItemLimit,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MigrationConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Partition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MigrationEndpoint
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $AcceptUntrustedCertificates,

        [Parameter()]
        [System.Object]
        $MaxConcurrentMigrations,

        [Parameter()]
        [System.Object]
        $ServiceAccountKeyFileData,

        [Parameter()]
        [System.Object]
        $TestMailbox,

        [Parameter()]
        [System.Object]
        $ExchangeServer,

        [Parameter()]
        [System.Object]
        $Authentication,

        [Parameter()]
        [System.Object]
        $AppSecretKeyVaultUrl,

        [Parameter()]
        [System.Object]
        $Port,

        [Parameter()]
        [System.Object]
        $ApplicationId,

        [Parameter()]
        [System.Object]
        $RemoteServer,

        [Parameter()]
        [System.Object]
        $Partition,

        [Parameter()]
        [System.Object]
        $MailboxPermission,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $SourceMailboxLegacyDN,

        [Parameter()]
        [System.Object]
        $NspiServer,

        [Parameter()]
        [System.Object]
        $RpcProxyServer,

        [Parameter()]
        [System.Object]
        $PublicFolderDatabaseServerLegacyDN,

        [Parameter()]
        [System.Object]
        $Security,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipVerification,

        [Parameter()]
        [System.Object]
        $MaxConcurrentIncrementalSyncs,

        [Parameter()]
        [System.Object]
        $Credentials,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MigrationUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ApproveSkippedItems,

        [Parameter()]
        [System.Object]
        $LargeItemLimit,

        [Parameter()]
        [System.Object]
        $CompleteAfter,

        [Parameter()]
        [System.Object]
        $BadItemLimit,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $StartAfter,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Partition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SyncNow,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MobileDeviceMailboxPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AllowMicrosoftPushNotifications,

        [Parameter()]
        [System.Object]
        $AllowUnsignedApplications,

        [Parameter()]
        [System.Object]
        $AllowUnsignedInstallationPackages,

        [Parameter()]
        [System.Object]
        $MaxPasswordFailedAttempts,

        [Parameter()]
        [System.Object]
        $AllowExternalDeviceManagement,

        [Parameter()]
        [System.Object]
        $RequireDeviceEncryption,

        [Parameter()]
        [System.Object]
        $RequireSignedSMIMEMessages,

        [Parameter()]
        [System.Object]
        $AllowStorageCard,

        [Parameter()]
        [System.Object]
        $AllowIrDA,

        [Parameter()]
        [System.Object]
        $PasswordHistory,

        [Parameter()]
        [System.Object]
        $AllowNonProvisionableDevices,

        [Parameter()]
        [System.Object]
        $UnapprovedInROMApplicationList,

        [Parameter()]
        [System.Object]
        $RequireEncryptedSMIMEMessages,

        [Parameter()]
        [System.Object]
        $AllowInternetSharing,

        [Parameter()]
        [System.Object]
        $PasswordEnabled,

        [Parameter()]
        [System.Object]
        $MaxEmailHTMLBodyTruncationSize,

        [Parameter()]
        [System.Object]
        $MinPasswordComplexCharacters,

        [Parameter()]
        [System.Object]
        $UNCAccessEnabled,

        [Parameter()]
        [System.Object]
        $AllowCamera,

        [Parameter()]
        [System.Object]
        $IrmEnabled,

        [Parameter()]
        [System.Object]
        $PasswordExpiration,

        [Parameter()]
        [System.Object]
        $AllowBrowser,

        [Parameter()]
        [System.Object]
        $MaxEmailAgeFilter,

        [Parameter()]
        [System.Object]
        $RequireSignedSMIMEAlgorithm,

        [Parameter()]
        [System.Object]
        $RequireManualSyncWhenRoaming,

        [Parameter()]
        [System.Object]
        $AlphanumericPasswordRequired,

        [Parameter()]
        [System.Object]
        $AllowSMIMEEncryptionAlgorithmNegotiation,

        [Parameter()]
        [System.Object]
        $MaxEmailBodyTruncationSize,

        [Parameter()]
        [System.Object]
        $AllowBluetooth,

        [Parameter()]
        [System.Object]
        $RequireEncryptionSMIMEAlgorithm,

        [Parameter()]
        [System.Object]
        $DevicePolicyRefreshInterval,

        [Parameter()]
        [System.Object]
        $AllowGooglePushNotifications,

        [Parameter()]
        [System.Object]
        $AllowMobileOTAUpdate,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $MaxAttachmentSize,

        [Parameter()]
        [System.Object]
        $AllowSimplePassword,

        [Parameter()]
        [System.Object]
        $AllowConsumerEmail,

        [Parameter()]
        [System.Object]
        $AllowDesktopSync,

        [Parameter()]
        [System.Object]
        $RequireStorageCardEncryption,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AttachmentsEnabled,

        [Parameter()]
        [System.Object]
        $AllowSMIMESoftCerts,

        [Parameter()]
        [System.Object]
        $AllowRemoteDesktop,

        [Parameter()]
        [System.Object]
        $PasswordRecoveryEnabled,

        [Parameter()]
        [System.Object]
        $MaxCalendarAgeFilter,

        [Parameter()]
        [System.Object]
        $AllowApplePushNotifications,

        [Parameter()]
        [System.Object]
        $AllowPOPIMAPEmail,

        [Parameter()]
        [System.Object]
        $IsDefault,

        [Parameter()]
        [System.Object]
        $MaxInactivityTimeLock,

        [Parameter()]
        [System.Object]
        $AllowWiFi,

        [Parameter()]
        [System.Object]
        $ApprovedApplicationList,

        [Parameter()]
        [System.Object]
        $AllowTextMessaging,

        [Parameter()]
        [System.Object]
        $WSSAccessEnabled,

        [Parameter()]
        [System.Object]
        $DeviceEncryptionEnabled,

        [Parameter()]
        [System.Object]
        $MinPasswordLength,

        [Parameter()]
        [System.Object]
        $AllowHTMLEmail,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-MoveRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $IncrementalSyncInterval,

        [Parameter()]
        [System.Object]
        $ProxyToMailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $SuspendWhenReadyToComplete,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $RequestExpiryInterval,

        [Parameter()]
        [System.Object]
        $PreventCompletion,

        [Parameter()]
        [System.Object]
        $LargeItemLimit,

        [Parameter()]
        [System.Object]
        $BatchName,

        [Parameter()]
        [System.Object]
        $SkipMoving,

        [Parameter()]
        [System.Object]
        $RemoteHostName,

        [Parameter()]
        [System.Object]
        $CompleteAfter,

        [Parameter()]
        [System.Object]
        $SkippedItemApprovalTime,

        [Parameter()]
        [System.Object]
        $MoveOptions,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AcceptLargeDataLoss,

        [Parameter()]
        [System.Object]
        $StartAfter,

        [Parameter()]
        [System.Object]
        $BadItemLimit,

        [Parameter()]
        [System.Object]
        $RemoteGlobalCatalog,

        [Parameter()]
        [System.Object]
        $RemoteCredential,

        [Parameter()]
        [System.Object]
        $CompletedRequestAgeLimit,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-Notification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $NotificationEmails,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-OMEConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $IntroductionText,

        [Parameter()]
        [System.Object]
        $ExternalMailExpiryInDays,

        [Parameter()]
        [System.Object]
        $ReadButtonText,

        [Parameter()]
        [System.Object]
        $PortalText,

        [Parameter()]
        [System.Object]
        $Image,

        [Parameter()]
        [System.Object]
        $OTPEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $BackgroundColor,

        [Parameter()]
        [System.Object]
        $DisclaimerText,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $PrivacyStatementUrl,

        [Parameter()]
        [System.Object]
        $SocialIdSignIn,

        [Parameter()]
        [System.Object]
        $EmailText,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-OMEMessageRevocation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Revoke,

        [Parameter()]
        [System.Object]
        $MessageId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-OnPremisesOrganization
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $InboundConnector,

        [Parameter()]
        [System.Object]
        $OutboundConnector,

        [Parameter()]
        [System.Object]
        $OrganizationName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $OrganizationRelationship,

        [Parameter()]
        [System.Object]
        $HybridDomains,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-Organization
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $UnifiedAuditLogIngestionEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-OrganizationConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RequiredCharsetCoverage,

        [Parameter()]
        [System.Object]
        $ConnectorsEnabledForYammer,

        [Parameter()]
        [System.Object]
        $PublicFolderShowClientControl,

        [Parameter()]
        [System.Object]
        $MailTipsGroupMetricsEnabled,

        [Parameter()]
        [System.Object]
        $PublicFoldersEnabled,

        [Parameter()]
        [System.Object]
        $VisibleMeetingUpdateProperties,

        [Parameter()]
        [System.Object]
        $WorkspaceTenantEnabled,

        [Parameter()]
        [System.Object]
        $ReadTrackingEnabled,

        [Parameter()]
        [System.Object]
        $ExchangeNotificationEnabled,

        [Parameter()]
        [System.Object]
        $DefaultPublicFolderDeletedItemRetention,

        [Parameter()]
        [System.Object]
        $MailTipsExternalRecipientsTipsEnabled,

        [Parameter()]
        [System.Object]
        $FocusedInboxOn,

        [Parameter()]
        [System.Object]
        $EwsApplicationAccessPolicy,

        [Parameter()]
        [System.Object]
        $OAuth2ClientProfileEnabled,

        [Parameter()]
        [System.Object]
        $MobileAppEducationEnabled,

        [Parameter()]
        [System.Object]
        $MaskClientIpInReceivedHeadersEnabled,

        [Parameter()]
        [System.Object]
        $BookingsExposureOfStaffDetailsRestricted,

        [Parameter()]
        [System.Object]
        $ElcProcessingDisabled,

        [Parameter()]
        [System.Object]
        $UnblockUnsafeSenderPromptEnabled,

        [Parameter()]
        [System.Object]
        $AutoEnableArchiveMailbox,

        [Parameter()]
        [System.Object]
        $RefreshSessionEnabled,

        [Parameter()]
        [System.Object]
        $ActivityBasedAuthenticationTimeoutEnabled,

        [Parameter()]
        [System.Object]
        $SmtpActionableMessagesEnabled,

        [Parameter()]
        [System.Object]
        $ConnectorsEnabledForTeams,

        [Parameter()]
        [System.Object]
        $ComplianceMLBgdCrawlEnabled,

        [Parameter()]
        [System.Object]
        $MailTipsAllTipsEnabled,

        [Parameter()]
        [System.Object]
        $RemotePublicFolderMailboxes,

        [Parameter()]
        [System.Object]
        $PreferredInternetCodePageForShiftJis,

        [Parameter()]
        [System.Object]
        $DefaultPublicFolderMovedItemRetention,

        [Parameter()]
        [System.Object]
        $EwsAllowEntourage,

        [Parameter()]
        [System.Object]
        $OutlookGifPickerDisabled,

        [Parameter()]
        [System.Object]
        $OnlineMeetingsByDefaultEnabled,

        [Parameter()]
        [System.Object]
        $DefaultPublicFolderProhibitPostQuota,

        [Parameter()]
        [System.Object]
        $ExchangeNotificationRecipients,

        [Parameter()]
        [System.Object]
        $DirectReportsGroupAutoCreationEnabled,

        [Parameter()]
        [System.Object]
        $LinkPreviewEnabled,

        [Parameter()]
        [System.Object]
        $BookingsAuthEnabled,

        [Parameter()]
        [System.Object]
        $OutlookMobileGCCRestrictionsEnabled,

        [Parameter()]
        [System.Object]
        $BookingsCreationOfCustomQuestionsRestricted,

        [Parameter()]
        [System.Object]
        $WebPushNotificationsDisabled,

        [Parameter()]
        [System.Object]
        $ConnectorsEnabledForOutlook,

        [Parameter()]
        [System.Object]
        $BookingsAddressEntryRestricted,

        [Parameter()]
        [System.Object]
        $BookingsNotesEntryRestricted,

        [Parameter()]
        [System.Object]
        $AuditDisabled,

        [Parameter()]
        [System.Object]
        $IsAgendaMailEnabled,

        [Parameter()]
        [System.Object]
        $EwsEnabled,

        [Parameter()]
        [System.Object]
        $PerTenantSwitchToESTSEnabled,

        [Parameter()]
        [System.Object]
        $AllowPlusAddressInRecipients,

        [Parameter()]
        [System.Object]
        $LeanPopoutEnabled,

        [Parameter()]
        [System.Object]
        $DistributionGroupNameBlockedWordsList,

        [Parameter()]
        [System.Object]
        $AsyncSendEnabled,

        [Parameter()]
        [System.Object]
        $ExternalInOutlookEnabled,

        [Parameter()]
        [System.Object]
        $ActivityBasedAuthenticationTimeoutWithSingleSignOnEnabled,

        [Parameter()]
        [System.Object]
        $HierarchicalAddressBookRoot,

        [Parameter()]
        [System.Object]
        $WebSuggestedRepliesDisabled,

        [Parameter()]
        [System.Object]
        $DefaultPublicFolderAgeLimit,

        [Parameter()]
        [System.Object]
        $DefaultAuthenticationPolicy,

        [Parameter()]
        [System.Object]
        $OutlookPayEnabled,

        [Parameter()]
        [System.Object]
        $MailTipsLargeAudienceThreshold,

        [Parameter()]
        [System.Object]
        $DefaultGroupAccessType,

        [Parameter()]
        [System.Object]
        $CalendarVersionStoreEnabled,

        [Parameter()]
        [System.Object]
        $BookingsPaymentsEnabled,

        [Parameter()]
        [System.Object]
        $DistributionGroupNamingPolicy,

        [Parameter()]
        [System.Object]
        $PublicComputersDetectionEnabled,

        [Parameter()]
        [System.Object]
        $BookingsSocialSharingRestricted,

        [Parameter()]
        [System.Object]
        $BookingsMembershipApprovalRequired,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $DistributionGroupDefaultOU,

        [Parameter()]
        [System.Object]
        $ConnectorsActionableMessagesEnabled,

        [Parameter()]
        [System.Object]
        $MailTipsMailboxSourcedTipsEnabled,

        [Parameter()]
        [System.Object]
        $BookingsEnabled,

        [Parameter()]
        [System.Object]
        $EndUserDLUpgradeFlowsDisabled,

        [Parameter()]
        [System.Object]
        $BookingsPhoneNumberEntryRestricted,

        [Parameter()]
        [System.Object]
        $AppsForOfficeEnabled,

        [Parameter()]
        [System.Object]
        $EnableForwardingAddressSyncForMailboxes,

        [Parameter()]
        [System.Object]
        $EwsAllowOutlook,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AutoExpandingArchive,

        [Parameter()]
        [System.Object]
        $EwsAllowMacOutlook,

        [Parameter()]
        [System.Object]
        $EwsAllowList,

        [Parameter()]
        [System.Object]
        $MatchSenderOrganizerProperties,

        [Parameter()]
        [System.Object]
        $IPListBlocked,

        [Parameter()]
        [System.Object]
        $AutodiscoverPartialDirSync,

        [Parameter()]
        [System.Object]
        $ActivityBasedAuthenticationTimeoutInterval,

        [Parameter()]
        [System.Object]
        $ConnectorsEnabledForSharepoint,

        [Parameter()]
        [System.Object]
        $ConnectorsEnabled,

        [Parameter()]
        [System.Object]
        $EwsBlockList,

        [Parameter()]
        [System.Object]
        $CustomerLockboxEnabled,

        [Parameter()]
        [System.Object]
        $OutlookMobileHelpShiftEnabled,

        [Parameter()]
        [System.Object]
        $SiteMailboxCreationURL,

        [Parameter()]
        [System.Object]
        $DefaultPublicFolderMaxItemSize,

        [Parameter()]
        [System.Object]
        $ByteEncoderTypeFor7BitCharsets,

        [Parameter()]
        [System.Object]
        $DefaultPublicFolderIssueWarningQuota,

        [Parameter()]
        [System.Object]
        $OutlookMobileSingleAccountEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-OrganizationRelationship
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TargetApplicationUri,

        [Parameter()]
        [System.Object]
        $TargetAutodiscoverEpr,

        [Parameter()]
        [System.Object]
        $MailTipsAccessLevel,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $DeliveryReportEnabled,

        [Parameter()]
        [System.Object]
        $OAuthApplicationId,

        [Parameter()]
        [System.Object]
        $OrganizationContact,

        [Parameter()]
        [System.Object]
        $ArchiveAccessEnabled,

        [Parameter()]
        [System.Object]
        $FreeBusyAccessEnabled,

        [Parameter()]
        [System.Object]
        $MailTipsAccessScope,

        [Parameter()]
        [System.Object]
        $TargetOwaURL,

        [Parameter()]
        [System.Object]
        $MailTipsAccessEnabled,

        [Parameter()]
        [System.Object]
        $PhotosEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $MailboxMovePublishedScopes,

        [Parameter()]
        [System.Object]
        $MailboxMoveEnabled,

        [Parameter()]
        [System.Object]
        $MailboxMoveCapability,

        [Parameter()]
        [System.Object]
        $TargetSharingEpr,

        [Parameter()]
        [System.Object]
        $FreeBusyAccessLevel,

        [Parameter()]
        [System.Object]
        $DomainNames,

        [Parameter()]
        [System.Object]
        $FreeBusyAccessScope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-OutboundConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RouteAllMessagesViaOnPremises,

        [Parameter()]
        [System.Object]
        $RecipientDomains,

        [Parameter()]
        [System.Object]
        $CloudServicesMailEnabled,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $TestMode,

        [Parameter()]
        [System.Object]
        $AllAcceptedDomains,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $IsTransportRuleScoped,

        [Parameter()]
        [System.Object]
        $IsValidated,

        [Parameter()]
        [System.Object]
        $UseMXRecord,

        [Parameter()]
        [System.Object]
        $LastValidationTimestamp,

        [Parameter()]
        [System.Object]
        $TlsSettings,

        [Parameter()]
        [System.Object]
        $ValidationRecipients,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ConnectorType,

        [Parameter()]
        [System.Object]
        $SmartHosts,

        [Parameter()]
        [System.Object]
        $TlsDomain,

        [Parameter()]
        [System.Object]
        $ConnectorSource,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-OutlookProtectionRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $SentToScope,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $UserCanOverride,

        [Parameter()]
        [System.Object]
        $FromDepartment,

        [Parameter()]
        [System.Object]
        $ApplyRightsProtectionTemplate,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-OwaMailboxPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $DefaultClientLanguage,

        [Parameter()]
        [System.Object]
        $ContactsEnabled,

        [Parameter()]
        [System.Object]
        $PersonalAccountCalendarsEnabled,

        [Parameter()]
        [System.Object]
        $ConditionalAccessPolicy,

        [Parameter()]
        [System.Object]
        $MessagePreviewsDisabled,

        [Parameter()]
        [System.Object]
        $ExplicitLogonEnabled,

        [Parameter()]
        [System.Object]
        $WebPartsFrameOptionsType,

        [Parameter()]
        [System.Object]
        $BlockedFileTypes,

        [Parameter()]
        [System.Object]
        $OneDriveAttachmentsEnabled,

        [Parameter()]
        [System.Object]
        $LinkedInEnabled,

        [Parameter()]
        [System.Object]
        $DirectFileAccessOnPrivateComputersEnabled,

        [Parameter()]
        [System.Object]
        $ChangePasswordEnabled,

        [Parameter()]
        [System.Object]
        $SignaturesEnabled,

        [Parameter()]
        [System.Object]
        $AllowedMimeTypes,

        [Parameter()]
        [System.Object]
        $WacViewingOnPublicComputersEnabled,

        [Parameter()]
        [System.Object]
        $OutlookBetaToggleEnabled,

        [Parameter()]
        [System.Object]
        $ExternalSPMySiteHostURL,

        [Parameter()]
        [System.Object]
        $OnSendAddinsEnabled,

        [Parameter()]
        [System.Object]
        $NotesEnabled,

        [Parameter()]
        [System.Object]
        $JournalEnabled,

        [Parameter()]
        [System.Object]
        $SpellCheckerEnabled,

        [Parameter()]
        [System.Object]
        $DisplayPhotosEnabled,

        [Parameter()]
        [System.Object]
        $TasksEnabled,

        [Parameter()]
        [System.Object]
        $GroupCreationEnabled,

        [Parameter()]
        [System.Object]
        $ForceSaveFileTypes,

        [Parameter()]
        [System.Object]
        $ForceWacViewingFirstOnPublicComputers,

        [Parameter()]
        [System.Object]
        $PlacesEnabled,

        [Parameter()]
        [System.Object]
        $TeamsnapCalendarsEnabled,

        [Parameter()]
        [System.Object]
        $WacViewingOnPrivateComputersEnabled,

        [Parameter()]
        [System.Object]
        $TextMessagingEnabled,

        [Parameter()]
        [System.Object]
        $SearchFoldersEnabled,

        [Parameter()]
        [System.Object]
        $UserVoiceEnabled,

        [Parameter()]
        [System.Object]
        $GlobalAddressListEnabled,

        [Parameter()]
        [System.Object]
        $IRMEnabled,

        [Parameter()]
        [System.Object]
        $DirectFileAccessOnPublicComputersEnabled,

        [Parameter()]
        [System.Object]
        $NpsSurveysEnabled,

        [Parameter()]
        [System.Object]
        $WSSAccessOnPublicComputersEnabled,

        [Parameter()]
        [System.Object]
        $ForceSaveMimeTypes,

        [Parameter()]
        [System.Object]
        $WacOMEXEnabled,

        [Parameter()]
        [System.Object]
        $WacExternalServicesEnabled,

        [Parameter()]
        [System.Object]
        $InternalSPMySiteHostURL,

        [Parameter()]
        [System.Object]
        $SatisfactionEnabled,

        [Parameter()]
        [System.Object]
        $InstantMessagingType,

        [Parameter()]
        [System.Object]
        $ActiveSyncIntegrationEnabled,

        [Parameter()]
        [System.Object]
        $DefaultTheme,

        [Parameter()]
        [System.Object]
        $SetPhotoEnabled,

        [Parameter()]
        [System.Object]
        $ClassicAttachmentsEnabled,

        [Parameter()]
        [System.Object]
        $AllowCopyContactsToDeviceAddressBook,

        [Parameter()]
        [System.Object]
        $UseISO885915,

        [Parameter()]
        [System.Object]
        $OutboundCharset,

        [Parameter()]
        [System.Object]
        $LocalEventsEnabled,

        [Parameter()]
        [System.Object]
        $CalendarEnabled,

        [Parameter()]
        [System.Object]
        $ForceWacViewingFirstOnPrivateComputers,

        [Parameter()]
        [System.Object]
        $RecoverDeletedItemsEnabled,

        [Parameter()]
        [System.Object]
        $InstantMessagingEnabled,

        [Parameter()]
        [System.Object]
        $OrganizationEnabled,

        [Parameter()]
        [System.Object]
        $DelegateAccessEnabled,

        [Parameter()]
        [System.Object]
        $ActionForUnknownFileAndMIMETypes,

        [Parameter()]
        [System.Object]
        $WacEditingEnabled,

        [Parameter()]
        [System.Object]
        $PublicFoldersEnabled,

        [Parameter()]
        [System.Object]
        $BookingsMailboxCreationEnabled,

        [Parameter()]
        [System.Object]
        $ForceSaveAttachmentFilteringEnabled,

        [Parameter()]
        [System.Object]
        $LogonAndErrorLanguage,

        [Parameter()]
        [System.Object]
        $WSSAccessOnPrivateComputersEnabled,

        [Parameter()]
        [System.Object]
        $AllAddressListsEnabled,

        [Parameter()]
        [System.Object]
        $ExternalImageProxyEnabled,

        [Parameter()]
        [System.Object]
        $ProjectMocaEnabled,

        [Parameter()]
        [System.Object]
        $PremiumClientEnabled,

        [Parameter()]
        [System.Object]
        $BlockedMimeTypes,

        [Parameter()]
        [System.Object]
        $UMIntegrationEnabled,

        [Parameter()]
        [System.Object]
        $SilverlightEnabled,

        [Parameter()]
        [System.Object]
        $WeatherEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsDefault,

        [Parameter()]
        [System.Object]
        $UseGB18030,

        [Parameter()]
        [System.Object]
        $AllowOfflineOn,

        [Parameter()]
        [System.Object]
        $AllowedFileTypes,

        [Parameter()]
        [System.Object]
        $SetPhotoURL,

        [Parameter()]
        [System.Object]
        $RulesEnabled,

        [Parameter()]
        [System.Object]
        $RemindersAndNotificationsEnabled,

        [Parameter()]
        [System.Object]
        $FreCardsEnabled,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $ThemeSelectionEnabled,

        [Parameter()]
        [System.Object]
        $AdditionalStorageProvidersAvailable,

        [Parameter()]
        [System.Object]
        $InterestingCalendarsEnabled,

        [Parameter()]
        [System.Object]
        $OWALightEnabled,

        [Parameter()]
        [System.Object]
        $PrintWithoutDownloadEnabled,

        [Parameter()]
        [System.Object]
        $SaveAttachmentsToCloudEnabled,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ReportJunkEmailEnabled,

        [Parameter()]
        [System.Object]
        $SkipCreateUnifiedGroupCustomSharepointClassification,

        [Parameter()]
        [System.Object]
        $ReferenceAttachmentsEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DisableFacebook,

        [Parameter()]
        [System.Object]
        $PhoneticSupportEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-PartnerApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ApplicationIdentifier,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $LinkedAccount,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AcceptSecurityIdentifierInformation,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $AccountType,

        [Parameter()]
        [System.Object]
        $ActAsPermissions,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-PerimeterConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $GatewayIPAddresses,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-PhishFilterPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $SpoofAllowBlockList,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-Place
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PostalCode,

        [Parameter()]
        [System.Object]
        $Phone,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $CountryOrRegion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Street,

        [Parameter()]
        [System.Object]
        $AudioDeviceName,

        [Parameter()]
        [System.Object]
        $DisplayDeviceName,

        [Parameter()]
        [System.Object]
        $Building,

        [Parameter()]
        [System.Object]
        $State,

        [Parameter()]
        [System.Object]
        $City,

        [Parameter()]
        [System.Object]
        $Floor,

        [Parameter()]
        [System.Object]
        $VideoDeviceName,

        [Parameter()]
        [System.Object]
        $Tags,

        [Parameter()]
        [System.Object]
        $IsWheelChairAccessible,

        [Parameter()]
        [System.Object]
        $FloorLabel,

        [Parameter()]
        [System.Object]
        $Capacity,

        [Parameter()]
        [System.Object]
        $Label,

        [Parameter()]
        [System.Object]
        $GeoCoordinates,

        [Parameter()]
        [System.Object]
        $SpaceType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-PolicyTipConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Value,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-PopSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ResendVerification,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $LeaveOnServer,

        [Parameter()]
        [System.Object]
        $EmailAddress,

        [Parameter()]
        [System.Object]
        $IncomingServer,

        [Parameter()]
        [System.Object]
        $IncomingUserName,

        [Parameter()]
        [System.Object]
        $IncomingSecurity,

        [Parameter()]
        [System.Object]
        $IncomingPort,

        [Parameter()]
        [System.Object]
        $IncomingPassword,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ValidateSecret,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $IncomingAuth,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ProtectionServicePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-PublicFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $IssueWarningQuota,

        [Parameter()]
        [System.Object]
        $Path,

        [Parameter()]
        [System.Object]
        $RetainDeletedItemsFor,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $MailRecipientGuid,

        [Parameter()]
        [System.Object]
        $MaxItemSize,

        [Parameter()]
        [System.Object]
        $PerUserReadStateEnabled,

        [Parameter()]
        [System.Object]
        $EformsLocaleId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $MailEnabled,

        [Parameter()]
        [System.Object]
        $ProhibitPostQuota,

        [Parameter()]
        [System.Object]
        $AgeLimit,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-PublicFolderMailboxMigrationRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SkipMerging,

        [Parameter()]
        [System.Object]
        $LargeItemLimit,

        [Parameter()]
        [System.Object]
        $BadItemLimit,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipInitialConnectionValidation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AcceptLargeDataLoss,

        [Parameter()]
        [System.Object]
        $SkippedItemApprovalTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-RegulatoryComplianceUI
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-RemoteDomain
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AutoReplyEnabled,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $TNEFEnabled,

        [Parameter()]
        [System.Object]
        $DeliveryReportEnabled,

        [Parameter()]
        [System.Object]
        $RequiredCharsetCoverage,

        [Parameter()]
        [System.Object]
        $MeetingForwardNotificationEnabled,

        [Parameter()]
        [System.Object]
        $ContentType,

        [Parameter()]
        [System.Object]
        $ByteEncoderTypeFor7BitCharsets,

        [Parameter()]
        [System.Object]
        $AutoForwardEnabled,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $TrustedMailInboundEnabled,

        [Parameter()]
        [System.Object]
        $LineWrapSize,

        [Parameter()]
        [System.Object]
        $CharacterSet,

        [Parameter()]
        [System.Object]
        $PreferredInternetCodePageForShiftJis,

        [Parameter()]
        [System.Object]
        $NonMimeCharacterSet,

        [Parameter()]
        [System.Object]
        $NDREnabled,

        [Parameter()]
        [System.Object]
        $TargetDeliveryDomain,

        [Parameter()]
        [System.Object]
        $TrustedMailOutboundEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $DisplaySenderName,

        [Parameter()]
        [System.Object]
        $AllowedOOFType,

        [Parameter()]
        [System.Object]
        $NDRDiagnosticInfoEnabled,

        [Parameter()]
        [System.Object]
        $IsInternal,

        [Parameter()]
        [System.Object]
        $UseSimpleDisplayName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ReportSchedule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DlpRuleId,

        [Parameter()]
        [System.Object]
        $Direction,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeDLP,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ExpiryDate,

        [Parameter()]
        [System.Object]
        $ScheduleName,

        [Parameter()]
        [System.Object]
        $ScheduleId,

        [Parameter()]
        [System.Object]
        $ReportType,

        [Parameter()]
        [System.Object]
        $RecipientAddress,

        [Parameter()]
        [System.Object]
        $SenderAddress,

        [Parameter()]
        [System.Object]
        $TransportRuleId,

        [Parameter()]
        [System.Object]
        $ReportFrequency,

        [Parameter()]
        [System.Object]
        $EncryptionType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Object]
        $NotificationEmail,

        [Parameter()]
        [System.Object]
        $EncryptionTemplate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ReportSubmissionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PreSubmitMessageTitle,

        [Parameter()]
        [System.Object]
        $PostSubmitMessage,

        [Parameter()]
        [System.Object]
        $EnableReportToMicrosoft,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $EnableCustomizedMsg,

        [Parameter()]
        [System.Object]
        $PostSubmitMessageForNotJunk,

        [Parameter()]
        [System.Object]
        $PreSubmitMessage,

        [Parameter()]
        [System.Object]
        $PreSubmitMessageTitleForPhishing,

        [Parameter()]
        [System.Object]
        $PreSubmitMessageForNotJunk,

        [Parameter()]
        [System.Object]
        $PostSubmitMessageForPhishing,

        [Parameter()]
        [System.Object]
        $ReportPhishToCustomizedAddress,

        [Parameter()]
        [System.Object]
        $PreSubmitMessageTitleForNotJunk,

        [Parameter()]
        [System.Object]
        $ReportJunkAddresses,

        [Parameter()]
        [System.Object]
        $PreSubmitMessageTitleForJunk,

        [Parameter()]
        [System.Object]
        $PostSubmitMessageTitleForPhishing,

        [Parameter()]
        [System.Object]
        $ReportNotJunkAddresses,

        [Parameter()]
        [System.Object]
        $ReportPhishAddresses,

        [Parameter()]
        [System.Object]
        $ReportJunkToCustomizedAddress,

        [Parameter()]
        [System.Object]
        $PostSubmitMessageTitle,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $EnableThirdPartyAddress,

        [Parameter()]
        [System.Object]
        $PreSubmitMessageForJunk,

        [Parameter()]
        [System.Object]
        $ThirdPartyReportAddresses,

        [Parameter()]
        [System.Object]
        $UserSubmissionOptions,

        [Parameter()]
        [System.Object]
        $PostSubmitMessageTitleForNotJunk,

        [Parameter()]
        [System.Object]
        $ReportNotJunkToCustomizedAddress,

        [Parameter()]
        [System.Object]
        $PreSubmitMessageForPhishing,

        [Parameter()]
        [System.Object]
        $PostSubmitMessageTitleForJunk,

        [Parameter()]
        [System.Object]
        $PostSubmitMessageForJunk,

        [Parameter()]
        [System.Object]
        $UserSubmissionOptionsMessage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ResourceConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ResourcePropertySchema,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-RetentionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $RetentionPolicyTagLinks,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $RetentionId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsDefaultArbitrationMailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsDefault,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-RetentionPolicyTag
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $MessageClass,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $MustDisplayCommentEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $OptionalInMailbox,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $LocalizedRetentionPolicyTagName,

        [Parameter()]
        [System.Object]
        $LegacyManagedFolder,

        [Parameter()]
        [System.Object]
        $AgeLimitForRetention,

        [Parameter()]
        [System.Object]
        $RetentionAction,

        [Parameter()]
        [System.Object]
        $LocalizedComment,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $RetentionId,

        [Parameter()]
        [System.Object]
        $RetentionEnabled,

        [Parameter()]
        [System.Object]
        $SystemTag,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-RMSTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Type,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-RMSTrustedPublishingDomain
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $ExtranetCertificationUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Default,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ExtranetLicensingUrl,

        [Parameter()]
        [System.Object]
        $IntranetLicensingUrl,

        [Parameter()]
        [System.Object]
        $IntranetCertificationUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-RoleAssignmentPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsDefault,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-RoleGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $WellKnownObject,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BypassSecurityGroupManagerCheck,

        [Parameter()]
        [System.Object]
        $ManagedBy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-SafeAttachmentPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Redirect,

        [Parameter()]
        [System.Object]
        $AdminDisplayName,

        [Parameter()]
        [System.Object]
        $Enable,

        [Parameter()]
        [System.Object]
        $RedirectAddress,

        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ActionOnError,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-SafeAttachmentRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $SentToMemberOf,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $Comments,

        [Parameter()]
        [System.Object]
        $RecipientDomainIs,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $SafeAttachmentPolicy,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientDomainIs,

        [Parameter()]
        [System.Object]
        $ExceptIfSentTo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExceptIfSentToMemberOf,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-SafeLinksPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ExcludedUrls,

        [Parameter()]
        [System.Object]
        $AdminDisplayName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $WhiteListedUrls,

        [Parameter()]
        [System.Object]
        $DoNotTrackUserClicks,

        [Parameter()]
        [System.Object]
        $DoNotRewriteUrls,

        [Parameter()]
        [System.Object]
        $EnableSafeLinksForTeams,

        [Parameter()]
        [System.Object]
        $ScanUrls,

        [Parameter()]
        [System.Object]
        $TrackClicks,

        [Parameter()]
        [System.Object]
        $AllowClickThrough,

        [Parameter()]
        [System.Object]
        $DoNotAllowClickThrough,

        [Parameter()]
        [System.Object]
        $DeliverMessageAfterScan,

        [Parameter()]
        [System.Object]
        $IsEnabled,

        [Parameter()]
        [System.Object]
        $EnableForInternalSenders,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-SafeLinksRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $SentToMemberOf,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $Comments,

        [Parameter()]
        [System.Object]
        $RecipientDomainIs,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientDomainIs,

        [Parameter()]
        [System.Object]
        $SafeLinksPolicy,

        [Parameter()]
        [System.Object]
        $ExceptIfSentTo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExceptIfSentToMemberOf,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-SharingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Domains,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Default,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-SiteMailbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $SyncEnabled,

        [Parameter()]
        [System.Object]
        $Owners,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $ShowInMyClient,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $SharePointUrl,

        [Parameter()]
        [System.Object]
        $RemoveDuplicateMessages,

        [Parameter()]
        [System.Object]
        $Members,

        [Parameter()]
        [System.Object]
        $Active,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-SiteMailboxProvisioningPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $AliasPrefix,

        [Parameter()]
        [System.Object]
        $DefaultAliasPrefixEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-SmimeConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SMIMECertificateIssuingCA,

        [Parameter()]
        [System.Object]
        $OWACopyRecipientHeaders,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $OWAIncludeSMIMECapabilitiesInMessage,

        [Parameter()]
        [System.Object]
        $OWAEncryptionAlgorithms,

        [Parameter()]
        [System.Object]
        $OWAAlwaysSign,

        [Parameter()]
        [System.Object]
        $OWAUseSecondaryProxiesWhenFindingCertificates,

        [Parameter()]
        [System.Object]
        $OWAAlwaysEncrypt,

        [Parameter()]
        [System.Object]
        $OWACheckCRLOnSend,

        [Parameter()]
        [System.Object]
        $OWADLExpansionTimeout,

        [Parameter()]
        [System.Object]
        $OWAUseKeyIdentifier,

        [Parameter()]
        [System.Object]
        $OWAOnlyUseSmartCard,

        [Parameter()]
        [System.Object]
        $OWAIncludeCertificateChainAndRootCertificate,

        [Parameter()]
        [System.Object]
        $OWAEncryptTemporaryBuffers,

        [Parameter()]
        [System.Object]
        $OWAIncludeCertificateChainWithoutRootCertificate,

        [Parameter()]
        [System.Object]
        $OWAForceSMIMEClientUpgrade,

        [Parameter()]
        [System.Object]
        $OWAAllowUserChoiceOfSigningCertificate,

        [Parameter()]
        [System.Object]
        $OWASigningAlgorithms,

        [Parameter()]
        [System.Object]
        $OWADisableCRLCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $OWABCCEncryptedEmailForking,

        [Parameter()]
        [System.Object]
        $OWATripleWrapSignedEncryptedMail,

        [Parameter()]
        [System.Object]
        $OWACRLRetrievalTimeout,

        [Parameter()]
        [System.Object]
        $OWACRLConnectionTimeout,

        [Parameter()]
        [System.Object]
        $OWAClearSign,

        [Parameter()]
        [System.Object]
        $OWASenderCertificateAttributesToDisplay,

        [Parameter()]
        [System.Object]
        $OWASignedEmailCertificateInclusion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-SweepRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Provider,

        [Parameter()]
        [System.Object]
        $SystemCategory,

        [Parameter()]
        [System.Object]
        $KeepLatest,

        [Parameter()]
        [System.Object]
        $ExceptIfFlagged,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $SourceFolder,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $DestinationFolder,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ExceptIfPinned,

        [Parameter()]
        [System.Object]
        $Sender,

        [Parameter()]
        [System.Object]
        $KeepForDays,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-SyncRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Password,

        [Parameter()]
        [System.Object]
        $IncrementalSyncInterval,

        [Parameter()]
        [System.Object]
        $DVPolicies,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AcceptUntrustedCertificates,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $StartDivergenceVerification,

        [Parameter()]
        [System.Object]
        $Calendar,

        [Parameter()]
        [System.Object]
        $Contact,

        [Parameter()]
        [System.Object]
        $DVExcludeFolderNames,

        [Parameter()]
        [System.Object]
        $RemoteServerPort,

        [Parameter()]
        [System.Object]
        $Authentication,

        [Parameter()]
        [System.Object]
        $DVFolderNames,

        [Parameter()]
        [System.Object]
        $SmtpPassword,

        [Parameter()]
        [System.Object]
        $SmtpUserName,

        [Parameter()]
        [System.Object]
        $IncludeFolders,

        [Parameter()]
        [System.Object]
        $LargeItemLimit,

        [Parameter()]
        [System.Object]
        $UserName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoteSendEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DVIncludeAllFolders,

        [Parameter()]
        [System.Object]
        $SmtpServerName,

        [Parameter()]
        [System.Object]
        $BatchName,

        [Parameter()]
        [System.Object]
        $SkippedItemApprovalTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipInitialConnectionValidation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AcceptLargeDataLoss,

        [Parameter()]
        [System.Object]
        $RequestExpiryInterval,

        [Parameter()]
        [System.Object]
        $DVWkfTypes,

        [Parameter()]
        [System.Object]
        $BadItemLimit,

        [Parameter()]
        [System.Object]
        $SmtpServerPort,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $StartHierarchyFixup,

        [Parameter()]
        [System.Object]
        $SkipMerging,

        [Parameter()]
        [System.Object]
        $Security,

        [Parameter()]
        [System.Object]
        $RefreshToken,

        [Parameter()]
        [System.Object]
        $ProviderArgs,

        [Parameter()]
        [System.Object]
        $CompletedRequestAgeLimit,

        [Parameter()]
        [System.Object]
        $RemoteServerName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-TenantAnalyticsConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $MinRecipients,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-TextMessagingAccount
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $CountryRegionId,

        [Parameter()]
        [System.Object]
        $MobileOperatorId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $NotificationPhoneNumber,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreDefaultScope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-TransportConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $InternalDelayDsnEnabled,

        [Parameter()]
        [System.Object]
        $InternalDsnSendHtml,

        [Parameter()]
        [System.Object]
        $ExternalDelayDsnEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $DSNConversionMode,

        [Parameter()]
        [System.Object]
        $SmtpClientAuthenticationDisabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $InternalDsnLanguageDetectionEnabled,

        [Parameter()]
        [System.Object]
        $AddressBookPolicyRoutingEnabled,

        [Parameter()]
        [System.Object]
        $ExternalDsnLanguageDetectionEnabled,

        [Parameter()]
        [System.Object]
        $ExternalDsnSendHtml,

        [Parameter()]
        [System.Object]
        $Rfc2231EncodingEnabled,

        [Parameter()]
        [System.Object]
        $HeaderPromotionModeSetting,

        [Parameter()]
        [System.Object]
        $VoicemailJournalingEnabled,

        [Parameter()]
        [System.Object]
        $JournalingReportNdrTo,

        [Parameter()]
        [System.Object]
        $ConvertDisclaimerWrapperToEml,

        [Parameter()]
        [System.Object]
        $InternalDsnReportingAuthority,

        [Parameter()]
        [System.Object]
        $MaxRecipientEnvelopeLimit,

        [Parameter()]
        [System.Object]
        $ExternalDsnReportingAuthority,

        [Parameter()]
        [System.Object]
        $ExternalDsnDefaultLanguage,

        [Parameter()]
        [System.Object]
        $InternalDsnDefaultLanguage,

        [Parameter()]
        [System.Object]
        $ExternalPostmasterAddress,

        [Parameter()]
        [System.Object]
        $ClearCategories,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-TransportRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ActivationDate,

        [Parameter()]
        [System.Object]
        $AddToRecipients,

        [Parameter()]
        [System.Object]
        $ApplyHtmlDisclaimerFallbackAction,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientADAttributeContainsWords,

        [Parameter()]
        [System.Object]
        $RecipientADAttributeMatchesPatterns,

        [Parameter()]
        [System.Object]
        $AttachmentSizeOver,

        [Parameter()]
        [System.Object]
        $ExceptIfSenderADAttributeContainsWords,

        [Parameter()]
        [System.Object]
        $SetSCL,

        [Parameter()]
        [System.Object]
        $AnyOfToHeaderMemberOf,

        [Parameter()]
        [System.Object]
        $Disconnect,

        [Parameter()]
        [System.Object]
        $ExceptIfSentToMemberOf,

        [Parameter()]
        [System.Object]
        $ExceptIfAnyOfCcHeader,

        [Parameter()]
        [System.Object]
        $ExceptIfAttachmentMatchesPatterns,

        [Parameter()]
        [System.Object]
        $RecipientDomainIs,

        [Parameter()]
        [System.Object]
        $ManagerForEvaluatedUser,

        [Parameter()]
        [System.Object]
        $SmtpRejectMessageRejectStatusCode,

        [Parameter()]
        [System.Object]
        $ExceptIfHeaderMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfFromScope,

        [Parameter()]
        [System.Object]
        $ADComparisonAttribute,

        [Parameter()]
        [System.Object]
        $ExceptIfHeaderContainsWords,

        [Parameter()]
        [System.Object]
        $HeaderMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfAttachmentIsPasswordProtected,

        [Parameter()]
        [System.Object]
        $DeleteMessage,

        [Parameter()]
        [System.Object]
        $HasSenderOverride,

        [Parameter()]
        [System.Object]
        $ExceptIfSubjectOrBodyMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfHasClassification,

        [Parameter()]
        [System.Object]
        $Quarantine,

        [Parameter()]
        [System.Object]
        $ExceptIfAnyOfRecipientAddressMatchesPatterns,

        [Parameter()]
        [System.Object]
        $RecipientAddressType,

        [Parameter()]
        [System.Object]
        $ExceptIfContentCharacterSetContainsWords,

        [Parameter()]
        [System.Object]
        $BlindCopyTo,

        [Parameter()]
        [System.Object]
        $ApplyHtmlDisclaimerLocation,

        [Parameter()]
        [System.Object]
        $ExceptIfMessageTypeMatches,

        [Parameter()]
        [System.Object]
        $SenderIpRanges,

        [Parameter()]
        [System.Object]
        $ExceptIfMessageContainsDataClassifications,

        [Parameter()]
        [System.Object]
        $ModerateMessageByUser,

        [Parameter()]
        [System.Object]
        $HasNoClassification,

        [Parameter()]
        [System.Object]
        $ExceptIfSenderInRecipientList,

        [Parameter()]
        [System.Object]
        $HeaderContainsMessageHeader,

        [Parameter()]
        [System.Object]
        $RemoveHeader,

        [Parameter()]
        [System.Object]
        $HasClassification,

        [Parameter()]
        [System.Object]
        $MessageContainsDataClassifications,

        [Parameter()]
        [System.Object]
        $ExceptIfFromMemberOf,

        [Parameter()]
        [System.Object]
        $RuleSubType,

        [Parameter()]
        [System.Object]
        $SentToScope,

        [Parameter()]
        [System.Object]
        $AnyOfToCcHeaderMemberOf,

        [Parameter()]
        [System.Object]
        $From,

        [Parameter()]
        [System.Object]
        $ExceptIfAnyOfRecipientAddressContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfWithImportance,

        [Parameter()]
        [System.Object]
        $ContentCharacterSetContainsWords,

        [Parameter()]
        [System.Object]
        $SubjectContainsWords,

        [Parameter()]
        [System.Object]
        $RejectMessageEnhancedStatusCode,

        [Parameter()]
        [System.Object]
        $SenderADAttributeMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfSenderADAttributeMatchesPatterns,

        [Parameter()]
        [System.Object]
        $IncidentReportContent,

        [Parameter()]
        [System.Object]
        $FromMemberOf,

        [Parameter()]
        [System.Object]
        $AttachmentContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfSCLOver,

        [Parameter()]
        [System.Object]
        $ExceptIfBetweenMemberOf1,

        [Parameter()]
        [System.Object]
        $GenerateNotification,

        [Parameter()]
        [System.Object]
        $NotifySender,

        [Parameter()]
        [System.Object]
        $ExceptIfAttachmentNameMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfSenderManagementRelationship,

        [Parameter()]
        [System.Object]
        $SetAuditSeverity,

        [Parameter()]
        [System.Object]
        $AttachmentPropertyContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfAnyOfToHeader,

        [Parameter()]
        [System.Object]
        $ApplyRightsProtectionCustomizationTemplate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $RouteMessageOutboundRequireTls,

        [Parameter()]
        [System.Object]
        $WithImportance,

        [Parameter()]
        [System.Object]
        $RuleErrorAction,

        [Parameter()]
        [System.Object]
        $FromScope,

        [Parameter()]
        [System.Object]
        $AttachmentNameMatchesPatterns,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $ExceptIfFromAddressMatchesPatterns,

        [Parameter()]
        [System.Object]
        $AnyOfCcHeaderMemberOf,

        [Parameter()]
        [System.Object]
        $ExceptIfAttachmentSizeOver,

        [Parameter()]
        [System.Object]
        $ExceptIfManagerForEvaluatedUser,

        [Parameter()]
        [System.Object]
        $RemoveOMEv2,

        [Parameter()]
        [System.Object]
        $ExceptIfFromAddressContainsWords,

        [Parameter()]
        [System.Object]
        $AttachmentHasExecutableContent,

        [Parameter()]
        [System.Object]
        $RouteMessageOutboundConnector,

        [Parameter()]
        [System.Object]
        $SubjectMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientDomainIs,

        [Parameter()]
        [System.Object]
        $ExceptIfSenderDomainIs,

        [Parameter()]
        [System.Object]
        $SenderManagementRelationship,

        [Parameter()]
        [System.Object]
        $ExceptIfBetweenMemberOf2,

        [Parameter()]
        [System.Object]
        $RedirectMessageTo,

        [Parameter()]
        [System.Object]
        $ApplyOME,

        [Parameter()]
        [System.Object]
        $AddManagerAsRecipientType,

        [Parameter()]
        [System.Object]
        $ExceptIfMessageSizeOver,

        [Parameter()]
        [System.Object]
        $RecipientInSenderList,

        [Parameter()]
        [System.Object]
        $SenderADAttributeContainsWords,

        [Parameter()]
        [System.Object]
        $MessageSizeOver,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientInSenderList,

        [Parameter()]
        [System.Object]
        $ExceptIfAttachmentHasExecutableContent,

        [Parameter()]
        [System.Object]
        $ExceptIfAttachmentIsUnsupported,

        [Parameter()]
        [System.Object]
        $RemoveOME,

        [Parameter()]
        [System.Object]
        $RejectMessageReasonText,

        [Parameter()]
        [System.Object]
        $RecipientAddressContainsWords,

        [Parameter()]
        [System.Object]
        $GenerateIncidentReport,

        [Parameter()]
        [System.Object]
        $FromAddressContainsWords,

        [Parameter()]
        [System.Object]
        $AnyOfRecipientAddressMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ApplyHtmlDisclaimerText,

        [Parameter()]
        [System.Object]
        $RecipientAddressMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfSubjectContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfFrom,

        [Parameter()]
        [System.Object]
        $AnyOfToCcHeader,

        [Parameter()]
        [System.Object]
        $ExceptIfSentToScope,

        [Parameter()]
        [System.Object]
        $ExceptIfAnyOfToCcHeaderMemberOf,

        [Parameter()]
        [System.Object]
        $ModerateMessageByManager,

        [Parameter()]
        [System.Object]
        $ADComparisonOperator,

        [Parameter()]
        [System.Object]
        $BetweenMemberOf2,

        [Parameter()]
        [System.Object]
        $SetHeaderName,

        [Parameter()]
        [System.Object]
        $AttachmentProcessingLimitExceeded,

        [Parameter()]
        [System.Object]
        $ExceptIfAnyOfCcHeaderMemberOf,

        [Parameter()]
        [System.Object]
        $ExceptIfSubjectMatchesPatterns,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientAddressContainsWords,

        [Parameter()]
        [System.Object]
        $HeaderMatchesMessageHeader,

        [Parameter()]
        [System.Object]
        $AnyOfRecipientAddressContainsWords,

        [Parameter()]
        [System.Object]
        $HeaderContainsWords,

        [Parameter()]
        [System.Object]
        $Comments,

        [Parameter()]
        [System.Object]
        $SentToMemberOf,

        [Parameter()]
        [System.Object]
        $ExceptIfADComparisonAttribute,

        [Parameter()]
        [System.Object]
        $ExceptIfSentTo,

        [Parameter()]
        [System.Object]
        $ExceptIfADComparisonOperator,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ExceptIfAnyOfToHeaderMemberOf,

        [Parameter()]
        [System.Object]
        $Mode,

        [Parameter()]
        [System.Object]
        $ExceptIfAnyOfToCcHeader,

        [Parameter()]
        [System.Object]
        $SubjectOrBodyMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfAttachmentExtensionMatchesWords,

        [Parameter()]
        [System.Object]
        $SenderDomainIs,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientAddressMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfHasNoClassification,

        [Parameter()]
        [System.Object]
        $ExceptIfSenderIpRanges,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientADAttributeMatchesPatterns,

        [Parameter()]
        [System.Object]
        $RecipientADAttributeContainsWords,

        [Parameter()]
        [System.Object]
        $AttachmentIsUnsupported,

        [Parameter()]
        [System.Object]
        $ExpiryDate,

        [Parameter()]
        [System.Object]
        $AttachmentExtensionMatchesWords,

        [Parameter()]
        [System.Object]
        $ExceptIfSubjectOrBodyContainsWords,

        [Parameter()]
        [System.Object]
        $LogEventText,

        [Parameter()]
        [System.Object]
        $ExceptIfManagerAddresses,

        [Parameter()]
        [System.Object]
        $SenderInRecipientList,

        [Parameter()]
        [System.Object]
        $AttachmentMatchesPatterns,

        [Parameter()]
        [System.Object]
        $DlpPolicy,

        [Parameter()]
        [System.Object]
        $ManagerAddresses,

        [Parameter()]
        [System.Object]
        $SenderAddressLocation,

        [Parameter()]
        [System.Object]
        $CopyTo,

        [Parameter()]
        [System.Object]
        $SubjectOrBodyContainsWords,

        [Parameter()]
        [System.Object]
        $ApplyClassification,

        [Parameter()]
        [System.Object]
        $SetHeaderValue,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $AttachmentIsPasswordProtected,

        [Parameter()]
        [System.Object]
        $BetweenMemberOf1,

        [Parameter()]
        [System.Object]
        $AnyOfCcHeader,

        [Parameter()]
        [System.Object]
        $ExceptIfAttachmentProcessingLimitExceeded,

        [Parameter()]
        [System.Object]
        $FromAddressMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfHeaderMatchesMessageHeader,

        [Parameter()]
        [System.Object]
        $SmtpRejectMessageRejectText,

        [Parameter()]
        [System.Object]
        $ExceptIfAttachmentContainsWords,

        [Parameter()]
        [System.Object]
        $AnyOfToHeader,

        [Parameter()]
        [System.Object]
        $ExceptIfHasSenderOverride,

        [Parameter()]
        [System.Object]
        $SCLOver,

        [Parameter()]
        [System.Object]
        $PrependSubject,

        [Parameter()]
        [System.Object]
        $ApplyRightsProtectionTemplate,

        [Parameter()]
        [System.Object]
        $MessageTypeMatches,

        [Parameter()]
        [System.Object]
        $ExceptIfAttachmentPropertyContainsWords,

        [Parameter()]
        [System.Object]
        $StopRuleProcessing,

        [Parameter()]
        [System.Object]
        $ExceptIfHeaderContainsMessageHeader,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-UMAutoAttendant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AfterHoursMainMenuCustomPromptEnabled,

        [Parameter()]
        [System.Object]
        $SpeechEnabled,

        [Parameter()]
        [System.Object]
        $AllowedInCountryOrRegionGroups,

        [Parameter()]
        [System.Object]
        $AfterHoursTransferToOperatorEnabled,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $BusinessLocation,

        [Parameter()]
        [System.Object]
        $TimeZoneName,

        [Parameter()]
        [System.Object]
        $BusinessHoursMainMenuCustomPromptFilename,

        [Parameter()]
        [System.Object]
        $OperatorExtension,

        [Parameter()]
        [System.Object]
        $DTMFFallbackAutoAttendant,

        [Parameter()]
        [System.Object]
        $BusinessHoursTransferToOperatorEnabled,

        [Parameter()]
        [System.Object]
        $AfterHoursKeyMappingEnabled,

        [Parameter()]
        [System.Object]
        $PilotIdentifierList,

        [Parameter()]
        [System.Object]
        $AllowExtensions,

        [Parameter()]
        [System.Object]
        $InfoAnnouncementEnabled,

        [Parameter()]
        [System.Object]
        $SendVoiceMsgEnabled,

        [Parameter()]
        [System.Object]
        $BusinessName,

        [Parameter()]
        [System.Object]
        $ContactScope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceUpgrade,

        [Parameter()]
        [System.Object]
        $BusinessHoursMainMenuCustomPromptEnabled,

        [Parameter()]
        [System.Object]
        $AfterHoursKeyMapping,

        [Parameter()]
        [System.Object]
        $AllowedInternationalGroups,

        [Parameter()]
        [System.Object]
        $WeekStartDay,

        [Parameter()]
        [System.Object]
        $MatchedNameSelectionMethod,

        [Parameter()]
        [System.Object]
        $BusinessHoursWelcomeGreetingEnabled,

        [Parameter()]
        [System.Object]
        $CallSomeoneEnabled,

        [Parameter()]
        [System.Object]
        $ContactAddressList,

        [Parameter()]
        [System.Object]
        $BusinessHoursKeyMapping,

        [Parameter()]
        [System.Object]
        $InfoAnnouncementFilename,

        [Parameter()]
        [System.Object]
        $AfterHoursMainMenuCustomPromptFilename,

        [Parameter()]
        [System.Object]
        $BusinessHoursKeyMappingEnabled,

        [Parameter()]
        [System.Object]
        $NameLookupEnabled,

        [Parameter()]
        [System.Object]
        $AllowDialPlanSubscribers,

        [Parameter()]
        [System.Object]
        $AfterHoursWelcomeGreetingFilename,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ContactRecipientContainer,

        [Parameter()]
        [System.Object]
        $BusinessHoursSchedule,

        [Parameter()]
        [System.Object]
        $AfterHoursWelcomeGreetingEnabled,

        [Parameter()]
        [System.Object]
        $Language,

        [Parameter()]
        [System.Object]
        $HolidaySchedule,

        [Parameter()]
        [System.Object]
        $BusinessHoursWelcomeGreetingFilename,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $TimeZone,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-UMCallAnsweringRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $CallerIds,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $CallersCanInterruptGreeting,

        [Parameter()]
        [System.Object]
        $ScheduleStatus,

        [Parameter()]
        [System.Object]
        $TimeOfDay,

        [Parameter()]
        [System.Object]
        $CheckAutomaticReplies,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExtensionsDialed,

        [Parameter()]
        [System.Object]
        $KeyMappings,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-UMDialPlan
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $NationalNumberPrefix,

        [Parameter()]
        [System.Object]
        $InternationalNumberFormat,

        [Parameter()]
        [System.Object]
        $AllowedInCountryOrRegionGroups,

        [Parameter()]
        [System.Object]
        $AutomaticSpeechRecognitionEnabled,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $OutsideLineAccessCode,

        [Parameter()]
        [System.Object]
        $AllowDialPlanSubscribers,

        [Parameter()]
        [System.Object]
        $AudioCodec,

        [Parameter()]
        [System.Object]
        $AllowHeuristicADCallingLineIdResolution,

        [Parameter()]
        [System.Object]
        $EquivalentDialPlanPhoneContexts,

        [Parameter()]
        [System.Object]
        $OperatorExtension,

        [Parameter()]
        [System.Object]
        $TUIPromptEditingEnabled,

        [Parameter()]
        [System.Object]
        $DefaultLanguage,

        [Parameter()]
        [System.Object]
        $PilotIdentifierList,

        [Parameter()]
        [System.Object]
        $AllowExtensions,

        [Parameter()]
        [System.Object]
        $LegacyPromptPublishingPoint,

        [Parameter()]
        [System.Object]
        $InfoAnnouncementEnabled,

        [Parameter()]
        [System.Object]
        $SendVoiceMsgEnabled,

        [Parameter()]
        [System.Object]
        $ContactScope,

        [Parameter()]
        [System.Object]
        $MaxRecordingDuration,

        [Parameter()]
        [System.Object]
        $WelcomeGreetingEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceUpgrade,

        [Parameter()]
        [System.Object]
        $AllowedInternationalGroups,

        [Parameter()]
        [System.Object]
        $Extension,

        [Parameter()]
        [System.Object]
        $MaxCallDuration,

        [Parameter()]
        [System.Object]
        $WelcomeGreetingFilename,

        [Parameter()]
        [System.Object]
        $InternationalAccessCode,

        [Parameter()]
        [System.Object]
        $InfoAnnouncementFilename,

        [Parameter()]
        [System.Object]
        $NumberingPlanFormats,

        [Parameter()]
        [System.Object]
        $CallSomeoneEnabled,

        [Parameter()]
        [System.Object]
        $ContactAddressList,

        [Parameter()]
        [System.Object]
        $AccessTelephoneNumbers,

        [Parameter()]
        [System.Object]
        $CountryOrRegionCode,

        [Parameter()]
        [System.Object]
        $LogonFailuresBeforeDisconnect,

        [Parameter()]
        [System.Object]
        $FaxEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ContactRecipientContainer,

        [Parameter()]
        [System.Object]
        $UMAutoAttendant,

        [Parameter()]
        [System.Object]
        $ConfiguredInternationalGroups,

        [Parameter()]
        [System.Object]
        $ConfiguredInCountryOrRegionGroups,

        [Parameter()]
        [System.Object]
        $CallAnsweringRulesEnabled,

        [Parameter()]
        [System.Object]
        $DialByNamePrimary,

        [Parameter()]
        [System.Object]
        $DialByNameSecondary,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $RecordingIdleTimeout,

        [Parameter()]
        [System.Object]
        $InputFailuresBeforeDisconnect,

        [Parameter()]
        [System.Object]
        $InCountryOrRegionNumberFormat,

        [Parameter()]
        [System.Object]
        $MatchedNameSelectionMethod,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-UMIPGateway
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $DelayedSourcePartyInfoEnabled,

        [Parameter()]
        [System.Object]
        $IPAddressFamily,

        [Parameter()]
        [System.Object]
        $OutcallsAllowed,

        [Parameter()]
        [System.Object]
        $Address,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Simulator,

        [Parameter()]
        [System.Object]
        $Status,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $MessageWaitingIndicatorAllowed,

        [Parameter()]
        [System.Object]
        $Port,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-UMMailbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $UMSMSNotificationOption,

        [Parameter()]
        [System.Object]
        $AutomaticSpeechRecognitionEnabled,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $PinlessAccessToVoiceMailEnabled,

        [Parameter()]
        [System.Object]
        $PlayOnPhoneEnabled,

        [Parameter()]
        [System.Object]
        $AnonymousCallersCanLeaveMessages,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $UMMailboxPolicy,

        [Parameter()]
        [System.Object]
        $TUIAccessToEmailEnabled,

        [Parameter()]
        [System.Object]
        $AllowUMCallsFromNonUsers,

        [Parameter()]
        [System.Object]
        $CallAnsweringAudioCodec,

        [Parameter()]
        [System.Object]
        $OperatorNumber,

        [Parameter()]
        [System.Object]
        $FaxEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $TUIAccessToCalendarEnabled,

        [Parameter()]
        [System.Object]
        $ImListMigrationCompleted,

        [Parameter()]
        [System.Object]
        $CallAnsweringRulesEnabled,

        [Parameter()]
        [System.Object]
        $MissedCallNotificationEnabled,

        [Parameter()]
        [System.Object]
        $SubscriberAccessEnabled,

        [Parameter()]
        [System.Object]
        $VoiceMailAnalysisEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-UMMailboxConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $FolderToReadEmailsFrom,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $SentVoiceMailPreviewEnabled,

        [Parameter()]
        [System.Object]
        $ReadOldestUnreadVoiceMessagesFirst,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ReceivedVoiceMailPreviewEnabled,

        [Parameter()]
        [System.Object]
        $DefaultPlayOnPhoneNumber,

        [Parameter()]
        [System.Object]
        $Greeting,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-UMMailboxPIN
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $LockedOut,

        [Parameter()]
        [System.Object]
        $SendEmail,

        [Parameter()]
        [System.Object]
        $PinExpired,

        [Parameter()]
        [System.Object]
        $NotifyEmail,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Pin,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-UMMailboxPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $VoiceMailPreviewPartnerAssignedID,

        [Parameter()]
        [System.Object]
        $AllowVoiceResponseToOtherMessageTypes,

        [Parameter()]
        [System.Object]
        $AllowCommonPatterns,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $AllowDialPlanSubscribers,

        [Parameter()]
        [System.Object]
        $UMDialPlan,

        [Parameter()]
        [System.Object]
        $AllowPinlessVoiceMailAccess,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $LogonFailuresBeforePINReset,

        [Parameter()]
        [System.Object]
        $VoiceMailPreviewPartnerAddress,

        [Parameter()]
        [System.Object]
        $AllowedInCountryOrRegionGroups,

        [Parameter()]
        [System.Object]
        $MaxGreetingDuration,

        [Parameter()]
        [System.Object]
        $AllowAutomaticSpeechRecognition,

        [Parameter()]
        [System.Object]
        $PINHistoryCount,

        [Parameter()]
        [System.Object]
        $AllowExtensions,

        [Parameter()]
        [System.Object]
        $AllowPlayOnPhone,

        [Parameter()]
        [System.Object]
        $ResetPINText,

        [Parameter()]
        [System.Object]
        $AllowVoiceMailAnalysis,

        [Parameter()]
        [System.Object]
        $FaxServerURI,

        [Parameter()]
        [System.Object]
        $InformCallerOfVoiceMailAnalysis,

        [Parameter()]
        [System.Object]
        $AllowFax,

        [Parameter()]
        [System.Object]
        $FaxMessageText,

        [Parameter()]
        [System.Object]
        $VoiceMailPreviewPartnerMaxMessageDuration,

        [Parameter()]
        [System.Object]
        $AllowedInternationalGroups,

        [Parameter()]
        [System.Object]
        $AllowMissedCallNotifications,

        [Parameter()]
        [System.Object]
        $ProtectedVoiceMailText,

        [Parameter()]
        [System.Object]
        $AllowSMSNotification,

        [Parameter()]
        [System.Object]
        $AllowTUIAccessToEmail,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AllowMessageWaitingIndicator,

        [Parameter()]
        [System.Object]
        $SourceForestPolicyNames,

        [Parameter()]
        [System.Object]
        $PINLifetime,

        [Parameter()]
        [System.Object]
        $VoiceMailText,

        [Parameter()]
        [System.Object]
        $ProtectAuthenticatedVoiceMail,

        [Parameter()]
        [System.Object]
        $MinPINLength,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceUpgrade,

        [Parameter()]
        [System.Object]
        $AllowSubscriberAccess,

        [Parameter()]
        [System.Object]
        $UMEnabledText,

        [Parameter()]
        [System.Object]
        $AllowVoiceMailPreview,

        [Parameter()]
        [System.Object]
        $ProtectUnauthenticatedVoiceMail,

        [Parameter()]
        [System.Object]
        $VoiceMailPreviewPartnerMaxDeliveryDelay,

        [Parameter()]
        [System.Object]
        $AllowTUIAccessToCalendar,

        [Parameter()]
        [System.Object]
        $AllowCallAnsweringRules,

        [Parameter()]
        [System.Object]
        $AllowTUIAccessToDirectory,

        [Parameter()]
        [System.Object]
        $RequireProtectedPlayOnPhone,

        [Parameter()]
        [System.Object]
        $AllowTUIAccessToPersonalContacts,

        [Parameter()]
        [System.Object]
        $MaxLogonAttempts,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-UnifiedAuditSetting
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-UnifiedGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EmailAddresses,

        [Parameter()]
        [System.Object]
        $AcceptMessagesOnlyFromSendersOrMembers,

        [Parameter()]
        [System.Object]
        $CustomAttribute12,

        [Parameter()]
        [System.Object]
        $CustomAttribute10,

        [Parameter()]
        [System.Object]
        $Language,

        [Parameter()]
        [System.Object]
        $CustomAttribute8,

        [Parameter()]
        [System.Object]
        $CustomAttribute5,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UnifiedGroupWelcomeMessageEnabled,

        [Parameter()]
        [System.Object]
        $MailTip,

        [Parameter()]
        [System.Object]
        $ModeratedBy,

        [Parameter()]
        [System.Object]
        $GrantSendOnBehalfTo,

        [Parameter()]
        [System.Object]
        $Classification,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AutoSubscribeNewMembers,

        [Parameter()]
        [System.Object]
        $AuditLogAgeLimit,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $HiddenFromExchangeClientsEnabled,

        [Parameter()]
        [System.Object]
        $MaxReceiveSize,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute5,

        [Parameter()]
        [System.Object]
        $CustomAttribute15,

        [Parameter()]
        [System.Object]
        $RejectMessagesFromSendersOrMembers,

        [Parameter()]
        [System.Object]
        $Alias,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $CustomAttribute1,

        [Parameter()]
        [System.Object]
        $CustomAttribute7,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SubscriptionEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceUpgrade,

        [Parameter()]
        [System.Object]
        $AccessType,

        [Parameter()]
        [System.Object]
        $MailboxRegion,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute1,

        [Parameter()]
        [System.Object]
        $Notes,

        [Parameter()]
        [System.Object]
        $CustomAttribute14,

        [Parameter()]
        [System.Object]
        $RequireSenderAuthenticationEnabled,

        [Parameter()]
        [System.Object]
        $CustomAttribute9,

        [Parameter()]
        [System.Object]
        $CustomAttribute6,

        [Parameter()]
        [System.Object]
        $DataEncryptionPolicy,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute4,

        [Parameter()]
        [System.Object]
        $SensitivityLabelId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AlwaysSubscribeMembersToCalendarEvents,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute2,

        [Parameter()]
        [System.Object]
        $CustomAttribute13,

        [Parameter()]
        [System.Object]
        $CustomAttribute2,

        [Parameter()]
        [System.Object]
        $PrimarySmtpAddress,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CalendarMemberReadOnly,

        [Parameter()]
        [System.Object]
        $MaxSendSize,

        [Parameter()]
        [System.Object]
        $HiddenFromAddressListsEnabled,

        [Parameter()]
        [System.Object]
        $MailTipTranslations,

        [Parameter()]
        [System.Object]
        $CustomAttribute4,

        [Parameter()]
        [System.Object]
        $ExtensionCustomAttribute3,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ConnectorsEnabled,

        [Parameter()]
        [System.Object]
        $ModerationEnabled,

        [Parameter()]
        [System.Object]
        $CustomAttribute3,

        [Parameter()]
        [System.Object]
        $CustomAttribute11,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-User
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Company,

        [Parameter()]
        [System.Object]
        $Phone,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Office,

        [Parameter()]
        [System.Object]
        $CountryOrRegion,

        [Parameter()]
        [System.Object]
        $AuthenticationPolicy,

        [Parameter()]
        [System.Object]
        $OtherTelephone,

        [Parameter()]
        [System.Object]
        $Pager,

        [Parameter()]
        [System.Object]
        $PhoneticDisplayName,

        [Parameter()]
        [System.Object]
        $Fax,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $LastName,

        [Parameter()]
        [System.Object]
        $StsRefreshTokensValidFrom,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveMailboxProvisioningConstraint,

        [Parameter()]
        [System.Object]
        $ResetPasswordOnNextLogon,

        [Parameter()]
        [System.Object]
        $BlockCloudCache,

        [Parameter()]
        [System.Object]
        $SeniorityIndex,

        [Parameter()]
        [System.Object]
        $City,

        [Parameter()]
        [System.Object]
        $AllowUMCallsFromNonUsers,

        [Parameter()]
        [System.Object]
        $Title,

        [Parameter()]
        [System.Object]
        $MobilePhone,

        [Parameter()]
        [System.Object]
        $AssistantName,

        [Parameter()]
        [System.Object]
        $CreateDTMFMap,

        [Parameter()]
        [System.Object]
        $VIP,

        [Parameter()]
        [System.Object]
        $StateOrProvince,

        [Parameter()]
        [System.Object]
        $Initials,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $WebPage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PublicFolder,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PermanentlyClearPreviousMailboxInfo,

        [Parameter()]
        [System.Object]
        $Manager,

        [Parameter()]
        [System.Object]
        $HomePhone,

        [Parameter()]
        [System.Object]
        $OtherFax,

        [Parameter()]
        [System.Object]
        $SimpleDisplayName,

        [Parameter()]
        [System.Object]
        $Department,

        [Parameter()]
        [System.Object]
        $OtherHomePhone,

        [Parameter()]
        [System.Object]
        $FirstName,

        [Parameter()]
        [System.Object]
        $UMDtmfMap,

        [Parameter()]
        [System.Object]
        $WindowsEmailAddress,

        [Parameter()]
        [System.Object]
        $StreetAddress,

        [Parameter()]
        [System.Object]
        $Notes,

        [Parameter()]
        [System.Object]
        $RemotePowerShellEnabled,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $GeoCoordinates,

        [Parameter()]
        [System.Object]
        $PostOfficeBox,

        [Parameter()]
        [System.Object]
        $PostalCode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-UserAnalyticsConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PrivacyMode,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-UserPhoto
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PictureData,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GroupMailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Cancel,

        [Parameter()]
        [System.Object]
        $PictureStream,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Save,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreDefaultScope,

        [Parameter()]
        [System.Object]
        $PhotoType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Preview,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Start-AuditAssistant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Start-HistoricalSearch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $MessageID,

        [Parameter()]
        [System.Object]
        $Direction,

        [Parameter()]
        [System.Object]
        $Url,

        [Parameter()]
        [System.Object]
        $CompressFile,

        [Parameter()]
        [System.Object]
        $TransportRule,

        [Parameter()]
        [System.Object]
        $ReportTitle,

        [Parameter()]
        [System.Object]
        $NetworkMessageID,

        [Parameter()]
        [System.Object]
        $ReportType,

        [Parameter()]
        [System.Object]
        $RecipientAddress,

        [Parameter()]
        [System.Object]
        $SenderAddress,

        [Parameter()]
        [System.Object]
        $DLPPolicy,

        [Parameter()]
        [System.Object]
        $DeliveryStatus,

        [Parameter()]
        [System.Object]
        $EncryptionType,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Object]
        $OriginalClientIP,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $NotifyAddress,

        [Parameter()]
        [System.Object]
        $EncryptionTemplate,

        [Parameter()]
        [System.Object]
        $Locale,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Start-ManagedFolderAssistant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $StopHoldCleanup,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DataGovernance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ComplianceJob,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $FullCrawl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InactiveMailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $HoldCleanup,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AggMailboxCleanup,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Start-MigrationBatch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Partition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Start-MigrationUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Partition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Start-UMPhoneSession
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DefaultVoicemailGreeting,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $CallAnsweringRuleId,

        [Parameter()]
        [System.Object]
        $PhoneNumber,

        [Parameter()]
        [System.Object]
        $UMMailbox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AwayVoicemailGreeting,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Stop-HistoricalSearch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $JobId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Stop-MigrationBatch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Partition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Stop-MigrationUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Partition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Stop-UMPhoneSession
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Suspend-MailboxRestoreRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $SuspendComment,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Suspend-MoveRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ProxyToMailbox,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $SuspendComment,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Suspend-PublicFolderMailboxMigrationRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $SuspendComment,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Suspend-SyncRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Test-ApplicationAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AppId,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Test-ClientAccessRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AuthenticationType,

        [Parameter()]
        [System.Object]
        $RemotePort,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $User,

        [Parameter()]
        [System.Object]
        $Protocol,

        [Parameter()]
        [System.Object]
        $OAuthClaims,

        [Parameter()]
        [System.Object]
        $RemoteAddress,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Test-DataClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TestTextExtractionResults,

        [Parameter()]
        [System.Object]
        $TextToClassify,

        [Parameter()]
        [System.Object]
        $ClassificationNames,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Test-DataEncryptionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Test-InformationBarrierPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Test-IRMConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RMSOnline,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Recipient,

        [Parameter()]
        [System.Object]
        $Sender,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Test-MailboxAssistant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AssistantName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SoftDeletedMailbox,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Test-MAPIConnectivity
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Archive,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Test-MigrationServerAvailability
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Endpoint,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AcceptUntrustedCertificates,

        [Parameter()]
        [System.Object]
        $FilePath,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ExchangeRemoteMove,

        [Parameter()]
        [System.Object]
        $EmailAddress,

        [Parameter()]
        [System.Object]
        $ServiceAccountKeyFileData,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PublicFolder,

        [Parameter()]
        [System.Object]
        $TestMailbox,

        [Parameter()]
        [System.Object]
        $ExchangeServer,

        [Parameter()]
        [System.Object]
        $Authentication,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ExchangeOutlookAnywhere,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Gmail,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Compliance,

        [Parameter()]
        [System.Object]
        $Port,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PublicFolderToUnifiedGroup,

        [Parameter()]
        [System.Object]
        $RemoteServer,

        [Parameter()]
        [System.Object]
        $MailboxPermission,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $SourceMailboxLegacyDN,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Imap,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Autodiscover,

        [Parameter()]
        [System.Object]
        $Credentials,

        [Parameter()]
        [System.Object]
        $PublicFolderDatabaseServerLegacyDN,

        [Parameter()]
        [System.Object]
        $Security,

        [Parameter()]
        [System.Object]
        $RPCProxyServer,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Test-OAuthConnectivity
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $OrganizationDomain,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AppOnly,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UseCachedToken,

        [Parameter()]
        [System.Object]
        $Mailbox,

        [Parameter()]
        [System.Object]
        $TargetUri,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReloadConfig,

        [Parameter()]
        [System.Object]
        $Service,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Test-OrganizationRelationship
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $UserIdentity,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Test-SiteMailbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UseAppTokenOnly,

        [Parameter()]
        [System.Object]
        $RequestorIdentity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BypassOwnerCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Test-TextExtraction
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $FileData,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Troubleshoot-AgendaMail
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Undo-SoftDeletedMailbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $SoftDeletedObject,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $WindowsLiveID,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PublicFolder,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Password,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Undo-SoftDeletedUnifiedGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SoftDeletedObject,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Update-DistributionGroupMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Members,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BypassSecurityGroupManagerCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Update-HybridConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SuppressOAuthWarning,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceUpgrade,

        [Parameter()]
        [System.Object]
        $OnPremisesCredentials,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $TenantCredentials,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Update-MaskingIndex
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Remove,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Add,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Update-PublicFolderMailbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceOnlineSync,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CreateAssociatedDumpster,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InvokeSynchronizer,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SuppressStatus,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReconcileFolders,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $FullSync,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $FolderId,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Update-Recipient
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Credential,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Update-RoleGroupMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Members,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BypassSecurityGroupManagerCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Update-SiteMailbox
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Target,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $FullSync,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BypassOwnerCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Upgrade-DistributionGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DlIdentities,

        [Parameter()]
        [System.Object]
        $ExecutingUser,

        [Parameter()]
        [System.Object]
        $ActionType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Validate-OutboundConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Recipients,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Validate-RetentionRuleQuery
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $KqlQueryString,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Validate-ShadowCalendar
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $End,

        [Parameter()]
        [System.Object]
        $CompareProperties,

        [Parameter()]
        [System.Object]
        $CalendarId,

        [Parameter()]
        [System.Object]
        $Start,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ReturnItemDetails,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Write-AdminAuditLog
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
#endregion
#region Intune
function Connect-MSGraph
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AdminConsent,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Quiet,

        [Parameter()]
        [System.Management.Automation.PSCredential]
        $Credential,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceInteractive,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceNonInteractive,

        [Parameter()]
        [System.String]
        $ClientSecret
    )
}
function Get-DeviceAppManagement
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_AndroidManagedAppProtections
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_AndroidManagedAppProtections_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_AndroidManagedAppProtections_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionODataType,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_AndroidManagedAppProtections_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_DefaultManagedAppProtections
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_DefaultManagedAppProtections_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_DefaultManagedAppProtections_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_IosManagedAppProtections
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_IosManagedAppProtections_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_IosManagedAppProtections_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionODataType,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_IosManagedAppProtections_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_ManagedAppPolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_ManagedAppPolicies_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_ManagedAppPolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_ManagedAppPolicies_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_ManagedAppPolicies_ExemptAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_ManagedAppPolicies_ProtectedAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_ManagedAppRegistrations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $appliedPolicyODataType
    )
}
function Get-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $appliedPolicyODataType,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip
    )
}
function Get-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $appliedPolicyODataType,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies_ExemptAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $appliedPolicyODataType
    )
}
function Get-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies_ProtectedAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $appliedPolicyODataType
    )
}
function Get-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $intendedPolicyODataType
    )
}
function Get-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $intendedPolicyODataType,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip
    )
}
function Get-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $intendedPolicyODataType,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies_ExemptAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $intendedPolicyODataType,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip
    )
}
function Get-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies_ProtectedAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $intendedPolicyODataType,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip
    )
}
function Get-DeviceAppManagement_ManagedAppRegistrations_Operations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $managedAppOperationId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_ManagedAppStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $managedAppStatusId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_ManagedEBooks
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Get-DeviceAppManagement_ManagedEBooks_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $managedEBookId,

        [Parameter()]
        [System.String]
        $managedEBookAssignmentId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_ManagedEBooks_DeviceStates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $deviceInstallStateId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Get-DeviceAppManagement_ManagedEBooks_InstallSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Get-DeviceAppManagement_ManagedEBooks_UserStateSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $managedEBookId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $userInstallStateSummaryId
    )
}
function Get-DeviceAppManagement_ManagedEBooks_UserStateSummary_DeviceStates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $managedEBookId,

        [Parameter()]
        [System.String]
        $deviceInstallStateId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $userInstallStateSummaryId
    )
}
function Get-DeviceAppManagement_MdmWindowsInformationProtectionPolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_MdmWindowsInformationProtectionPolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_MdmWindowsInformationProtectionPolicies_ExemptAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_MdmWindowsInformationProtectionPolicies_ProtectedAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_MobileAppCategories
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $mobileAppCategoryId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_MobileAppConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_MobileAppConfigurations_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationAssignmentId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_MobileAppConfigurations_DeviceStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationDeviceStatusId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_MobileAppConfigurations_DeviceStatusSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_MobileAppConfigurations_UserStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationUserStatusId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_MobileAppConfigurations_UserStatusSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_MobileApps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_MobileApps_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $mobileAppAssignmentId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_MobileApps_Categories
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $mobileAppCategoryId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_MobileApps_CategoriesReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $mobileAppCategoryId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_MobileApps_ContentVersions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String]
        $mobileAppODataType,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $mobileAppContentId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_MobileApps_ContentVersions_Files
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String]
        $mobileAppContentFileId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $mobileAppODataType,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $mobileAppContentId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_TargetedManagedAppConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function Get-DeviceAppManagement_TargetedManagedAppConfigurations_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function Get-DeviceAppManagement_TargetedManagedAppConfigurations_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function Get-DeviceAppManagement_TargetedManagedAppConfigurations_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_VppTokens
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $vppTokenId,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceAppManagement_WindowsInformationProtectionPolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId
    )
}
function Get-DeviceAppManagement_WindowsInformationProtectionPolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId
    )
}
function Get-DeviceAppManagement_WindowsInformationProtectionPolicies_ExemptAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId
    )
}
function Get-DeviceAppManagement_WindowsInformationProtectionPolicies_ProtectedAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId
    )
}
function Get-DeviceManagement
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_ApplePushNotificationCertificate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_ConditionalAccessSettings
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DetectedApps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $detectedAppId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DetectedApps_ManagedDevices
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $detectedAppId
    )
}
function Get-DeviceManagement_DetectedApps_ManagedDevicesReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $detectedAppId
    )
}
function Get-DeviceManagement_DeviceCategories
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCategoryId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DeviceCompliancePolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DeviceCompliancePolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyAssignmentId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DeviceCompliancePolicies_DeviceSettingStateSummaries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $settingStateDeviceSummaryId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DeviceCompliancePolicies_DeviceStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $deviceComplianceDeviceStatusId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DeviceCompliancePolicies_DeviceStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DeviceCompliancePolicies_ScheduledActionsForRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $deviceComplianceScheduledActionForRuleId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DeviceCompliancePolicies_ScheduledActionsForRule_ScheduledActionConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $deviceComplianceActionItemId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $deviceComplianceScheduledActionForRuleId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DeviceCompliancePolicies_UserStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $deviceComplianceUserStatusId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DeviceCompliancePolicies_UserStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DeviceCompliancePolicyDeviceStateSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DeviceCompliancePolicySettingStateSummaries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicySettingStateSummaryId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DeviceCompliancePolicySettingStateSummaries_DeviceComplianceSettingStates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $deviceComplianceSettingStateId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicySettingStateSummaryId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DeviceConfigurationDeviceStateSummaries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DeviceConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DeviceConfigurations_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.String]
        $deviceConfigurationAssignmentId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DeviceConfigurations_DeviceSettingStateSummaries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.String]
        $settingStateDeviceSummaryId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DeviceConfigurations_DeviceStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.String]
        $deviceConfigurationDeviceStatusId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DeviceConfigurations_DeviceStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DeviceConfigurations_UserStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $deviceConfigurationUserStatusId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DeviceConfigurations_UserStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DeviceEnrollmentConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $deviceEnrollmentConfigurationId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DeviceEnrollmentConfigurations_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $enrollmentConfigurationAssignmentId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $deviceEnrollmentConfigurationId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_DeviceManagementPartners
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $deviceManagementPartnerId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_ExchangeConnectors
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $deviceManagementExchangeConnectorId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_IosUpdateStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $iosUpdateDeviceStatusId,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-DeviceManagement_ManagedDeviceOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_ManagedDeviceOverviewReference
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_ManagedDevices
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_ManagedDevices_DeviceCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_ManagedDevices_DeviceCompliancePolicyStates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyStateId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_ManagedDevices_DeviceConfigurationStates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $deviceConfigurationStateId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_MobileThreatDefenseConnectors
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $mobileThreatDefenseConnectorId
    )
}
function Get-DeviceManagement_NotificationMessageTemplates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $notificationMessageTemplateId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_NotificationMessageTemplates_LocalizedNotificationMessages
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $notificationMessageTemplateId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $localizedNotificationMessageId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_RemoteAssistancePartners
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $remoteAssistancePartnerId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_ResourceOperations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $resourceOperationId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_RoleAssignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $deviceAndAppManagementRoleAssignmentId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_RoleAssignments_RoleDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $roleAssignmentODataType,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $deviceAndAppManagementRoleAssignmentId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_RoleAssignments_RoleDefinitionReference
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $roleAssignmentODataType,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $deviceAndAppManagementRoleAssignmentId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_RoleDefinitions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $roleDefinitionId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_RoleDefinitions_RoleAssignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $roleDefinitionId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $roleAssignmentId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_RoleDefinitions_RoleAssignments_RoleDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $roleDefinitionId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $roleAssignmentId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_RoleDefinitions_RoleAssignments_RoleDefinitionReference
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $roleDefinitionId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $roleAssignmentId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_SoftwareUpdateStatusSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_SoftwareUpdateStatusSummaryReference
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_TelecomExpenseManagementPartners
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $telecomExpenseManagementPartnerId,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_TermsAndConditions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $termsAndConditionId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_TermsAndConditions_AcceptanceStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $termsAndConditionId,

        [Parameter()]
        [System.String]
        $termsAndConditionsAcceptanceStatusId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_TermsAndConditions_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $termsAndConditionsAssignmentId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $termsAndConditionId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_TroubleshootingEvents
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $deviceManagementTroubleshootingEventId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_WindowsInformationProtectionAppLearningSummaries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLearningSummaryId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-DeviceManagement_WindowsInformationProtectionNetworkLearningSummaries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionNetworkLearningSummaryId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-Groups
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-Groups_CreatedOnBehalfOf
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-Groups_CreatedOnBehalfOfReference
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-Groups_GroupLifecyclePolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $groupLifecyclePolicyId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-Groups_MemberOf
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $directoryObjectId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-Groups_MemberOfReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $directoryObjectId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-Groups_Members
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $directoryObjectId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-Groups_MembersReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $directoryObjectId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-Groups_MembersWithLicenseErrors
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $directoryObjectId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-Groups_MembersWithLicenseErrorsReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $directoryObjectId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-Groups_Owners
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $directoryObjectId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-Groups_OwnersReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $directoryObjectId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-Groups_Photo
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-Groups_PhotoData
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Get-Groups_Photos
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $profilePhotoId,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-Groups_PhotosData
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $profilePhotoId
    )
}
function Get-Groups_Settings
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $groupSettingId,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-Groups_TransitiveMemberOf
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $directoryObjectId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-Groups_TransitiveMemberOfReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $directoryObjectId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-Groups_TransitiveMembers
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $directoryObjectId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-Groups_TransitiveMembersReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $directoryObjectId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-MSGraphEnvironment
{
    [CmdletBinding()]
    param(

    )
}
function Get-MSGraphMetadata
{
    [CmdletBinding()]
    param(

    )
}
function Get-MSGraphNextPage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $NextLink,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-Organization
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $organizationId
    )
}
function Get-Organization_Extensions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String[]]
        $OrderBy,

        [Parameter()]
        [System.String]
        $extensionId,

        [Parameter()]
        [System.String[]]
        $Expand,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.String]
        $organizationId
    )
}
function Invoke-DeviceAppManagement_AndroidManagedAppProtections_Assign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId
    )
}
function Invoke-DeviceAppManagement_AndroidManagedAppProtections_TargetApps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId
    )
}
function Invoke-DeviceAppManagement_DefaultManagedAppProtections_TargetApps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId
    )
}
function Invoke-DeviceAppManagement_IosManagedAppProtections_Assign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.Object[]]
        $assignments
    )
}
function Invoke-DeviceAppManagement_IosManagedAppProtections_TargetApps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId
    )
}
function Invoke-DeviceAppManagement_ManagedAppPolicies_TargetApps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Invoke-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies_TargetApps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Invoke-DeviceAppManagement_ManagedAppRegistrations_GetUserIdsWithFlaggedAppRegistration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Invoke-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies_TargetApps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Invoke-DeviceAppManagement_ManagedEBooks_Assign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $managedEBookAssignments,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Invoke-DeviceAppManagement_MdmWindowsInformationProtectionPolicies_Assign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.Object[]]
        $assignments
    )
}
function Invoke-DeviceAppManagement_MdmWindowsInformationProtectionPolicies_TargetApps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId
    )
}
function Invoke-DeviceAppManagement_MobileAppConfigurations_Assign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.Object[]]
        $assignments
    )
}
function Invoke-DeviceAppManagement_MobileApps_Assign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.Object[]]
        $mobileAppAssignments
    )
}
function Invoke-DeviceAppManagement_MobileApps_ContentVersions_Files_Commit
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppContentFileId,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String]
        $mobileAppODataType,

        [Parameter()]
        [System.String]
        $mobileAppContentId,

        [Parameter()]
        [System.Object]
        $fileEncryptionInfo
    )
}
function Invoke-DeviceAppManagement_MobileApps_ContentVersions_Files_RenewUpload
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppContentFileId,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String]
        $mobileAppODataType,

        [Parameter()]
        [System.String]
        $mobileAppContentId
    )
}
function Invoke-DeviceAppManagement_SyncMicrosoftStoreForBusinessApps
{
    [CmdletBinding()]
    param(

    )
}
function Invoke-DeviceAppManagement_TargetedManagedAppConfigurations_Assign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function Invoke-DeviceAppManagement_TargetedManagedAppConfigurations_TargetApps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function Invoke-DeviceAppManagement_VppTokens_SyncLicenses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $vppTokenId
    )
}
function Invoke-DeviceAppManagement_WindowsInformationProtectionPolicies_Assign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId,

        [Parameter()]
        [System.Object[]]
        $assignments
    )
}
function Invoke-DeviceAppManagement_WindowsInformationProtectionPolicies_TargetApps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId,

        [Parameter()]
        [System.Object[]]
        $apps
    )
}
function Invoke-DeviceManagement_ApplePushNotificationCertificate_DownloadApplePushNotificationCertificateSigningRequest
{
    [CmdletBinding()]
    param(

    )
}
function Invoke-DeviceManagement_DeviceCompliancePolicies_Assign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Object[]]
        $assignments
    )
}
function Invoke-DeviceManagement_DeviceCompliancePolicies_ScheduleActionsForRules
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Object[]]
        $deviceComplianceScheduledActionForRules
    )
}
function Invoke-DeviceManagement_DeviceConfigurations_Assign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.Object[]]
        $assignments
    )
}
function Invoke-DeviceManagement_DeviceEnrollmentConfigurations_Assign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $enrollmentConfigurationAssignments,

        [Parameter()]
        [System.String]
        $deviceEnrollmentConfigurationId
    )
}
function Invoke-DeviceManagement_DeviceEnrollmentConfigurations_SetPriority
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $priority,

        [Parameter()]
        [System.String]
        $deviceEnrollmentConfigurationId
    )
}
function Invoke-DeviceManagement_ExchangeConnectors_Sync
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceManagementExchangeConnectorId,

        [Parameter()]
        [System.String]
        $syncType
    )
}
function Invoke-DeviceManagement_GetEffectivePermissions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $scope,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Invoke-DeviceManagement_ManagedDevices_BypassActivationLock
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-DeviceManagement_ManagedDevices_CleanWindowsDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.Boolean]
        $keepUserData
    )
}
function Invoke-DeviceManagement_ManagedDevices_DeleteUserFromSharedAppleDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-DeviceManagement_ManagedDevices_DisableLostMode
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-DeviceManagement_ManagedDevices_LocateDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-DeviceManagement_ManagedDevices_LogoutSharedAppleDeviceActiveUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-DeviceManagement_ManagedDevices_RebootNow
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-DeviceManagement_ManagedDevices_RecoverPasscode
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-DeviceManagement_ManagedDevices_RemoteLock
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-DeviceManagement_ManagedDevices_RequestRemoteAssistance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-DeviceManagement_ManagedDevices_ResetPasscode
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-DeviceManagement_ManagedDevices_Retire
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-DeviceManagement_ManagedDevices_ShutDown
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-DeviceManagement_ManagedDevices_SyncDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-DeviceManagement_ManagedDevices_UpdateWindowsDeviceAccount
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $updateWindowsDeviceAccountActionParameter,

        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-DeviceManagement_ManagedDevices_WindowsDefenderScan
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.Boolean]
        $quickScan
    )
}
function Invoke-DeviceManagement_ManagedDevices_WindowsDefenderUpdateSignatures
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-DeviceManagement_ManagedDevices_Wipe
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $keepEnrollmentData,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String]
        $macOsUnlockCode,

        [Parameter()]
        [System.Boolean]
        $keepUserData
    )
}
function Invoke-DeviceManagement_NotificationMessageTemplates_SendTestMessage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $notificationMessageTemplateId
    )
}
function Invoke-DeviceManagement_RemoteAssistancePartners_BeginOnboarding
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $remoteAssistancePartnerId
    )
}
function Invoke-DeviceManagement_RemoteAssistancePartners_Disconnect
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $remoteAssistancePartnerId
    )
}
function Invoke-DeviceManagement_VerifyWindowsEnrollmentAutoDiscovery
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $domainName
    )
}
function Invoke-Groups_AddFavorite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Invoke-Groups_CheckMemberGroups
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $groupIds,

        [Parameter()]
        [System.String]
        $groupId
    )
}
function Invoke-Groups_Delta
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Invoke-Groups_GetByIds
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $types,

        [Parameter()]
        [System.String[]]
        $ids
    )
}
function Invoke-Groups_GetMemberGroups
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.Boolean]
        $securityEnabledOnly
    )
}
function Invoke-Groups_GetMemberObjects
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.Boolean]
        $securityEnabledOnly
    )
}
function Invoke-Groups_GroupLifecyclePolicies_AddGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupLifecyclePolicyId,

        [Parameter()]
        [System.String]
        $groupId
    )
}
function Invoke-Groups_GroupLifecyclePolicies_RemoveGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupLifecyclePolicyId,

        [Parameter()]
        [System.String]
        $groupId
    )
}
function Invoke-Groups_RemoveFavorite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Invoke-Groups_Renew
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Invoke-Groups_ResetUnseenCount
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Invoke-Groups_Restore
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Invoke-Groups_SubscribeByMail
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Invoke-Groups_UnsubscribeByMail
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Invoke-MSGraphRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $HttpMethod,

        [Parameter()]
        [System.Object]
        $Content,

        [Parameter()]
        [System.Object]
        $Headers,

        [Parameter()]
        [System.String]
        $Url
    )
}
function Invoke-Organization_CheckMemberGroups
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $groupIds,

        [Parameter()]
        [System.String]
        $organizationId
    )
}
function Invoke-Organization_GetByIds
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $types,

        [Parameter()]
        [System.String[]]
        $ids
    )
}
function Invoke-Organization_GetMemberGroups
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $securityEnabledOnly,

        [Parameter()]
        [System.String]
        $organizationId
    )
}
function Invoke-Organization_GetMemberObjects
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $securityEnabledOnly,

        [Parameter()]
        [System.String]
        $organizationId
    )
}
function Invoke-Organization_Restore
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $organizationId
    )
}
function Invoke-Organization_SetMobileDeviceManagementAuthority
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $organizationId
    )
}
function New-AccessActionObject
{
    [CmdletBinding()]
    param(

    )
}
function New-ActivityHistoryItemObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $expirationDateTime,

        [Parameter()]
        [System.String]
        $userTimezone,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $startedDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $lastActiveDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.Object]
        $activity,

        [Parameter()]
        [System.Int32]
        $activeDurationSeconds
    )
}
function New-AlertHistoryStateObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $assignedTo,

        [Parameter()]
        [System.String]
        $feedback,

        [Parameter()]
        [System.String]
        $appId,

        [Parameter()]
        [System.String[]]
        $comments,

        [Parameter()]
        [System.String]
        $user,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.DateTimeOffset]
        $updatedDateTime
    )
}
function New-AlertObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Int32]
        $confidence,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Object[]]
        $vulnerabilityStates,

        [Parameter()]
        [System.Object[]]
        $fileStates,

        [Parameter()]
        [System.Object[]]
        $historyStates,

        [Parameter()]
        [System.String]
        $azureTenantId,

        [Parameter()]
        [System.String[]]
        $recommendedActions,

        [Parameter()]
        [System.Object[]]
        $malwareStates,

        [Parameter()]
        [System.String]
        $azureSubscriptionId,

        [Parameter()]
        [System.String]
        $severity,

        [Parameter()]
        [System.String]
        $title,

        [Parameter()]
        [System.DateTimeOffset]
        $eventDateTime,

        [Parameter()]
        [System.String]
        $category,

        [Parameter()]
        [System.String[]]
        $comments,

        [Parameter()]
        [System.Object[]]
        $networkConnections,

        [Parameter()]
        [System.String]
        $assignedTo,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.Object[]]
        $cloudAppStates,

        [Parameter()]
        [System.Object[]]
        $processes,

        [Parameter()]
        [System.String]
        $feedback,

        [Parameter()]
        [System.Object[]]
        $hostStates,

        [Parameter()]
        [System.Object[]]
        $userStates,

        [Parameter()]
        [System.String[]]
        $tags,

        [Parameter()]
        [System.Object[]]
        $triggers,

        [Parameter()]
        [System.Object]
        $vendorInformation,

        [Parameter()]
        [System.String[]]
        $detectionIds,

        [Parameter()]
        [System.Object[]]
        $registryKeyStates,

        [Parameter()]
        [System.String[]]
        $sourceMaterials,

        [Parameter()]
        [System.DateTimeOffset]
        $closedDateTime,

        [Parameter()]
        [System.String]
        $activityGroupName
    )
}
function New-AlertTriggerObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $value,

        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.String]
        $type
    )
}
function New-AlternativeSecurityIdObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $type,

        [Parameter()]
        [System.Byte[]]
        $key,

        [Parameter()]
        [System.String]
        $identityProvider
    )
}
function New-AndroidMinimumOperatingSystemObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $v5_0,

        [Parameter()]
        [System.Boolean]
        $v4_4,

        [Parameter()]
        [System.Boolean]
        $v4_0,

        [Parameter()]
        [System.Boolean]
        $v4_2,

        [Parameter()]
        [System.Boolean]
        $v5_1,

        [Parameter()]
        [System.Boolean]
        $v4_1,

        [Parameter()]
        [System.Boolean]
        $v4_3,

        [Parameter()]
        [System.Boolean]
        $v4_0_3
    )
}
function New-AppCatalogsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $teamsApps
    )
}
function New-AppConfigurationSettingItemObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $appConfigKeyType,

        [Parameter()]
        [System.String]
        $appConfigKey,

        [Parameter()]
        [System.String]
        $appConfigKeyValue
    )
}
function New-AppIdentityObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $servicePrincipalName,

        [Parameter()]
        [System.String]
        $servicePrincipalId,

        [Parameter()]
        [System.String]
        $appId
    )
}
function New-ApplePushNotificationCertificateObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $expirationDateTime,

        [Parameter()]
        [System.String]
        $certificate,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $topicIdentifier,

        [Parameter()]
        [System.String]
        $appleIdentifier
    )
}
function New-AppliedConditionalAccessPolicyObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String[]]
        $enforcedGrantControls,

        [Parameter()]
        [System.String]
        $result,

        [Parameter()]
        [System.String[]]
        $enforcedSessionControls
    )
}
function New-AppListItemObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.String]
        $publisher,

        [Parameter()]
        [System.String]
        $appId,

        [Parameter()]
        [System.String]
        $appStoreUrl
    )
}
function New-AssignedLicenseObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Guid[]]
        $disabledPlans,

        [Parameter()]
        [System.Guid]
        $skuId
    )
}
function New-AssignedPlanObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $service,

        [Parameter()]
        [System.Guid]
        $servicePlanId,

        [Parameter()]
        [System.DateTimeOffset]
        $assignedDateTime,

        [Parameter()]
        [System.String]
        $capabilityStatus
    )
}
function New-AttachmentObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $item,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Boolean]
        $isInline,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $itemAttachment,

        [Parameter()]
        [System.String]
        $contentId,

        [Parameter()]
        [System.Int32]
        $size,

        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.String]
        $contentType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $fileAttachment,

        [Parameter()]
        [System.Byte[]]
        $contentBytes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $referenceAttachment,

        [Parameter()]
        [System.String]
        $contentLocation
    )
}
function New-AttendeeAvailabilityObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $attendee,

        [Parameter()]
        [System.String]
        $availability
    )
}
function New-AudioObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int64]
        $bitrate,

        [Parameter()]
        [System.Boolean]
        $hasDrm,

        [Parameter()]
        [System.Int32]
        $trackCount,

        [Parameter()]
        [System.Int16]
        $disc,

        [Parameter()]
        [System.String]
        $title,

        [Parameter()]
        [System.Boolean]
        $isVariableBitrate,

        [Parameter()]
        [System.Int64]
        $duration,

        [Parameter()]
        [System.String]
        $genre,

        [Parameter()]
        [System.String]
        $copyright,

        [Parameter()]
        [System.String]
        $composers,

        [Parameter()]
        [System.String]
        $albumArtist,

        [Parameter()]
        [System.Int32]
        $year,

        [Parameter()]
        [System.Int32]
        $track,

        [Parameter()]
        [System.Int16]
        $discCount,

        [Parameter()]
        [System.String]
        $artist,

        [Parameter()]
        [System.String]
        $album
    )
}
function New-AuditActivityInitiatorObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $app,

        [Parameter()]
        [System.Object]
        $user
    )
}
function New-AuditLogRootObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $directoryAudits,

        [Parameter()]
        [System.Object[]]
        $signIns,

        [Parameter()]
        [System.Object[]]
        $restrictedSignIns
    )
}
function New-AutomaticRepliesMailTipsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $scheduledEndTime,

        [Parameter()]
        [System.String]
        $message,

        [Parameter()]
        [System.Object]
        $messageLanguage,

        [Parameter()]
        [System.Object]
        $scheduledStartTime
    )
}
function New-AutomaticRepliesSettingObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $scheduledEndDateTime,

        [Parameter()]
        [System.String]
        $externalReplyMessage,

        [Parameter()]
        [System.Object]
        $scheduledStartDateTime,

        [Parameter()]
        [System.String]
        $externalAudience,

        [Parameter()]
        [System.String]
        $internalReplyMessage,

        [Parameter()]
        [System.String]
        $status
    )
}
function New-AverageComparativeScoreObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $basis,

        [Parameter()]
        [System.Double]
        $averageScore
    )
}
function New-BaseItemObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $shared,

        [Parameter()]
        [System.Object[]]
        $sites,

        [Parameter()]
        [System.Object]
        $siteCollection,

        [Parameter()]
        [System.Object]
        $createdByUser,

        [Parameter()]
        [System.String]
        $driveType,

        [Parameter()]
        [System.Object]
        $package,

        [Parameter()]
        [System.Object]
        $analytics,

        [Parameter()]
        [System.Object]
        $video,

        [Parameter()]
        [System.Object]
        $location,

        [Parameter()]
        [System.Object[]]
        $lists,

        [Parameter()]
        [System.String]
        $eTag,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Object]
        $createdBy,

        [Parameter()]
        [System.String]
        $webUrl,

        [Parameter()]
        [System.Object[]]
        $children,

        [Parameter()]
        [System.Int64]
        $size,

        [Parameter()]
        [System.Object]
        $owner,

        [Parameter()]
        [System.Object]
        $deleted,

        [Parameter()]
        [System.Object]
        $audio,

        [Parameter()]
        [System.Object]
        $specialFolder,

        [Parameter()]
        [System.Object]
        $listItem,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $versions,

        [Parameter()]
        [System.Object]
        $driveItem,

        [Parameter()]
        [System.Object]
        $image,

        [Parameter()]
        [System.Object]
        $remoteItem,

        [Parameter()]
        [System.String]
        $webDavUrl,

        [Parameter()]
        [System.Object]
        $onenote,

        [Parameter()]
        [System.Object[]]
        $contentTypes,

        [Parameter()]
        [System.Object]
        $lastModifiedBy,

        [Parameter()]
        [System.Object[]]
        $drives,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $sharedDriveItem,

        [Parameter()]
        [System.Object]
        $publication,

        [Parameter()]
        [System.Object]
        $file,

        [Parameter()]
        [System.Object]
        $system,

        [Parameter()]
        [System.Object[]]
        $items,

        [Parameter()]
        [System.Object]
        $photo,

        [Parameter()]
        [System.Object[]]
        $permissions,

        [Parameter()]
        [System.Object]
        $parentReference,

        [Parameter()]
        [System.Object[]]
        $thumbnails,

        [Parameter()]
        [System.Object]
        $sharepointIds,

        [Parameter()]
        [System.Object]
        $folder,

        [Parameter()]
        [System.Object]
        $drive,

        [Parameter()]
        [System.Object]
        $lastModifiedByUser,

        [Parameter()]
        [System.Object]
        $searchResult,

        [Parameter()]
        [System.IO.Stream]
        $content,

        [Parameter()]
        [System.Object]
        $site,

        [Parameter()]
        [System.Object]
        $list,

        [Parameter()]
        [System.Object[]]
        $subscriptions,

        [Parameter()]
        [System.Object]
        $workbook,

        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object]
        $contentType,

        [Parameter()]
        [System.Object]
        $fields,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Object[]]
        $special,

        [Parameter()]
        [System.String]
        $cTag,

        [Parameter()]
        [System.Object]
        $fileSystemInfo,

        [Parameter()]
        [System.Object]
        $quota,

        [Parameter()]
        [System.Object]
        $root,

        [Parameter()]
        [System.Object[]]
        $columns
    )
}
function New-BaseItemVersionObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $fields,

        [Parameter()]
        [System.Object]
        $publication,

        [Parameter()]
        [System.Object]
        $lastModifiedBy,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.IO.Stream]
        $content,

        [Parameter()]
        [System.Int64]
        $size,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $listItemVersion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $driveItemVersion
    )
}
function New-BitLockerRemovableDrivePolicyObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $encryptionMethod,

        [Parameter()]
        [System.Boolean]
        $requireEncryptionForWriteAccess,

        [Parameter()]
        [System.Boolean]
        $blockCrossOrganizationWriteAccess
    )
}
function New-BooleanColumnObject
{
    [CmdletBinding()]
    param(

    )
}
function New-CalculatedColumnObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $format,

        [Parameter()]
        [System.String]
        $outputType,

        [Parameter()]
        [System.String]
        $formula
    )
}
function New-CalendarGroupObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.String]
        $changeKey,

        [Parameter()]
        [System.Object[]]
        $calendars,

        [Parameter()]
        [System.Guid]
        $classId
    )
}
function New-CalendarObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.String]
        $changeKey,

        [Parameter()]
        [System.String]
        $color,

        [Parameter()]
        [System.Boolean]
        $canShare,

        [Parameter()]
        [System.Object[]]
        $singleValueExtendedProperties,

        [Parameter()]
        [System.Object]
        $owner,

        [Parameter()]
        [System.Object[]]
        $events,

        [Parameter()]
        [System.Object[]]
        $calendarView,

        [Parameter()]
        [System.Boolean]
        $canEdit,

        [Parameter()]
        [System.Boolean]
        $canViewPrivateItems,

        [Parameter()]
        [System.Object[]]
        $multiValueExtendedProperties
    )
}
function New-CertificationControlObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.String]
        $url
    )
}
function New-ChannelObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $webUrl,

        [Parameter()]
        [System.String]
        $email,

        [Parameter()]
        [System.Object[]]
        $tabs
    )
}
function New-ChoiceColumnObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $allowTextEntry,

        [Parameter()]
        [System.String[]]
        $choices,

        [Parameter()]
        [System.String]
        $displayAs
    )
}
function New-CloudAppSecurityStateObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $destinationServiceName,

        [Parameter()]
        [System.String]
        $destinationServiceIp,

        [Parameter()]
        [System.String]
        $riskScore
    )
}
function New-ColumnDefinitionObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $boolean,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Object]
        $currency,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object]
        $number,

        [Parameter()]
        [System.Object]
        $dateTime,

        [Parameter()]
        [System.String]
        $columnGroup,

        [Parameter()]
        [System.Object]
        $defaultValue,

        [Parameter()]
        [System.Object]
        $calculated,

        [Parameter()]
        [System.Boolean]
        $readOnly,

        [Parameter()]
        [System.Object]
        $text,

        [Parameter()]
        [System.Boolean]
        $hidden,

        [Parameter()]
        [System.Boolean]
        $indexed,

        [Parameter()]
        [System.Boolean]
        $enforceUniqueValues,

        [Parameter()]
        [System.Boolean]
        $required,

        [Parameter()]
        [System.Object]
        $choice,

        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.Object]
        $lookup,

        [Parameter()]
        [System.Object]
        $personOrGroup
    )
}
function New-ColumnLinkObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $name
    )
}
function New-ComplexExtensionValueObject
{
    [CmdletBinding()]
    param(

    )
}
function New-ComplianceInformationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $certificationName,

        [Parameter()]
        [System.Object[]]
        $certificationControls
    )
}
function New-ConfigurationManagerClientEnabledFeaturesObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $windowsUpdateForBusiness,

        [Parameter()]
        [System.Boolean]
        $deviceConfiguration,

        [Parameter()]
        [System.Boolean]
        $modernApps,

        [Parameter()]
        [System.Boolean]
        $compliancePolicy,

        [Parameter()]
        [System.Boolean]
        $inventory,

        [Parameter()]
        [System.Boolean]
        $resourceAccess
    )
}
function New-ContactFolderObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $childFolders,

        [Parameter()]
        [System.Object[]]
        $singleValueExtendedProperties,

        [Parameter()]
        [System.Object[]]
        $contacts,

        [Parameter()]
        [System.Object[]]
        $multiValueExtendedProperties,

        [Parameter()]
        [System.String]
        $parentFolderId
    )
}
function New-ContentTypeInfoObject
{
    [CmdletBinding()]
    param(

    )
}
function New-ContentTypeObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $parentId,

        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.Boolean]
        $sealed,

        [Parameter()]
        [System.Boolean]
        $hidden,

        [Parameter()]
        [System.Object[]]
        $columnLinks,

        [Parameter()]
        [System.Object]
        $inheritedFrom,

        [Parameter()]
        [System.String]
        $group,

        [Parameter()]
        [System.Object]
        $order,

        [Parameter()]
        [System.Boolean]
        $readOnly
    )
}
function New-ContentTypeOrderObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $position,

        [Parameter()]
        [System.Boolean]
        $default
    )
}
function New-ControlScoreObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $controlName,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $controlCategory,

        [Parameter()]
        [System.Double]
        $score
    )
}
function New-ConversationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $threads,

        [Parameter()]
        [System.String[]]
        $uniqueSenders,

        [Parameter()]
        [System.Boolean]
        $hasAttachments,

        [Parameter()]
        [System.String]
        $topic,

        [Parameter()]
        [System.String]
        $preview,

        [Parameter()]
        [System.DateTimeOffset]
        $lastDeliveredDateTime
    )
}
function New-ConversationThreadObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $isLocked,

        [Parameter()]
        [System.Object[]]
        $toRecipients,

        [Parameter()]
        [System.Object[]]
        $ccRecipients,

        [Parameter()]
        [System.String[]]
        $uniqueSenders,

        [Parameter()]
        [System.Boolean]
        $hasAttachments,

        [Parameter()]
        [System.Object[]]
        $posts,

        [Parameter()]
        [System.String]
        $topic,

        [Parameter()]
        [System.String]
        $preview,

        [Parameter()]
        [System.DateTimeOffset]
        $lastDeliveredDateTime
    )
}
function New-CopyNotebookModelObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedTime,

        [Parameter()]
        [System.DateTimeOffset]
        $createdTime,

        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.String]
        $lastModifiedBy,

        [Parameter()]
        [System.Object]
        $lastModifiedByIdentity,

        [Parameter()]
        [System.String]
        $self,

        [Parameter()]
        [System.String]
        $sectionGroupsUrl,

        [Parameter()]
        [System.String]
        $userRole,

        [Parameter()]
        [System.Object]
        $createdByIdentity,

        [Parameter()]
        [System.String]
        $sectionsUrl,

        [Parameter()]
        [System.Object]
        $links,

        [Parameter()]
        [System.Boolean]
        $isShared,

        [Parameter()]
        [System.String]
        $createdBy,

        [Parameter()]
        [System.Boolean]
        $isDefault
    )
}
function New-CurrencyColumnObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $locale
    )
}
function New-DataPolicyOperationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $storageLocation,

        [Parameter()]
        [System.Double]
        $progress,

        [Parameter()]
        [System.DateTimeOffset]
        $submittedDateTime,

        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.DateTimeOffset]
        $completedDateTime
    )
}
function New-DateTimeColumnObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $format,

        [Parameter()]
        [System.String]
        $displayAs
    )
}
function New-DateTimeTimeZoneObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $timeZone,

        [Parameter()]
        [System.String]
        $dateTime
    )
}
function New-DefaultColumnValueObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $value,

        [Parameter()]
        [System.String]
        $formula
    )
}
function New-DefenderDetectedMalwareActionsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $severeSeverity,

        [Parameter()]
        [System.String]
        $moderateSeverity,

        [Parameter()]
        [System.String]
        $highSeverity,

        [Parameter()]
        [System.String]
        $lowSeverity
    )
}
function New-DeletedObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $state
    )
}
function New-DetectedAppObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Object[]]
        $managedDevices,

        [Parameter()]
        [System.Int32]
        $deviceCount,

        [Parameter()]
        [System.Int64]
        $sizeInByte
    )
}
function New-DeviceActionResultObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $resetPasscodeActionResult,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $passcode,

        [Parameter()]
        [System.Object]
        $deviceLocation,

        [Parameter()]
        [System.String]
        $actionName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $remoteLockActionResult,

        [Parameter()]
        [System.String]
        $actionState,

        [Parameter()]
        [System.DateTimeOffset]
        $startDateTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $locateDeviceActionResult,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdatedDateTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceActionResult,

        [Parameter()]
        [System.String]
        $unlockPin,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deleteUserFromSharedAppleDeviceActionResult,

        [Parameter()]
        [System.String]
        $scanType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsDefenderScanActionResult
    )
}
function New-DeviceAndAppManagementAssignmentTargetObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $allDevicesAssignmentTarget,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $groupAssignmentTarget,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $allLicensedUsersAssignmentTarget,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $exclusionGroupAssignmentTarget
    )
}
function New-DeviceAppManagement
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $microsoftStoreForBusinessLastSuccessfulSyncDateTime,

        [Parameter()]
        [System.Object[]]
        $targetedManagedAppConfigurations,

        [Parameter()]
        [System.Object[]]
        $managedEBooks,

        [Parameter()]
        [System.Object[]]
        $mobileApps,

        [Parameter()]
        [System.String]
        $microsoftStoreForBusinessLanguage,

        [Parameter()]
        [System.Object[]]
        $managedAppPolicies,

        [Parameter()]
        [System.Object[]]
        $managedAppStatuses,

        [Parameter()]
        [System.Boolean]
        $isEnabledForMicrosoftStoreForBusiness,

        [Parameter()]
        [System.Object[]]
        $managedAppRegistrations,

        [Parameter()]
        [System.Object[]]
        $defaultManagedAppProtections,

        [Parameter()]
        [System.DateTimeOffset]
        $microsoftStoreForBusinessLastCompletedApplicationSyncTime,

        [Parameter()]
        [System.Object[]]
        $iosManagedAppProtections,

        [Parameter()]
        [System.Object[]]
        $mobileAppCategories,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $vppTokens,

        [Parameter()]
        [System.Object[]]
        $windowsInformationProtectionPolicies,

        [Parameter()]
        [System.Object[]]
        $androidManagedAppProtections,

        [Parameter()]
        [System.Object[]]
        $mdmWindowsInformationProtectionPolicies,

        [Parameter()]
        [System.Object[]]
        $mobileAppConfigurations
    )
}
function New-DeviceAppManagement_AndroidManagedAppProtections
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $minimumRequiredAppVersion,

        [Parameter()]
        [System.Int32]
        $minimumPinLength,

        [Parameter()]
        [System.String]
        $allowedInboundDataTransferSources,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Boolean]
        $disableAppEncryptionIfDeviceEncryptionIsEnabled,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $minimumRequiredOsVersion,

        [Parameter()]
        [System.Boolean]
        $pinRequired,

        [Parameter()]
        [System.String]
        $allowedOutboundDataTransferDestinations,

        [Parameter()]
        [System.Int32]
        $maximumPinRetries,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $minimumWarningOsVersion,

        [Parameter()]
        [System.Boolean]
        $fingerprintBlocked,

        [Parameter()]
        [System.Boolean]
        $organizationalCredentialsRequired,

        [Parameter()]
        [System.Boolean]
        $managedBrowserToOpenLinksRequired,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeWipeIsEnforced,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.Boolean]
        $screenCaptureBlocked,

        [Parameter()]
        [System.Boolean]
        $encryptAppData,

        [Parameter()]
        [System.String]
        $minimumRequiredPatchVersion,

        [Parameter()]
        [System.Boolean]
        $simplePinBlocked,

        [Parameter()]
        [System.String]
        $allowedOutboundClipboardSharingLevel,

        [Parameter()]
        [System.Boolean]
        $printBlocked,

        [Parameter()]
        [System.String]
        $minimumWarningPatchVersion,

        [Parameter()]
        [System.TimeSpan]
        $periodBeforePinReset,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Boolean]
        $deviceComplianceRequired,

        [Parameter()]
        [System.Boolean]
        $dataBackupBlocked,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.Boolean]
        $contactSyncBlocked,

        [Parameter()]
        [System.Boolean]
        $disableAppPinIfDevicePinIsSet,

        [Parameter()]
        [System.String[]]
        $allowedDataStorageLocations,

        [Parameter()]
        [System.String]
        $minimumWarningAppVersion,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $pinCharacterSet,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeAccessCheck,

        [Parameter()]
        [System.Boolean]
        $saveAsBlocked,

        [Parameter()]
        [System.TimeSpan]
        $periodOnlineBeforeAccessCheck
    )
}
function New-DeviceAppManagement_AndroidManagedAppProtections_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-DeviceAppManagement_AndroidManagedAppProtections_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $androidManagedAppProtectionODataType,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-DeviceAppManagement_AndroidManagedAppProtections_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId
    )
}
function New-DeviceAppManagement_DefaultManagedAppProtections
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $minimumRequiredAppVersion,

        [Parameter()]
        [System.String]
        $allowedInboundDataTransferSources,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Boolean]
        $disableAppEncryptionIfDeviceEncryptionIsEnabled,

        [Parameter()]
        [System.String]
        $minimumRequiredSdkVersion,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $minimumRequiredOsVersion,

        [Parameter()]
        [System.Boolean]
        $pinRequired,

        [Parameter()]
        [System.Object[]]
        $customSettings,

        [Parameter()]
        [System.String]
        $allowedOutboundDataTransferDestinations,

        [Parameter()]
        [System.Int32]
        $maximumPinRetries,

        [Parameter()]
        [System.String]
        $appDataEncryptionType,

        [Parameter()]
        [System.String]
        $minimumWarningOsVersion,

        [Parameter()]
        [System.Boolean]
        $fingerprintBlocked,

        [Parameter()]
        [System.Boolean]
        $managedBrowserToOpenLinksRequired,

        [Parameter()]
        [System.Boolean]
        $organizationalCredentialsRequired,

        [Parameter()]
        [System.Boolean]
        $faceIdBlocked,

        [Parameter()]
        [System.Boolean]
        $screenCaptureBlocked,

        [Parameter()]
        [System.Boolean]
        $encryptAppData,

        [Parameter()]
        [System.String]
        $minimumRequiredPatchVersion,

        [Parameter()]
        [System.Boolean]
        $simplePinBlocked,

        [Parameter()]
        [System.String]
        $allowedOutboundClipboardSharingLevel,

        [Parameter()]
        [System.Boolean]
        $printBlocked,

        [Parameter()]
        [System.String]
        $minimumWarningPatchVersion,

        [Parameter()]
        [System.TimeSpan]
        $periodBeforePinReset,

        [Parameter()]
        [System.Boolean]
        $deviceComplianceRequired,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeWipeIsEnforced,

        [Parameter()]
        [System.Boolean]
        $dataBackupBlocked,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.Boolean]
        $contactSyncBlocked,

        [Parameter()]
        [System.Boolean]
        $disableAppPinIfDevicePinIsSet,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String[]]
        $allowedDataStorageLocations,

        [Parameter()]
        [System.Int32]
        $minimumPinLength,

        [Parameter()]
        [System.String]
        $minimumWarningAppVersion,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.String]
        $pinCharacterSet,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeAccessCheck,

        [Parameter()]
        [System.Boolean]
        $saveAsBlocked,

        [Parameter()]
        [System.TimeSpan]
        $periodOnlineBeforeAccessCheck
    )
}
function New-DeviceAppManagement_DefaultManagedAppProtections_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-DeviceAppManagement_DefaultManagedAppProtections_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp
    )
}
function New-DeviceAppManagement_IosManagedAppProtections
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $minimumRequiredAppVersion,

        [Parameter()]
        [System.String]
        $allowedInboundDataTransferSources,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.String]
        $minimumRequiredSdkVersion,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $minimumRequiredOsVersion,

        [Parameter()]
        [System.Boolean]
        $pinRequired,

        [Parameter()]
        [System.String]
        $allowedOutboundDataTransferDestinations,

        [Parameter()]
        [System.Int32]
        $maximumPinRetries,

        [Parameter()]
        [System.String]
        $appDataEncryptionType,

        [Parameter()]
        [System.String]
        $minimumWarningOsVersion,

        [Parameter()]
        [System.Boolean]
        $fingerprintBlocked,

        [Parameter()]
        [System.Boolean]
        $managedBrowserToOpenLinksRequired,

        [Parameter()]
        [System.Boolean]
        $organizationalCredentialsRequired,

        [Parameter()]
        [System.Boolean]
        $faceIdBlocked,

        [Parameter()]
        [System.Boolean]
        $simplePinBlocked,

        [Parameter()]
        [System.String]
        $allowedOutboundClipboardSharingLevel,

        [Parameter()]
        [System.Boolean]
        $printBlocked,

        [Parameter()]
        [System.TimeSpan]
        $periodBeforePinReset,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Boolean]
        $deviceComplianceRequired,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeWipeIsEnforced,

        [Parameter()]
        [System.Boolean]
        $dataBackupBlocked,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.Boolean]
        $contactSyncBlocked,

        [Parameter()]
        [System.Boolean]
        $disableAppPinIfDevicePinIsSet,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String[]]
        $allowedDataStorageLocations,

        [Parameter()]
        [System.Int32]
        $minimumPinLength,

        [Parameter()]
        [System.String]
        $minimumWarningAppVersion,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.String]
        $pinCharacterSet,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeAccessCheck,

        [Parameter()]
        [System.Boolean]
        $saveAsBlocked,

        [Parameter()]
        [System.TimeSpan]
        $periodOnlineBeforeAccessCheck
    )
}
function New-DeviceAppManagement_IosManagedAppProtections_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-DeviceAppManagement_IosManagedAppProtections_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionODataType,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-DeviceAppManagement_IosManagedAppProtections_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp
    )
}
function New-DeviceAppManagement_ManagedAppPolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $enterpriseProxyServers,

        [Parameter()]
        [System.Boolean]
        $fingerprintBlocked,

        [Parameter()]
        [System.Object[]]
        $enterpriseProtectedDomainNames,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosManagedAppProtection,

        [Parameter()]
        [System.Boolean]
        $revokeOnMdmHandoffDisabled,

        [Parameter()]
        [System.String]
        $enforcementLevel,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $smbAutoEncryptedFileExtensions,

        [Parameter()]
        [System.Boolean]
        $dataBackupBlocked,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.TimeSpan]
        $periodOnlineBeforeAccessCheck,

        [Parameter()]
        [System.Object[]]
        $customSettings,

        [Parameter()]
        [System.Int32]
        $pinExpirationDays,

        [Parameter()]
        [System.Boolean]
        $contactSyncBlocked,

        [Parameter()]
        [System.Boolean]
        $windowsHelloForBusinessBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $defaultManagedAppProtection,

        [Parameter()]
        [System.String]
        $minimumWarningPatchVersion,

        [Parameter()]
        [System.Int32]
        $numberOfPastPinsRemembered,

        [Parameter()]
        [System.String]
        $enterpriseDomain,

        [Parameter()]
        [System.Boolean]
        $printBlocked,

        [Parameter()]
        [System.Boolean]
        $pinRequired,

        [Parameter()]
        [System.String]
        $appDataEncryptionType,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.String[]]
        $allowedDataStorageLocations,

        [Parameter()]
        [System.Int32]
        $passwordMaximumAttemptCount,

        [Parameter()]
        [System.Boolean]
        $faceIdBlocked,

        [Parameter()]
        [System.Object[]]
        $enterpriseIPRanges,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $mdmWindowsInformationProtectionPolicy,

        [Parameter()]
        [System.Object[]]
        $exemptAppLockerFiles,

        [Parameter()]
        [System.Boolean]
        $enterpriseIPRangesAreAuthoritative,

        [Parameter()]
        [System.Boolean]
        $deviceComplianceRequired,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeAccessCheck,

        [Parameter()]
        [System.String]
        $minimumRequiredOsVersion,

        [Parameter()]
        [System.Boolean]
        $revokeOnUnenrollDisabled,

        [Parameter()]
        [System.Boolean]
        $disableAppEncryptionIfDeviceEncryptionIsEnabled,

        [Parameter()]
        [System.String]
        $minimumWarningAppVersion,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxiedDomains,

        [Parameter()]
        [System.Int32]
        $maximumPinRetries,

        [Parameter()]
        [System.Object[]]
        $enterpriseInternalProxyServers,

        [Parameter()]
        [System.Boolean]
        $encryptAppData,

        [Parameter()]
        [System.Boolean]
        $enterpriseProxyServersAreAuthoritative,

        [Parameter()]
        [System.String]
        $pinSpecialCharacters,

        [Parameter()]
        [System.String]
        $allowedOutboundDataTransferDestinations,

        [Parameter()]
        [System.Boolean]
        $azureRightsManagementServicesAllowed,

        [Parameter()]
        [System.Object[]]
        $protectedApps,

        [Parameter()]
        [System.Boolean]
        $organizationalCredentialsRequired,

        [Parameter()]
        [System.Object[]]
        $protectedAppLockerFiles,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $pinLowercaseLetters,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Int32]
        $minimumPinLength,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidManagedAppProtection,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.String]
        $minimumRequiredSdkVersion,

        [Parameter()]
        [System.Boolean]
        $protectionUnderLockConfigRequired,

        [Parameter()]
        [System.Boolean]
        $simplePinBlocked,

        [Parameter()]
        [System.Boolean]
        $iconsVisible,

        [Parameter()]
        [System.String]
        $minimumRequiredAppVersion,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $targetedManagedAppConfiguration,

        [Parameter()]
        [System.Boolean]
        $screenCaptureBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsInformationProtectionPolicy,

        [Parameter()]
        [System.Object[]]
        $enterpriseNetworkDomainNames,

        [Parameter()]
        [System.Object[]]
        $exemptApps,

        [Parameter()]
        [System.String]
        $minimumWarningOsVersion,

        [Parameter()]
        [System.Int32]
        $minutesOfInactivityBeforeDeviceLock,

        [Parameter()]
        [System.Guid]
        $rightsManagementServicesTemplateId,

        [Parameter()]
        [System.Boolean]
        $indexingEncryptedStoresOrItemsBlocked,

        [Parameter()]
        [System.String]
        $mdmEnrollmentUrl,

        [Parameter()]
        [System.Object[]]
        $neutralDomainResources,

        [Parameter()]
        [System.String]
        $pinUppercaseLetters,

        [Parameter()]
        [System.Boolean]
        $saveAsBlocked,

        [Parameter()]
        [System.TimeSpan]
        $periodBeforePinReset,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $allowedInboundDataTransferSources,

        [Parameter()]
        [System.Int32]
        $daysWithoutContactBeforeUnenroll,

        [Parameter()]
        [System.Object]
        $dataRecoveryCertificate,

        [Parameter()]
        [System.Boolean]
        $disableAppPinIfDevicePinIsSet,

        [Parameter()]
        [System.String]
        $minimumRequiredPatchVersion,

        [Parameter()]
        [System.Int32]
        $pinMinimumLength,

        [Parameter()]
        [System.String]
        $allowedOutboundClipboardSharingLevel,

        [Parameter()]
        [System.Boolean]
        $managedBrowserToOpenLinksRequired,

        [Parameter()]
        [System.String]
        $pinCharacterSet,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeWipeIsEnforced
    )
}
function New-DeviceAppManagement_ManagedAppPolicies_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function New-DeviceAppManagement_ManagedAppPolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-DeviceAppManagement_ManagedAppPolicies_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function New-DeviceAppManagement_ManagedAppPolicies_ExemptAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function New-DeviceAppManagement_ManagedAppPolicies_ProtectedAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function New-DeviceAppManagement_ManagedAppRegistrations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $deviceTag,

        [Parameter()]
        [System.String]
        $managementSdkVersion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosManagedAppRegistration,

        [Parameter()]
        [System.Object[]]
        $intendedPolicies,

        [Parameter()]
        [System.String]
        $applicationVersion,

        [Parameter()]
        [System.Object[]]
        $appliedPolicies,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $platformVersion,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $deviceType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $operations,

        [Parameter()]
        [System.String[]]
        $flaggedReasons,

        [Parameter()]
        [System.Object]
        $appIdentifier,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidManagedAppRegistration
    )
}
function New-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $enterpriseProxyServers,

        [Parameter()]
        [System.Boolean]
        $fingerprintBlocked,

        [Parameter()]
        [System.Object[]]
        $enterpriseProtectedDomainNames,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosManagedAppProtection,

        [Parameter()]
        [System.Boolean]
        $revokeOnMdmHandoffDisabled,

        [Parameter()]
        [System.String]
        $enforcementLevel,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $smbAutoEncryptedFileExtensions,

        [Parameter()]
        [System.Boolean]
        $dataBackupBlocked,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.TimeSpan]
        $periodOnlineBeforeAccessCheck,

        [Parameter()]
        [System.Object[]]
        $customSettings,

        [Parameter()]
        [System.Int32]
        $pinExpirationDays,

        [Parameter()]
        [System.Boolean]
        $contactSyncBlocked,

        [Parameter()]
        [System.Boolean]
        $windowsHelloForBusinessBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $defaultManagedAppProtection,

        [Parameter()]
        [System.String]
        $minimumWarningPatchVersion,

        [Parameter()]
        [System.Int32]
        $numberOfPastPinsRemembered,

        [Parameter()]
        [System.String]
        $enterpriseDomain,

        [Parameter()]
        [System.Boolean]
        $printBlocked,

        [Parameter()]
        [System.Boolean]
        $pinRequired,

        [Parameter()]
        [System.String]
        $appDataEncryptionType,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.String[]]
        $allowedDataStorageLocations,

        [Parameter()]
        [System.Int32]
        $passwordMaximumAttemptCount,

        [Parameter()]
        [System.Boolean]
        $faceIdBlocked,

        [Parameter()]
        [System.Object[]]
        $enterpriseIPRanges,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $mdmWindowsInformationProtectionPolicy,

        [Parameter()]
        [System.Object[]]
        $exemptAppLockerFiles,

        [Parameter()]
        [System.Boolean]
        $enterpriseIPRangesAreAuthoritative,

        [Parameter()]
        [System.Boolean]
        $deviceComplianceRequired,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeAccessCheck,

        [Parameter()]
        [System.String]
        $minimumRequiredOsVersion,

        [Parameter()]
        [System.Boolean]
        $revokeOnUnenrollDisabled,

        [Parameter()]
        [System.Boolean]
        $disableAppEncryptionIfDeviceEncryptionIsEnabled,

        [Parameter()]
        [System.String]
        $minimumWarningAppVersion,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxiedDomains,

        [Parameter()]
        [System.Int32]
        $maximumPinRetries,

        [Parameter()]
        [System.Object[]]
        $enterpriseInternalProxyServers,

        [Parameter()]
        [System.Boolean]
        $encryptAppData,

        [Parameter()]
        [System.Boolean]
        $enterpriseProxyServersAreAuthoritative,

        [Parameter()]
        [System.String]
        $pinSpecialCharacters,

        [Parameter()]
        [System.String]
        $allowedOutboundDataTransferDestinations,

        [Parameter()]
        [System.Boolean]
        $azureRightsManagementServicesAllowed,

        [Parameter()]
        [System.Object[]]
        $protectedApps,

        [Parameter()]
        [System.Boolean]
        $organizationalCredentialsRequired,

        [Parameter()]
        [System.Object[]]
        $protectedAppLockerFiles,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $pinLowercaseLetters,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Int32]
        $minimumPinLength,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidManagedAppProtection,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.String]
        $minimumRequiredSdkVersion,

        [Parameter()]
        [System.Boolean]
        $protectionUnderLockConfigRequired,

        [Parameter()]
        [System.Boolean]
        $simplePinBlocked,

        [Parameter()]
        [System.Boolean]
        $iconsVisible,

        [Parameter()]
        [System.String]
        $minimumRequiredAppVersion,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $targetedManagedAppConfiguration,

        [Parameter()]
        [System.Boolean]
        $screenCaptureBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsInformationProtectionPolicy,

        [Parameter()]
        [System.Object[]]
        $enterpriseNetworkDomainNames,

        [Parameter()]
        [System.Object[]]
        $exemptApps,

        [Parameter()]
        [System.String]
        $minimumWarningOsVersion,

        [Parameter()]
        [System.Int32]
        $minutesOfInactivityBeforeDeviceLock,

        [Parameter()]
        [System.Guid]
        $rightsManagementServicesTemplateId,

        [Parameter()]
        [System.Boolean]
        $indexingEncryptedStoresOrItemsBlocked,

        [Parameter()]
        [System.String]
        $mdmEnrollmentUrl,

        [Parameter()]
        [System.Object[]]
        $neutralDomainResources,

        [Parameter()]
        [System.String]
        $pinUppercaseLetters,

        [Parameter()]
        [System.Boolean]
        $saveAsBlocked,

        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.TimeSpan]
        $periodBeforePinReset,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $allowedInboundDataTransferSources,

        [Parameter()]
        [System.Int32]
        $daysWithoutContactBeforeUnenroll,

        [Parameter()]
        [System.Object]
        $dataRecoveryCertificate,

        [Parameter()]
        [System.Boolean]
        $disableAppPinIfDevicePinIsSet,

        [Parameter()]
        [System.String]
        $minimumRequiredPatchVersion,

        [Parameter()]
        [System.Int32]
        $pinMinimumLength,

        [Parameter()]
        [System.String]
        $allowedOutboundClipboardSharingLevel,

        [Parameter()]
        [System.Boolean]
        $managedBrowserToOpenLinksRequired,

        [Parameter()]
        [System.String]
        $pinCharacterSet,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeWipeIsEnforced
    )
}
function New-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $appliedPolicyODataType
    )
}
function New-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $appliedPolicyODataType
    )
}
function New-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $appliedPolicyODataType
    )
}
function New-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies_ExemptAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $appliedPolicyODataType
    )
}
function New-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies_ProtectedAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $appliedPolicyODataType
    )
}
function New-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $enterpriseProxyServers,

        [Parameter()]
        [System.Boolean]
        $fingerprintBlocked,

        [Parameter()]
        [System.Object[]]
        $enterpriseProtectedDomainNames,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosManagedAppProtection,

        [Parameter()]
        [System.Boolean]
        $revokeOnMdmHandoffDisabled,

        [Parameter()]
        [System.String]
        $enforcementLevel,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $smbAutoEncryptedFileExtensions,

        [Parameter()]
        [System.Boolean]
        $dataBackupBlocked,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.TimeSpan]
        $periodOnlineBeforeAccessCheck,

        [Parameter()]
        [System.Object[]]
        $customSettings,

        [Parameter()]
        [System.Int32]
        $pinExpirationDays,

        [Parameter()]
        [System.Boolean]
        $contactSyncBlocked,

        [Parameter()]
        [System.Boolean]
        $windowsHelloForBusinessBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $defaultManagedAppProtection,

        [Parameter()]
        [System.String]
        $minimumWarningPatchVersion,

        [Parameter()]
        [System.Int32]
        $numberOfPastPinsRemembered,

        [Parameter()]
        [System.String]
        $enterpriseDomain,

        [Parameter()]
        [System.Boolean]
        $printBlocked,

        [Parameter()]
        [System.Boolean]
        $pinRequired,

        [Parameter()]
        [System.String]
        $appDataEncryptionType,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.String[]]
        $allowedDataStorageLocations,

        [Parameter()]
        [System.Int32]
        $passwordMaximumAttemptCount,

        [Parameter()]
        [System.Boolean]
        $faceIdBlocked,

        [Parameter()]
        [System.Object[]]
        $enterpriseIPRanges,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $mdmWindowsInformationProtectionPolicy,

        [Parameter()]
        [System.Object[]]
        $exemptAppLockerFiles,

        [Parameter()]
        [System.Boolean]
        $enterpriseIPRangesAreAuthoritative,

        [Parameter()]
        [System.Boolean]
        $deviceComplianceRequired,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeAccessCheck,

        [Parameter()]
        [System.String]
        $minimumRequiredOsVersion,

        [Parameter()]
        [System.Boolean]
        $revokeOnUnenrollDisabled,

        [Parameter()]
        [System.Boolean]
        $disableAppEncryptionIfDeviceEncryptionIsEnabled,

        [Parameter()]
        [System.String]
        $minimumWarningAppVersion,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxiedDomains,

        [Parameter()]
        [System.Int32]
        $maximumPinRetries,

        [Parameter()]
        [System.Object[]]
        $enterpriseInternalProxyServers,

        [Parameter()]
        [System.Boolean]
        $encryptAppData,

        [Parameter()]
        [System.Boolean]
        $enterpriseProxyServersAreAuthoritative,

        [Parameter()]
        [System.String]
        $pinSpecialCharacters,

        [Parameter()]
        [System.String]
        $allowedOutboundDataTransferDestinations,

        [Parameter()]
        [System.Boolean]
        $azureRightsManagementServicesAllowed,

        [Parameter()]
        [System.Object[]]
        $protectedApps,

        [Parameter()]
        [System.Boolean]
        $organizationalCredentialsRequired,

        [Parameter()]
        [System.Object[]]
        $protectedAppLockerFiles,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $pinLowercaseLetters,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Int32]
        $minimumPinLength,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidManagedAppProtection,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.String]
        $minimumRequiredSdkVersion,

        [Parameter()]
        [System.Boolean]
        $protectionUnderLockConfigRequired,

        [Parameter()]
        [System.Boolean]
        $simplePinBlocked,

        [Parameter()]
        [System.Boolean]
        $iconsVisible,

        [Parameter()]
        [System.String]
        $minimumRequiredAppVersion,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $targetedManagedAppConfiguration,

        [Parameter()]
        [System.Boolean]
        $screenCaptureBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsInformationProtectionPolicy,

        [Parameter()]
        [System.Object[]]
        $enterpriseNetworkDomainNames,

        [Parameter()]
        [System.Object[]]
        $exemptApps,

        [Parameter()]
        [System.String]
        $minimumWarningOsVersion,

        [Parameter()]
        [System.Int32]
        $minutesOfInactivityBeforeDeviceLock,

        [Parameter()]
        [System.Guid]
        $rightsManagementServicesTemplateId,

        [Parameter()]
        [System.Boolean]
        $indexingEncryptedStoresOrItemsBlocked,

        [Parameter()]
        [System.String]
        $mdmEnrollmentUrl,

        [Parameter()]
        [System.Object[]]
        $neutralDomainResources,

        [Parameter()]
        [System.String]
        $pinUppercaseLetters,

        [Parameter()]
        [System.Boolean]
        $saveAsBlocked,

        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.TimeSpan]
        $periodBeforePinReset,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $allowedInboundDataTransferSources,

        [Parameter()]
        [System.Int32]
        $daysWithoutContactBeforeUnenroll,

        [Parameter()]
        [System.Object]
        $dataRecoveryCertificate,

        [Parameter()]
        [System.Boolean]
        $disableAppPinIfDevicePinIsSet,

        [Parameter()]
        [System.String]
        $minimumRequiredPatchVersion,

        [Parameter()]
        [System.Int32]
        $pinMinimumLength,

        [Parameter()]
        [System.String]
        $allowedOutboundClipboardSharingLevel,

        [Parameter()]
        [System.Boolean]
        $managedBrowserToOpenLinksRequired,

        [Parameter()]
        [System.String]
        $pinCharacterSet,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeWipeIsEnforced
    )
}
function New-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $intendedPolicyODataType
    )
}
function New-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $intendedPolicyODataType
    )
}
function New-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $intendedPolicyODataType
    )
}
function New-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies_ExemptAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $intendedPolicyODataType
    )
}
function New-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies_ProtectedAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $intendedPolicyODataType
    )
}
function New-DeviceAppManagement_ManagedAppRegistrations_Operations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $state
    )
}
function New-DeviceAppManagement_ManagedAppStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $content,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedAppStatusRaw
    )
}
function New-DeviceAppManagement_ManagedEBooks
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.DateTimeOffset]
        $publishedDateTime,

        [Parameter()]
        [System.Int32]
        $totalLicenseCount,

        [Parameter()]
        [System.Guid]
        $vppTokenId,

        [Parameter()]
        [System.String]
        $seller,

        [Parameter()]
        [System.String]
        $vppOrganizationName,

        [Parameter()]
        [System.Object[]]
        $deviceStates,

        [Parameter()]
        [System.Object]
        $largeCover,

        [Parameter()]
        [System.String[]]
        $genres,

        [Parameter()]
        [System.Object]
        $installSummary,

        [Parameter()]
        [System.Int32]
        $usedLicenseCount,

        [Parameter()]
        [System.String]
        $privacyInformationUrl,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $appleId,

        [Parameter()]
        [System.Object[]]
        $userStateSummary,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosVppEBook,

        [Parameter()]
        [System.String]
        $language,

        [Parameter()]
        [System.String]
        $publisher,

        [Parameter()]
        [System.String]
        $informationUrl
    )
}
function New-DeviceAppManagement_ManagedEBooks_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $installIntent,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosVppEBookAssignment,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedEBookAssignment,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function New-DeviceAppManagement_ManagedEBooks_DeviceStates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $errorCode,

        [Parameter()]
        [System.String]
        $installState,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $osDescription,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.String]
        $deviceId,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function New-DeviceAppManagement_ManagedEBooks_InstallSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notInstalledDeviceCount,

        [Parameter()]
        [System.Int32]
        $failedUserCount,

        [Parameter()]
        [System.Int32]
        $installedUserCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $failedDeviceCount,

        [Parameter()]
        [System.Int32]
        $installedDeviceCount,

        [Parameter()]
        [System.Int32]
        $notInstalledUserCount,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function New-DeviceAppManagement_ManagedEBooks_UserStateSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notInstalledDeviceCount,

        [Parameter()]
        [System.Int32]
        $failedDeviceCount,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $deviceStates,

        [Parameter()]
        [System.Int32]
        $installedDeviceCount,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function New-DeviceAppManagement_ManagedEBooks_UserStateSummary_DeviceStates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $errorCode,

        [Parameter()]
        [System.String]
        $userInstallStateSummaryId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $managedEBookId,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $osDescription,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.String]
        $deviceId,

        [Parameter()]
        [System.String]
        $installState
    )
}
function New-DeviceAppManagement_MdmWindowsInformationProtectionPolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxiedDomains,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $enterpriseProxyServersAreAuthoritative,

        [Parameter()]
        [System.Object[]]
        $smbAutoEncryptedFileExtensions,

        [Parameter()]
        [System.Boolean]
        $protectionUnderLockConfigRequired,

        [Parameter()]
        [System.String]
        $enforcementLevel,

        [Parameter()]
        [System.String]
        $enterpriseDomain,

        [Parameter()]
        [System.Object[]]
        $enterpriseInternalProxyServers,

        [Parameter()]
        [System.Boolean]
        $indexingEncryptedStoresOrItemsBlocked,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Boolean]
        $revokeOnUnenrollDisabled,

        [Parameter()]
        [System.Guid]
        $rightsManagementServicesTemplateId,

        [Parameter()]
        [System.Object[]]
        $exemptAppLockerFiles,

        [Parameter()]
        [System.Object]
        $dataRecoveryCertificate,

        [Parameter()]
        [System.Object[]]
        $exemptApps,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Object[]]
        $neutralDomainResources,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxyServers,

        [Parameter()]
        [System.Boolean]
        $azureRightsManagementServicesAllowed,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Boolean]
        $enterpriseIPRangesAreAuthoritative,

        [Parameter()]
        [System.Boolean]
        $iconsVisible,

        [Parameter()]
        [System.Object[]]
        $enterpriseProtectedDomainNames,

        [Parameter()]
        [System.Object[]]
        $protectedAppLockerFiles,

        [Parameter()]
        [System.Object[]]
        $protectedApps,

        [Parameter()]
        [System.Object[]]
        $enterpriseIPRanges,

        [Parameter()]
        [System.Object[]]
        $enterpriseNetworkDomainNames
    )
}
function New-DeviceAppManagement_MdmWindowsInformationProtectionPolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-DeviceAppManagement_MdmWindowsInformationProtectionPolicies_ExemptAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $fileHash
    )
}
function New-DeviceAppManagement_MdmWindowsInformationProtectionPolicies_ProtectedAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $fileHash
    )
}
function New-DeviceAppManagement_MobileAppCategories
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-DeviceAppManagement_MobileAppConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Object[]]
        $deviceStatuses,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $userStatuses,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $deviceStatusSummary,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosMobileAppConfiguration,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Object[]]
        $settings,

        [Parameter()]
        [System.Byte[]]
        $encodedSettingXml,

        [Parameter()]
        [System.String[]]
        $targetedMobileApps,

        [Parameter()]
        [System.Object]
        $userStatusSummary
    )
}
function New-DeviceAppManagement_MobileAppConfigurations_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.Object]
        $target
    )
}
function New-DeviceAppManagement_MobileAppConfigurations_DeviceStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.String]
        $deviceDisplayName,

        [Parameter()]
        [System.String]
        $deviceModel
    )
}
function New-DeviceAppManagement_MobileAppConfigurations_DeviceStatusSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime,

        [Parameter()]
        [System.Int32]
        $failedCount
    )
}
function New-DeviceAppManagement_MobileAppConfigurations_UserStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $devicesCount,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.String]
        $status
    )
}
function New-DeviceAppManagement_MobileAppConfigurations_UserStatusSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime,

        [Parameter()]
        [System.Int32]
        $failedCount
    )
}
function New-DeviceAppManagement_MobileApps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $useManagedBrowser,

        [Parameter()]
        [System.String]
        $versionNumber,

        [Parameter()]
        [System.String]
        $identityPublisherHash,

        [Parameter()]
        [System.String]
        $identityVersion,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosStoreApp,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsUniversalAppX,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosVppApp,

        [Parameter()]
        [System.Int32]
        $totalLicenseCount,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedAndroidStoreApp,

        [Parameter()]
        [System.String]
        $versionName,

        [Parameter()]
        [System.String]
        $appUrl,

        [Parameter()]
        [System.Boolean]
        $isBundle,

        [Parameter()]
        [System.DateTimeOffset]
        $expirationDateTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSOfficeSuiteApp,

        [Parameter()]
        [System.Int64]
        $size,

        [Parameter()]
        [System.String]
        $productKey,

        [Parameter()]
        [System.Object]
        $minimumSupportedOperatingSystem,

        [Parameter()]
        [System.Object]
        $largeIcon,

        [Parameter()]
        [System.Int32]
        $usedLicenseCount,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedAndroidLobApp,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $isFeatured,

        [Parameter()]
        [System.String]
        $fileName,

        [Parameter()]
        [System.String]
        $vppTokenAppleId,

        [Parameter()]
        [System.String]
        $owner,

        [Parameter()]
        [System.String]
        $committedContentVersion,

        [Parameter()]
        [System.Object[]]
        $categories,

        [Parameter()]
        [System.String]
        $informationUrl,

        [Parameter()]
        [System.String]
        $applicableArchitectures,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidLobApp,

        [Parameter()]
        [System.String]
        $notes,

        [Parameter()]
        [System.Boolean]
        $ignoreVersionDetection,

        [Parameter()]
        [System.String]
        $versionCode,

        [Parameter()]
        [System.String]
        $bundleId,

        [Parameter()]
        [System.String]
        $packageId,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $commandLine,

        [Parameter()]
        [System.String]
        $applicableDeviceTypes,

        [Parameter()]
        [System.String]
        $productVersion,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Object[]]
        $contentVersions,

        [Parameter()]
        [System.DateTimeOffset]
        $releaseDateTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidStoreApp,

        [Parameter()]
        [System.Object]
        $licensingType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $microsoftStoreForBusinessApp,

        [Parameter()]
        [System.String]
        $publishingState,

        [Parameter()]
        [System.String]
        $packageIdentityName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedIOSLobApp,

        [Parameter()]
        [System.String]
        $identityResourceIdentifier,

        [Parameter()]
        [System.String]
        $appStoreUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosLobApp,

        [Parameter()]
        [System.String]
        $buildNumber,

        [Parameter()]
        [System.Object]
        $applicableDeviceType,

        [Parameter()]
        [System.String]
        $privacyInformationUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedIOSStoreApp,

        [Parameter()]
        [System.String]
        $licenseType,

        [Parameter()]
        [System.String]
        $appAvailability,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $publisher,

        [Parameter()]
        [System.String]
        $productCode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $webApp,

        [Parameter()]
        [System.String]
        $vppTokenOrganizationName,

        [Parameter()]
        [System.String]
        $identityName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsMobileMSI,

        [Parameter()]
        [System.String]
        $developer,

        [Parameter()]
        [System.String]
        $vppTokenAccountType
    )
}
function New-DeviceAppManagement_MobileApps_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String]
        $intent,

        [Parameter()]
        [System.Object]
        $settings
    )
}
function New-DeviceAppManagement_MobileApps_CategoriesReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String]
        $mobileAppCategoryReferenceUrl
    )
}
function New-DeviceAppManagement_MobileApps_ContentVersions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String]
        $mobileAppODataType,

        [Parameter()]
        [System.Object[]]
        $files,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-DeviceAppManagement_MobileApps_ContentVersions_Files
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppODataType,

        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Boolean]
        $isCommitted,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $azureStorageUriExpirationDateTime,

        [Parameter()]
        [System.Int64]
        $sizeEncrypted,

        [Parameter()]
        [System.Int64]
        $size,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.Byte[]]
        $manifest,

        [Parameter()]
        [System.String]
        $mobileAppContentId,

        [Parameter()]
        [System.String]
        $uploadState,

        [Parameter()]
        [System.String]
        $azureStorageUri
    )
}
function New-DeviceAppManagement_TargetedManagedAppConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $customSettings,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.Object[]]
        $assignments
    )
}
function New-DeviceAppManagement_TargetedManagedAppConfigurations_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-DeviceAppManagement_TargetedManagedAppConfigurations_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function New-DeviceAppManagement_TargetedManagedAppConfigurations_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function New-DeviceAppManagement_VppTokens
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $expirationDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $organizationName,

        [Parameter()]
        [System.String]
        $appleId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.Boolean]
        $automaticallyUpdateApps,

        [Parameter()]
        [System.String]
        $token,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.String]
        $lastSyncStatus,

        [Parameter()]
        [System.String]
        $countryOrRegion,

        [Parameter()]
        [System.String]
        $vppTokenAccountType
    )
}
function New-DeviceAppManagement_WindowsInformationProtectionPolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $enforcementLevel,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $pinLowercaseLetters,

        [Parameter()]
        [System.Boolean]
        $enterpriseProxyServersAreAuthoritative,

        [Parameter()]
        [System.Object[]]
        $smbAutoEncryptedFileExtensions,

        [Parameter()]
        [System.Boolean]
        $protectionUnderLockConfigRequired,

        [Parameter()]
        [System.Boolean]
        $windowsHelloForBusinessBlocked,

        [Parameter()]
        [System.String]
        $enterpriseDomain,

        [Parameter()]
        [System.Object[]]
        $enterpriseInternalProxyServers,

        [Parameter()]
        [System.Boolean]
        $indexingEncryptedStoresOrItemsBlocked,

        [Parameter()]
        [System.Int32]
        $minutesOfInactivityBeforeDeviceLock,

        [Parameter()]
        [System.Boolean]
        $enterpriseIPRangesAreAuthoritative,

        [Parameter()]
        [System.String]
        $pinUppercaseLetters,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Boolean]
        $revokeOnUnenrollDisabled,

        [Parameter()]
        [System.Guid]
        $rightsManagementServicesTemplateId,

        [Parameter()]
        [System.Int32]
        $numberOfPastPinsRemembered,

        [Parameter()]
        [System.Int32]
        $pinMinimumLength,

        [Parameter()]
        [System.Object[]]
        $exemptAppLockerFiles,

        [Parameter()]
        [System.Object]
        $dataRecoveryCertificate,

        [Parameter()]
        [System.Object[]]
        $exemptApps,

        [Parameter()]
        [System.Boolean]
        $revokeOnMdmHandoffDisabled,

        [Parameter()]
        [System.String]
        $mdmEnrollmentUrl,

        [Parameter()]
        [System.Object[]]
        $neutralDomainResources,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxyServers,

        [Parameter()]
        [System.Boolean]
        $azureRightsManagementServicesAllowed,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $pinSpecialCharacters,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Int32]
        $daysWithoutContactBeforeUnenroll,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxiedDomains,

        [Parameter()]
        [System.Boolean]
        $iconsVisible,

        [Parameter()]
        [System.Object[]]
        $enterpriseProtectedDomainNames,

        [Parameter()]
        [System.Object[]]
        $protectedAppLockerFiles,

        [Parameter()]
        [System.Int32]
        $passwordMaximumAttemptCount,

        [Parameter()]
        [System.Object[]]
        $protectedApps,

        [Parameter()]
        [System.Int32]
        $pinExpirationDays,

        [Parameter()]
        [System.Object[]]
        $enterpriseIPRanges,

        [Parameter()]
        [System.Object[]]
        $enterpriseNetworkDomainNames
    )
}
function New-DeviceAppManagement_WindowsInformationProtectionPolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-DeviceAppManagement_WindowsInformationProtectionPolicies_ExemptAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $fileHash
    )
}
function New-DeviceAppManagement_WindowsInformationProtectionPolicies_ProtectedAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $fileHash
    )
}
function New-DeviceAppManagementObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $targetedManagedAppConfigurations,

        [Parameter()]
        [System.Object[]]
        $managedEBooks,

        [Parameter()]
        [System.Object[]]
        $managedAppPolicies,

        [Parameter()]
        [System.Object[]]
        $managedAppStatuses,

        [Parameter()]
        [System.Boolean]
        $isEnabledForMicrosoftStoreForBusiness,

        [Parameter()]
        [System.String]
        $microsoftStoreForBusinessLanguage,

        [Parameter()]
        [System.Object[]]
        $managedAppRegistrations,

        [Parameter()]
        [System.Object[]]
        $defaultManagedAppProtections,

        [Parameter()]
        [System.DateTimeOffset]
        $microsoftStoreForBusinessLastCompletedApplicationSyncTime,

        [Parameter()]
        [System.Object[]]
        $iosManagedAppProtections,

        [Parameter()]
        [System.Object[]]
        $mdmWindowsInformationProtectionPolicies,

        [Parameter()]
        [System.Object[]]
        $mobileAppCategories,

        [Parameter()]
        [System.Object[]]
        $vppTokens,

        [Parameter()]
        [System.Object[]]
        $windowsInformationProtectionPolicies,

        [Parameter()]
        [System.Object[]]
        $androidManagedAppProtections,

        [Parameter()]
        [System.Object[]]
        $mobileApps,

        [Parameter()]
        [System.DateTimeOffset]
        $microsoftStoreForBusinessLastSuccessfulSyncDateTime,

        [Parameter()]
        [System.Object[]]
        $mobileAppConfigurations
    )
}
function New-DeviceCategoryObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName
    )
}
function New-DeviceComplianceActionItemObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $notificationTemplateId,

        [Parameter()]
        [System.Int32]
        $gracePeriodHours,

        [Parameter()]
        [System.String]
        $actionType,

        [Parameter()]
        [System.String[]]
        $notificationMessageCCList
    )
}
function New-DeviceComplianceDeviceOverviewObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime,

        [Parameter()]
        [System.Int32]
        $failedCount
    )
}
function New-DeviceComplianceDeviceStatusObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $deviceModel,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.String]
        $deviceDisplayName,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime
    )
}
function New-DeviceCompliancePolicyAssignmentObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $target
    )
}
function New-DeviceCompliancePolicyDeviceStateSummaryObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.Int32]
        $inGracePeriodCount,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $configManagerCount,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function New-DeviceCompliancePolicyObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $passcodeBlockSimple,

        [Parameter()]
        [System.Boolean]
        $firewallEnabled,

        [Parameter()]
        [System.String]
        $mobileOsMinimumVersion,

        [Parameter()]
        [System.Int32]
        $passcodeExpirationDays,

        [Parameter()]
        [System.Boolean]
        $bitLockerEnabled,

        [Parameter()]
        [System.String]
        $minAndroidSecurityPatchLevel,

        [Parameter()]
        [System.Object[]]
        $userStatuses,

        [Parameter()]
        [System.Object[]]
        $deviceSettingStateSummaries,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosCompliancePolicy,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Boolean]
        $firewallEnableStealthMode,

        [Parameter()]
        [System.String]
        $passwordRequiredType,

        [Parameter()]
        [System.String]
        $osMinimumVersion,

        [Parameter()]
        [System.String]
        $deviceThreatProtectionRequiredSecurityLevel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsPhone81CompliancePolicy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows81CompliancePolicy,

        [Parameter()]
        [System.Boolean]
        $securityRequireGooglePlayServices,

        [Parameter()]
        [System.String]
        $mobileOsMaximumVersion,

        [Parameter()]
        [System.Boolean]
        $securityDisableUsbDebugging,

        [Parameter()]
        [System.Boolean]
        $storageRequireEncryption,

        [Parameter()]
        [System.Int32]
        $passcodeMinimumLength,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10CompliancePolicy,

        [Parameter()]
        [System.Object]
        $userStatusOverview,

        [Parameter()]
        [System.Boolean]
        $codeIntegrityEnabled,

        [Parameter()]
        [System.Boolean]
        $securityRequireUpToDateSecurityProviders,

        [Parameter()]
        [System.Boolean]
        $securityBlockJailbrokenDevices,

        [Parameter()]
        [System.Int32]
        $passcodeMinimumCharacterSetCount,

        [Parameter()]
        [System.Boolean]
        $securityRequireSafetyNetAttestationBasicIntegrity,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $passcodePreviousPasscodeBlockCount,

        [Parameter()]
        [System.Int32]
        $passcodeMinutesOfInactivityBeforeLock,

        [Parameter()]
        [System.Int32]
        $passwordExpirationDays,

        [Parameter()]
        [System.Boolean]
        $securityRequireCompanyPortalAppIntegrity,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Boolean]
        $securityPreventInstallAppsFromUnknownSources,

        [Parameter()]
        [System.Int32]
        $passwordPreviousPasswordBlockCount,

        [Parameter()]
        [System.Boolean]
        $firewallBlockAllIncoming,

        [Parameter()]
        [System.Boolean]
        $passwordRequiredToUnlockFromIdle,

        [Parameter()]
        [System.Boolean]
        $securityRequireSafetyNetAttestationCertifiedDevice,

        [Parameter()]
        [System.Int32]
        $passwordMinimumCharacterSetCount,

        [Parameter()]
        [System.Boolean]
        $earlyLaunchAntiMalwareDriverEnabled,

        [Parameter()]
        [System.Boolean]
        $passwordBlockSimple,

        [Parameter()]
        [System.Boolean]
        $requireHealthyDeviceReport,

        [Parameter()]
        [System.String]
        $passcodeRequiredType,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.Boolean]
        $passwordRequired,

        [Parameter()]
        [System.Boolean]
        $passwordRequireToUnlockFromIdle,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Int32]
        $passwordMinimumLength,

        [Parameter()]
        [System.Boolean]
        $systemIntegrityProtectionEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidCompliancePolicy,

        [Parameter()]
        [System.Object[]]
        $deviceStatuses,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSCompliancePolicy,

        [Parameter()]
        [System.Boolean]
        $passcodeRequired,

        [Parameter()]
        [System.Boolean]
        $deviceThreatProtectionEnabled,

        [Parameter()]
        [System.Boolean]
        $managedEmailProfileRequired,

        [Parameter()]
        [System.Boolean]
        $secureBootEnabled,

        [Parameter()]
        [System.Boolean]
        $securityRequireVerifyApps,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidWorkProfileCompliancePolicy,

        [Parameter()]
        [System.Object]
        $deviceStatusOverview,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $scheduledActionsForRule,

        [Parameter()]
        [System.String]
        $osMaximumVersion,

        [Parameter()]
        [System.Int32]
        $passwordMinutesOfInactivityBeforeLock,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10MobileCompliancePolicy
    )
}
function New-DeviceCompliancePolicySettingStateObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userEmail,

        [Parameter()]
        [System.Object[]]
        $sources,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $settingName,

        [Parameter()]
        [System.String]
        $setting,

        [Parameter()]
        [System.Int64]
        $errorCode,

        [Parameter()]
        [System.String]
        $currentValue,

        [Parameter()]
        [System.String]
        $instanceDisplayName,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.String]
        $errorDescription
    )
}
function New-DeviceCompliancePolicySettingStateSummaryObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.String]
        $settingName,

        [Parameter()]
        [System.String]
        $setting,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.Object[]]
        $deviceComplianceSettingStates,

        [Parameter()]
        [System.String]
        $platformType,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function New-DeviceCompliancePolicyStateObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $settingStates,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.String]
        $platformType,

        [Parameter()]
        [System.Int32]
        $settingCount,

        [Parameter()]
        [System.String]
        $state
    )
}
function New-DeviceComplianceScheduledActionForRuleObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $scheduledActionConfigurations,

        [Parameter()]
        [System.String]
        $ruleName
    )
}
function New-DeviceComplianceSettingStateObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userEmail,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $settingName,

        [Parameter()]
        [System.String]
        $setting,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $deviceModel,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.String]
        $deviceId,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime
    )
}
function New-DeviceComplianceUserOverviewObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime,

        [Parameter()]
        [System.Int32]
        $failedCount
    )
}
function New-DeviceComplianceUserStatusObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.Int32]
        $devicesCount,

        [Parameter()]
        [System.String]
        $status
    )
}
function New-DeviceConfigurationAssignmentObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $target
    )
}
function New-DeviceConfigurationDeviceOverviewObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime,

        [Parameter()]
        [System.Int32]
        $failedCount
    )
}
function New-DeviceConfigurationDeviceStateSummaryObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function New-DeviceConfigurationDeviceStatusObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $deviceModel,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.String]
        $deviceDisplayName,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime
    )
}
function New-DeviceConfigurationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $settingsBlockChangeLanguage,

        [Parameter()]
        [System.Boolean]
        $browserBlockSingleWordEntryOnIntranetSites,

        [Parameter()]
        [System.Boolean]
        $settingsBlockNetworkInternetPage,

        [Parameter()]
        [System.Byte[]]
        $startMenuLayoutXml,

        [Parameter()]
        [System.Boolean]
        $appStoreBlockInAppPurchases,

        [Parameter()]
        [System.Boolean]
        $edgeBlockAccessToAboutFlags,

        [Parameter()]
        [System.Boolean]
        $airDropBlocked,

        [Parameter()]
        [System.Boolean]
        $oneDriveDisableFileSync,

        [Parameter()]
        [System.Boolean]
        $edgeBlockAutofill,

        [Parameter()]
        [System.Object]
        $edgeSearchEngine,

        [Parameter()]
        [System.String]
        $appsAllowTrustedAppsSideloading,

        [Parameter()]
        [System.Object[]]
        $appsSingleAppModeList,

        [Parameter()]
        [System.Boolean]
        $workProfileRequirePassword,

        [Parameter()]
        [System.Boolean]
        $firewallIPSecExemptionsAllowDHCP,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidCustomConfiguration,

        [Parameter()]
        [System.Boolean]
        $firewallIPSecExemptionsAllowRouterDiscovery,

        [Parameter()]
        [System.String]
        $firewallPreSharedKeyEncodingMethod,

        [Parameter()]
        [System.Boolean]
        $resetProtectionModeBlocked,

        [Parameter()]
        [System.Boolean]
        $startMenuHideRecentJumpLists,

        [Parameter()]
        [System.String]
        $userAccountControlSettings,

        [Parameter()]
        [System.String]
        $appsVisibilityListType,

        [Parameter()]
        [System.Int32]
        $passwordMinutesOfInactivityBeforeScreenTimeout,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowAutoLock,

        [Parameter()]
        [System.Boolean]
        $updatesRequireAutomaticUpdates,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10TeamGeneralConfiguration,

        [Parameter()]
        [System.Boolean]
        $edgeBlockDeveloperTools,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockOnActionCenter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosUpdateConfiguration,

        [Parameter()]
        [System.Int32]
        $maintenanceWindowDurationInHours,

        [Parameter()]
        [System.Boolean]
        $miracastBlocked,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockPassbook,

        [Parameter()]
        [System.Boolean]
        $powerOffBlocked,

        [Parameter()]
        [System.Int32]
        $defenderScanMaxCpu,

        [Parameter()]
        [System.Byte[]]
        $payload,

        [Parameter()]
        [System.Boolean]
        $appStoreBlockUIAppInstallation,

        [Parameter()]
        [System.String]
        $assetTagTemplate,

        [Parameter()]
        [System.Boolean]
        $applicationGuardBlockNonEnterpriseContent,

        [Parameter()]
        [System.String]
        $defenderMonitorFileActivity,

        [Parameter()]
        [System.Boolean]
        $storageRequireMobileDeviceEncryption,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockThirdPartyNotifications,

        [Parameter()]
        [System.Boolean]
        $deviceSharingAllowed,

        [Parameter()]
        [System.Boolean]
        $passwordRequireWhenResumeFromIdleState,

        [Parameter()]
        [System.Boolean]
        $wifiBlockHotspotReporting,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockCrossProfileCopyPaste,

        [Parameter()]
        [System.Boolean]
        $bitLockerEncryptDevice,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockNotificationView,

        [Parameter()]
        [System.Int32]
        $passwordMinimumLength,

        [Parameter()]
        [System.Boolean]
        $windowsStoreEnablePrivateStoreOnly,

        [Parameter()]
        [System.Boolean]
        $spotlightBlockInternetResults,

        [Parameter()]
        [System.Boolean]
        $factoryResetBlocked,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintMopriaDiscoveryResourceIdentifier,

        [Parameter()]
        [System.Boolean]
        $settingsBlockRemoveProvisioningPackage,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPersistence,

        [Parameter()]
        [System.String]
        $welcomeScreenBackgroundImageUrl,

        [Parameter()]
        [System.Boolean]
        $appleNewsBlocked,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintOAuthClientIdentifier,

        [Parameter()]
        [System.Boolean]
        $appleWatchForceWristDetection,

        [Parameter()]
        [System.Boolean]
        $edgeBlockAddressBarDropdown,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireMonoAudio,

        [Parameter()]
        [System.Boolean]
        $wirelessDisplayBlockProjectionToThisDevice,

        [Parameter()]
        [System.Boolean]
        $miracastRequirePin,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockPredictive,

        [Parameter()]
        [System.Boolean]
        $bitLockerDisableWarningForOtherDiskEncryption,

        [Parameter()]
        [System.Boolean]
        $networkProxyApplySettingsDeviceWide,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Boolean]
        $startMenuHideFrequentlyUsedApps,

        [Parameter()]
        [System.Boolean]
        $classroomAppForceUnpromptedScreenObservation,

        [Parameter()]
        [System.String[]]
        $defenderGuardedFoldersAllowedAppPaths,

        [Parameter()]
        [System.Boolean]
        $hostPairingBlocked,

        [Parameter()]
        [System.Boolean]
        $kioskModeBlockSleepButton,

        [Parameter()]
        [System.Boolean]
        $locationServicesBlocked,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockConsumerSpecificFeatures,

        [Parameter()]
        [System.Object]
        $mediaContentRatingUnitedStates,

        [Parameter()]
        [System.TimeSpan]
        $activeHoursEnd,

        [Parameter()]
        [System.String]
        $deliveryOptimizationMode,

        [Parameter()]
        [System.Int32]
        $wiFiScanInterval,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPrintToLocalPrinters,

        [Parameter()]
        [System.String]
        $licenseType,

        [Parameter()]
        [System.Boolean]
        $allowScreenCapture,

        [Parameter()]
        [System.Boolean]
        $smartScreenEnableInShell,

        [Parameter()]
        [System.String]
        $productKey,

        [Parameter()]
        [System.Boolean]
        $defenderScanNetworkFiles,

        [Parameter()]
        [System.Boolean]
        $searchEnableRemoteQueries,

        [Parameter()]
        [System.Boolean]
        $definitionLookupBlocked,

        [Parameter()]
        [System.Object[]]
        $deviceStatuses,

        [Parameter()]
        [System.Boolean]
        $cellularBlockVoiceRoaming,

        [Parameter()]
        [System.String]
        $networkProxyAutomaticConfigurationUrl,

        [Parameter()]
        [System.Boolean]
        $settingsBlockUpdateSecurityPage,

        [Parameter()]
        [System.Object[]]
        $appsLaunchBlockList,

        [Parameter()]
        [System.Boolean]
        $passwordBlockFingerprintUnlock,

        [Parameter()]
        [System.String]
        $browserLoggingReportLocation,

        [Parameter()]
        [System.Boolean]
        $iCloudRequireEncryptedBackup,

        [Parameter()]
        [System.String]
        $defenderCloudBlockLevel,

        [Parameter()]
        [System.String]
        $passwordRequiredType,

        [Parameter()]
        [System.Boolean]
        $startMenuHideRecentlyAddedApps,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsPhone81GeneralConfiguration,

        [Parameter()]
        [System.Boolean]
        $settingsBlockTimeLanguagePage,

        [Parameter()]
        [System.Boolean]
        $searchBlockDiacritics,

        [Parameter()]
        [System.Int32]
        $passcodeMinutesOfInactivityBeforeLock,

        [Parameter()]
        [System.Boolean]
        $smartScreenBlockPromptOverrideForFiles,

        [Parameter()]
        [System.Int32]
        $settingsSleepTimeoutInMinutes,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockShortcuts,

        [Parameter()]
        [System.Int32]
        $passwordSignInFailureCountBeforeFactoryReset,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockPhotoStreamSync,

        [Parameter()]
        [System.Boolean]
        $storageRestrictAppDataToSystemVolume,

        [Parameter()]
        [System.Boolean]
        $googlePlayStoreBlocked,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordSignInFailureCountBeforeFactoryReset,

        [Parameter()]
        [System.Boolean]
        $deviceBlockEraseContentAndSettings,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockPhotoLibrary,

        [Parameter()]
        [System.Byte[]]
        $startMenuLayoutEdgeAssetsXml,

        [Parameter()]
        [System.Boolean]
        $edgeBlockJavaScript,

        [Parameter()]
        [System.String[]]
        $defenderProcessesToExclude,

        [Parameter()]
        [System.Boolean]
        $settingsBlockSettingsApp,

        [Parameter()]
        [System.Boolean]
        $microsoftAccountBlockSettingsSync,

        [Parameter()]
        [System.Boolean]
        $documentsBlockManagedDocumentsInUnmanagedApps,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockSharedPhotoStream,

        [Parameter()]
        [System.Object]
        $firewallProfilePublic,

        [Parameter()]
        [System.String]
        $edgeFirstRunUrl,

        [Parameter()]
        [System.Boolean]
        $experienceBlockErrorDialogWhenNoSIM,

        [Parameter()]
        [System.Boolean]
        $connectedDevicesServiceBlocked,

        [Parameter()]
        [System.Boolean]
        $activationLockAllowWhenSupervised,

        [Parameter()]
        [System.String]
        $miracastChannel,

        [Parameter()]
        [System.Boolean]
        $settingsBlockChangeSystemTime,

        [Parameter()]
        [System.Object]
        $mediaContentRatingJapan,

        [Parameter()]
        [System.String]
        $license,

        [Parameter()]
        [System.Boolean]
        $storageRequireDeviceEncryption,

        [Parameter()]
        [System.Boolean]
        $disablePowerPolicies,

        [Parameter()]
        [System.Boolean]
        $edgeBlockInPrivateBrowsing,

        [Parameter()]
        [System.Int32]
        $settingsDefaultVolume,

        [Parameter()]
        [System.Boolean]
        $startMenuHideChangeAccountSettings,

        [Parameter()]
        [System.String]
        $safeSearchFilter,

        [Parameter()]
        [System.String]
        $kioskAppDisplayName,

        [Parameter()]
        [System.Boolean]
        $networkProxyDisableAutoDetect,

        [Parameter()]
        [System.Boolean]
        $passwordRequired,

        [Parameter()]
        [System.Boolean]
        $settingsBlockSigninSuggestions,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowTouchscreen,

        [Parameter()]
        [System.Boolean]
        $edgeBlockLiveTileDataCollection,

        [Parameter()]
        [System.Int32]
        $enterpriseCloudPrintDiscoveryMaxLimit,

        [Parameter()]
        [System.Boolean]
        $messagesBlocked,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinNonLetterCharacters,

        [Parameter()]
        [System.Boolean]
        $certificatesBlockUntrustedTlsCertificates,

        [Parameter()]
        [System.Boolean]
        $uninstallBuiltInApps,

        [Parameter()]
        [System.String]
        $defenderExploitProtectionXmlFileName,

        [Parameter()]
        [System.String]
        $privacyAdvertisingId,

        [Parameter()]
        [System.String]
        $prereleaseFeatures,

        [Parameter()]
        [System.Int32]
        $passwordMinutesOfInactivityBeforeLock,

        [Parameter()]
        [System.Boolean]
        $searchDisableIndexingRemovableDrive,

        [Parameter()]
        [System.Boolean]
        $browserRequireHighSecurityForRestrictedSites,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidWorkProfileCustomConfiguration,

        [Parameter()]
        [System.Boolean]
        $appStoreRequirePassword,

        [Parameter()]
        [System.String]
        $developerUnlockSetting,

        [Parameter()]
        [System.Boolean]
        $passcodeBlockModification,

        [Parameter()]
        [System.Boolean]
        $appsBlockYouTube,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockCrossProfileContactsSearch,

        [Parameter()]
        [System.Object[]]
        $appsHideList,

        [Parameter()]
        [System.DateTimeOffset]
        $qualityUpdatesPauseExpiryDateTime,

        [Parameter()]
        [System.Object[]]
        $networkUsageRules,

        [Parameter()]
        [System.Boolean]
        $wiFiConnectOnlyToConfiguredNetworks,

        [Parameter()]
        [System.Boolean]
        $cellularBlockDataRoaming,

        [Parameter()]
        [System.Boolean]
        $safariRequireFraudWarning,

        [Parameter()]
        [System.Boolean]
        $disableSignInOnResume,

        [Parameter()]
        [System.Int32]
        $firewallIdleTimeoutForSecurityAssociationInSeconds,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowRingerSwitch,

        [Parameter()]
        [System.Boolean]
        $qualityUpdatesPaused,

        [Parameter()]
        [System.Boolean]
        $webBrowserBlockPopups,

        [Parameter()]
        [System.Boolean]
        $edgeBlockSendingDoNotTrackHeader,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlockAdvertising,

        [Parameter()]
        [System.Object[]]
        $homeScreenPages,

        [Parameter()]
        [System.Boolean]
        $browserBlockJavaScript,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockWelcomeExperience,

        [Parameter()]
        [System.Boolean]
        $cellularBlockVpn,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderPictures,

        [Parameter()]
        [System.Boolean]
        $safariBlockAutofill,

        [Parameter()]
        [System.DateTimeOffset]
        $featureUpdatesPauseExpiryDateTime,

        [Parameter()]
        [System.String]
        $safariCookieSettings,

        [Parameter()]
        [System.Boolean]
        $accountsBlockAddingNonMicrosoftAccountEmail,

        [Parameter()]
        [System.String]
        $windowsSpotlightConfigureOnLockScreen,

        [Parameter()]
        [System.String]
        $kioskModeAppStoreUrl,

        [Parameter()]
        [System.Int32]
        $passwordExpirationDays,

        [Parameter()]
        [System.Object]
        $mediaContentRatingIreland,

        [Parameter()]
        [System.Boolean]
        $voiceDialingBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsDefenderAdvancedThreatProtectionConfiguration,

        [Parameter()]
        [System.Boolean]
        $iBooksStoreBlocked,

        [Parameter()]
        [System.Boolean]
        $cellularBlockPersonalHotspot,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10EndpointProtectionConfiguration,

        [Parameter()]
        [System.Boolean]
        $wiFiBlockManualConfiguration,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockWindowsTips,

        [Parameter()]
        [System.String]
        $payloadFileName,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinutesOfInactivityBeforeScreenTimeout,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockCrossProfileCallerId,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowVoiceOverSettings,

        [Parameter()]
        [System.Boolean]
        $settingsBlockAppsPage,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockToastNotifications,

        [Parameter()]
        [System.Boolean]
        $disableEduPolicies,

        [Parameter()]
        [System.Boolean]
        $internetSharingBlocked,

        [Parameter()]
        [System.Boolean]
        $iBooksStoreBlockErotica,

        [Parameter()]
        [System.Int32]
        $passcodeMinimumLength,

        [Parameter()]
        [System.Boolean]
        $defenderScanRemovableDrivesDuringFullScan,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlocked,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlockModification,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinSymbolCharacters,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10SecureAssessmentConfiguration,

        [Parameter()]
        [System.Boolean]
        $wirelessDisplayRequirePinForPairing,

        [Parameter()]
        [System.Boolean]
        $edgeBlockCompatibilityList,

        [Parameter()]
        [System.Boolean]
        $gamingBlockMultiplayer,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockControlCenter,

        [Parameter()]
        [System.Boolean]
        $sharedUserAppDataAllowed,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsUpdateForBusinessConfiguration,

        [Parameter()]
        [System.Boolean]
        $webBrowserBlockAutofill,

        [Parameter()]
        [System.Boolean]
        $defenderScanScriptsLoadedInInternetExplorer,

        [Parameter()]
        [System.Boolean]
        $settingsBlockAddProvisioningPackage,

        [Parameter()]
        [System.Boolean]
        $searchEnableAutomaticIndexSizeManangement,

        [Parameter()]
        [System.Boolean]
        $tenantLockdownRequireNetworkDuringOutOfBoxExperience,

        [Parameter()]
        [System.Boolean]
        $microsoftUpdateServiceAllowed,

        [Parameter()]
        [System.Object]
        $mediaContentRatingGermany,

        [Parameter()]
        [System.String]
        $kioskAppUserModelId,

        [Parameter()]
        [System.Boolean]
        $defenderScanIncomingMail,

        [Parameter()]
        [System.Boolean]
        $windowsStoreBlockAutoUpdate,

        [Parameter()]
        [System.Boolean]
        $settingsBlockChangePowerSleep,

        [Parameter()]
        [System.String[]]
        $defenderFilesAndFoldersToExclude,

        [Parameter()]
        [System.Boolean]
        $wifiBlocked,

        [Parameter()]
        [System.Object[]]
        $userStatuses,

        [Parameter()]
        [System.Boolean]
        $deviceBlockEnableRestrictions,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Boolean]
        $allowTextSuggestion,

        [Parameter()]
        [System.Boolean]
        $featureUpdatesPaused,

        [Parameter()]
        [System.Boolean]
        $defenderRequireBehaviorMonitoring,

        [Parameter()]
        [System.String]
        $allowedAccounts,

        [Parameter()]
        [System.Boolean]
        $settingsBlockSessionResume,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockTodayView,

        [Parameter()]
        [System.Boolean]
        $connectAppBlockAutoLaunch,

        [Parameter()]
        [System.Boolean]
        $startMenuHideSwitchAccount,

        [Parameter()]
        [System.Boolean]
        $documentsBlockUnmanagedDocumentsInManagedApps,

        [Parameter()]
        [System.Boolean]
        $workProfileBluetoothEnableContactSharing,

        [Parameter()]
        [System.Object[]]
        $omaSettings,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowAssistiveSpeak,

        [Parameter()]
        [System.Boolean]
        $antiTheftModeBlocked,

        [Parameter()]
        [System.Boolean]
        $safariBlockPopups,

        [Parameter()]
        [System.Boolean]
        $edgeSendIntranetTrafficToInternetExplorer,

        [Parameter()]
        [System.Boolean]
        $logonBlockFastUserSwitching,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockDictation,

        [Parameter()]
        [System.Boolean]
        $airPlayForcePairingPasswordForOutgoingRequests,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowVolumeButtons,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows81GeneralConfiguration,

        [Parameter()]
        [System.Boolean]
        $iTunesBlockRadio,

        [Parameter()]
        [System.Boolean]
        $defenderRequireRealTimeMonitoring,

        [Parameter()]
        [System.Boolean]
        $certificatesBlockManualRootCertificateInstallation,

        [Parameter()]
        [System.Boolean]
        $allowSampleSharing,

        [Parameter()]
        [System.Boolean]
        $welcomeScreenBlockAutomaticWakeUp,

        [Parameter()]
        [System.Boolean]
        $privacyBlockInputPersonalization,

        [Parameter()]
        [System.String]
        $welcomeScreenMeetingInformation,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderDocuments,

        [Parameter()]
        [System.String]
        $firewallCertificateRevocationListCheckMethod,

        [Parameter()]
        [System.String]
        $workFoldersUrl,

        [Parameter()]
        [System.Boolean]
        $deviceManagementBlockManualUnenroll,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlockPrePairing,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSGeneralDeviceConfiguration,

        [Parameter()]
        [System.Boolean]
        $storageRequireRemovableStorageEncryption,

        [Parameter()]
        [System.String]
        $defenderScanType,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowZoomSettings,

        [Parameter()]
        [System.Boolean]
        $findMyFriendsBlocked,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinNumericCharacters,

        [Parameter()]
        [System.String]
        $kioskModeManagedAppId,

        [Parameter()]
        [System.Boolean]
        $safariBlocked,

        [Parameter()]
        [System.Boolean]
        $edgeAllowStartPagesModification,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $editionUpgradeConfiguration,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockScreenCapture,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderFileExplorer,

        [Parameter()]
        [System.String[]]
        $safariPasswordAutoFillDomains,

        [Parameter()]
        [System.Boolean]
        $edgeBlockExtensions,

        [Parameter()]
        [System.Boolean]
        $windowsStoreBlocked,

        [Parameter()]
        [System.Boolean]
        $settingsBlockSystemPage,

        [Parameter()]
        [System.String]
        $personalizationLockScreenImageUrl,

        [Parameter()]
        [System.Boolean]
        $diagnosticDataBlockSubmission,

        [Parameter()]
        [System.Boolean]
        $searchDisableAutoLanguageDetection,

        [Parameter()]
        [System.Boolean]
        $defenderBlockEndUserAccess,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinimumLength,

        [Parameter()]
        [System.Boolean]
        $edgeBlockSearchSuggestions,

        [Parameter()]
        [System.Boolean]
        $siriBlockedWhenLocked,

        [Parameter()]
        [System.Boolean]
        $bitLockerEnableStorageCardEncryptionOnMobile,

        [Parameter()]
        [System.String]
        $lockScreenFootnote,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10CustomConfiguration,

        [Parameter()]
        [System.Boolean]
        $wirelessDisplayBlockUserInputFromReceiver,

        [Parameter()]
        [System.Boolean]
        $edgeClearBrowsingDataOnExit,

        [Parameter()]
        [System.Int32]
        $settingsScreenTimeoutInMinutes,

        [Parameter()]
        [System.String]
        $personalizationDesktopImageUrl,

        [Parameter()]
        [System.Int32]
        $defenderSignatureUpdateIntervalInHours,

        [Parameter()]
        [System.Boolean]
        $experienceBlockTaskSwitcher,

        [Parameter()]
        [System.Boolean]
        $passwordBlockSimple,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowScreenRotation,

        [Parameter()]
        [System.Object]
        $bitLockerRemovableDrivePolicy,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireColorInversion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidGeneralDeviceConfiguration,

        [Parameter()]
        [System.String]
        $azureOperationalInsightsWorkspaceKey,

        [Parameter()]
        [System.Boolean]
        $iTunesBlockMusicService,

        [Parameter()]
        [System.Int32]
        $utcTimeOffsetInMinutes,

        [Parameter()]
        [System.Object]
        $defenderDetectedMalwareActions,

        [Parameter()]
        [System.Boolean]
        $defenderSecurityCenterBlockExploitProtectionOverride,

        [Parameter()]
        [System.Boolean]
        $edgeBlocked,

        [Parameter()]
        [System.TimeSpan]
        $maintenanceStartTime,

        [Parameter()]
        [System.Boolean]
        $edgeBlockPopups,

        [Parameter()]
        [System.Boolean]
        $defenderScanMappedNetworkDrivesDuringFullScan,

        [Parameter()]
        [System.Boolean]
        $passwordBlockTrustAgents,

        [Parameter()]
        [System.Object]
        $mediaContentRatingNewZealand,

        [Parameter()]
        [System.Boolean]
        $nfcBlocked,

        [Parameter()]
        [System.Boolean]
        $deviceManagementBlockFactoryResetOnMobile,

        [Parameter()]
        [System.String]
        $configurationAccount,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordPreviousPasswordBlockCount,

        [Parameter()]
        [System.Boolean]
        $workProfilePasswordBlockFingerprintUnlock,

        [Parameter()]
        [System.Int32]
        $passcodeExpirationDays,

        [Parameter()]
        [System.Boolean]
        $diagnosticDataBlockSubmissionModification,

        [Parameter()]
        [System.Boolean]
        $gamingBlockGameCenterFriends,

        [Parameter()]
        [System.Boolean]
        $defenderRequireNetworkInspectionSystem,

        [Parameter()]
        [System.Boolean]
        $cellularBlockDataWhenRoaming,

        [Parameter()]
        [System.Boolean]
        $copyPasteBlocked,

        [Parameter()]
        [System.Boolean]
        $enterpriseAppBlockTrustModification,

        [Parameter()]
        [System.Boolean]
        $storageRestrictAppInstallToSystemVolume,

        [Parameter()]
        [System.String]
        $launchUri,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowSleepButton,

        [Parameter()]
        [System.Byte[]]
        $defenderExploitProtectionXml,

        [Parameter()]
        [System.Boolean]
        $wallpaperBlockModification,

        [Parameter()]
        [System.Int32]
        $passcodeMinutesOfInactivityBeforeScreenTimeout,

        [Parameter()]
        [System.Boolean]
        $iTunesBlockExplicitContent,

        [Parameter()]
        [System.Boolean]
        $voiceRecordingBlocked,

        [Parameter()]
        [System.Object[]]
        $kioskModeApps,

        [Parameter()]
        [System.Boolean]
        $browserBlockPlugins,

        [Parameter()]
        [System.Boolean]
        $passcodeBlockFingerprintModification,

        [Parameter()]
        [System.Boolean]
        $applicationGuardForceAuditing,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSDeviceFeaturesConfiguration,

        [Parameter()]
        [System.Boolean]
        $browserRequireFirewall,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderDownloads,

        [Parameter()]
        [System.Boolean]
        $securityRequireVerifyApps,

        [Parameter()]
        [System.Boolean]
        $enabled,

        [Parameter()]
        [System.Boolean]
        $startMenuHideHibernate,

        [Parameter()]
        [System.Boolean]
        $startMenuHideRestartOptions,

        [Parameter()]
        [System.Boolean]
        $allowLocalStorage,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockAutoCorrect,

        [Parameter()]
        [System.Boolean]
        $applicationGuardEnabled,

        [Parameter()]
        [System.Boolean]
        $firewallMergeKeyingModuleSettings,

        [Parameter()]
        [System.Boolean]
        $browserBlockSendingDoNotTrackHeader,

        [Parameter()]
        [System.Boolean]
        $settingsBlockGamingPage,

        [Parameter()]
        [System.Boolean]
        $screenCaptureBlocked,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderSettings,

        [Parameter()]
        [System.Boolean]
        $siriBlocked,

        [Parameter()]
        [System.String]
        $appLockerApplicationControl,

        [Parameter()]
        [System.Boolean]
        $kioskModeBlockVolumeButtons,

        [Parameter()]
        [System.Boolean]
        $settingsBlockPrivacyPage,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockSpellCheck,

        [Parameter()]
        [System.Boolean]
        $passcodeRequired,

        [Parameter()]
        [System.Boolean]
        $cameraBlocked,

        [Parameter()]
        [System.String]
        $businessReadyUpdatesOnly,

        [Parameter()]
        [System.Boolean]
        $webBrowserBlocked,

        [Parameter()]
        [System.Int32]
        $idleTimeBeforeSleepInSeconds,

        [Parameter()]
        [System.String]
        $applicationGuardBlockClipboardSharing,

        [Parameter()]
        [System.Int32]
        $featureUpdatesDeferralPeriodInDays,

        [Parameter()]
        [System.Boolean]
        $startBlockUnpinningAppsFromTaskbar,

        [Parameter()]
        [System.String]
        $azureOperationalInsightsWorkspaceId,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderNetwork,

        [Parameter()]
        [System.Boolean]
        $lockScreenAllowTimeoutConfiguration,

        [Parameter()]
        [System.String[]]
        $edgeHomepageUrls,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowAssistiveTouchSettings,

        [Parameter()]
        [System.String]
        $startMenuAppListVisibility,

        [Parameter()]
        [System.Boolean]
        $cellularBlockPerAppDataModification,

        [Parameter()]
        [System.Boolean]
        $browserBlockAutofill,

        [Parameter()]
        [System.Boolean]
        $edgeBlockSendingIntranetTrafficToInternetExplorer,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordExpirationDays,

        [Parameter()]
        [System.Boolean]
        $startMenuHidePowerButton,

        [Parameter()]
        [System.Boolean]
        $settingsBlockEditDeviceName,

        [Parameter()]
        [System.Boolean]
        $startMenuHideSignOut,

        [Parameter()]
        [System.Boolean]
        $privacyAutoAcceptPairingAndConsentPrompts,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockCortana,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10GeneralConfiguration,

        [Parameter()]
        [System.Boolean]
        $settingsBlockEaseOfAccessPage,

        [Parameter()]
        [System.Boolean]
        $driversExcluded,

        [Parameter()]
        [System.Int32]
        $qualityUpdatesDeferralPeriodInDays,

        [Parameter()]
        [System.Boolean]
        $settingsBlockDevicesPage,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockCamera,

        [Parameter()]
        [System.Object]
        $firewallProfileDomain,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockBackup,

        [Parameter()]
        [System.String]
        $passcodeRequiredType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10EnterpriseModernAppManagementConfiguration,

        [Parameter()]
        [System.Boolean]
        $accountBlockModification,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $sharedPCConfiguration,

        [Parameter()]
        [System.Boolean]
        $edgeDisableFirstRunPage,

        [Parameter()]
        [System.Object[]]
        $homeScreenDockIcons,

        [Parameter()]
        [System.Boolean]
        $notificationsBlockSettingsModification,

        [Parameter()]
        [System.Boolean]
        $firewallIPSecExemptionsAllowICMP,

        [Parameter()]
        [System.Int32]
        $passcodeMinimumCharacterSetCount,

        [Parameter()]
        [System.Object]
        $firewallProfilePrivate,

        [Parameter()]
        [System.String[]]
        $emailInDomainSuffixes,

        [Parameter()]
        [System.Boolean]
        $appleWatchBlockPairing,

        [Parameter()]
        [System.String]
        $diagnosticsDataSubmissionMode,

        [Parameter()]
        [System.Boolean]
        $smartScreenEnableAppInstallControl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsPhone81CustomConfiguration,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintResourceIdentifier,

        [Parameter()]
        [System.String[]]
        $scheduledInstallDays,

        [Parameter()]
        [System.String]
        $edgeCookiePolicy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosCustomConfiguration,

        [Parameter()]
        [System.TimeSpan]
        $defenderScheduledQuickScanTime,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireVoiceOver,

        [Parameter()]
        [System.Boolean]
        $appsBlockWindowsStoreOriginatedApps,

        [Parameter()]
        [System.Int32]
        $passwordMinimumCharacterSetCount,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockAddingAccounts,

        [Parameter()]
        [System.Boolean]
        $passcodeBlockFingerprintUnlock,

        [Parameter()]
        [System.Boolean]
        $defenderRequireCloudProtection,

        [Parameter()]
        [System.Boolean]
        $azureOperationalInsightsBlockTelemetry,

        [Parameter()]
        [System.String[]]
        $defenderAdditionalGuardedFolders,

        [Parameter()]
        [System.String]
        $defenderPromptForSampleSubmission,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockManagedAppsSync,

        [Parameter()]
        [System.String]
        $targetEdition,

        [Parameter()]
        [System.Boolean]
        $configurationProfileBlockChanges,

        [Parameter()]
        [System.Boolean]
        $faceTimeBlocked,

        [Parameter()]
        [System.Boolean]
        $smartScreenBlockOverrideForFiles,

        [Parameter()]
        [System.Object[]]
        $notificationSettings,

        [Parameter()]
        [System.Boolean]
        $startMenuHideUserTile,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockNotificationsWhileDeviceLocked,

        [Parameter()]
        [System.String[]]
        $defenderAttackSurfaceReductionExcludedPaths,

        [Parameter()]
        [System.Int32]
        $defenderDaysBeforeDeletingQuarantinedMalware,

        [Parameter()]
        [System.Boolean]
        $wifiBlockAutomaticConnectHotspots,

        [Parameter()]
        [System.Object]
        $accountManagerPolicy,

        [Parameter()]
        [System.TimeSpan]
        $maintenanceWindowStartTime,

        [Parameter()]
        [System.String]
        $defenderSystemScanSchedule,

        [Parameter()]
        [System.Boolean]
        $browserBlockAutomaticDetectionOfIntranetSites,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPrintToXPS,

        [Parameter()]
        [System.Boolean]
        $appsBlockClipboardSharing,

        [Parameter()]
        [System.String[]]
        $safariManagedDomains,

        [Parameter()]
        [System.Boolean]
        $storageBlockRemovableStorage,

        [Parameter()]
        [System.Boolean]
        $siriBlockUserGeneratedContent,

        [Parameter()]
        [System.Boolean]
        $cellularBlockWifiTethering,

        [Parameter()]
        [System.Boolean]
        $startMenuHideLock,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSCustomConfiguration,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintOAuthAuthority,

        [Parameter()]
        [System.String]
        $edgeEnterpriseModeSiteListLocation,

        [Parameter()]
        [System.String]
        $kioskModeBuiltInAppId,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinLowerCaseCharacters,

        [Parameter()]
        [System.Boolean]
        $podcastsBlocked,

        [Parameter()]
        [System.Object[]]
        $deviceSettingStateSummaries,

        [Parameter()]
        [System.Boolean]
        $storageBlockGoogleBackup,

        [Parameter()]
        [System.Boolean]
        $settingsBlockMyMeetingsAndFiles,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockActivityContinuation,

        [Parameter()]
        [System.Boolean]
        $firewallIPSecExemptionsAllowNeighborDiscovery,

        [Parameter()]
        [System.String]
        $workProfileDefaultAppPermissionPolicy,

        [Parameter()]
        [System.Object]
        $userStatusOverview,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockDocumentSync,

        [Parameter()]
        [System.Boolean]
        $safariBlockJavaScript,

        [Parameter()]
        [System.TimeSpan]
        $defenderScheduledScanTime,

        [Parameter()]
        [System.Boolean]
        $gameDvrBlocked,

        [Parameter()]
        [System.Boolean]
        $voiceAssistantBlocked,

        [Parameter()]
        [System.Boolean]
        $searchDisableIndexerBackoff,

        [Parameter()]
        [System.Object[]]
        $compliantAppsList,

        [Parameter()]
        [System.Boolean]
        $googleAccountBlockAutoSync,

        [Parameter()]
        [System.Boolean]
        $passwordBlockPicturePasswordAndPin,

        [Parameter()]
        [System.Boolean]
        $settingsBlockPersonalizationPage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosDeviceFeaturesConfiguration,

        [Parameter()]
        [System.Boolean]
        $usbBlocked,

        [Parameter()]
        [System.Boolean]
        $firewallBlockStatefulFTP,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockTailoredExperiences,

        [Parameter()]
        [System.String[]]
        $defenderFileExtensionsToExclude,

        [Parameter()]
        [System.Boolean]
        $searchDisableIndexingEncryptedItems,

        [Parameter()]
        [System.TimeSpan]
        $activeHoursStart,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinLetterCharacters,

        [Parameter()]
        [System.Boolean]
        $webRtcBlockLocalhostIpAddress,

        [Parameter()]
        [System.Boolean]
        $browserRequireSmartScreen,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowColorInversionSettings,

        [Parameter()]
        [System.Boolean]
        $passcodeBlockSimple,

        [Parameter()]
        [System.Object]
        $mediaContentRatingFrance,

        [Parameter()]
        [System.Boolean]
        $emailBlockAddingAccounts,

        [Parameter()]
        [System.String]
        $applicationGuardBlockFileTransfer,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintDiscoveryEndPoint,

        [Parameter()]
        [System.Boolean]
        $allowPrinting,

        [Parameter()]
        [System.Boolean]
        $settingsBlockChangeRegion,

        [Parameter()]
        [System.Boolean]
        $edgeSyncFavoritesWithInternetExplorer,

        [Parameter()]
        [System.Boolean]
        $settingsBlockAccountsPage,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPrintToNetworkPrinters,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireAssistiveTouch,

        [Parameter()]
        [System.Boolean]
        $cellularBlockGlobalBackgroundFetchWhileRoaming,

        [Parameter()]
        [System.Boolean]
        $storageRequireEncryption,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderVideos,

        [Parameter()]
        [System.String]
        $browserTrustedSitesSecurityLevel,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.Boolean]
        $microsoftAccountBlocked,

        [Parameter()]
        [System.Boolean]
        $edgeBlockPasswordManager,

        [Parameter()]
        [System.String]
        $payloadName,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlocked,

        [Parameter()]
        [System.String]
        $workProfileDataSharingType,

        [Parameter()]
        [System.Boolean]
        $experienceBlockDeviceDiscovery,

        [Parameter()]
        [System.String]
        $browserEnterpriseModeSiteListLocation,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderHomeGroup,

        [Parameter()]
        [System.Object]
        $mediaContentRatingAustralia,

        [Parameter()]
        [System.Object]
        $installationSchedule,

        [Parameter()]
        [System.Boolean]
        $enableExpeditedTelemetryReporting,

        [Parameter()]
        [System.String]
        $browserInternetSecurityLevel,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderPersonalFolder,

        [Parameter()]
        [System.String]
        $compliantAppListType,

        [Parameter()]
        [System.Boolean]
        $smartScreenBlockPromptOverride,

        [Parameter()]
        [System.Boolean]
        $cellularBlockVpnWhenRoaming,

        [Parameter()]
        [System.Boolean]
        $startMenuHideShutDown,

        [Parameter()]
        [System.Boolean]
        $appsBlockCopyPaste,

        [Parameter()]
        [System.Int32]
        $passwordPreviousPasswordBlockCount,

        [Parameter()]
        [System.Boolean]
        $airDropForceUnmanagedDropTarget,

        [Parameter()]
        [System.Int32]
        $passcodeSignInFailureCountBeforeWipe,

        [Parameter()]
        [System.String[]]
        $bluetoothAllowedServices,

        [Parameter()]
        [System.Object[]]
        $appsInstallAllowList,

        [Parameter()]
        [System.Object]
        $deviceStatusOverview,

        [Parameter()]
        [System.Boolean]
        $browserRequireFraudWarning,

        [Parameter()]
        [System.Boolean]
        $defenderScanArchiveFiles,

        [Parameter()]
        [System.Boolean]
        $browserBlockPopups,

        [Parameter()]
        [System.Boolean]
        $startMenuHideSleep,

        [Parameter()]
        [System.String]
        $firewallPacketQueueingMethod,

        [Parameter()]
        [System.Boolean]
        $appStoreBlocked,

        [Parameter()]
        [System.Boolean]
        $siriRequireProfanityFilter,

        [Parameter()]
        [System.Object]
        $networkProxyServer,

        [Parameter()]
        [System.Object[]]
        $appsVisibilityList,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockActionCenterNotifications,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireZoom,

        [Parameter()]
        [System.String]
        $webBrowserCookieSettings,

        [Parameter()]
        [System.Boolean]
        $browserBlockEnterpriseModeAccess,

        [Parameter()]
        [System.Int32]
        $settingsSessionTimeoutInMinutes,

        [Parameter()]
        [System.String]
        $mediaContentRatingApps,

        [Parameter()]
        [System.Object]
        $mediaContentRatingUnitedKingdom,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidWorkProfileGeneralDeviceConfiguration,

        [Parameter()]
        [System.Boolean]
        $edgeRequireSmartScreen,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $maintenanceWindowBlocked,

        [Parameter()]
        [System.Boolean]
        $gameCenterBlocked,

        [Parameter()]
        [System.Int32]
        $lockScreenTimeoutInSeconds,

        [Parameter()]
        [System.Boolean]
        $cortanaBlocked,

        [Parameter()]
        [System.Boolean]
        $defenderScanDownloads,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPrintToPDF,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderMusic,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinUpperCaseCharacters,

        [Parameter()]
        [System.String]
        $workProfilePasswordRequiredType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosGeneralDeviceConfiguration,

        [Parameter()]
        [System.Boolean]
        $webBrowserBlockJavaScript,

        [Parameter()]
        [System.Object]
        $mediaContentRatingCanada,

        [Parameter()]
        [System.Int32]
        $passcodePreviousPasscodeBlockCount,

        [Parameter()]
        [System.Boolean]
        $classroomAppBlockRemoteScreenObservation,

        [Parameter()]
        [System.Boolean]
        $deviceBlockNameModification,

        [Parameter()]
        [System.String]
        $browserIntranetSecurityLevel,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlockDiscoverableMode,

        [Parameter()]
        [System.String]
        $startMenuMode,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $automaticUpdateMode,

        [Parameter()]
        [System.Boolean]
        $enterpriseAppBlockTrust,

        [Parameter()]
        [System.Boolean]
        $workProfilePasswordBlockTrustAgents,

        [Parameter()]
        [System.Boolean]
        $diagnosticsBlockDataSubmission,

        [Parameter()]
        [System.Boolean]
        $cellularBlockMessaging,

        [Parameter()]
        [System.Boolean]
        $disableAccountManager,

        [Parameter()]
        [System.Boolean]
        $appStoreBlockAutomaticDownloads
    )
}
function New-DeviceConfigurationSettingStateObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userEmail,

        [Parameter()]
        [System.Object[]]
        $sources,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $settingName,

        [Parameter()]
        [System.String]
        $setting,

        [Parameter()]
        [System.Int64]
        $errorCode,

        [Parameter()]
        [System.String]
        $currentValue,

        [Parameter()]
        [System.String]
        $instanceDisplayName,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.String]
        $errorDescription
    )
}
function New-DeviceConfigurationStateObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $settingStates,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.String]
        $platformType,

        [Parameter()]
        [System.Int32]
        $settingCount,

        [Parameter()]
        [System.String]
        $state
    )
}
function New-DeviceConfigurationUserOverviewObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime,

        [Parameter()]
        [System.Int32]
        $failedCount
    )
}
function New-DeviceConfigurationUserStatusObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.Int32]
        $devicesCount,

        [Parameter()]
        [System.String]
        $status
    )
}
function New-DeviceDetailObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $operatingSystem,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $isManaged,

        [Parameter()]
        [System.String]
        $browser,

        [Parameter()]
        [System.Boolean]
        $isCompliant,

        [Parameter()]
        [System.String]
        $trustType,

        [Parameter()]
        [System.String]
        $deviceId
    )
}
function New-DeviceEnrollmentConfigurationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Boolean]
        $unlockWithBiometricsEnabled,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object]
        $windowsRestriction,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceEnrollmentPlatformRestrictionsConfiguration,

        [Parameter()]
        [System.Boolean]
        $remotePassportEnabled,

        [Parameter()]
        [System.Boolean]
        $securityDeviceRequired,

        [Parameter()]
        [System.Int32]
        $pinPreviousBlockCount,

        [Parameter()]
        [System.Int32]
        $priority,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceEnrollmentLimitConfiguration,

        [Parameter()]
        [System.Object]
        $androidRestriction,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.Object]
        $windowsMobileRestriction,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.Object]
        $macOSRestriction,

        [Parameter()]
        [System.Int32]
        $pinExpirationInDays,

        [Parameter()]
        [System.Int32]
        $pinMaximumLength,

        [Parameter()]
        [System.String]
        $pinLowercaseCharactersUsage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceEnrollmentWindowsHelloForBusinessConfiguration,

        [Parameter()]
        [System.Int32]
        $pinMinimumLength,

        [Parameter()]
        [System.String]
        $pinSpecialCharactersUsage,

        [Parameter()]
        [System.String]
        $pinUppercaseCharactersUsage,

        [Parameter()]
        [System.Int32]
        $limit,

        [Parameter()]
        [System.Object]
        $iosRestriction,

        [Parameter()]
        [System.String]
        $enhancedBiometricsState
    )
}
function New-DeviceEnrollmentPlatformRestrictionObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $osMaximumVersion,

        [Parameter()]
        [System.String]
        $osMinimumVersion,

        [Parameter()]
        [System.Boolean]
        $platformBlocked,

        [Parameter()]
        [System.Boolean]
        $personalDeviceEnrollmentBlocked
    )
}
function New-DeviceExchangeAccessStateSummaryObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $blockedDeviceCount,

        [Parameter()]
        [System.Int32]
        $unavailableDeviceCount,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $quarantinedDeviceCount,

        [Parameter()]
        [System.Int32]
        $allowedDeviceCount
    )
}
function New-DeviceGeoLocationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Double]
        $verticalAccuracy,

        [Parameter()]
        [System.Double]
        $heading,

        [Parameter()]
        [System.Double]
        $speed,

        [Parameter()]
        [System.DateTimeOffset]
        $lastCollectedDateTime,

        [Parameter()]
        [System.Double]
        $longitude,

        [Parameter()]
        [System.Double]
        $latitude,

        [Parameter()]
        [System.Double]
        $horizontalAccuracy,

        [Parameter()]
        [System.Double]
        $altitude
    )
}
function New-DeviceHealthAttestationStateObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $secureBoot,

        [Parameter()]
        [System.String]
        $windowsPE,

        [Parameter()]
        [System.String]
        $bitLockerStatus,

        [Parameter()]
        [System.String]
        $tpmVersion,

        [Parameter()]
        [System.String]
        $codeIntegrityCheckVersion,

        [Parameter()]
        [System.String]
        $deviceHealthAttestationStatus,

        [Parameter()]
        [System.String]
        $bootDebugging,

        [Parameter()]
        [System.String]
        $attestationIdentityKey,

        [Parameter()]
        [System.String]
        $codeIntegrityPolicy,

        [Parameter()]
        [System.String]
        $bootRevisionListInfo,

        [Parameter()]
        [System.String]
        $lastUpdateDateTime,

        [Parameter()]
        [System.String]
        $virtualSecureMode,

        [Parameter()]
        [System.String]
        $testSigning,

        [Parameter()]
        [System.String]
        $earlyLaunchAntiMalwareDriverProtection,

        [Parameter()]
        [System.String]
        $dataExcutionPolicy,

        [Parameter()]
        [System.String]
        $contentVersion,

        [Parameter()]
        [System.String]
        $healthAttestationSupportedStatus,

        [Parameter()]
        [System.String]
        $operatingSystemRevListInfo,

        [Parameter()]
        [System.String]
        $healthStatusMismatchInfo,

        [Parameter()]
        [System.String]
        $bootManagerSecurityVersion,

        [Parameter()]
        [System.String]
        $codeIntegrity,

        [Parameter()]
        [System.String]
        $safeMode,

        [Parameter()]
        [System.String]
        $contentNamespaceUrl,

        [Parameter()]
        [System.Int64]
        $resetCount,

        [Parameter()]
        [System.String]
        $bootAppSecurityVersion,

        [Parameter()]
        [System.String]
        $pcrHashAlgorithm,

        [Parameter()]
        [System.Int64]
        $restartCount,

        [Parameter()]
        [System.DateTimeOffset]
        $issuedDateTime,

        [Parameter()]
        [System.String]
        $secureBootConfigurationPolicyFingerPrint,

        [Parameter()]
        [System.String]
        $pcr0,

        [Parameter()]
        [System.String]
        $bootManagerVersion,

        [Parameter()]
        [System.String]
        $operatingSystemKernelDebugging
    )
}
function New-DeviceInstallStateObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $errorCode,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.String]
        $osDescription,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.String]
        $deviceId,

        [Parameter()]
        [System.String]
        $installState
    )
}
function New-DeviceManagement
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $deviceCategories,

        [Parameter()]
        [System.Object]
        $applePushNotificationCertificate,

        [Parameter()]
        [System.Object[]]
        $deviceManagementPartners,

        [Parameter()]
        [System.Object[]]
        $termsAndConditions,

        [Parameter()]
        [System.Object]
        $settings,

        [Parameter()]
        [System.Object[]]
        $windowsInformationProtectionNetworkLearningSummaries,

        [Parameter()]
        [System.String]
        $subscriptionState,

        [Parameter()]
        [System.Object]
        $deviceCompliancePolicyDeviceStateSummary,

        [Parameter()]
        [System.Object]
        $intuneBrand,

        [Parameter()]
        [System.Object[]]
        $troubleshootingEvents,

        [Parameter()]
        [System.Object]
        $deviceConfigurationDeviceStateSummaries,

        [Parameter()]
        [System.Object[]]
        $roleDefinitions,

        [Parameter()]
        [System.Object[]]
        $telecomExpenseManagementPartners,

        [Parameter()]
        [System.Object]
        $managedDeviceOverview,

        [Parameter()]
        [System.Object]
        $softwareUpdateStatusSummary,

        [Parameter()]
        [System.Object[]]
        $managedDevices,

        [Parameter()]
        [System.Object[]]
        $notificationMessageTemplates,

        [Parameter()]
        [System.Object[]]
        $roleAssignments,

        [Parameter()]
        [System.Object[]]
        $resourceOperations,

        [Parameter()]
        [System.Object[]]
        $deviceCompliancePolicies,

        [Parameter()]
        [System.Object[]]
        $windowsInformationProtectionAppLearningSummaries,

        [Parameter()]
        [System.Object[]]
        $remoteAssistancePartners,

        [Parameter()]
        [System.Object[]]
        $exchangeConnectors,

        [Parameter()]
        [System.Object[]]
        $iosUpdateStatuses,

        [Parameter()]
        [System.Object[]]
        $mobileThreatDefenseConnectors,

        [Parameter()]
        [System.Object]
        $conditionalAccessSettings,

        [Parameter()]
        [System.Object[]]
        $deviceConfigurations,

        [Parameter()]
        [System.Object[]]
        $detectedApps,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $deviceEnrollmentConfigurations,

        [Parameter()]
        [System.Object[]]
        $deviceCompliancePolicySettingStateSummaries
    )
}
function New-DeviceManagement_ApplePushNotificationCertificate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $expirationDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $certificate,

        [Parameter()]
        [System.String]
        $topicIdentifier,

        [Parameter()]
        [System.String]
        $appleIdentifier,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-DeviceManagement_ConditionalAccessSettings
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Guid[]]
        $includedGroups,

        [Parameter()]
        [System.Guid[]]
        $excludedGroups,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Boolean]
        $overrideDefaultRule,

        [Parameter()]
        [System.Boolean]
        $enabled
    )
}
function New-DeviceManagement_DetectedApps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $managedDevices,

        [Parameter()]
        [System.Int32]
        $deviceCount,

        [Parameter()]
        [System.Int64]
        $sizeInByte
    )
}
function New-DeviceManagement_DetectedApps_ManagedDevicesReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceReferenceUrl,

        [Parameter()]
        [System.String]
        $detectedAppId
    )
}
function New-DeviceManagement_DeviceCategories
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-DeviceManagement_DeviceCompliancePolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $passcodeBlockSimple,

        [Parameter()]
        [System.Boolean]
        $firewallEnabled,

        [Parameter()]
        [System.String]
        $mobileOsMinimumVersion,

        [Parameter()]
        [System.Int32]
        $passcodeExpirationDays,

        [Parameter()]
        [System.Boolean]
        $bitLockerEnabled,

        [Parameter()]
        [System.String]
        $minAndroidSecurityPatchLevel,

        [Parameter()]
        [System.Object[]]
        $userStatuses,

        [Parameter()]
        [System.Object[]]
        $deviceSettingStateSummaries,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosCompliancePolicy,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Boolean]
        $firewallEnableStealthMode,

        [Parameter()]
        [System.String]
        $passwordRequiredType,

        [Parameter()]
        [System.String]
        $osMinimumVersion,

        [Parameter()]
        [System.String]
        $deviceThreatProtectionRequiredSecurityLevel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsPhone81CompliancePolicy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows81CompliancePolicy,

        [Parameter()]
        [System.Boolean]
        $securityRequireGooglePlayServices,

        [Parameter()]
        [System.String]
        $mobileOsMaximumVersion,

        [Parameter()]
        [System.Boolean]
        $securityDisableUsbDebugging,

        [Parameter()]
        [System.Boolean]
        $storageRequireEncryption,

        [Parameter()]
        [System.Int32]
        $passcodeMinimumLength,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10CompliancePolicy,

        [Parameter()]
        [System.Object]
        $userStatusOverview,

        [Parameter()]
        [System.Boolean]
        $codeIntegrityEnabled,

        [Parameter()]
        [System.Boolean]
        $securityRequireUpToDateSecurityProviders,

        [Parameter()]
        [System.Boolean]
        $securityBlockJailbrokenDevices,

        [Parameter()]
        [System.Int32]
        $passcodeMinimumCharacterSetCount,

        [Parameter()]
        [System.Boolean]
        $securityRequireSafetyNetAttestationBasicIntegrity,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $passcodePreviousPasscodeBlockCount,

        [Parameter()]
        [System.Int32]
        $passcodeMinutesOfInactivityBeforeLock,

        [Parameter()]
        [System.Int32]
        $passwordExpirationDays,

        [Parameter()]
        [System.Boolean]
        $securityRequireCompanyPortalAppIntegrity,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Boolean]
        $securityPreventInstallAppsFromUnknownSources,

        [Parameter()]
        [System.Int32]
        $passwordPreviousPasswordBlockCount,

        [Parameter()]
        [System.Boolean]
        $firewallBlockAllIncoming,

        [Parameter()]
        [System.Boolean]
        $passwordRequiredToUnlockFromIdle,

        [Parameter()]
        [System.Boolean]
        $securityRequireSafetyNetAttestationCertifiedDevice,

        [Parameter()]
        [System.Int32]
        $passwordMinimumCharacterSetCount,

        [Parameter()]
        [System.Boolean]
        $earlyLaunchAntiMalwareDriverEnabled,

        [Parameter()]
        [System.Boolean]
        $passwordBlockSimple,

        [Parameter()]
        [System.Boolean]
        $requireHealthyDeviceReport,

        [Parameter()]
        [System.String]
        $passcodeRequiredType,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.Boolean]
        $passwordRequired,

        [Parameter()]
        [System.Boolean]
        $passwordRequireToUnlockFromIdle,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Int32]
        $passwordMinimumLength,

        [Parameter()]
        [System.Boolean]
        $systemIntegrityProtectionEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidCompliancePolicy,

        [Parameter()]
        [System.Object[]]
        $deviceStatuses,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSCompliancePolicy,

        [Parameter()]
        [System.Boolean]
        $passcodeRequired,

        [Parameter()]
        [System.Boolean]
        $deviceThreatProtectionEnabled,

        [Parameter()]
        [System.Boolean]
        $managedEmailProfileRequired,

        [Parameter()]
        [System.Boolean]
        $secureBootEnabled,

        [Parameter()]
        [System.Boolean]
        $securityRequireVerifyApps,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidWorkProfileCompliancePolicy,

        [Parameter()]
        [System.Object]
        $deviceStatusOverview,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $scheduledActionsForRule,

        [Parameter()]
        [System.String]
        $osMaximumVersion,

        [Parameter()]
        [System.Int32]
        $passwordMinutesOfInactivityBeforeLock,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10MobileCompliancePolicy
    )
}
function New-DeviceManagement_DeviceCompliancePolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $target
    )
}
function New-DeviceManagement_DeviceCompliancePolicies_DeviceSettingStateSummaries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.String]
        $settingName,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.String]
        $instancePath,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function New-DeviceManagement_DeviceCompliancePolicies_DeviceStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $deviceModel,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.String]
        $deviceDisplayName,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime
    )
}
function New-DeviceManagement_DeviceCompliancePolicies_DeviceStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.Int32]
        $failedCount,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime
    )
}
function New-DeviceManagement_DeviceCompliancePolicies_ScheduledActionsForRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $scheduledActionConfigurations,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $ruleName,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-DeviceManagement_DeviceCompliancePolicies_ScheduledActionsForRule_ScheduledActionConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $actionType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $notificationTemplateId,

        [Parameter()]
        [System.Int32]
        $gracePeriodHours,

        [Parameter()]
        [System.String]
        $deviceComplianceScheduledActionForRuleId,

        [Parameter()]
        [System.String[]]
        $notificationMessageCCList
    )
}
function New-DeviceManagement_DeviceCompliancePolicies_UserStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $devicesCount,

        [Parameter()]
        [System.String]
        $status
    )
}
function New-DeviceManagement_DeviceCompliancePolicies_UserStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.Int32]
        $failedCount,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime
    )
}
function New-DeviceManagement_DeviceCompliancePolicyDeviceStateSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $inGracePeriodCount,

        [Parameter()]
        [System.Int32]
        $configManagerCount,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function New-DeviceManagement_DeviceCompliancePolicySettingStateSummaries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.String]
        $settingName,

        [Parameter()]
        [System.String]
        $setting,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $deviceComplianceSettingStates,

        [Parameter()]
        [System.String]
        $platformType,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function New-DeviceManagement_DeviceCompliancePolicySettingStateSummaries_DeviceComplianceSettingStates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userEmail,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $settingName,

        [Parameter()]
        [System.String]
        $setting,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicySettingStateSummaryId,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $deviceModel,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.String]
        $deviceId
    )
}
function New-DeviceManagement_DeviceConfigurationDeviceStateSummaries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function New-DeviceManagement_DeviceConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $settingsBlockChangeLanguage,

        [Parameter()]
        [System.Boolean]
        $browserBlockSingleWordEntryOnIntranetSites,

        [Parameter()]
        [System.Boolean]
        $settingsBlockNetworkInternetPage,

        [Parameter()]
        [System.Byte[]]
        $startMenuLayoutXml,

        [Parameter()]
        [System.Boolean]
        $appStoreBlockInAppPurchases,

        [Parameter()]
        [System.Boolean]
        $edgeBlockAccessToAboutFlags,

        [Parameter()]
        [System.Boolean]
        $airDropBlocked,

        [Parameter()]
        [System.Boolean]
        $oneDriveDisableFileSync,

        [Parameter()]
        [System.Boolean]
        $edgeBlockAutofill,

        [Parameter()]
        [System.Object]
        $edgeSearchEngine,

        [Parameter()]
        [System.String]
        $appsAllowTrustedAppsSideloading,

        [Parameter()]
        [System.Object[]]
        $appsSingleAppModeList,

        [Parameter()]
        [System.Boolean]
        $workProfileRequirePassword,

        [Parameter()]
        [System.Boolean]
        $firewallIPSecExemptionsAllowDHCP,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidCustomConfiguration,

        [Parameter()]
        [System.Boolean]
        $firewallIPSecExemptionsAllowRouterDiscovery,

        [Parameter()]
        [System.String]
        $firewallPreSharedKeyEncodingMethod,

        [Parameter()]
        [System.Boolean]
        $resetProtectionModeBlocked,

        [Parameter()]
        [System.Boolean]
        $startMenuHideRecentJumpLists,

        [Parameter()]
        [System.String]
        $userAccountControlSettings,

        [Parameter()]
        [System.String]
        $appsVisibilityListType,

        [Parameter()]
        [System.Int32]
        $passwordMinutesOfInactivityBeforeScreenTimeout,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowAutoLock,

        [Parameter()]
        [System.Boolean]
        $updatesRequireAutomaticUpdates,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10TeamGeneralConfiguration,

        [Parameter()]
        [System.Boolean]
        $edgeBlockDeveloperTools,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockOnActionCenter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosUpdateConfiguration,

        [Parameter()]
        [System.Int32]
        $maintenanceWindowDurationInHours,

        [Parameter()]
        [System.Boolean]
        $miracastBlocked,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockPassbook,

        [Parameter()]
        [System.Boolean]
        $powerOffBlocked,

        [Parameter()]
        [System.Int32]
        $defenderScanMaxCpu,

        [Parameter()]
        [System.Byte[]]
        $payload,

        [Parameter()]
        [System.Boolean]
        $appStoreBlockUIAppInstallation,

        [Parameter()]
        [System.String]
        $assetTagTemplate,

        [Parameter()]
        [System.Boolean]
        $applicationGuardBlockNonEnterpriseContent,

        [Parameter()]
        [System.String]
        $defenderMonitorFileActivity,

        [Parameter()]
        [System.Boolean]
        $storageRequireMobileDeviceEncryption,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockThirdPartyNotifications,

        [Parameter()]
        [System.Boolean]
        $deviceSharingAllowed,

        [Parameter()]
        [System.Boolean]
        $passwordRequireWhenResumeFromIdleState,

        [Parameter()]
        [System.Boolean]
        $wifiBlockHotspotReporting,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockCrossProfileCopyPaste,

        [Parameter()]
        [System.Boolean]
        $bitLockerEncryptDevice,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockNotificationView,

        [Parameter()]
        [System.Int32]
        $passwordMinimumLength,

        [Parameter()]
        [System.Boolean]
        $windowsStoreEnablePrivateStoreOnly,

        [Parameter()]
        [System.Boolean]
        $spotlightBlockInternetResults,

        [Parameter()]
        [System.Boolean]
        $factoryResetBlocked,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintMopriaDiscoveryResourceIdentifier,

        [Parameter()]
        [System.Boolean]
        $settingsBlockRemoveProvisioningPackage,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPersistence,

        [Parameter()]
        [System.String]
        $welcomeScreenBackgroundImageUrl,

        [Parameter()]
        [System.Boolean]
        $appleNewsBlocked,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintOAuthClientIdentifier,

        [Parameter()]
        [System.Boolean]
        $appleWatchForceWristDetection,

        [Parameter()]
        [System.Boolean]
        $edgeBlockAddressBarDropdown,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireMonoAudio,

        [Parameter()]
        [System.Boolean]
        $wirelessDisplayBlockProjectionToThisDevice,

        [Parameter()]
        [System.Boolean]
        $miracastRequirePin,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockPredictive,

        [Parameter()]
        [System.Boolean]
        $bitLockerDisableWarningForOtherDiskEncryption,

        [Parameter()]
        [System.Boolean]
        $networkProxyApplySettingsDeviceWide,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Boolean]
        $startMenuHideFrequentlyUsedApps,

        [Parameter()]
        [System.Boolean]
        $classroomAppForceUnpromptedScreenObservation,

        [Parameter()]
        [System.String[]]
        $defenderGuardedFoldersAllowedAppPaths,

        [Parameter()]
        [System.Boolean]
        $hostPairingBlocked,

        [Parameter()]
        [System.Boolean]
        $kioskModeBlockSleepButton,

        [Parameter()]
        [System.Boolean]
        $locationServicesBlocked,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockConsumerSpecificFeatures,

        [Parameter()]
        [System.Object]
        $mediaContentRatingUnitedStates,

        [Parameter()]
        [System.TimeSpan]
        $activeHoursEnd,

        [Parameter()]
        [System.String]
        $deliveryOptimizationMode,

        [Parameter()]
        [System.Int32]
        $wiFiScanInterval,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPrintToLocalPrinters,

        [Parameter()]
        [System.String]
        $licenseType,

        [Parameter()]
        [System.Boolean]
        $allowScreenCapture,

        [Parameter()]
        [System.Boolean]
        $smartScreenEnableInShell,

        [Parameter()]
        [System.String]
        $productKey,

        [Parameter()]
        [System.Boolean]
        $defenderScanNetworkFiles,

        [Parameter()]
        [System.Boolean]
        $searchEnableRemoteQueries,

        [Parameter()]
        [System.Boolean]
        $definitionLookupBlocked,

        [Parameter()]
        [System.Object[]]
        $deviceStatuses,

        [Parameter()]
        [System.Boolean]
        $cellularBlockVoiceRoaming,

        [Parameter()]
        [System.String]
        $networkProxyAutomaticConfigurationUrl,

        [Parameter()]
        [System.Boolean]
        $settingsBlockUpdateSecurityPage,

        [Parameter()]
        [System.Object[]]
        $appsLaunchBlockList,

        [Parameter()]
        [System.Boolean]
        $passwordBlockFingerprintUnlock,

        [Parameter()]
        [System.String]
        $browserLoggingReportLocation,

        [Parameter()]
        [System.Boolean]
        $iCloudRequireEncryptedBackup,

        [Parameter()]
        [System.String]
        $defenderCloudBlockLevel,

        [Parameter()]
        [System.String]
        $passwordRequiredType,

        [Parameter()]
        [System.Boolean]
        $startMenuHideRecentlyAddedApps,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsPhone81GeneralConfiguration,

        [Parameter()]
        [System.Boolean]
        $settingsBlockTimeLanguagePage,

        [Parameter()]
        [System.Boolean]
        $searchBlockDiacritics,

        [Parameter()]
        [System.Int32]
        $passcodeMinutesOfInactivityBeforeLock,

        [Parameter()]
        [System.Boolean]
        $smartScreenBlockPromptOverrideForFiles,

        [Parameter()]
        [System.Int32]
        $settingsSleepTimeoutInMinutes,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockShortcuts,

        [Parameter()]
        [System.Int32]
        $passwordSignInFailureCountBeforeFactoryReset,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockPhotoStreamSync,

        [Parameter()]
        [System.Boolean]
        $storageRestrictAppDataToSystemVolume,

        [Parameter()]
        [System.Boolean]
        $googlePlayStoreBlocked,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordSignInFailureCountBeforeFactoryReset,

        [Parameter()]
        [System.Boolean]
        $deviceBlockEraseContentAndSettings,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockPhotoLibrary,

        [Parameter()]
        [System.Byte[]]
        $startMenuLayoutEdgeAssetsXml,

        [Parameter()]
        [System.Boolean]
        $edgeBlockJavaScript,

        [Parameter()]
        [System.String[]]
        $defenderProcessesToExclude,

        [Parameter()]
        [System.Boolean]
        $settingsBlockSettingsApp,

        [Parameter()]
        [System.Boolean]
        $microsoftAccountBlockSettingsSync,

        [Parameter()]
        [System.Boolean]
        $documentsBlockManagedDocumentsInUnmanagedApps,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockSharedPhotoStream,

        [Parameter()]
        [System.Object]
        $firewallProfilePublic,

        [Parameter()]
        [System.String]
        $edgeFirstRunUrl,

        [Parameter()]
        [System.Boolean]
        $experienceBlockErrorDialogWhenNoSIM,

        [Parameter()]
        [System.Boolean]
        $connectedDevicesServiceBlocked,

        [Parameter()]
        [System.Boolean]
        $activationLockAllowWhenSupervised,

        [Parameter()]
        [System.String]
        $miracastChannel,

        [Parameter()]
        [System.Boolean]
        $settingsBlockChangeSystemTime,

        [Parameter()]
        [System.Object]
        $mediaContentRatingJapan,

        [Parameter()]
        [System.String]
        $license,

        [Parameter()]
        [System.Boolean]
        $storageRequireDeviceEncryption,

        [Parameter()]
        [System.Boolean]
        $disablePowerPolicies,

        [Parameter()]
        [System.Boolean]
        $edgeBlockInPrivateBrowsing,

        [Parameter()]
        [System.Int32]
        $settingsDefaultVolume,

        [Parameter()]
        [System.Boolean]
        $startMenuHideChangeAccountSettings,

        [Parameter()]
        [System.String]
        $safeSearchFilter,

        [Parameter()]
        [System.String]
        $kioskAppDisplayName,

        [Parameter()]
        [System.Boolean]
        $networkProxyDisableAutoDetect,

        [Parameter()]
        [System.Boolean]
        $passwordRequired,

        [Parameter()]
        [System.Boolean]
        $settingsBlockSigninSuggestions,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowTouchscreen,

        [Parameter()]
        [System.Boolean]
        $edgeBlockLiveTileDataCollection,

        [Parameter()]
        [System.Int32]
        $enterpriseCloudPrintDiscoveryMaxLimit,

        [Parameter()]
        [System.Boolean]
        $messagesBlocked,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinNonLetterCharacters,

        [Parameter()]
        [System.Boolean]
        $certificatesBlockUntrustedTlsCertificates,

        [Parameter()]
        [System.Boolean]
        $uninstallBuiltInApps,

        [Parameter()]
        [System.String]
        $defenderExploitProtectionXmlFileName,

        [Parameter()]
        [System.String]
        $privacyAdvertisingId,

        [Parameter()]
        [System.String]
        $prereleaseFeatures,

        [Parameter()]
        [System.Int32]
        $passwordMinutesOfInactivityBeforeLock,

        [Parameter()]
        [System.Boolean]
        $searchDisableIndexingRemovableDrive,

        [Parameter()]
        [System.Boolean]
        $browserRequireHighSecurityForRestrictedSites,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidWorkProfileCustomConfiguration,

        [Parameter()]
        [System.Boolean]
        $appStoreRequirePassword,

        [Parameter()]
        [System.String]
        $developerUnlockSetting,

        [Parameter()]
        [System.Boolean]
        $passcodeBlockModification,

        [Parameter()]
        [System.Boolean]
        $appsBlockYouTube,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockCrossProfileContactsSearch,

        [Parameter()]
        [System.Object[]]
        $appsHideList,

        [Parameter()]
        [System.DateTimeOffset]
        $qualityUpdatesPauseExpiryDateTime,

        [Parameter()]
        [System.Object[]]
        $networkUsageRules,

        [Parameter()]
        [System.Boolean]
        $wiFiConnectOnlyToConfiguredNetworks,

        [Parameter()]
        [System.Boolean]
        $cellularBlockDataRoaming,

        [Parameter()]
        [System.Boolean]
        $safariRequireFraudWarning,

        [Parameter()]
        [System.Boolean]
        $disableSignInOnResume,

        [Parameter()]
        [System.Int32]
        $firewallIdleTimeoutForSecurityAssociationInSeconds,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowRingerSwitch,

        [Parameter()]
        [System.Boolean]
        $qualityUpdatesPaused,

        [Parameter()]
        [System.Boolean]
        $webBrowserBlockPopups,

        [Parameter()]
        [System.Boolean]
        $edgeBlockSendingDoNotTrackHeader,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlockAdvertising,

        [Parameter()]
        [System.Object[]]
        $homeScreenPages,

        [Parameter()]
        [System.Boolean]
        $browserBlockJavaScript,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockWelcomeExperience,

        [Parameter()]
        [System.Boolean]
        $cellularBlockVpn,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderPictures,

        [Parameter()]
        [System.Boolean]
        $safariBlockAutofill,

        [Parameter()]
        [System.DateTimeOffset]
        $featureUpdatesPauseExpiryDateTime,

        [Parameter()]
        [System.String]
        $safariCookieSettings,

        [Parameter()]
        [System.Boolean]
        $accountsBlockAddingNonMicrosoftAccountEmail,

        [Parameter()]
        [System.String]
        $windowsSpotlightConfigureOnLockScreen,

        [Parameter()]
        [System.String]
        $kioskModeAppStoreUrl,

        [Parameter()]
        [System.Int32]
        $passwordExpirationDays,

        [Parameter()]
        [System.Object]
        $mediaContentRatingIreland,

        [Parameter()]
        [System.Boolean]
        $voiceDialingBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsDefenderAdvancedThreatProtectionConfiguration,

        [Parameter()]
        [System.Boolean]
        $iBooksStoreBlocked,

        [Parameter()]
        [System.Boolean]
        $cellularBlockPersonalHotspot,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10EndpointProtectionConfiguration,

        [Parameter()]
        [System.Boolean]
        $wiFiBlockManualConfiguration,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockWindowsTips,

        [Parameter()]
        [System.String]
        $payloadFileName,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinutesOfInactivityBeforeScreenTimeout,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockCrossProfileCallerId,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowVoiceOverSettings,

        [Parameter()]
        [System.Boolean]
        $settingsBlockAppsPage,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockToastNotifications,

        [Parameter()]
        [System.Boolean]
        $disableEduPolicies,

        [Parameter()]
        [System.Boolean]
        $internetSharingBlocked,

        [Parameter()]
        [System.Boolean]
        $iBooksStoreBlockErotica,

        [Parameter()]
        [System.Int32]
        $passcodeMinimumLength,

        [Parameter()]
        [System.Boolean]
        $defenderScanRemovableDrivesDuringFullScan,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlocked,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlockModification,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinSymbolCharacters,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10SecureAssessmentConfiguration,

        [Parameter()]
        [System.Boolean]
        $wirelessDisplayRequirePinForPairing,

        [Parameter()]
        [System.Boolean]
        $edgeBlockCompatibilityList,

        [Parameter()]
        [System.Boolean]
        $gamingBlockMultiplayer,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockControlCenter,

        [Parameter()]
        [System.Boolean]
        $sharedUserAppDataAllowed,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsUpdateForBusinessConfiguration,

        [Parameter()]
        [System.Boolean]
        $webBrowserBlockAutofill,

        [Parameter()]
        [System.Boolean]
        $defenderScanScriptsLoadedInInternetExplorer,

        [Parameter()]
        [System.Boolean]
        $settingsBlockAddProvisioningPackage,

        [Parameter()]
        [System.Boolean]
        $searchEnableAutomaticIndexSizeManangement,

        [Parameter()]
        [System.Boolean]
        $tenantLockdownRequireNetworkDuringOutOfBoxExperience,

        [Parameter()]
        [System.Boolean]
        $microsoftUpdateServiceAllowed,

        [Parameter()]
        [System.Object]
        $mediaContentRatingGermany,

        [Parameter()]
        [System.String]
        $kioskAppUserModelId,

        [Parameter()]
        [System.Boolean]
        $defenderScanIncomingMail,

        [Parameter()]
        [System.Boolean]
        $windowsStoreBlockAutoUpdate,

        [Parameter()]
        [System.Boolean]
        $settingsBlockChangePowerSleep,

        [Parameter()]
        [System.String[]]
        $defenderFilesAndFoldersToExclude,

        [Parameter()]
        [System.Boolean]
        $wifiBlocked,

        [Parameter()]
        [System.Object[]]
        $userStatuses,

        [Parameter()]
        [System.Boolean]
        $deviceBlockEnableRestrictions,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Boolean]
        $allowTextSuggestion,

        [Parameter()]
        [System.Boolean]
        $featureUpdatesPaused,

        [Parameter()]
        [System.Boolean]
        $defenderRequireBehaviorMonitoring,

        [Parameter()]
        [System.String]
        $allowedAccounts,

        [Parameter()]
        [System.Boolean]
        $settingsBlockSessionResume,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockTodayView,

        [Parameter()]
        [System.Boolean]
        $connectAppBlockAutoLaunch,

        [Parameter()]
        [System.Boolean]
        $startMenuHideSwitchAccount,

        [Parameter()]
        [System.Boolean]
        $documentsBlockUnmanagedDocumentsInManagedApps,

        [Parameter()]
        [System.Boolean]
        $workProfileBluetoothEnableContactSharing,

        [Parameter()]
        [System.Object[]]
        $omaSettings,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowAssistiveSpeak,

        [Parameter()]
        [System.Boolean]
        $antiTheftModeBlocked,

        [Parameter()]
        [System.Boolean]
        $safariBlockPopups,

        [Parameter()]
        [System.Boolean]
        $edgeSendIntranetTrafficToInternetExplorer,

        [Parameter()]
        [System.Boolean]
        $logonBlockFastUserSwitching,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockDictation,

        [Parameter()]
        [System.Boolean]
        $airPlayForcePairingPasswordForOutgoingRequests,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowVolumeButtons,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows81GeneralConfiguration,

        [Parameter()]
        [System.Boolean]
        $iTunesBlockRadio,

        [Parameter()]
        [System.Boolean]
        $defenderRequireRealTimeMonitoring,

        [Parameter()]
        [System.Boolean]
        $certificatesBlockManualRootCertificateInstallation,

        [Parameter()]
        [System.Boolean]
        $allowSampleSharing,

        [Parameter()]
        [System.Boolean]
        $welcomeScreenBlockAutomaticWakeUp,

        [Parameter()]
        [System.Boolean]
        $privacyBlockInputPersonalization,

        [Parameter()]
        [System.String]
        $welcomeScreenMeetingInformation,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderDocuments,

        [Parameter()]
        [System.String]
        $firewallCertificateRevocationListCheckMethod,

        [Parameter()]
        [System.String]
        $workFoldersUrl,

        [Parameter()]
        [System.Boolean]
        $deviceManagementBlockManualUnenroll,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlockPrePairing,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSGeneralDeviceConfiguration,

        [Parameter()]
        [System.Boolean]
        $storageRequireRemovableStorageEncryption,

        [Parameter()]
        [System.String]
        $defenderScanType,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowZoomSettings,

        [Parameter()]
        [System.Boolean]
        $findMyFriendsBlocked,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinNumericCharacters,

        [Parameter()]
        [System.String]
        $kioskModeManagedAppId,

        [Parameter()]
        [System.Boolean]
        $safariBlocked,

        [Parameter()]
        [System.Boolean]
        $edgeAllowStartPagesModification,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $editionUpgradeConfiguration,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockScreenCapture,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderFileExplorer,

        [Parameter()]
        [System.String[]]
        $safariPasswordAutoFillDomains,

        [Parameter()]
        [System.Boolean]
        $edgeBlockExtensions,

        [Parameter()]
        [System.Boolean]
        $windowsStoreBlocked,

        [Parameter()]
        [System.Boolean]
        $settingsBlockSystemPage,

        [Parameter()]
        [System.String]
        $personalizationLockScreenImageUrl,

        [Parameter()]
        [System.Boolean]
        $diagnosticDataBlockSubmission,

        [Parameter()]
        [System.Boolean]
        $searchDisableAutoLanguageDetection,

        [Parameter()]
        [System.Boolean]
        $defenderBlockEndUserAccess,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinimumLength,

        [Parameter()]
        [System.Boolean]
        $edgeBlockSearchSuggestions,

        [Parameter()]
        [System.Boolean]
        $siriBlockedWhenLocked,

        [Parameter()]
        [System.Boolean]
        $bitLockerEnableStorageCardEncryptionOnMobile,

        [Parameter()]
        [System.String]
        $lockScreenFootnote,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10CustomConfiguration,

        [Parameter()]
        [System.Boolean]
        $wirelessDisplayBlockUserInputFromReceiver,

        [Parameter()]
        [System.Boolean]
        $edgeClearBrowsingDataOnExit,

        [Parameter()]
        [System.Int32]
        $settingsScreenTimeoutInMinutes,

        [Parameter()]
        [System.String]
        $personalizationDesktopImageUrl,

        [Parameter()]
        [System.Int32]
        $defenderSignatureUpdateIntervalInHours,

        [Parameter()]
        [System.Boolean]
        $experienceBlockTaskSwitcher,

        [Parameter()]
        [System.Boolean]
        $passwordBlockSimple,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowScreenRotation,

        [Parameter()]
        [System.Object]
        $bitLockerRemovableDrivePolicy,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireColorInversion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidGeneralDeviceConfiguration,

        [Parameter()]
        [System.String]
        $azureOperationalInsightsWorkspaceKey,

        [Parameter()]
        [System.Boolean]
        $iTunesBlockMusicService,

        [Parameter()]
        [System.Int32]
        $utcTimeOffsetInMinutes,

        [Parameter()]
        [System.Object]
        $defenderDetectedMalwareActions,

        [Parameter()]
        [System.Boolean]
        $defenderSecurityCenterBlockExploitProtectionOverride,

        [Parameter()]
        [System.Boolean]
        $edgeBlocked,

        [Parameter()]
        [System.TimeSpan]
        $maintenanceStartTime,

        [Parameter()]
        [System.Boolean]
        $edgeBlockPopups,

        [Parameter()]
        [System.Boolean]
        $defenderScanMappedNetworkDrivesDuringFullScan,

        [Parameter()]
        [System.Boolean]
        $passwordBlockTrustAgents,

        [Parameter()]
        [System.Object]
        $mediaContentRatingNewZealand,

        [Parameter()]
        [System.Boolean]
        $nfcBlocked,

        [Parameter()]
        [System.Boolean]
        $deviceManagementBlockFactoryResetOnMobile,

        [Parameter()]
        [System.String]
        $configurationAccount,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordPreviousPasswordBlockCount,

        [Parameter()]
        [System.Boolean]
        $workProfilePasswordBlockFingerprintUnlock,

        [Parameter()]
        [System.Int32]
        $passcodeExpirationDays,

        [Parameter()]
        [System.Boolean]
        $diagnosticDataBlockSubmissionModification,

        [Parameter()]
        [System.Boolean]
        $gamingBlockGameCenterFriends,

        [Parameter()]
        [System.Boolean]
        $defenderRequireNetworkInspectionSystem,

        [Parameter()]
        [System.Boolean]
        $cellularBlockDataWhenRoaming,

        [Parameter()]
        [System.Boolean]
        $copyPasteBlocked,

        [Parameter()]
        [System.Boolean]
        $enterpriseAppBlockTrustModification,

        [Parameter()]
        [System.Boolean]
        $storageRestrictAppInstallToSystemVolume,

        [Parameter()]
        [System.String]
        $launchUri,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowSleepButton,

        [Parameter()]
        [System.Byte[]]
        $defenderExploitProtectionXml,

        [Parameter()]
        [System.Boolean]
        $wallpaperBlockModification,

        [Parameter()]
        [System.Int32]
        $passcodeMinutesOfInactivityBeforeScreenTimeout,

        [Parameter()]
        [System.Boolean]
        $iTunesBlockExplicitContent,

        [Parameter()]
        [System.Boolean]
        $voiceRecordingBlocked,

        [Parameter()]
        [System.Object[]]
        $kioskModeApps,

        [Parameter()]
        [System.Boolean]
        $browserBlockPlugins,

        [Parameter()]
        [System.Boolean]
        $passcodeBlockFingerprintModification,

        [Parameter()]
        [System.Boolean]
        $applicationGuardForceAuditing,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSDeviceFeaturesConfiguration,

        [Parameter()]
        [System.Boolean]
        $browserRequireFirewall,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderDownloads,

        [Parameter()]
        [System.Boolean]
        $securityRequireVerifyApps,

        [Parameter()]
        [System.Boolean]
        $enabled,

        [Parameter()]
        [System.Boolean]
        $startMenuHideHibernate,

        [Parameter()]
        [System.Boolean]
        $startMenuHideRestartOptions,

        [Parameter()]
        [System.Boolean]
        $allowLocalStorage,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockAutoCorrect,

        [Parameter()]
        [System.Boolean]
        $applicationGuardEnabled,

        [Parameter()]
        [System.Boolean]
        $firewallMergeKeyingModuleSettings,

        [Parameter()]
        [System.Boolean]
        $browserBlockSendingDoNotTrackHeader,

        [Parameter()]
        [System.Boolean]
        $settingsBlockGamingPage,

        [Parameter()]
        [System.Boolean]
        $screenCaptureBlocked,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderSettings,

        [Parameter()]
        [System.Boolean]
        $siriBlocked,

        [Parameter()]
        [System.String]
        $appLockerApplicationControl,

        [Parameter()]
        [System.Boolean]
        $kioskModeBlockVolumeButtons,

        [Parameter()]
        [System.Boolean]
        $settingsBlockPrivacyPage,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockSpellCheck,

        [Parameter()]
        [System.Boolean]
        $passcodeRequired,

        [Parameter()]
        [System.Boolean]
        $cameraBlocked,

        [Parameter()]
        [System.String]
        $businessReadyUpdatesOnly,

        [Parameter()]
        [System.Boolean]
        $webBrowserBlocked,

        [Parameter()]
        [System.Int32]
        $idleTimeBeforeSleepInSeconds,

        [Parameter()]
        [System.String]
        $applicationGuardBlockClipboardSharing,

        [Parameter()]
        [System.Int32]
        $featureUpdatesDeferralPeriodInDays,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Boolean]
        $startBlockUnpinningAppsFromTaskbar,

        [Parameter()]
        [System.String]
        $azureOperationalInsightsWorkspaceId,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderNetwork,

        [Parameter()]
        [System.Boolean]
        $lockScreenAllowTimeoutConfiguration,

        [Parameter()]
        [System.String[]]
        $edgeHomepageUrls,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowAssistiveTouchSettings,

        [Parameter()]
        [System.String]
        $startMenuAppListVisibility,

        [Parameter()]
        [System.Boolean]
        $cellularBlockPerAppDataModification,

        [Parameter()]
        [System.Boolean]
        $browserBlockAutofill,

        [Parameter()]
        [System.Boolean]
        $edgeBlockSendingIntranetTrafficToInternetExplorer,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordExpirationDays,

        [Parameter()]
        [System.Boolean]
        $startMenuHidePowerButton,

        [Parameter()]
        [System.Boolean]
        $settingsBlockEditDeviceName,

        [Parameter()]
        [System.Boolean]
        $startMenuHideSignOut,

        [Parameter()]
        [System.Boolean]
        $privacyAutoAcceptPairingAndConsentPrompts,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockCortana,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10GeneralConfiguration,

        [Parameter()]
        [System.Boolean]
        $settingsBlockEaseOfAccessPage,

        [Parameter()]
        [System.Boolean]
        $driversExcluded,

        [Parameter()]
        [System.Int32]
        $qualityUpdatesDeferralPeriodInDays,

        [Parameter()]
        [System.Boolean]
        $settingsBlockDevicesPage,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockCamera,

        [Parameter()]
        [System.Object]
        $firewallProfileDomain,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockBackup,

        [Parameter()]
        [System.String]
        $passcodeRequiredType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10EnterpriseModernAppManagementConfiguration,

        [Parameter()]
        [System.Boolean]
        $accountBlockModification,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $sharedPCConfiguration,

        [Parameter()]
        [System.Boolean]
        $edgeDisableFirstRunPage,

        [Parameter()]
        [System.Object[]]
        $homeScreenDockIcons,

        [Parameter()]
        [System.Boolean]
        $notificationsBlockSettingsModification,

        [Parameter()]
        [System.Boolean]
        $firewallIPSecExemptionsAllowICMP,

        [Parameter()]
        [System.Int32]
        $passcodeMinimumCharacterSetCount,

        [Parameter()]
        [System.Object]
        $firewallProfilePrivate,

        [Parameter()]
        [System.String[]]
        $emailInDomainSuffixes,

        [Parameter()]
        [System.Boolean]
        $appleWatchBlockPairing,

        [Parameter()]
        [System.String]
        $diagnosticsDataSubmissionMode,

        [Parameter()]
        [System.Boolean]
        $smartScreenEnableAppInstallControl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsPhone81CustomConfiguration,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintResourceIdentifier,

        [Parameter()]
        [System.String[]]
        $scheduledInstallDays,

        [Parameter()]
        [System.String]
        $edgeCookiePolicy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosCustomConfiguration,

        [Parameter()]
        [System.TimeSpan]
        $defenderScheduledQuickScanTime,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireVoiceOver,

        [Parameter()]
        [System.Boolean]
        $appsBlockWindowsStoreOriginatedApps,

        [Parameter()]
        [System.Int32]
        $passwordMinimumCharacterSetCount,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockAddingAccounts,

        [Parameter()]
        [System.Boolean]
        $passcodeBlockFingerprintUnlock,

        [Parameter()]
        [System.Boolean]
        $defenderRequireCloudProtection,

        [Parameter()]
        [System.Boolean]
        $azureOperationalInsightsBlockTelemetry,

        [Parameter()]
        [System.String[]]
        $defenderAdditionalGuardedFolders,

        [Parameter()]
        [System.String]
        $defenderPromptForSampleSubmission,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockManagedAppsSync,

        [Parameter()]
        [System.String]
        $targetEdition,

        [Parameter()]
        [System.Boolean]
        $configurationProfileBlockChanges,

        [Parameter()]
        [System.Boolean]
        $faceTimeBlocked,

        [Parameter()]
        [System.Boolean]
        $smartScreenBlockOverrideForFiles,

        [Parameter()]
        [System.Object[]]
        $notificationSettings,

        [Parameter()]
        [System.Boolean]
        $startMenuHideUserTile,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockNotificationsWhileDeviceLocked,

        [Parameter()]
        [System.String[]]
        $defenderAttackSurfaceReductionExcludedPaths,

        [Parameter()]
        [System.Int32]
        $defenderDaysBeforeDeletingQuarantinedMalware,

        [Parameter()]
        [System.Boolean]
        $wifiBlockAutomaticConnectHotspots,

        [Parameter()]
        [System.Object]
        $accountManagerPolicy,

        [Parameter()]
        [System.TimeSpan]
        $maintenanceWindowStartTime,

        [Parameter()]
        [System.String]
        $defenderSystemScanSchedule,

        [Parameter()]
        [System.Boolean]
        $browserBlockAutomaticDetectionOfIntranetSites,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPrintToXPS,

        [Parameter()]
        [System.Boolean]
        $appsBlockClipboardSharing,

        [Parameter()]
        [System.String[]]
        $safariManagedDomains,

        [Parameter()]
        [System.Boolean]
        $storageBlockRemovableStorage,

        [Parameter()]
        [System.Boolean]
        $siriBlockUserGeneratedContent,

        [Parameter()]
        [System.Boolean]
        $cellularBlockWifiTethering,

        [Parameter()]
        [System.Boolean]
        $startMenuHideLock,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSCustomConfiguration,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintOAuthAuthority,

        [Parameter()]
        [System.String]
        $edgeEnterpriseModeSiteListLocation,

        [Parameter()]
        [System.String]
        $kioskModeBuiltInAppId,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinLowerCaseCharacters,

        [Parameter()]
        [System.Boolean]
        $podcastsBlocked,

        [Parameter()]
        [System.Object[]]
        $deviceSettingStateSummaries,

        [Parameter()]
        [System.Boolean]
        $storageBlockGoogleBackup,

        [Parameter()]
        [System.Boolean]
        $settingsBlockMyMeetingsAndFiles,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockActivityContinuation,

        [Parameter()]
        [System.Boolean]
        $firewallIPSecExemptionsAllowNeighborDiscovery,

        [Parameter()]
        [System.String]
        $workProfileDefaultAppPermissionPolicy,

        [Parameter()]
        [System.Object]
        $userStatusOverview,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockDocumentSync,

        [Parameter()]
        [System.Boolean]
        $safariBlockJavaScript,

        [Parameter()]
        [System.TimeSpan]
        $defenderScheduledScanTime,

        [Parameter()]
        [System.Boolean]
        $gameDvrBlocked,

        [Parameter()]
        [System.Boolean]
        $voiceAssistantBlocked,

        [Parameter()]
        [System.Boolean]
        $searchDisableIndexerBackoff,

        [Parameter()]
        [System.Object[]]
        $compliantAppsList,

        [Parameter()]
        [System.Boolean]
        $googleAccountBlockAutoSync,

        [Parameter()]
        [System.Boolean]
        $passwordBlockPicturePasswordAndPin,

        [Parameter()]
        [System.Boolean]
        $settingsBlockPersonalizationPage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosDeviceFeaturesConfiguration,

        [Parameter()]
        [System.Boolean]
        $usbBlocked,

        [Parameter()]
        [System.Boolean]
        $firewallBlockStatefulFTP,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockTailoredExperiences,

        [Parameter()]
        [System.String[]]
        $defenderFileExtensionsToExclude,

        [Parameter()]
        [System.Boolean]
        $searchDisableIndexingEncryptedItems,

        [Parameter()]
        [System.TimeSpan]
        $activeHoursStart,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinLetterCharacters,

        [Parameter()]
        [System.Boolean]
        $webRtcBlockLocalhostIpAddress,

        [Parameter()]
        [System.Boolean]
        $browserRequireSmartScreen,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowColorInversionSettings,

        [Parameter()]
        [System.Boolean]
        $passcodeBlockSimple,

        [Parameter()]
        [System.Object]
        $mediaContentRatingFrance,

        [Parameter()]
        [System.Boolean]
        $emailBlockAddingAccounts,

        [Parameter()]
        [System.String]
        $applicationGuardBlockFileTransfer,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintDiscoveryEndPoint,

        [Parameter()]
        [System.Boolean]
        $allowPrinting,

        [Parameter()]
        [System.Boolean]
        $settingsBlockChangeRegion,

        [Parameter()]
        [System.Boolean]
        $edgeSyncFavoritesWithInternetExplorer,

        [Parameter()]
        [System.Boolean]
        $settingsBlockAccountsPage,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPrintToNetworkPrinters,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireAssistiveTouch,

        [Parameter()]
        [System.Boolean]
        $cellularBlockGlobalBackgroundFetchWhileRoaming,

        [Parameter()]
        [System.Boolean]
        $storageRequireEncryption,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderVideos,

        [Parameter()]
        [System.String]
        $browserTrustedSitesSecurityLevel,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.Boolean]
        $microsoftAccountBlocked,

        [Parameter()]
        [System.Boolean]
        $edgeBlockPasswordManager,

        [Parameter()]
        [System.String]
        $payloadName,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlocked,

        [Parameter()]
        [System.String]
        $workProfileDataSharingType,

        [Parameter()]
        [System.Boolean]
        $experienceBlockDeviceDiscovery,

        [Parameter()]
        [System.String]
        $browserEnterpriseModeSiteListLocation,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderHomeGroup,

        [Parameter()]
        [System.Object]
        $mediaContentRatingAustralia,

        [Parameter()]
        [System.Object]
        $installationSchedule,

        [Parameter()]
        [System.Boolean]
        $enableExpeditedTelemetryReporting,

        [Parameter()]
        [System.String]
        $browserInternetSecurityLevel,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderPersonalFolder,

        [Parameter()]
        [System.String]
        $compliantAppListType,

        [Parameter()]
        [System.Boolean]
        $smartScreenBlockPromptOverride,

        [Parameter()]
        [System.Boolean]
        $cellularBlockVpnWhenRoaming,

        [Parameter()]
        [System.Boolean]
        $startMenuHideShutDown,

        [Parameter()]
        [System.Boolean]
        $appsBlockCopyPaste,

        [Parameter()]
        [System.Int32]
        $passwordPreviousPasswordBlockCount,

        [Parameter()]
        [System.Boolean]
        $airDropForceUnmanagedDropTarget,

        [Parameter()]
        [System.Int32]
        $passcodeSignInFailureCountBeforeWipe,

        [Parameter()]
        [System.String[]]
        $bluetoothAllowedServices,

        [Parameter()]
        [System.Object[]]
        $appsInstallAllowList,

        [Parameter()]
        [System.Object]
        $deviceStatusOverview,

        [Parameter()]
        [System.Boolean]
        $browserRequireFraudWarning,

        [Parameter()]
        [System.Boolean]
        $defenderScanArchiveFiles,

        [Parameter()]
        [System.Boolean]
        $browserBlockPopups,

        [Parameter()]
        [System.Boolean]
        $startMenuHideSleep,

        [Parameter()]
        [System.String]
        $firewallPacketQueueingMethod,

        [Parameter()]
        [System.Boolean]
        $appStoreBlocked,

        [Parameter()]
        [System.Boolean]
        $siriRequireProfanityFilter,

        [Parameter()]
        [System.Object]
        $networkProxyServer,

        [Parameter()]
        [System.Object[]]
        $appsVisibilityList,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockActionCenterNotifications,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireZoom,

        [Parameter()]
        [System.String]
        $webBrowserCookieSettings,

        [Parameter()]
        [System.Boolean]
        $browserBlockEnterpriseModeAccess,

        [Parameter()]
        [System.Int32]
        $settingsSessionTimeoutInMinutes,

        [Parameter()]
        [System.String]
        $mediaContentRatingApps,

        [Parameter()]
        [System.Object]
        $mediaContentRatingUnitedKingdom,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidWorkProfileGeneralDeviceConfiguration,

        [Parameter()]
        [System.Boolean]
        $edgeRequireSmartScreen,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $maintenanceWindowBlocked,

        [Parameter()]
        [System.Boolean]
        $gameCenterBlocked,

        [Parameter()]
        [System.Int32]
        $lockScreenTimeoutInSeconds,

        [Parameter()]
        [System.Boolean]
        $cortanaBlocked,

        [Parameter()]
        [System.Boolean]
        $defenderScanDownloads,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPrintToPDF,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderMusic,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinUpperCaseCharacters,

        [Parameter()]
        [System.String]
        $workProfilePasswordRequiredType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosGeneralDeviceConfiguration,

        [Parameter()]
        [System.Boolean]
        $webBrowserBlockJavaScript,

        [Parameter()]
        [System.Object]
        $mediaContentRatingCanada,

        [Parameter()]
        [System.Int32]
        $passcodePreviousPasscodeBlockCount,

        [Parameter()]
        [System.Boolean]
        $classroomAppBlockRemoteScreenObservation,

        [Parameter()]
        [System.Boolean]
        $deviceBlockNameModification,

        [Parameter()]
        [System.String]
        $browserIntranetSecurityLevel,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlockDiscoverableMode,

        [Parameter()]
        [System.String]
        $startMenuMode,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $automaticUpdateMode,

        [Parameter()]
        [System.Boolean]
        $enterpriseAppBlockTrust,

        [Parameter()]
        [System.Boolean]
        $workProfilePasswordBlockTrustAgents,

        [Parameter()]
        [System.Boolean]
        $diagnosticsBlockDataSubmission,

        [Parameter()]
        [System.Boolean]
        $cellularBlockMessaging,

        [Parameter()]
        [System.Boolean]
        $disableAccountManager,

        [Parameter()]
        [System.Boolean]
        $appStoreBlockAutomaticDownloads
    )
}
function New-DeviceManagement_DeviceConfigurations_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $target
    )
}
function New-DeviceManagement_DeviceConfigurations_DeviceSettingStateSummaries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.String]
        $settingName,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.String]
        $instancePath,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function New-DeviceManagement_DeviceConfigurations_DeviceStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $deviceModel,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.String]
        $deviceDisplayName,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime
    )
}
function New-DeviceManagement_DeviceConfigurations_DeviceStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.Int32]
        $failedCount,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime
    )
}
function New-DeviceManagement_DeviceConfigurations_UserStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $devicesCount,

        [Parameter()]
        [System.String]
        $status
    )
}
function New-DeviceManagement_DeviceConfigurations_UserStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.Int32]
        $failedCount,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime
    )
}
function New-DeviceManagement_DeviceEnrollmentConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Boolean]
        $unlockWithBiometricsEnabled,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object]
        $windowsRestriction,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceEnrollmentPlatformRestrictionsConfiguration,

        [Parameter()]
        [System.Boolean]
        $remotePassportEnabled,

        [Parameter()]
        [System.Boolean]
        $securityDeviceRequired,

        [Parameter()]
        [System.Int32]
        $pinPreviousBlockCount,

        [Parameter()]
        [System.Int32]
        $priority,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceEnrollmentLimitConfiguration,

        [Parameter()]
        [System.Object]
        $androidRestriction,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.Object]
        $windowsMobileRestriction,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.Object]
        $macOSRestriction,

        [Parameter()]
        [System.Int32]
        $pinExpirationInDays,

        [Parameter()]
        [System.Int32]
        $pinMaximumLength,

        [Parameter()]
        [System.String]
        $pinLowercaseCharactersUsage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceEnrollmentWindowsHelloForBusinessConfiguration,

        [Parameter()]
        [System.Int32]
        $pinMinimumLength,

        [Parameter()]
        [System.String]
        $pinSpecialCharactersUsage,

        [Parameter()]
        [System.String]
        $pinUppercaseCharactersUsage,

        [Parameter()]
        [System.Int32]
        $limit,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $iosRestriction,

        [Parameter()]
        [System.String]
        $enhancedBiometricsState
    )
}
function New-DeviceManagement_DeviceEnrollmentConfigurations_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $deviceEnrollmentConfigurationId
    )
}
function New-DeviceManagement_DeviceManagementPartners
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $whenPartnerDevicesWillBeMarkedAsNonCompliantDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.DateTimeOffset]
        $whenPartnerDevicesWillBeRemovedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $partnerState,

        [Parameter()]
        [System.Boolean]
        $isConfigured,

        [Parameter()]
        [System.String]
        $singleTenantAppId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastHeartbeatDateTime,

        [Parameter()]
        [System.String]
        $partnerAppType
    )
}
function New-DeviceManagement_ExchangeConnectors
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $exchangeAlias,

        [Parameter()]
        [System.String]
        $serverName,

        [Parameter()]
        [System.String]
        $exchangeConnectorType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $primarySmtpAddress,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $exchangeOrganization,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.String]
        $connectorServerName
    )
}
function New-DeviceManagement_IosUpdateStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $installStatus,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime,

        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.String]
        $deviceModel,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.String]
        $deviceDisplayName,

        [Parameter()]
        [System.String]
        $deviceId
    )
}
function New-DeviceManagement_ManagedDeviceOverviewReference
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceOverviewReferenceUrl
    )
}
function New-DeviceManagement_ManagedDevices
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $deviceCompliancePolicyStates,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime,

        [Parameter()]
        [System.String]
        $deviceCategoryDisplayName,

        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.String]
        $managementAgent,

        [Parameter()]
        [System.String]
        $complianceState,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.Boolean]
        $isEncrypted,

        [Parameter()]
        [System.String]
        $model,

        [Parameter()]
        [System.Int64]
        $freeStorageSpaceInBytes,

        [Parameter()]
        [System.String]
        $partnerReportedThreatState,

        [Parameter()]
        [System.String]
        $emailAddress,

        [Parameter()]
        [System.DateTimeOffset]
        $enrolledDateTime,

        [Parameter()]
        [System.Int64]
        $totalStorageSpaceInBytes,

        [Parameter()]
        [System.String]
        $deviceRegistrationState,

        [Parameter()]
        [System.String]
        $activationLockBypassCode,

        [Parameter()]
        [System.String]
        $exchangeAccessState,

        [Parameter()]
        [System.String]
        $exchangeAccessStateReason,

        [Parameter()]
        [System.String]
        $operatingSystem,

        [Parameter()]
        [System.String]
        $meid,

        [Parameter()]
        [System.String]
        $serialNumber,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $deviceEnrollmentType,

        [Parameter()]
        [System.Object]
        $deviceCategory,

        [Parameter()]
        [System.Boolean]
        $easActivated,

        [Parameter()]
        [System.Object]
        $deviceHealthAttestationState,

        [Parameter()]
        [System.String]
        $easDeviceId,

        [Parameter()]
        [System.Boolean]
        $isSupervised,

        [Parameter()]
        [System.Object[]]
        $deviceConfigurationStates,

        [Parameter()]
        [System.String]
        $imei,

        [Parameter()]
        [System.String]
        $managedDeviceName,

        [Parameter()]
        [System.String]
        $androidSecurityPatchLevel,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $manufacturer,

        [Parameter()]
        [System.DateTimeOffset]
        $easActivationDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $exchangeLastSuccessfulSyncDateTime,

        [Parameter()]
        [System.String]
        $managedDeviceOwnerType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $azureADDeviceId,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.Boolean]
        $azureADRegistered,

        [Parameter()]
        [System.String]
        $phoneNumber,

        [Parameter()]
        [System.Object[]]
        $deviceActionResults,

        [Parameter()]
        [System.String]
        $remoteAssistanceSessionErrorDetails,

        [Parameter()]
        [System.Object]
        $configurationManagerClientEnabledFeatures,

        [Parameter()]
        [System.String]
        $subscriberCarrier,

        [Parameter()]
        [System.String]
        $remoteAssistanceSessionUrl,

        [Parameter()]
        [System.String]
        $wiFiMacAddress,

        [Parameter()]
        [System.String]
        $jailBroken
    )
}
function New-DeviceManagement_ManagedDevices_DeviceCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-DeviceManagement_ManagedDevices_DeviceCompliancePolicyStates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $settingStates,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String]
        $platformType,

        [Parameter()]
        [System.Int32]
        $settingCount,

        [Parameter()]
        [System.String]
        $state
    )
}
function New-DeviceManagement_ManagedDevices_DeviceConfigurationStates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $settingStates,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String]
        $platformType,

        [Parameter()]
        [System.Int32]
        $settingCount,

        [Parameter()]
        [System.String]
        $state
    )
}
function New-DeviceManagement_MobileThreatDefenseConnectors
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Boolean]
        $iosDeviceBlockedOnMissingPartnerData,

        [Parameter()]
        [System.DateTimeOffset]
        $lastHeartbeatDateTime,

        [Parameter()]
        [System.String]
        $partnerState,

        [Parameter()]
        [System.Boolean]
        $iosEnabled,

        [Parameter()]
        [System.Boolean]
        $androidDeviceBlockedOnMissingPartnerData,

        [Parameter()]
        [System.Boolean]
        $partnerUnsupportedOsVersionBlocked,

        [Parameter()]
        [System.Boolean]
        $androidEnabled,

        [Parameter()]
        [System.Int32]
        $partnerUnresponsivenessThresholdInDays
    )
}
function New-DeviceManagement_NotificationMessageTemplates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $defaultLocale,

        [Parameter()]
        [System.String]
        $brandingOptions,

        [Parameter()]
        [System.Object[]]
        $localizedNotificationMessages
    )
}
function New-DeviceManagement_NotificationMessageTemplates_LocalizedNotificationMessages
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $notificationMessageTemplateId,

        [Parameter()]
        [System.String]
        $subject,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $locale,

        [Parameter()]
        [System.String]
        $messageTemplate,

        [Parameter()]
        [System.Boolean]
        $isDefault
    )
}
function New-DeviceManagement_RemoteAssistancePartners
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastConnectionDateTime,

        [Parameter()]
        [System.String]
        $onboardingStatus,

        [Parameter()]
        [System.String]
        $onboardingUrl
    )
}
function New-DeviceManagement_ResourceOperations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $actionName,

        [Parameter()]
        [System.String]
        $resourceName,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-DeviceManagement_RoleAssignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String[]]
        $members,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String[]]
        $resourceScopes,

        [Parameter()]
        [System.Object]
        $roleDefinition
    )
}
function New-DeviceManagement_RoleAssignments_RoleDefinitionReference
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $roleAssignmentODataType,

        [Parameter()]
        [System.String]
        $roleDefinitionReferenceUrl,

        [Parameter()]
        [System.String]
        $deviceAndAppManagementRoleAssignmentId
    )
}
function New-DeviceManagement_RoleDefinitions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $isBuiltIn,

        [Parameter()]
        [System.Object[]]
        $rolePermissions,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceAndAppManagementRoleDefinition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $roleDefinition,

        [Parameter()]
        [System.Object[]]
        $roleAssignments
    )
}
function New-DeviceManagement_RoleDefinitions_RoleAssignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String[]]
        $members,

        [Parameter()]
        [System.String[]]
        $resourceScopes,

        [Parameter()]
        [System.Object]
        $roleDefinition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceAndAppManagementRoleAssignment,

        [Parameter()]
        [System.String]
        $roleDefinitionId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $roleAssignment,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-DeviceManagement_RoleDefinitions_RoleAssignments_RoleDefinitionReference
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $roleDefinitionReferenceUrl,

        [Parameter()]
        [System.String]
        $roleDefinitionId,

        [Parameter()]
        [System.String]
        $roleAssignmentId
    )
}
function New-DeviceManagement_SoftwareUpdateStatusSummaryReference
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $softwareUpdateStatusSummaryReferenceUrl
    )
}
function New-DeviceManagement_TelecomExpenseManagementPartners
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $appAuthorized,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastConnectionDateTime,

        [Parameter()]
        [System.String]
        $url,

        [Parameter()]
        [System.Boolean]
        $enabled
    )
}
function New-DeviceManagement_TermsAndConditions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $acceptanceStatement,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $title,

        [Parameter()]
        [System.Object[]]
        $acceptanceStatuses,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.String]
        $bodyText
    )
}
function New-DeviceManagement_TermsAndConditions_AcceptanceStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $acceptedVersion,

        [Parameter()]
        [System.Object]
        $termsAndConditions,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.String]
        $termsAndConditionId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $acceptedDateTime
    )
}
function New-DeviceManagement_TermsAndConditions_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $termsAndConditionId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $target
    )
}
function New-DeviceManagement_TroubleshootingEvents
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $operatingSystem,

        [Parameter()]
        [System.DateTimeOffset]
        $eventDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $enrollmentTroubleshootingEvent,

        [Parameter()]
        [System.String]
        $failureCategory,

        [Parameter()]
        [System.String]
        $enrollmentType,

        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.String]
        $failureReason,

        [Parameter()]
        [System.String]
        $correlationId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceManagementTroubleshootingEvent,

        [Parameter()]
        [System.String]
        $deviceId,

        [Parameter()]
        [System.String]
        $managedDeviceIdentifier
    )
}
function New-DeviceManagement_WindowsInformationProtectionAppLearningSummaries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $applicationName,

        [Parameter()]
        [System.Int32]
        $deviceCount,

        [Parameter()]
        [System.String]
        $applicationType,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-DeviceManagement_WindowsInformationProtectionNetworkLearningSummaries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $deviceCount,

        [Parameter()]
        [System.String]
        $url
    )
}
function New-DeviceManagementExchangeConnectorObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $exchangeAlias,

        [Parameter()]
        [System.String]
        $exchangeConnectorType,

        [Parameter()]
        [System.String]
        $serverName,

        [Parameter()]
        [System.String]
        $primarySmtpAddress,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $exchangeOrganization,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.String]
        $connectorServerName
    )
}
function New-DeviceManagementObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $deviceCategories,

        [Parameter()]
        [System.Object]
        $applePushNotificationCertificate,

        [Parameter()]
        [System.Object[]]
        $deviceManagementPartners,

        [Parameter()]
        [System.Object[]]
        $termsAndConditions,

        [Parameter()]
        [System.Object]
        $settings,

        [Parameter()]
        [System.Object[]]
        $windowsInformationProtectionNetworkLearningSummaries,

        [Parameter()]
        [System.String]
        $subscriptionState,

        [Parameter()]
        [System.Object]
        $deviceCompliancePolicyDeviceStateSummary,

        [Parameter()]
        [System.Object]
        $intuneBrand,

        [Parameter()]
        [System.Object[]]
        $troubleshootingEvents,

        [Parameter()]
        [System.Object]
        $deviceConfigurationDeviceStateSummaries,

        [Parameter()]
        [System.Object[]]
        $roleDefinitions,

        [Parameter()]
        [System.Object[]]
        $telecomExpenseManagementPartners,

        [Parameter()]
        [System.Object]
        $managedDeviceOverview,

        [Parameter()]
        [System.Object]
        $softwareUpdateStatusSummary,

        [Parameter()]
        [System.Object[]]
        $managedDevices,

        [Parameter()]
        [System.Object[]]
        $notificationMessageTemplates,

        [Parameter()]
        [System.Object[]]
        $roleAssignments,

        [Parameter()]
        [System.Object[]]
        $resourceOperations,

        [Parameter()]
        [System.Object[]]
        $deviceCompliancePolicies,

        [Parameter()]
        [System.Object[]]
        $windowsInformationProtectionAppLearningSummaries,

        [Parameter()]
        [System.Object[]]
        $remoteAssistancePartners,

        [Parameter()]
        [System.Object[]]
        $exchangeConnectors,

        [Parameter()]
        [System.Object[]]
        $iosUpdateStatuses,

        [Parameter()]
        [System.Object[]]
        $mobileThreatDefenseConnectors,

        [Parameter()]
        [System.Object]
        $conditionalAccessSettings,

        [Parameter()]
        [System.Object[]]
        $deviceConfigurations,

        [Parameter()]
        [System.Object[]]
        $detectedApps,

        [Parameter()]
        [System.Object[]]
        $deviceEnrollmentConfigurations,

        [Parameter()]
        [System.Object[]]
        $deviceCompliancePolicySettingStateSummaries
    )
}
function New-DeviceManagementPartnerObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $whenPartnerDevicesWillBeMarkedAsNonCompliantDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.DateTimeOffset]
        $whenPartnerDevicesWillBeRemovedDateTime,

        [Parameter()]
        [System.String]
        $singleTenantAppId,

        [Parameter()]
        [System.String]
        $partnerState,

        [Parameter()]
        [System.Boolean]
        $isConfigured,

        [Parameter()]
        [System.DateTimeOffset]
        $lastHeartbeatDateTime,

        [Parameter()]
        [System.String]
        $partnerAppType
    )
}
function New-DeviceManagementSettingsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $isScheduledActionEnabled,

        [Parameter()]
        [System.Boolean]
        $secureByDefault,

        [Parameter()]
        [System.Int32]
        $deviceComplianceCheckinThresholdDays
    )
}
function New-DeviceManagementTroubleshootingEventObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $operatingSystem,

        [Parameter()]
        [System.DateTimeOffset]
        $eventDateTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $enrollmentTroubleshootingEvent,

        [Parameter()]
        [System.String]
        $failureCategory,

        [Parameter()]
        [System.String]
        $enrollmentType,

        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.String]
        $failureReason,

        [Parameter()]
        [System.String]
        $correlationId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceManagementTroubleshootingEvent,

        [Parameter()]
        [System.String]
        $deviceId,

        [Parameter()]
        [System.String]
        $managedDeviceIdentifier
    )
}
function New-DeviceOperatingSystemSummaryObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $macOSCount,

        [Parameter()]
        [System.Int32]
        $unknownCount,

        [Parameter()]
        [System.Int32]
        $windowsMobileCount,

        [Parameter()]
        [System.Int32]
        $androidCount,

        [Parameter()]
        [System.Int32]
        $windowsCount,

        [Parameter()]
        [System.Int32]
        $iosCount
    )
}
function New-DiagnosticObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $message,

        [Parameter()]
        [System.String]
        $url
    )
}
function New-DirectoryAuditObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $activityDateTime,

        [Parameter()]
        [System.String]
        $resultReason,

        [Parameter()]
        [System.String]
        $activityDisplayName,

        [Parameter()]
        [System.String]
        $operationType,

        [Parameter()]
        [System.Object[]]
        $additionalDetails,

        [Parameter()]
        [System.String]
        $result,

        [Parameter()]
        [System.Object[]]
        $targetResources,

        [Parameter()]
        [System.String]
        $loggedByService,

        [Parameter()]
        [System.String]
        $category,

        [Parameter()]
        [System.String]
        $correlationId,

        [Parameter()]
        [System.Object]
        $initiatedBy
    )
}
function New-DirectoryObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $deletedItems
    )
}
function New-DirectoryObjectObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $values
    )
}
function New-DomainDnsRecordObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $domainDnsTxtRecord,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $domainDnsCnameRecord,

        [Parameter()]
        [System.String]
        $recordType,

        [Parameter()]
        [System.String]
        $protocol,

        [Parameter()]
        [System.String]
        $service,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $domainDnsMxRecord,

        [Parameter()]
        [System.Int32]
        $priority,

        [Parameter()]
        [System.String]
        $supportedService,

        [Parameter()]
        [System.String]
        $canonicalName,

        [Parameter()]
        [System.String]
        $mailExchange,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $domainDnsSrvRecord,

        [Parameter()]
        [System.Int32]
        $port,

        [Parameter()]
        [System.Int32]
        $preference,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $domainDnsUnavailableRecord,

        [Parameter()]
        [System.String]
        $nameTarget,

        [Parameter()]
        [System.Boolean]
        $isOptional,

        [Parameter()]
        [System.String]
        $text,

        [Parameter()]
        [System.Int32]
        $weight,

        [Parameter()]
        [System.Int32]
        $ttl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $domainDnsRecord,

        [Parameter()]
        [System.String]
        $label
    )
}
function New-DomainObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $isDefault,

        [Parameter()]
        [System.Boolean]
        $isInitial,

        [Parameter()]
        [System.Boolean]
        $isRoot,

        [Parameter()]
        [System.Object[]]
        $domainNameReferences,

        [Parameter()]
        [System.Boolean]
        $isVerified,

        [Parameter()]
        [System.String]
        $authenticationType,

        [Parameter()]
        [System.Object[]]
        $serviceConfigurationRecords,

        [Parameter()]
        [System.Boolean]
        $isAdminManaged,

        [Parameter()]
        [System.Object[]]
        $verificationDnsRecords,

        [Parameter()]
        [System.Int32]
        $passwordValidityPeriodInDays,

        [Parameter()]
        [System.String]
        $availabilityStatus,

        [Parameter()]
        [System.Object]
        $state,

        [Parameter()]
        [System.String[]]
        $supportedServices,

        [Parameter()]
        [System.Int32]
        $passwordNotificationWindowInDays
    )
}
function New-DomainStateObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $operation,

        [Parameter()]
        [System.DateTimeOffset]
        $lastActionDateTime,

        [Parameter()]
        [System.String]
        $status
    )
}
function New-DriveItemUploadablePropertiesObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.Object]
        $fileSystemInfo
    )
}
function New-DriveRecipientObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $alias,

        [Parameter()]
        [System.String]
        $objectId,

        [Parameter()]
        [System.String]
        $email
    )
}
function New-EBookInstallSummaryObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notInstalledDeviceCount,

        [Parameter()]
        [System.Int32]
        $failedUserCount,

        [Parameter()]
        [System.Int32]
        $installedUserCount,

        [Parameter()]
        [System.Int32]
        $failedDeviceCount,

        [Parameter()]
        [System.Int32]
        $installedDeviceCount,

        [Parameter()]
        [System.Int32]
        $notInstalledUserCount
    )
}
function New-EdgeSearchEngineBaseObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $edgeSearchEngineType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $edgeSearchEngine,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $edgeSearchEngineCustom,

        [Parameter()]
        [System.String]
        $edgeSearchEngineOpenSearchXmlUrl
    )
}
function New-EducationClassObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Object[]]
        $teachers,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $members,

        [Parameter()]
        [System.Object[]]
        $schools,

        [Parameter()]
        [System.String]
        $externalSource,

        [Parameter()]
        [System.String]
        $externalId,

        [Parameter()]
        [System.Object]
        $term,

        [Parameter()]
        [System.String]
        $externalName,

        [Parameter()]
        [System.Object]
        $createdBy,

        [Parameter()]
        [System.Object]
        $group,

        [Parameter()]
        [System.String]
        $mailNickname,

        [Parameter()]
        [System.String]
        $classCode
    )
}
function New-EducationOrganizationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $phone,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $classes,

        [Parameter()]
        [System.String]
        $principalName,

        [Parameter()]
        [System.String]
        $fax,

        [Parameter()]
        [System.String]
        $principalEmail,

        [Parameter()]
        [System.Object]
        $createdBy,

        [Parameter()]
        [System.Object[]]
        $users,

        [Parameter()]
        [System.String]
        $externalPrincipalId,

        [Parameter()]
        [System.String]
        $highestGrade,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $educationSchool,

        [Parameter()]
        [System.String]
        $lowestGrade,

        [Parameter()]
        [System.String]
        $externalId,

        [Parameter()]
        [System.String]
        $schoolNumber,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $externalSource,

        [Parameter()]
        [System.Object]
        $address
    )
}
function New-EducationRootObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $schools,

        [Parameter()]
        [System.Object]
        $me,

        [Parameter()]
        [System.Object[]]
        $classes,

        [Parameter()]
        [System.Object[]]
        $users
    )
}
function New-EducationStudentObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $grade,

        [Parameter()]
        [System.DateTimeOffset]
        $birthDate,

        [Parameter()]
        [System.String]
        $externalId,

        [Parameter()]
        [System.String]
        $studentNumber,

        [Parameter()]
        [System.String]
        $graduationYear,

        [Parameter()]
        [System.String]
        $gender
    )
}
function New-EducationTeacherObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $externalId,

        [Parameter()]
        [System.String]
        $teacherNumber
    )
}
function New-EducationTermObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.DateTimeOffset]
        $endDate,

        [Parameter()]
        [System.String]
        $externalId,

        [Parameter()]
        [System.DateTimeOffset]
        $startDate
    )
}
function New-EducationUserObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $accountEnabled,

        [Parameter()]
        [System.String]
        $mailNickname,

        [Parameter()]
        [System.Boolean]
        $showInAddressList,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $classes,

        [Parameter()]
        [System.Object]
        $residenceAddress,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String[]]
        $businessPhones,

        [Parameter()]
        [System.String]
        $usageLocation,

        [Parameter()]
        [System.String]
        $passwordPolicies,

        [Parameter()]
        [System.String]
        $userType,

        [Parameter()]
        [System.Object]
        $user,

        [Parameter()]
        [System.String]
        $preferredLanguage,

        [Parameter()]
        [System.String]
        $mobilePhone,

        [Parameter()]
        [System.Object]
        $teacher,

        [Parameter()]
        [System.Object]
        $createdBy,

        [Parameter()]
        [System.String]
        $primaryRole,

        [Parameter()]
        [System.Object[]]
        $assignedPlans,

        [Parameter()]
        [System.DateTimeOffset]
        $refreshTokensValidFromDateTime,

        [Parameter()]
        [System.Object[]]
        $assignedLicenses,

        [Parameter()]
        [System.String]
        $middleName,

        [Parameter()]
        [System.String]
        $givenName,

        [Parameter()]
        [System.String]
        $externalSource,

        [Parameter()]
        [System.Object]
        $passwordProfile,

        [Parameter()]
        [System.String]
        $officeLocation,

        [Parameter()]
        [System.String]
        $department,

        [Parameter()]
        [System.Object]
        $mailingAddress,

        [Parameter()]
        [System.Object[]]
        $schools,

        [Parameter()]
        [System.Object[]]
        $provisionedPlans,

        [Parameter()]
        [System.String]
        $surname,

        [Parameter()]
        [System.String]
        $mail,

        [Parameter()]
        [System.Object]
        $student
    )
}
function New-EmailAddressObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.String]
        $address
    )
}
function New-EnrollmentConfigurationAssignmentObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $target
    )
}
function New-EntityObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $values
    )
}
function New-ExtensionObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $extensionName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $openTypeExtension
    )
}
function New-ExtensionSchemaPropertyObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.String]
        $type
    )
}
function New-ExternalLinkObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $href
    )
}
function New-FieldValueSetObject
{
    [CmdletBinding()]
    param(

    )
}
function New-FileEncryptionInfoObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Byte[]]
        $macKey,

        [Parameter()]
        [System.Byte[]]
        $fileDigest,

        [Parameter()]
        [System.Byte[]]
        $initializationVector,

        [Parameter()]
        [System.Byte[]]
        $encryptionKey,

        [Parameter()]
        [System.Byte[]]
        $mac,

        [Parameter()]
        [System.String]
        $profileIdentifier,

        [Parameter()]
        [System.String]
        $fileDigestAlgorithm
    )
}
function New-FileHashObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $hashValue,

        [Parameter()]
        [System.String]
        $hashType
    )
}
function New-FileObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $hashes,

        [Parameter()]
        [System.Boolean]
        $processingMetadata,

        [Parameter()]
        [System.String]
        $mimeType
    )
}
function New-FileSecurityStateObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.Object]
        $fileHash,

        [Parameter()]
        [System.String]
        $riskScore,

        [Parameter()]
        [System.String]
        $path
    )
}
function New-FileSystemInfoObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $lastAccessedDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime
    )
}
function New-FolderObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $childCount,

        [Parameter()]
        [System.Object]
        $view
    )
}
function New-FolderViewObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $sortBy,

        [Parameter()]
        [System.String]
        $sortOrder,

        [Parameter()]
        [System.String]
        $viewType
    )
}
function New-FollowupFlagObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $startDateTime,

        [Parameter()]
        [System.Object]
        $dueDateTime,

        [Parameter()]
        [System.Object]
        $completedDateTime,

        [Parameter()]
        [System.String]
        $flagStatus
    )
}
function New-FreeBusyErrorObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $message,

        [Parameter()]
        [System.String]
        $responseCode
    )
}
function New-GeoCoordinatesObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Double]
        $longitude,

        [Parameter()]
        [System.Double]
        $latitude,

        [Parameter()]
        [System.Double]
        $altitude
    )
}
function New-GroupLifecyclePolicyObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $alternateNotificationEmails,

        [Parameter()]
        [System.String]
        $managedGroupTypes,

        [Parameter()]
        [System.Int32]
        $groupLifetimeInDays
    )
}
function New-Groups
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $photos,

        [Parameter()]
        [System.Object[]]
        $transitiveMemberOf,

        [Parameter()]
        [System.Object[]]
        $groupLifecyclePolicies,

        [Parameter()]
        [System.Int32]
        $unseenCount,

        [Parameter()]
        [System.String]
        $mailNickname,

        [Parameter()]
        [System.Boolean]
        $isSubscribedByMail,

        [Parameter()]
        [System.Object]
        $licenseProcessingState,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $settings,

        [Parameter()]
        [System.Object]
        $createdOnBehalfOf,

        [Parameter()]
        [System.Object[]]
        $membersWithLicenseErrors,

        [Parameter()]
        [System.String]
        $classification,

        [Parameter()]
        [System.DateTimeOffset]
        $renewedDateTime,

        [Parameter()]
        [System.Boolean]
        $isArchived,

        [Parameter()]
        [System.Object[]]
        $onPremisesProvisioningErrors,

        [Parameter()]
        [System.String[]]
        $groupTypes,

        [Parameter()]
        [System.Boolean]
        $autoSubscribeNewMembers,

        [Parameter()]
        [System.Boolean]
        $securityEnabled,

        [Parameter()]
        [System.Object[]]
        $transitiveMembers,

        [Parameter()]
        [System.Object]
        $photo,

        [Parameter()]
        [System.Boolean]
        $allowExternalSenders,

        [Parameter()]
        [System.Object[]]
        $assignedLicenses,

        [Parameter()]
        [System.Boolean]
        $mailEnabled,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Object[]]
        $owners,

        [Parameter()]
        [System.Object[]]
        $memberOf,

        [Parameter()]
        [System.Boolean]
        $hasMembersWithLicenseErrors,

        [Parameter()]
        [System.Object[]]
        $members,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $deletedDateTime,

        [Parameter()]
        [System.String[]]
        $proxyAddresses,

        [Parameter()]
        [System.String]
        $visibility,

        [Parameter()]
        [System.String]
        $mail,

        [Parameter()]
        [System.Boolean]
        $onPremisesSyncEnabled,

        [Parameter()]
        [System.String]
        $preferredDataLocation,

        [Parameter()]
        [System.String]
        $onPremisesSecurityIdentifier,

        [Parameter()]
        [System.DateTimeOffset]
        $onPremisesLastSyncDateTime
    )
}
function New-Groups_CreatedOnBehalfOfReference
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $directoryObjectReferenceUrl,

        [Parameter()]
        [System.String]
        $groupId
    )
}
function New-Groups_GroupLifecyclePolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $alternateNotificationEmails,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $managedGroupTypes,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.Int32]
        $groupLifetimeInDays
    )
}
function New-Groups_MemberOfReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $directoryObjectReferenceUrl,

        [Parameter()]
        [System.String]
        $groupId
    )
}
function New-Groups_MembersReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $directoryObjectReferenceUrl,

        [Parameter()]
        [System.String]
        $groupId
    )
}
function New-Groups_MembersWithLicenseErrorsReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $directoryObjectReferenceUrl,

        [Parameter()]
        [System.String]
        $groupId
    )
}
function New-Groups_OwnersReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $directoryObjectReferenceUrl,

        [Parameter()]
        [System.String]
        $groupId
    )
}
function New-Groups_PhotoData
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $ContentType,

        [Parameter()]
        [System.String]
        $Data
    )
}
function New-Groups_PhotosData
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $ContentType,

        [Parameter()]
        [System.String]
        $Data,

        [Parameter()]
        [System.String]
        $profilePhotoId
    )
}
function New-Groups_Settings
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $values
    )
}
function New-Groups_TransitiveMemberOfReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $directoryObjectReferenceUrl,

        [Parameter()]
        [System.String]
        $groupId
    )
}
function New-Groups_TransitiveMembersReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $directoryObjectReferenceUrl,

        [Parameter()]
        [System.String]
        $groupId
    )
}
function New-GroupSettingObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $values
    )
}
function New-HashesObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $crc32Hash,

        [Parameter()]
        [System.String]
        $quickXorHash,

        [Parameter()]
        [System.String]
        $sha1Hash
    )
}
function New-HostSecurityStateObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $netBiosName,

        [Parameter()]
        [System.Boolean]
        $isAzureAdJoined,

        [Parameter()]
        [System.String]
        $publicIpAddress,

        [Parameter()]
        [System.String]
        $riskScore,

        [Parameter()]
        [System.String]
        $privateIpAddress,

        [Parameter()]
        [System.Boolean]
        $isHybridAzureDomainJoined,

        [Parameter()]
        [System.String]
        $fqdn,

        [Parameter()]
        [System.Boolean]
        $isAzureAdRegistered,

        [Parameter()]
        [System.String]
        $os
    )
}
function New-IdentityObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName
    )
}
function New-IdentityProviderObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $clientId,

        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.String]
        $type,

        [Parameter()]
        [System.String]
        $clientSecret
    )
}
function New-IdentitySetObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $device,

        [Parameter()]
        [System.Object]
        $user,

        [Parameter()]
        [System.Object]
        $application
    )
}
function New-ImageInfoObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $alternateText,

        [Parameter()]
        [System.String]
        $iconUrl,

        [Parameter()]
        [System.String]
        $alternativeText,

        [Parameter()]
        [System.Boolean]
        $addImageQuery
    )
}
function New-ImageObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $height,

        [Parameter()]
        [System.Int32]
        $width
    )
}
function New-IncompleteDataObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $missingDataBeforeDateTime,

        [Parameter()]
        [System.Boolean]
        $wasThrottled
    )
}
function New-InferenceClassificationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $overrides
    )
}
function New-InferenceClassificationOverrideObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $senderEmailAddress,

        [Parameter()]
        [System.String]
        $classifyAs
    )
}
function New-InsightIdentityObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $address
    )
}
function New-InternetMessageHeaderObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $value,

        [Parameter()]
        [System.String]
        $name
    )
}
function New-IntuneBrandObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $privacyUrl,

        [Parameter()]
        [System.Object]
        $darkBackgroundLogo,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object]
        $lightBackgroundLogo,

        [Parameter()]
        [System.String]
        $onlineSupportSiteName,

        [Parameter()]
        [System.String]
        $onlineSupportSiteUrl,

        [Parameter()]
        [System.String]
        $contactITNotes,

        [Parameter()]
        [System.String]
        $contactITPhoneNumber,

        [Parameter()]
        [System.String]
        $contactITEmailAddress,

        [Parameter()]
        [System.String]
        $contactITName,

        [Parameter()]
        [System.Object]
        $themeColor,

        [Parameter()]
        [System.Boolean]
        $showDisplayNameNextToLogo,

        [Parameter()]
        [System.Boolean]
        $showNameNextToLogo,

        [Parameter()]
        [System.Boolean]
        $showLogo
    )
}
function New-InvitationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $inviteRedeemUrl,

        [Parameter()]
        [System.String]
        $invitedUserDisplayName,

        [Parameter()]
        [System.Boolean]
        $sendInvitationMessage,

        [Parameter()]
        [System.Object]
        $invitedUserMessageInfo,

        [Parameter()]
        [System.String]
        $invitedUserEmailAddress,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.Object]
        $invitedUser,

        [Parameter()]
        [System.String]
        $inviteRedirectUrl,

        [Parameter()]
        [System.String]
        $invitedUserType
    )
}
function New-InvitedUserMessageInfoObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $customizedMessageBody,

        [Parameter()]
        [System.Object[]]
        $ccRecipients,

        [Parameter()]
        [System.String]
        $messageLanguage
    )
}
function New-IosDeviceTypeObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $iPad,

        [Parameter()]
        [System.Boolean]
        $iPhoneAndIPod
    )
}
function New-IosHomeScreenFolderPageObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $apps
    )
}
function New-IosHomeScreenItemObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosHomeScreenApp,

        [Parameter()]
        [System.Object[]]
        $pages,

        [Parameter()]
        [System.String]
        $bundleID,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosHomeScreenFolder
    )
}
function New-IosHomeScreenPageObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $icons
    )
}
function New-IosMinimumOperatingSystemObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $v10_0,

        [Parameter()]
        [System.Boolean]
        $v9_0,

        [Parameter()]
        [System.Boolean]
        $v11_0,

        [Parameter()]
        [System.Boolean]
        $v12_0,

        [Parameter()]
        [System.Boolean]
        $v8_0
    )
}
function New-IosNetworkUsageRuleObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $cellularDataBlockWhenRoaming,

        [Parameter()]
        [System.Boolean]
        $cellularDataBlocked,

        [Parameter()]
        [System.Object[]]
        $managedApps
    )
}
function New-IosNotificationSettingsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $showInNotificationCenter,

        [Parameter()]
        [System.Boolean]
        $showOnLockScreen,

        [Parameter()]
        [System.String]
        $alertType,

        [Parameter()]
        [System.Boolean]
        $soundsEnabled,

        [Parameter()]
        [System.String]
        $publisher,

        [Parameter()]
        [System.Boolean]
        $badgesEnabled,

        [Parameter()]
        [System.String]
        $appName,

        [Parameter()]
        [System.String]
        $bundleID,

        [Parameter()]
        [System.Boolean]
        $enabled
    )
}
function New-IosUpdateDeviceStatusObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $installStatus,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.String]
        $deviceModel,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.String]
        $deviceDisplayName,

        [Parameter()]
        [System.String]
        $deviceId
    )
}
function New-IpRangeObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iPv6Range,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iPv4Range,

        [Parameter()]
        [System.String]
        $lowerAddress,

        [Parameter()]
        [System.String]
        $upperAddress
    )
}
function New-ItemActionStatObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $actorCount,

        [Parameter()]
        [System.Int32]
        $actionCount
    )
}
function New-ItemActivityObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $activityDateTime,

        [Parameter()]
        [System.Object]
        $actor,

        [Parameter()]
        [System.Object]
        $access,

        [Parameter()]
        [System.Object]
        $driveItem
    )
}
function New-ItemActivityStatObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $startDateTime,

        [Parameter()]
        [System.Object]
        $delete,

        [Parameter()]
        [System.Object[]]
        $activities,

        [Parameter()]
        [System.Object]
        $move,

        [Parameter()]
        [System.Boolean]
        $isTrending,

        [Parameter()]
        [System.Object]
        $edit,

        [Parameter()]
        [System.Object]
        $create,

        [Parameter()]
        [System.DateTimeOffset]
        $endDateTime,

        [Parameter()]
        [System.Object]
        $access,

        [Parameter()]
        [System.Object]
        $incompleteData
    )
}
function New-ItemAnalyticsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $allTime,

        [Parameter()]
        [System.Object[]]
        $itemActivityStats,

        [Parameter()]
        [System.Object]
        $lastSevenDays
    )
}
function New-ItemBodyObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $content,

        [Parameter()]
        [System.String]
        $contentType
    )
}
function New-ItemPreviewInfoObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $postParameters,

        [Parameter()]
        [System.String]
        $postUrl,

        [Parameter()]
        [System.String]
        $getUrl
    )
}
function New-ItemReferenceObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.String]
        $driveId,

        [Parameter()]
        [System.String]
        $siteId,

        [Parameter()]
        [System.String]
        $shareId,

        [Parameter()]
        [System.String]
        $driveType,

        [Parameter()]
        [System.Object]
        $sharepointIds,

        [Parameter()]
        [System.String]
        $path
    )
}
function New-JsonObject
{
    [CmdletBinding()]
    param(

    )
}
function New-KeyValueObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $value,

        [Parameter()]
        [System.String]
        $key
    )
}
function New-KeyValuePairObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $value,

        [Parameter()]
        [System.String]
        $name
    )
}
function New-LicenseAssignmentStateObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Guid[]]
        $disabledPlans,

        [Parameter()]
        [System.String]
        $assignedByGroup,

        [Parameter()]
        [System.String]
        $error,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.Guid]
        $skuId
    )
}
function New-LicenseDetailsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $skuPartNumber,

        [Parameter()]
        [System.Guid]
        $skuId,

        [Parameter()]
        [System.Object[]]
        $servicePlans
    )
}
function New-LicenseProcessingStateObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $state
    )
}
function New-LicenseUnitsDetailObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $warning,

        [Parameter()]
        [System.Int32]
        $suspended,

        [Parameter()]
        [System.Int32]
        $enabled
    )
}
function New-ListInfoObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $hidden,

        [Parameter()]
        [System.String]
        $template,

        [Parameter()]
        [System.Boolean]
        $contentTypesEnabled
    )
}
function New-LocaleInfoObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $locale,

        [Parameter()]
        [System.String]
        $displayName
    )
}
function New-LocalizedNotificationMessageObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $subject,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $locale,

        [Parameter()]
        [System.String]
        $messageTemplate,

        [Parameter()]
        [System.Boolean]
        $isDefault
    )
}
function New-LocationConstraintObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $isRequired,

        [Parameter()]
        [System.Boolean]
        $suggestLocation,

        [Parameter()]
        [System.Object[]]
        $locations
    )
}
function New-LocationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $resolveAvailability,

        [Parameter()]
        [System.String]
        $locationType,

        [Parameter()]
        [System.String]
        $uniqueIdType,

        [Parameter()]
        [System.String]
        $locationEmailAddress,

        [Parameter()]
        [System.Object]
        $address,

        [Parameter()]
        [System.String]
        $uniqueId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $locationConstraintItem,

        [Parameter()]
        [System.String]
        $locationUri,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $location,

        [Parameter()]
        [System.Object]
        $coordinates
    )
}
function New-LookupColumnObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $columnName,

        [Parameter()]
        [System.Boolean]
        $allowMultipleValues,

        [Parameter()]
        [System.String]
        $listId,

        [Parameter()]
        [System.String]
        $primaryLookupColumnId,

        [Parameter()]
        [System.Boolean]
        $allowUnlimitedLength
    )
}
function New-MailboxSettingsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $workingHours,

        [Parameter()]
        [System.String]
        $timeZone,

        [Parameter()]
        [System.String]
        $archiveFolder,

        [Parameter()]
        [System.Object]
        $automaticRepliesSetting,

        [Parameter()]
        [System.Object]
        $language
    )
}
function New-MailFolderObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $singleValueExtendedProperties,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $multiValueExtendedProperties,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $mailSearchFolder,

        [Parameter()]
        [System.Object[]]
        $messages,

        [Parameter()]
        [System.Object[]]
        $messageRules,

        [Parameter()]
        [System.Int32]
        $totalItemCount,

        [Parameter()]
        [System.Object[]]
        $childFolders,

        [Parameter()]
        [System.String[]]
        $sourceFolderIds,

        [Parameter()]
        [System.Int32]
        $unreadItemCount,

        [Parameter()]
        [System.Int32]
        $childFolderCount,

        [Parameter()]
        [System.String]
        $filterQuery,

        [Parameter()]
        [System.String]
        $parentFolderId,

        [Parameter()]
        [System.Boolean]
        $isSupported,

        [Parameter()]
        [System.Boolean]
        $includeNestedFolders,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $mailFolder
    )
}
function New-MailTipsErrorObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $message,

        [Parameter()]
        [System.String]
        $code
    )
}
function New-MailTipsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $maxMessageSize,

        [Parameter()]
        [System.Object[]]
        $recipientSuggestions,

        [Parameter()]
        [System.Int32]
        $externalMemberCount,

        [Parameter()]
        [System.Object]
        $emailAddress,

        [Parameter()]
        [System.Boolean]
        $mailboxFull,

        [Parameter()]
        [System.String]
        $customMailTip,

        [Parameter()]
        [System.Boolean]
        $isModerated,

        [Parameter()]
        [System.Object]
        $automaticReplies,

        [Parameter()]
        [System.Object]
        $error,

        [Parameter()]
        [System.Boolean]
        $deliveryRestricted,

        [Parameter()]
        [System.Int32]
        $totalMemberCount,

        [Parameter()]
        [System.String]
        $recipientScope
    )
}
function New-MalwareStateObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.String]
        $severity,

        [Parameter()]
        [System.String]
        $category,

        [Parameter()]
        [System.Boolean]
        $wasRunning,

        [Parameter()]
        [System.String]
        $family
    )
}
function New-ManagedAppDiagnosticStatusObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mitigationInstruction,

        [Parameter()]
        [System.String]
        $validationName,

        [Parameter()]
        [System.String]
        $state
    )
}
function New-ManagedAppOperationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $state
    )
}
function New-ManagedAppPolicyDeploymentSummaryObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp
    )
}
function New-ManagedAppPolicyDeploymentSummaryPerAppObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $configurationAppliedUserCount,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier
    )
}
function New-ManagedAppPolicyObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $enterpriseProxyServers,

        [Parameter()]
        [System.Boolean]
        $fingerprintBlocked,

        [Parameter()]
        [System.Object[]]
        $enterpriseProtectedDomainNames,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosManagedAppProtection,

        [Parameter()]
        [System.Boolean]
        $revokeOnMdmHandoffDisabled,

        [Parameter()]
        [System.String]
        $enforcementLevel,

        [Parameter()]
        [System.String]
        $appDataEncryptionType,

        [Parameter()]
        [System.Object[]]
        $smbAutoEncryptedFileExtensions,

        [Parameter()]
        [System.Boolean]
        $dataBackupBlocked,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.TimeSpan]
        $periodOnlineBeforeAccessCheck,

        [Parameter()]
        [System.String]
        $allowedOutboundClipboardSharingLevel,

        [Parameter()]
        [System.Object[]]
        $customSettings,

        [Parameter()]
        [System.Int32]
        $pinExpirationDays,

        [Parameter()]
        [System.Boolean]
        $contactSyncBlocked,

        [Parameter()]
        [System.Boolean]
        $windowsHelloForBusinessBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $defaultManagedAppProtection,

        [Parameter()]
        [System.String]
        $minimumWarningPatchVersion,

        [Parameter()]
        [System.Int32]
        $numberOfPastPinsRemembered,

        [Parameter()]
        [System.String]
        $enterpriseDomain,

        [Parameter()]
        [System.Boolean]
        $printBlocked,

        [Parameter()]
        [System.Boolean]
        $pinRequired,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.String[]]
        $allowedDataStorageLocations,

        [Parameter()]
        [System.Int32]
        $passwordMaximumAttemptCount,

        [Parameter()]
        [System.Boolean]
        $faceIdBlocked,

        [Parameter()]
        [System.Object[]]
        $enterpriseIPRanges,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $mdmWindowsInformationProtectionPolicy,

        [Parameter()]
        [System.Object[]]
        $exemptAppLockerFiles,

        [Parameter()]
        [System.Boolean]
        $enterpriseIPRangesAreAuthoritative,

        [Parameter()]
        [System.Boolean]
        $deviceComplianceRequired,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeAccessCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $targetedManagedAppConfiguration,

        [Parameter()]
        [System.Boolean]
        $revokeOnUnenrollDisabled,

        [Parameter()]
        [System.Boolean]
        $disableAppEncryptionIfDeviceEncryptionIsEnabled,

        [Parameter()]
        [System.String]
        $minimumWarningAppVersion,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxiedDomains,

        [Parameter()]
        [System.Int32]
        $maximumPinRetries,

        [Parameter()]
        [System.Object[]]
        $enterpriseInternalProxyServers,

        [Parameter()]
        [System.Boolean]
        $encryptAppData,

        [Parameter()]
        [System.Boolean]
        $enterpriseProxyServersAreAuthoritative,

        [Parameter()]
        [System.String]
        $pinSpecialCharacters,

        [Parameter()]
        [System.String]
        $allowedOutboundDataTransferDestinations,

        [Parameter()]
        [System.Boolean]
        $azureRightsManagementServicesAllowed,

        [Parameter()]
        [System.Object[]]
        $protectedApps,

        [Parameter()]
        [System.Boolean]
        $organizationalCredentialsRequired,

        [Parameter()]
        [System.Object[]]
        $protectedAppLockerFiles,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $pinLowercaseLetters,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Int32]
        $minimumPinLength,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidManagedAppProtection,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.String]
        $minimumRequiredSdkVersion,

        [Parameter()]
        [System.Boolean]
        $protectionUnderLockConfigRequired,

        [Parameter()]
        [System.Boolean]
        $simplePinBlocked,

        [Parameter()]
        [System.Boolean]
        $iconsVisible,

        [Parameter()]
        [System.String]
        $minimumRequiredAppVersion,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.Boolean]
        $screenCaptureBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsInformationProtectionPolicy,

        [Parameter()]
        [System.Object[]]
        $enterpriseNetworkDomainNames,

        [Parameter()]
        [System.Object[]]
        $exemptApps,

        [Parameter()]
        [System.String]
        $minimumWarningOsVersion,

        [Parameter()]
        [System.Int32]
        $minutesOfInactivityBeforeDeviceLock,

        [Parameter()]
        [System.Guid]
        $rightsManagementServicesTemplateId,

        [Parameter()]
        [System.Boolean]
        $indexingEncryptedStoresOrItemsBlocked,

        [Parameter()]
        [System.String]
        $mdmEnrollmentUrl,

        [Parameter()]
        [System.Object[]]
        $neutralDomainResources,

        [Parameter()]
        [System.String]
        $pinUppercaseLetters,

        [Parameter()]
        [System.Boolean]
        $saveAsBlocked,

        [Parameter()]
        [System.String]
        $minimumRequiredOsVersion,

        [Parameter()]
        [System.TimeSpan]
        $periodBeforePinReset,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $allowedInboundDataTransferSources,

        [Parameter()]
        [System.Int32]
        $daysWithoutContactBeforeUnenroll,

        [Parameter()]
        [System.Object]
        $dataRecoveryCertificate,

        [Parameter()]
        [System.Boolean]
        $disableAppPinIfDevicePinIsSet,

        [Parameter()]
        [System.String]
        $minimumRequiredPatchVersion,

        [Parameter()]
        [System.Int32]
        $pinMinimumLength,

        [Parameter()]
        [System.Boolean]
        $managedBrowserToOpenLinksRequired,

        [Parameter()]
        [System.String]
        $pinCharacterSet,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeWipeIsEnforced
    )
}
function New-ManagedAppRegistrationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $deviceTag,

        [Parameter()]
        [System.String]
        $managementSdkVersion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosManagedAppRegistration,

        [Parameter()]
        [System.Object[]]
        $intendedPolicies,

        [Parameter()]
        [System.String]
        $applicationVersion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidManagedAppRegistration,

        [Parameter()]
        [System.Object[]]
        $appliedPolicies,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $platformVersion,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $deviceType,

        [Parameter()]
        [System.Object[]]
        $operations,

        [Parameter()]
        [System.String[]]
        $flaggedReasons,

        [Parameter()]
        [System.Object]
        $appIdentifier
    )
}
function New-ManagedAppStatusObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Object]
        $content,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedAppStatusRaw
    )
}
function New-ManagedDeviceMobileAppConfigurationAssignmentObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $target
    )
}
function New-ManagedDeviceMobileAppConfigurationDeviceStatusObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $deviceModel,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.String]
        $deviceDisplayName,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime
    )
}
function New-ManagedDeviceMobileAppConfigurationDeviceSummaryObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime,

        [Parameter()]
        [System.Int32]
        $failedCount
    )
}
function New-ManagedDeviceMobileAppConfigurationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Object[]]
        $deviceStatuses,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $userStatuses,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Object]
        $deviceStatusSummary,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosMobileAppConfiguration,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Object[]]
        $settings,

        [Parameter()]
        [System.Byte[]]
        $encodedSettingXml,

        [Parameter()]
        [System.String[]]
        $targetedMobileApps,

        [Parameter()]
        [System.Object]
        $userStatusSummary
    )
}
function New-ManagedDeviceMobileAppConfigurationUserStatusObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.Int32]
        $devicesCount,

        [Parameter()]
        [System.String]
        $status
    )
}
function New-ManagedDeviceMobileAppConfigurationUserSummaryObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime,

        [Parameter()]
        [System.Int32]
        $failedCount
    )
}
function New-ManagedDeviceObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $deviceCompliancePolicyStates,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime,

        [Parameter()]
        [System.String]
        $deviceCategoryDisplayName,

        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.String]
        $complianceState,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.Boolean]
        $isEncrypted,

        [Parameter()]
        [System.String]
        $model,

        [Parameter()]
        [System.Int64]
        $freeStorageSpaceInBytes,

        [Parameter()]
        [System.String]
        $imei,

        [Parameter()]
        [System.String]
        $partnerReportedThreatState,

        [Parameter()]
        [System.String]
        $emailAddress,

        [Parameter()]
        [System.DateTimeOffset]
        $enrolledDateTime,

        [Parameter()]
        [System.Int64]
        $totalStorageSpaceInBytes,

        [Parameter()]
        [System.String]
        $deviceRegistrationState,

        [Parameter()]
        [System.String]
        $activationLockBypassCode,

        [Parameter()]
        [System.String]
        $exchangeAccessStateReason,

        [Parameter()]
        [System.String]
        $operatingSystem,

        [Parameter()]
        [System.String]
        $meid,

        [Parameter()]
        [System.String]
        $serialNumber,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $deviceEnrollmentType,

        [Parameter()]
        [System.Object]
        $deviceCategory,

        [Parameter()]
        [System.Boolean]
        $easActivated,

        [Parameter()]
        [System.Object]
        $deviceHealthAttestationState,

        [Parameter()]
        [System.String]
        $easDeviceId,

        [Parameter()]
        [System.Boolean]
        $isSupervised,

        [Parameter()]
        [System.Object[]]
        $deviceConfigurationStates,

        [Parameter()]
        [System.String]
        $managedDeviceName,

        [Parameter()]
        [System.String]
        $androidSecurityPatchLevel,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $manufacturer,

        [Parameter()]
        [System.String]
        $azureADDeviceId,

        [Parameter()]
        [System.DateTimeOffset]
        $easActivationDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $exchangeLastSuccessfulSyncDateTime,

        [Parameter()]
        [System.String]
        $managedDeviceOwnerType,

        [Parameter()]
        [System.String]
        $exchangeAccessState,

        [Parameter()]
        [System.Boolean]
        $azureADRegistered,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.String]
        $managementAgent,

        [Parameter()]
        [System.String]
        $phoneNumber,

        [Parameter()]
        [System.Object[]]
        $deviceActionResults,

        [Parameter()]
        [System.String]
        $remoteAssistanceSessionErrorDetails,

        [Parameter()]
        [System.Object]
        $configurationManagerClientEnabledFeatures,

        [Parameter()]
        [System.String]
        $subscriberCarrier,

        [Parameter()]
        [System.String]
        $remoteAssistanceSessionUrl,

        [Parameter()]
        [System.String]
        $wiFiMacAddress,

        [Parameter()]
        [System.String]
        $jailBroken
    )
}
function New-ManagedDeviceOverviewObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $deviceOperatingSystemSummary,

        [Parameter()]
        [System.Int32]
        $mdmEnrolledCount,

        [Parameter()]
        [System.Int32]
        $dualEnrolledDeviceCount,

        [Parameter()]
        [System.Object]
        $deviceExchangeAccessStateSummary,

        [Parameter()]
        [System.Int32]
        $enrolledDeviceCount
    )
}
function New-ManagedEBookAssignmentObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $installIntent,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosVppEBookAssignment,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedEBookAssignment,

        [Parameter()]
        [System.Object]
        $target
    )
}
function New-ManagedEBookObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $deviceStates,

        [Parameter()]
        [System.Int32]
        $totalLicenseCount,

        [Parameter()]
        [System.Guid]
        $vppTokenId,

        [Parameter()]
        [System.String]
        $seller,

        [Parameter()]
        [System.String]
        $vppOrganizationName,

        [Parameter()]
        [System.Object]
        $largeCover,

        [Parameter()]
        [System.String[]]
        $genres,

        [Parameter()]
        [System.Object]
        $installSummary,

        [Parameter()]
        [System.Int32]
        $usedLicenseCount,

        [Parameter()]
        [System.String]
        $privacyInformationUrl,

        [Parameter()]
        [System.DateTimeOffset]
        $publishedDateTime,

        [Parameter()]
        [System.String]
        $appleId,

        [Parameter()]
        [System.Object[]]
        $userStateSummary,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosVppEBook,

        [Parameter()]
        [System.String]
        $language,

        [Parameter()]
        [System.String]
        $publisher,

        [Parameter()]
        [System.String]
        $informationUrl
    )
}
function New-ManagedMobileAppObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier
    )
}
function New-MediaContentRatingAustraliaObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $tvRating,

        [Parameter()]
        [System.String]
        $movieRating
    )
}
function New-MediaContentRatingCanadaObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $tvRating,

        [Parameter()]
        [System.String]
        $movieRating
    )
}
function New-MediaContentRatingFranceObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $tvRating,

        [Parameter()]
        [System.String]
        $movieRating
    )
}
function New-MediaContentRatingGermanyObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $tvRating,

        [Parameter()]
        [System.String]
        $movieRating
    )
}
function New-MediaContentRatingIrelandObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $tvRating,

        [Parameter()]
        [System.String]
        $movieRating
    )
}
function New-MediaContentRatingJapanObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $tvRating,

        [Parameter()]
        [System.String]
        $movieRating
    )
}
function New-MediaContentRatingNewZealandObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $tvRating,

        [Parameter()]
        [System.String]
        $movieRating
    )
}
function New-MediaContentRatingUnitedKingdomObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $tvRating,

        [Parameter()]
        [System.String]
        $movieRating
    )
}
function New-MediaContentRatingUnitedStatesObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $tvRating,

        [Parameter()]
        [System.String]
        $movieRating
    )
}
function New-MeetingTimeSuggestionObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $organizerAvailability,

        [Parameter()]
        [System.Object]
        $meetingTimeSlot,

        [Parameter()]
        [System.String]
        $suggestionReason,

        [Parameter()]
        [System.Double]
        $confidence,

        [Parameter()]
        [System.Int32]
        $order,

        [Parameter()]
        [System.Object[]]
        $attendeeAvailability,

        [Parameter()]
        [System.Object[]]
        $locations
    )
}
function New-MeetingTimeSuggestionsResultObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $emptySuggestionsReason,

        [Parameter()]
        [System.Object[]]
        $meetingTimeSuggestions
    )
}
function New-MessageRuleActionsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $redirectTo,

        [Parameter()]
        [System.Boolean]
        $stopProcessingRules,

        [Parameter()]
        [System.String]
        $copyToFolder,

        [Parameter()]
        [System.Boolean]
        $permanentDelete,

        [Parameter()]
        [System.String]
        $markImportance,

        [Parameter()]
        [System.Boolean]
        $delete,

        [Parameter()]
        [System.Object[]]
        $forwardTo,

        [Parameter()]
        [System.String]
        $moveToFolder,

        [Parameter()]
        [System.Boolean]
        $markAsRead,

        [Parameter()]
        [System.Object[]]
        $forwardAsAttachmentTo,

        [Parameter()]
        [System.String[]]
        $assignCategories
    )
}
function New-MessageRuleObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $exceptions,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $isReadOnly,

        [Parameter()]
        [System.Object]
        $actions,

        [Parameter()]
        [System.Boolean]
        $isEnabled,

        [Parameter()]
        [System.Int32]
        $sequence,

        [Parameter()]
        [System.Boolean]
        $hasError,

        [Parameter()]
        [System.Object]
        $conditions
    )
}
function New-MessageRulePredicatesObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $subjectContains,

        [Parameter()]
        [System.Boolean]
        $isSigned,

        [Parameter()]
        [System.Object[]]
        $sentToAddresses,

        [Parameter()]
        [System.Boolean]
        $isAutomaticForward,

        [Parameter()]
        [System.Boolean]
        $isEncrypted,

        [Parameter()]
        [System.Boolean]
        $sentToOrCcMe,

        [Parameter()]
        [System.Boolean]
        $isApprovalRequest,

        [Parameter()]
        [System.String]
        $sensitivity,

        [Parameter()]
        [System.Boolean]
        $isAutomaticReply,

        [Parameter()]
        [System.Boolean]
        $sentToMe,

        [Parameter()]
        [System.Boolean]
        $isPermissionControlled,

        [Parameter()]
        [System.Boolean]
        $isNonDeliveryReport,

        [Parameter()]
        [System.String[]]
        $recipientContains,

        [Parameter()]
        [System.Boolean]
        $isMeetingRequest,

        [Parameter()]
        [System.String[]]
        $headerContains,

        [Parameter()]
        [System.String[]]
        $senderContains,

        [Parameter()]
        [System.Boolean]
        $sentOnlyToMe,

        [Parameter()]
        [System.Boolean]
        $hasAttachments,

        [Parameter()]
        [System.String[]]
        $bodyContains,

        [Parameter()]
        [System.Boolean]
        $notSentToMe,

        [Parameter()]
        [System.String[]]
        $categories,

        [Parameter()]
        [System.Object]
        $withinSizeRange,

        [Parameter()]
        [System.String]
        $importance,

        [Parameter()]
        [System.Boolean]
        $sentCcMe,

        [Parameter()]
        [System.Boolean]
        $isVoicemail,

        [Parameter()]
        [System.String[]]
        $bodyOrSubjectContains,

        [Parameter()]
        [System.String]
        $messageActionFlag,

        [Parameter()]
        [System.Object[]]
        $fromAddresses,

        [Parameter()]
        [System.Boolean]
        $isReadReceipt,

        [Parameter()]
        [System.Boolean]
        $isMeetingResponse
    )
}
function New-MimeContentObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Byte[]]
        $value,

        [Parameter()]
        [System.String]
        $type
    )
}
function New-MobileAppAssignmentObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $intent,

        [Parameter()]
        [System.Object]
        $settings,

        [Parameter()]
        [System.Object]
        $target
    )
}
function New-MobileAppAssignmentSettingsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $useDeviceLicensing,

        [Parameter()]
        [System.Boolean]
        $useDeviceContext,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $microsoftStoreForBusinessAppAssignmentSettings,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosVppAppAssignmentSettings,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosStoreAppAssignmentSettings,

        [Parameter()]
        [System.String]
        $vpnConfigurationId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosLobAppAssignmentSettings
    )
}
function New-MobileAppCategoryObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime
    )
}
function New-MobileAppContentFileObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Boolean]
        $isCommitted,

        [Parameter()]
        [System.DateTimeOffset]
        $azureStorageUriExpirationDateTime,

        [Parameter()]
        [System.Int64]
        $sizeEncrypted,

        [Parameter()]
        [System.Int64]
        $size,

        [Parameter()]
        [System.Byte[]]
        $manifest,

        [Parameter()]
        [System.String]
        $uploadState,

        [Parameter()]
        [System.String]
        $azureStorageUri
    )
}
function New-MobileAppContentObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $files
    )
}
function New-MobileAppIdentifierObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $packageId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosMobileAppIdentifier,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidMobileAppIdentifier,

        [Parameter()]
        [System.String]
        $bundleId
    )
}
function New-MobileAppObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $useManagedBrowser,

        [Parameter()]
        [System.String]
        $versionNumber,

        [Parameter()]
        [System.String]
        $identityPublisherHash,

        [Parameter()]
        [System.String]
        $identityVersion,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosStoreApp,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsUniversalAppX,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosVppApp,

        [Parameter()]
        [System.Int32]
        $totalLicenseCount,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedAndroidStoreApp,

        [Parameter()]
        [System.String]
        $versionName,

        [Parameter()]
        [System.String]
        $appUrl,

        [Parameter()]
        [System.Boolean]
        $isBundle,

        [Parameter()]
        [System.DateTimeOffset]
        $expirationDateTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSOfficeSuiteApp,

        [Parameter()]
        [System.Int64]
        $size,

        [Parameter()]
        [System.String]
        $productKey,

        [Parameter()]
        [System.Object]
        $minimumSupportedOperatingSystem,

        [Parameter()]
        [System.Object]
        $largeIcon,

        [Parameter()]
        [System.Int32]
        $usedLicenseCount,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedAndroidLobApp,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $isFeatured,

        [Parameter()]
        [System.String]
        $fileName,

        [Parameter()]
        [System.String]
        $vppTokenAppleId,

        [Parameter()]
        [System.String]
        $owner,

        [Parameter()]
        [System.String]
        $committedContentVersion,

        [Parameter()]
        [System.Object[]]
        $categories,

        [Parameter()]
        [System.String]
        $informationUrl,

        [Parameter()]
        [System.String]
        $applicableArchitectures,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidLobApp,

        [Parameter()]
        [System.String]
        $notes,

        [Parameter()]
        [System.Boolean]
        $ignoreVersionDetection,

        [Parameter()]
        [System.String]
        $versionCode,

        [Parameter()]
        [System.String]
        $bundleId,

        [Parameter()]
        [System.String]
        $packageId,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $commandLine,

        [Parameter()]
        [System.String]
        $applicableDeviceTypes,

        [Parameter()]
        [System.String]
        $productVersion,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Object[]]
        $contentVersions,

        [Parameter()]
        [System.DateTimeOffset]
        $releaseDateTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidStoreApp,

        [Parameter()]
        [System.Object]
        $licensingType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $microsoftStoreForBusinessApp,

        [Parameter()]
        [System.String]
        $publishingState,

        [Parameter()]
        [System.String]
        $packageIdentityName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedIOSLobApp,

        [Parameter()]
        [System.String]
        $identityResourceIdentifier,

        [Parameter()]
        [System.String]
        $appStoreUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosLobApp,

        [Parameter()]
        [System.String]
        $buildNumber,

        [Parameter()]
        [System.Object]
        $applicableDeviceType,

        [Parameter()]
        [System.String]
        $privacyInformationUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedIOSStoreApp,

        [Parameter()]
        [System.String]
        $licenseType,

        [Parameter()]
        [System.String]
        $appAvailability,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $publisher,

        [Parameter()]
        [System.String]
        $productCode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $webApp,

        [Parameter()]
        [System.String]
        $vppTokenOrganizationName,

        [Parameter()]
        [System.String]
        $identityName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsMobileMSI,

        [Parameter()]
        [System.String]
        $developer,

        [Parameter()]
        [System.String]
        $vppTokenAccountType
    )
}
function New-MobileThreatDefenseConnectorObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $iosDeviceBlockedOnMissingPartnerData,

        [Parameter()]
        [System.DateTimeOffset]
        $lastHeartbeatDateTime,

        [Parameter()]
        [System.Int32]
        $partnerUnresponsivenessThresholdInDays,

        [Parameter()]
        [System.String]
        $partnerState,

        [Parameter()]
        [System.Boolean]
        $iosEnabled,

        [Parameter()]
        [System.Boolean]
        $androidDeviceBlockedOnMissingPartnerData,

        [Parameter()]
        [System.Boolean]
        $partnerUnsupportedOsVersionBlocked,

        [Parameter()]
        [System.Boolean]
        $androidEnabled
    )
}
function New-ModifiedPropertyObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $oldValue,

        [Parameter()]
        [System.String]
        $newValue
    )
}
function New-MultiValueLegacyExtendedPropertyObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $value
    )
}
function New-NetworkConnectionObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $natSourceAddress,

        [Parameter()]
        [System.String]
        $direction,

        [Parameter()]
        [System.String]
        $destinationPort,

        [Parameter()]
        [System.String]
        $sourceAddress,

        [Parameter()]
        [System.String]
        $protocol,

        [Parameter()]
        [System.String]
        $natDestinationPort,

        [Parameter()]
        [System.String]
        $destinationAddress,

        [Parameter()]
        [System.String]
        $natSourcePort,

        [Parameter()]
        [System.String]
        $sourcePort,

        [Parameter()]
        [System.DateTimeOffset]
        $domainRegisteredDateTime,

        [Parameter()]
        [System.String]
        $riskScore,

        [Parameter()]
        [System.String]
        $destinationUrl,

        [Parameter()]
        [System.String]
        $urlParameters,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.String]
        $natDestinationAddress,

        [Parameter()]
        [System.String]
        $localDnsName,

        [Parameter()]
        [System.String]
        $destinationDomain,

        [Parameter()]
        [System.String]
        $applicationName
    )
}
function New-NotebookLinksObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $oneNoteWebUrl,

        [Parameter()]
        [System.Object]
        $oneNoteClientUrl
    )
}
function New-NotificationMessageTemplateObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $localizedNotificationMessages,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $defaultLocale,

        [Parameter()]
        [System.String]
        $brandingOptions
    )
}
function New-NumberColumnObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Double]
        $maximum,

        [Parameter()]
        [System.String]
        $displayAs,

        [Parameter()]
        [System.String]
        $decimalPlaces,

        [Parameter()]
        [System.Double]
        $minimum
    )
}
function New-OfficeGraphInsightsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $trending,

        [Parameter()]
        [System.Object[]]
        $shared,

        [Parameter()]
        [System.Object[]]
        $used
    )
}
function New-OmaSettingObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $omaSettingFloatingPoint,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object]
        $value,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $omaSettingBoolean,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $omaSettingDateTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $omaSettingString,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $omaSettingBase64,

        [Parameter()]
        [System.String]
        $omaUri,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $omaSettingStringXml,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $omaSettingInteger,

        [Parameter()]
        [System.String]
        $fileName
    )
}
function New-OnenoteEntityBaseModelObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $userTags,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $sections,

        [Parameter()]
        [System.String]
        $pagesUrl,

        [Parameter()]
        [System.Object]
        $parentNotebook,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Int32]
        $order,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.IO.Stream]
        $content,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $onenoteResource,

        [Parameter()]
        [System.Object]
        $parentSectionGroup,

        [Parameter()]
        [System.Object[]]
        $sectionGroups,

        [Parameter()]
        [System.Object]
        $parentSection,

        [Parameter()]
        [System.String]
        $contentUrl,

        [Parameter()]
        [System.String]
        $title,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $onenoteSection,

        [Parameter()]
        [System.Object]
        $createdBy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $sectionGroup,

        [Parameter()]
        [System.Object[]]
        $pages,

        [Parameter()]
        [System.Object]
        $lastModifiedBy,

        [Parameter()]
        [System.String]
        $self,

        [Parameter()]
        [System.String]
        $userRole,

        [Parameter()]
        [System.Int32]
        $level,

        [Parameter()]
        [System.String]
        $sectionsUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $onenotePage,

        [Parameter()]
        [System.String]
        $createdByAppId,

        [Parameter()]
        [System.String]
        $sectionGroupsUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $notebook,

        [Parameter()]
        [System.Boolean]
        $isDefault,

        [Parameter()]
        [System.Object]
        $links,

        [Parameter()]
        [System.Boolean]
        $isShared
    )
}
function New-OnenoteObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $sectionGroups,

        [Parameter()]
        [System.Object[]]
        $sections,

        [Parameter()]
        [System.Object[]]
        $resources,

        [Parameter()]
        [System.Object[]]
        $notebooks,

        [Parameter()]
        [System.Object[]]
        $pages,

        [Parameter()]
        [System.Object[]]
        $operations
    )
}
function New-OnenoteOperationErrorObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $message,

        [Parameter()]
        [System.String]
        $code
    )
}
function New-OnenotePagePreviewLinksObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $previewImageUrl
    )
}
function New-OnenotePagePreviewObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $previewText,

        [Parameter()]
        [System.Object]
        $links
    )
}
function New-OnenotePatchContentCommandObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $action,

        [Parameter()]
        [System.String]
        $position,

        [Parameter()]
        [System.String]
        $content,

        [Parameter()]
        [System.String]
        $target
    )
}
function New-OnPremisesConditionalAccessSettingsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Guid[]]
        $includedGroups,

        [Parameter()]
        [System.Guid[]]
        $excludedGroups,

        [Parameter()]
        [System.Boolean]
        $overrideDefaultRule,

        [Parameter()]
        [System.Boolean]
        $enabled
    )
}
function New-OnPremisesExtensionAttributesObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $extensionAttribute1,

        [Parameter()]
        [System.String]
        $extensionAttribute10,

        [Parameter()]
        [System.String]
        $extensionAttribute4,

        [Parameter()]
        [System.String]
        $extensionAttribute14,

        [Parameter()]
        [System.String]
        $extensionAttribute2,

        [Parameter()]
        [System.String]
        $extensionAttribute6,

        [Parameter()]
        [System.String]
        $extensionAttribute13,

        [Parameter()]
        [System.String]
        $extensionAttribute11,

        [Parameter()]
        [System.String]
        $extensionAttribute7,

        [Parameter()]
        [System.String]
        $extensionAttribute12,

        [Parameter()]
        [System.String]
        $extensionAttribute8,

        [Parameter()]
        [System.String]
        $extensionAttribute3,

        [Parameter()]
        [System.String]
        $extensionAttribute9,

        [Parameter()]
        [System.String]
        $extensionAttribute5,

        [Parameter()]
        [System.String]
        $extensionAttribute15
    )
}
function New-OnPremisesProvisioningErrorObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $value,

        [Parameter()]
        [System.String]
        $propertyCausingError,

        [Parameter()]
        [System.DateTimeOffset]
        $occurredDateTime,

        [Parameter()]
        [System.String]
        $category
    )
}
function New-OperationErrorObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $message,

        [Parameter()]
        [System.String]
        $code
    )
}
function New-OperationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $operation,

        [Parameter()]
        [System.String]
        $resourceId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastActionDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $resourceLocation,

        [Parameter()]
        [System.String]
        $percentComplete,

        [Parameter()]
        [System.Object]
        $error,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $onenoteOperation,

        [Parameter()]
        [System.String]
        $status
    )
}
function New-Organization
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $postalCode,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String[]]
        $businessPhones,

        [Parameter()]
        [System.String]
        $street,

        [Parameter()]
        [System.String]
        $preferredLanguage,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.String]
        $city,

        [Parameter()]
        [System.String[]]
        $marketingNotificationEmails,

        [Parameter()]
        [System.Object[]]
        $verifiedDomains,

        [Parameter()]
        [System.Object[]]
        $assignedPlans,

        [Parameter()]
        [System.String]
        $mobileDeviceManagementAuthority,

        [Parameter()]
        [System.String]
        $country,

        [Parameter()]
        [System.String[]]
        $securityComplianceNotificationMails,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $privacyProfile,

        [Parameter()]
        [System.Object[]]
        $extensions,

        [Parameter()]
        [System.DateTimeOffset]
        $deletedDateTime,

        [Parameter()]
        [System.Object[]]
        $provisionedPlans,

        [Parameter()]
        [System.String[]]
        $technicalNotificationMails,

        [Parameter()]
        [System.String]
        $countryLetterCode,

        [Parameter()]
        [System.Boolean]
        $onPremisesSyncEnabled,

        [Parameter()]
        [System.String[]]
        $securityComplianceNotificationPhones,

        [Parameter()]
        [System.DateTimeOffset]
        $onPremisesLastSyncDateTime
    )
}
function New-Organization_Extensions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $extensionName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $openTypeExtension,

        [Parameter()]
        [System.String]
        $organizationId,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-OutlookCategoryObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $color
    )
}
function New-OutlookGeoCoordinatesObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Double]
        $altitudeAccuracy,

        [Parameter()]
        [System.Double]
        $accuracy,

        [Parameter()]
        [System.Double]
        $longitude,

        [Parameter()]
        [System.Double]
        $latitude,

        [Parameter()]
        [System.Double]
        $altitude
    )
}
function New-OutlookItemObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $emailAddresses,

        [Parameter()]
        [System.String]
        $initials,

        [Parameter()]
        [System.Object]
        $event,

        [Parameter()]
        [System.Boolean]
        $isCancelled,

        [Parameter()]
        [System.String]
        $type,

        [Parameter()]
        [System.String]
        $department,

        [Parameter()]
        [System.String]
        $conversationId,

        [Parameter()]
        [System.Boolean]
        $isReadReceiptRequested,

        [Parameter()]
        [System.Object[]]
        $ccRecipients,

        [Parameter()]
        [System.Object]
        $uniqueBody,

        [Parameter()]
        [System.String]
        $businessHomePage,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $post,

        [Parameter()]
        [System.Object]
        $calendar,

        [Parameter()]
        [System.String[]]
        $businessPhones,

        [Parameter()]
        [System.DateTimeOffset]
        $birthday,

        [Parameter()]
        [System.String]
        $inferenceClassification,

        [Parameter()]
        [System.Object]
        $inReplyTo,

        [Parameter()]
        [System.Boolean]
        $isAllDay,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $contact,

        [Parameter()]
        [System.Object]
        $body,

        [Parameter()]
        [System.String]
        $sensitivity,

        [Parameter()]
        [System.String]
        $profession,

        [Parameter()]
        [System.Boolean]
        $isReminderOn,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $eventMessage,

        [Parameter()]
        [System.String]
        $givenName,

        [Parameter()]
        [System.Object]
        $otherAddress,

        [Parameter()]
        [System.String[]]
        $children,

        [Parameter()]
        [System.String]
        $companyName,

        [Parameter()]
        [System.String]
        $originalStartTimeZone,

        [Parameter()]
        [System.String]
        $middleName,

        [Parameter()]
        [System.Object[]]
        $locations,

        [Parameter()]
        [System.DateTimeOffset]
        $originalStart,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $fileAs,

        [Parameter()]
        [System.DateTimeOffset]
        $sentDateTime,

        [Parameter()]
        [System.String]
        $parentFolderId,

        [Parameter()]
        [System.String]
        $originalEndTimeZone,

        [Parameter()]
        [System.Object]
        $start,

        [Parameter()]
        [System.Object[]]
        $singleValueExtendedProperties,

        [Parameter()]
        [System.Object]
        $from,

        [Parameter()]
        [System.String]
        $yomiCompanyName,

        [Parameter()]
        [System.Object[]]
        $bccRecipients,

        [Parameter()]
        [System.String]
        $meetingMessageType,

        [Parameter()]
        [System.String]
        $manager,

        [Parameter()]
        [System.Object[]]
        $newParticipants,

        [Parameter()]
        [System.Object]
        $flag,

        [Parameter()]
        [System.String]
        $yomiSurname,

        [Parameter()]
        [System.DateTimeOffset]
        $receivedDateTime,

        [Parameter()]
        [System.Boolean]
        $hasAttachments,

        [Parameter()]
        [System.String]
        $surname,

        [Parameter()]
        [System.String]
        $title,

        [Parameter()]
        [System.String[]]
        $homePhones,

        [Parameter()]
        [System.String]
        $mobilePhone,

        [Parameter()]
        [System.String]
        $webLink,

        [Parameter()]
        [System.String]
        $onlineMeetingUrl,

        [Parameter()]
        [System.Object[]]
        $multiValueExtendedProperties,

        [Parameter()]
        [System.Object[]]
        $toRecipients,

        [Parameter()]
        [System.String]
        $officeLocation,

        [Parameter()]
        [System.Object]
        $recurrence,

        [Parameter()]
        [System.String]
        $conversationThreadId,

        [Parameter()]
        [System.Int32]
        $reminderMinutesBeforeStart,

        [Parameter()]
        [System.Object[]]
        $extensions,

        [Parameter()]
        [System.String]
        $changeKey,

        [Parameter()]
        [System.Boolean]
        $isOrganizer,

        [Parameter()]
        [System.String]
        $bodyPreview,

        [Parameter()]
        [System.String]
        $assistantName,

        [Parameter()]
        [System.String]
        $yomiGivenName,

        [Parameter()]
        [System.Object]
        $homeAddress,

        [Parameter()]
        [System.String]
        $spouseName,

        [Parameter()]
        [System.String]
        $iCalUId,

        [Parameter()]
        [System.String]
        $jobTitle,

        [Parameter()]
        [System.Boolean]
        $isRead,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $message,

        [Parameter()]
        [System.Object[]]
        $attendees,

        [Parameter()]
        [System.Object]
        $location,

        [Parameter()]
        [System.String[]]
        $categories,

        [Parameter()]
        [System.String]
        $seriesMasterId,

        [Parameter()]
        [System.String]
        $internetMessageId,

        [Parameter()]
        [System.String]
        $importance,

        [Parameter()]
        [System.Object[]]
        $instances,

        [Parameter()]
        [System.Boolean]
        $responseRequested,

        [Parameter()]
        [System.Object]
        $sender,

        [Parameter()]
        [System.String]
        $generation,

        [Parameter()]
        [System.Object[]]
        $replyTo,

        [Parameter()]
        [System.Object]
        $businessAddress,

        [Parameter()]
        [System.String]
        $subject,

        [Parameter()]
        [System.String]
        $showAs,

        [Parameter()]
        [System.Object]
        $organizer,

        [Parameter()]
        [System.Boolean]
        $isDeliveryReceiptRequested,

        [Parameter()]
        [System.String[]]
        $imAddresses,

        [Parameter()]
        [System.Object[]]
        $internetMessageHeaders,

        [Parameter()]
        [System.Object]
        $end,

        [Parameter()]
        [System.Object[]]
        $attachments,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $nickName,

        [Parameter()]
        [System.Object]
        $responseStatus,

        [Parameter()]
        [System.Object]
        $photo,

        [Parameter()]
        [System.String]
        $personalNotes,

        [Parameter()]
        [System.Boolean]
        $isDraft
    )
}
function New-OutlookUserObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $masterCategories
    )
}
function New-PackageObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $type
    )
}
function New-PageLinksObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $oneNoteWebUrl,

        [Parameter()]
        [System.Object]
        $oneNoteClientUrl
    )
}
function New-PasswordProfileObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $password,

        [Parameter()]
        [System.Boolean]
        $forceChangePasswordNextSignIn,

        [Parameter()]
        [System.Boolean]
        $forceChangePasswordNextSignInWithMfa
    )
}
function New-PatternedRecurrenceObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $pattern,

        [Parameter()]
        [System.Object]
        $range
    )
}
function New-PermissionObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $roles,

        [Parameter()]
        [System.Object]
        $invitation,

        [Parameter()]
        [System.Object]
        $inheritedFrom,

        [Parameter()]
        [System.String]
        $shareId,

        [Parameter()]
        [System.Object]
        $grantedTo,

        [Parameter()]
        [System.Object]
        $link
    )
}
function New-PersonObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $department,

        [Parameter()]
        [System.Boolean]
        $isFavorite,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $postalAddresses,

        [Parameter()]
        [System.String]
        $jobTitle,

        [Parameter()]
        [System.String]
        $birthday,

        [Parameter()]
        [System.Object[]]
        $phones,

        [Parameter()]
        [System.String]
        $givenName,

        [Parameter()]
        [System.String]
        $personNotes,

        [Parameter()]
        [System.String]
        $profession,

        [Parameter()]
        [System.String]
        $yomiCompany,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $surname,

        [Parameter()]
        [System.Object]
        $personType,

        [Parameter()]
        [System.String]
        $officeLocation,

        [Parameter()]
        [System.String]
        $imAddress,

        [Parameter()]
        [System.Object[]]
        $websites,

        [Parameter()]
        [System.String]
        $companyName,

        [Parameter()]
        [System.Object[]]
        $scoredEmailAddresses
    )
}
function New-PersonOrGroupColumnObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $allowMultipleSelection,

        [Parameter()]
        [System.String]
        $displayAs,

        [Parameter()]
        [System.String]
        $chooseFromType
    )
}
function New-PersonTypeObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $subclass,

        [Parameter()]
        [System.String]
        $class
    )
}
function New-PhoneObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $number,

        [Parameter()]
        [System.String]
        $type,

        [Parameter()]
        [System.String]
        $language,

        [Parameter()]
        [System.String]
        $region
    )
}
function New-PhotoObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $cameraModel,

        [Parameter()]
        [System.Int32]
        $iso,

        [Parameter()]
        [System.Double]
        $fNumber,

        [Parameter()]
        [System.Double]
        $exposureDenominator,

        [Parameter()]
        [System.Double]
        $focalLength,

        [Parameter()]
        [System.Double]
        $exposureNumerator,

        [Parameter()]
        [System.String]
        $cameraMake,

        [Parameter()]
        [System.DateTimeOffset]
        $takenDateTime
    )
}
function New-PhysicalAddressObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $street,

        [Parameter()]
        [System.String]
        $countryOrRegion,

        [Parameter()]
        [System.String]
        $postalCode,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.String]
        $city
    )
}
function New-PlannerAppliedCategoriesObject
{
    [CmdletBinding()]
    param(

    )
}
function New-PlannerAssignedToTaskBoardTaskFormatObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $orderHintsByAssignee,

        [Parameter()]
        [System.String]
        $unassignedOrderHint
    )
}
function New-PlannerAssignmentObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $assignedBy,

        [Parameter()]
        [System.String]
        $orderHint,

        [Parameter()]
        [System.DateTimeOffset]
        $assignedDateTime
    )
}
function New-PlannerAssignmentsObject
{
    [CmdletBinding()]
    param(

    )
}
function New-PlannerBucketObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.String]
        $planId,

        [Parameter()]
        [System.String]
        $orderHint,

        [Parameter()]
        [System.Object[]]
        $tasks
    )
}
function New-PlannerBucketTaskBoardTaskFormatObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $orderHint
    )
}
function New-PlannerCategoryDescriptionsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $category5,

        [Parameter()]
        [System.String]
        $category2,

        [Parameter()]
        [System.String]
        $category1,

        [Parameter()]
        [System.String]
        $category3,

        [Parameter()]
        [System.String]
        $category6,

        [Parameter()]
        [System.String]
        $category4
    )
}
function New-PlannerChecklistItemObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $isChecked,

        [Parameter()]
        [System.Object]
        $lastModifiedBy,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $title,

        [Parameter()]
        [System.String]
        $orderHint
    )
}
function New-PlannerChecklistItemsObject
{
    [CmdletBinding()]
    param(

    )
}
function New-PlannerExternalReferenceObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $lastModifiedBy,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $previewPriority,

        [Parameter()]
        [System.String]
        $type,

        [Parameter()]
        [System.String]
        $alias
    )
}
function New-PlannerExternalReferencesObject
{
    [CmdletBinding()]
    param(

    )
}
function New-PlannerGroupObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $plans
    )
}
function New-PlannerObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $tasks,

        [Parameter()]
        [System.Object[]]
        $plans,

        [Parameter()]
        [System.Object[]]
        $buckets
    )
}
function New-PlannerOrderHintsByAssigneeObject
{
    [CmdletBinding()]
    param(

    )
}
function New-PlannerPlanDetailsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $categoryDescriptions,

        [Parameter()]
        [System.Object]
        $sharedWith
    )
}
function New-PlannerPlanObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $title,

        [Parameter()]
        [System.String]
        $owner,

        [Parameter()]
        [System.Object[]]
        $tasks,

        [Parameter()]
        [System.Object]
        $details,

        [Parameter()]
        [System.Object[]]
        $buckets,

        [Parameter()]
        [System.Object]
        $createdBy
    )
}
function New-PlannerProgressTaskBoardTaskFormatObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $orderHint
    )
}
function New-PlannerTaskDetailsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $checklist,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $previewType,

        [Parameter()]
        [System.Object]
        $references
    )
}
function New-PlannerTaskObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $planId,

        [Parameter()]
        [System.Int32]
        $referenceCount,

        [Parameter()]
        [System.String]
        $previewType,

        [Parameter()]
        [System.Object]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Object]
        $progressTaskBoardFormat,

        [Parameter()]
        [System.Boolean]
        $hasDescription,

        [Parameter()]
        [System.String]
        $assigneePriority,

        [Parameter()]
        [System.Object]
        $appliedCategories,

        [Parameter()]
        [System.String]
        $bucketId,

        [Parameter()]
        [System.Int32]
        $percentComplete,

        [Parameter()]
        [System.String]
        $title,

        [Parameter()]
        [System.Object]
        $createdBy,

        [Parameter()]
        [System.DateTimeOffset]
        $startDateTime,

        [Parameter()]
        [System.Object]
        $assignedToTaskBoardFormat,

        [Parameter()]
        [System.DateTimeOffset]
        $completedDateTime,

        [Parameter()]
        [System.Int32]
        $checklistItemCount,

        [Parameter()]
        [System.Object]
        $details,

        [Parameter()]
        [System.Object]
        $completedBy,

        [Parameter()]
        [System.Object]
        $bucketTaskBoardFormat,

        [Parameter()]
        [System.String]
        $orderHint,

        [Parameter()]
        [System.DateTimeOffset]
        $dueDateTime,

        [Parameter()]
        [System.Int32]
        $activeChecklistItemCount,

        [Parameter()]
        [System.String]
        $conversationThreadId
    )
}
function New-PlannerUserIdsObject
{
    [CmdletBinding()]
    param(

    )
}
function New-PlannerUserObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $tasks,

        [Parameter()]
        [System.Object[]]
        $plans
    )
}
function New-PrivacyProfileObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $statementUrl,

        [Parameter()]
        [System.String]
        $contactEmail
    )
}
function New-ProcessObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $commandLine,

        [Parameter()]
        [System.String]
        $accountName,

        [Parameter()]
        [System.Boolean]
        $isElevated,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.DateTimeOffset]
        $parentProcessCreatedDateTime,

        [Parameter()]
        [System.Object]
        $fileHash,

        [Parameter()]
        [System.Int32]
        $processId,

        [Parameter()]
        [System.String]
        $parentProcessName,

        [Parameter()]
        [System.String]
        $path,

        [Parameter()]
        [System.String]
        $integrityLevel,

        [Parameter()]
        [System.Int32]
        $parentProcessId
    )
}
function New-ProfilePhotoObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $height,

        [Parameter()]
        [System.Int32]
        $width
    )
}
function New-ProvisionedPlanObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $provisioningStatus,

        [Parameter()]
        [System.String]
        $service,

        [Parameter()]
        [System.String]
        $capabilityStatus
    )
}
function New-ProxiedDomainObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ipAddressOrFQDN,

        [Parameter()]
        [System.String]
        $proxy
    )
}
function New-PublicationFacetObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $level,

        [Parameter()]
        [System.String]
        $versionId
    )
}
function New-QuotaObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int64]
        $deleted,

        [Parameter()]
        [System.Int64]
        $remaining,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.Int64]
        $total,

        [Parameter()]
        [System.Int64]
        $used
    )
}
function New-RecentNotebookLinksObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $oneNoteWebUrl,

        [Parameter()]
        [System.Object]
        $oneNoteClientUrl
    )
}
function New-RecentNotebookObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $sourceService,

        [Parameter()]
        [System.Object]
        $links,

        [Parameter()]
        [System.DateTimeOffset]
        $lastAccessedTime
    )
}
function New-RecipientObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $emailAddress,

        [Parameter()]
        [System.String]
        $type,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $recipient,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $attendeeBase,

        [Parameter()]
        [System.Object]
        $status,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $attendee
    )
}
function New-RecurrencePatternObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $month,

        [Parameter()]
        [System.String]
        $type,

        [Parameter()]
        [System.Int32]
        $interval,

        [Parameter()]
        [System.String]
        $index,

        [Parameter()]
        [System.Int32]
        $dayOfMonth,

        [Parameter()]
        [System.String]
        $firstDayOfWeek,

        [Parameter()]
        [System.String[]]
        $daysOfWeek
    )
}
function New-RecurrenceRangeObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $endDate,

        [Parameter()]
        [System.String]
        $type,

        [Parameter()]
        [System.String]
        $recurrenceTimeZone,

        [Parameter()]
        [System.Int32]
        $numberOfOccurrences,

        [Parameter()]
        [System.DateTimeOffset]
        $startDate
    )
}
function New-RegistryKeyStateObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $valueData,

        [Parameter()]
        [System.String]
        $oldKey,

        [Parameter()]
        [System.String]
        $operation,

        [Parameter()]
        [System.String]
        $hive,

        [Parameter()]
        [System.String]
        $oldValueName,

        [Parameter()]
        [System.String]
        $valueName,

        [Parameter()]
        [System.String]
        $key,

        [Parameter()]
        [System.Int32]
        $processId,

        [Parameter()]
        [System.String]
        $valueType,

        [Parameter()]
        [System.String]
        $oldValueData
    )
}
function New-ReminderObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $eventLocation,

        [Parameter()]
        [System.String]
        $changeKey,

        [Parameter()]
        [System.String]
        $eventWebLink,

        [Parameter()]
        [System.String]
        $eventId,

        [Parameter()]
        [System.Object]
        $reminderFireTime,

        [Parameter()]
        [System.String]
        $eventSubject,

        [Parameter()]
        [System.Object]
        $eventStartTime,

        [Parameter()]
        [System.Object]
        $eventEndTime
    )
}
function New-RemoteAssistancePartnerObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastConnectionDateTime,

        [Parameter()]
        [System.String]
        $onboardingStatus,

        [Parameter()]
        [System.String]
        $onboardingUrl
    )
}
function New-RemoteItemObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int64]
        $size,

        [Parameter()]
        [System.Object]
        $lastModifiedBy,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Object]
        $parentReference,

        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.Object]
        $sharepointIds,

        [Parameter()]
        [System.String]
        $webDavUrl,

        [Parameter()]
        [System.Object]
        $shared,

        [Parameter()]
        [System.Object]
        $createdBy,

        [Parameter()]
        [System.Object]
        $file,

        [Parameter()]
        [System.Object]
        $package,

        [Parameter()]
        [System.Object]
        $folder,

        [Parameter()]
        [System.Object]
        $fileSystemInfo,

        [Parameter()]
        [System.String]
        $webUrl,

        [Parameter()]
        [System.Object]
        $specialFolder
    )
}
function New-ReportObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.IO.Stream]
        $content
    )
}
function New-ReportRootObject
{
    [CmdletBinding()]
    param(

    )
}
function New-ResourceActionObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $notAllowedResourceActions,

        [Parameter()]
        [System.String[]]
        $allowedResourceActions
    )
}
function New-ResourceOperationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $actionName,

        [Parameter()]
        [System.String]
        $resourceName
    )
}
function New-ResourceReferenceObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $type,

        [Parameter()]
        [System.String]
        $webUrl
    )
}
function New-ResourceVisualizationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $previewImageUrl,

        [Parameter()]
        [System.String]
        $previewText,

        [Parameter()]
        [System.String]
        $type,

        [Parameter()]
        [System.String]
        $title,

        [Parameter()]
        [System.String]
        $containerWebUrl,

        [Parameter()]
        [System.String]
        $containerDisplayName,

        [Parameter()]
        [System.String]
        $mediaType,

        [Parameter()]
        [System.String]
        $containerType
    )
}
function New-ResponseStatusObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $time,

        [Parameter()]
        [System.String]
        $response
    )
}
function New-RgbColorObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Byte]
        $b,

        [Parameter()]
        [System.Byte]
        $r,

        [Parameter()]
        [System.Byte]
        $g
    )
}
function New-RoleAssignmentObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String[]]
        $members,

        [Parameter()]
        [System.String[]]
        $resourceScopes,

        [Parameter()]
        [System.Object]
        $roleDefinition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceAndAppManagementRoleAssignment,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $roleAssignment
    )
}
function New-RoleDefinitionObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $isBuiltIn,

        [Parameter()]
        [System.Object[]]
        $rolePermissions,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceAndAppManagementRoleDefinition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $roleDefinition,

        [Parameter()]
        [System.Object[]]
        $roleAssignments
    )
}
function New-RolePermissionObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $resourceActions
    )
}
function New-RootObject
{
    [CmdletBinding()]
    param(

    )
}
function New-ScheduleInformationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $scheduleItems,

        [Parameter()]
        [System.Object]
        $workingHours,

        [Parameter()]
        [System.String]
        $availabilityView,

        [Parameter()]
        [System.Object]
        $error,

        [Parameter()]
        [System.String]
        $scheduleId
    )
}
function New-ScheduleItemObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $end,

        [Parameter()]
        [System.String]
        $subject,

        [Parameter()]
        [System.Object]
        $start,

        [Parameter()]
        [System.Boolean]
        $isPrivate,

        [Parameter()]
        [System.String]
        $location,

        [Parameter()]
        [System.String]
        $status
    )
}
function New-SchemaExtensionObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Object[]]
        $properties,

        [Parameter()]
        [System.String]
        $owner,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.String[]]
        $targetTypes
    )
}
function New-ScoredEmailAddressObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $selectionLikelihood,

        [Parameter()]
        [System.String]
        $address,

        [Parameter()]
        [System.String]
        $ItemId,

        [Parameter()]
        [System.Double]
        $relevanceScore
    )
}
function New-SearchResultObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $onClickTelemetryUrl
    )
}
function New-SectionLinksObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $oneNoteWebUrl,

        [Parameter()]
        [System.Object]
        $oneNoteClientUrl
    )
}
function New-SecureScoreControlProfileObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $remediation,

        [Parameter()]
        [System.String]
        $actionUrl,

        [Parameter()]
        [System.String]
        $userImpact,

        [Parameter()]
        [System.String]
        $service,

        [Parameter()]
        [System.String]
        $azureTenantId,

        [Parameter()]
        [System.String]
        $tier,

        [Parameter()]
        [System.Boolean]
        $deprecated,

        [Parameter()]
        [System.Object[]]
        $controlStateUpdates,

        [Parameter()]
        [System.String]
        $title,

        [Parameter()]
        [System.String]
        $implementationCost,

        [Parameter()]
        [System.String]
        $remediationImpact,

        [Parameter()]
        [System.String[]]
        $threats,

        [Parameter()]
        [System.Int32]
        $rank,

        [Parameter()]
        [System.Object[]]
        $complianceInformation,

        [Parameter()]
        [System.Object]
        $vendorInformation,

        [Parameter()]
        [System.Double]
        $maxScore,

        [Parameter()]
        [System.String]
        $controlCategory,

        [Parameter()]
        [System.String]
        $actionType
    )
}
function New-SecureScoreControlStateUpdateObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $assignedTo,

        [Parameter()]
        [System.String]
        $comment,

        [Parameter()]
        [System.String]
        $updatedBy,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.DateTimeOffset]
        $updatedDateTime
    )
}
function New-SecureScoreObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Object[]]
        $controlScores,

        [Parameter()]
        [System.String]
        $azureTenantId,

        [Parameter()]
        [System.Int32]
        $licensedUserCount,

        [Parameter()]
        [System.Object]
        $vendorInformation,

        [Parameter()]
        [System.Double]
        $maxScore,

        [Parameter()]
        [System.Double]
        $currentScore,

        [Parameter()]
        [System.Object[]]
        $averageComparativeScores,

        [Parameter()]
        [System.String[]]
        $enabledServices,

        [Parameter()]
        [System.Int32]
        $activeUserCount
    )
}
function New-SecurityObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $secureScores,

        [Parameter()]
        [System.Object[]]
        $alerts,

        [Parameter()]
        [System.Object[]]
        $secureScoreControlProfiles
    )
}
function New-SecurityVendorInformationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $provider,

        [Parameter()]
        [System.String]
        $subProvider,

        [Parameter()]
        [System.String]
        $vendor,

        [Parameter()]
        [System.String]
        $providerVersion
    )
}
function New-ServicePlanInfoObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $appliesTo,

        [Parameter()]
        [System.String]
        $provisioningStatus,

        [Parameter()]
        [System.String]
        $servicePlanName,

        [Parameter()]
        [System.Guid]
        $servicePlanId
    )
}
function New-SettingSourceObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName
    )
}
function New-SettingStateDeviceSummaryObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.String]
        $settingName,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.String]
        $instancePath,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function New-SettingTemplateValueObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.String]
        $defaultValue,

        [Parameter()]
        [System.String]
        $type
    )
}
function New-SettingValueObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $value,

        [Parameter()]
        [System.String]
        $name
    )
}
function New-SharedInsightObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $lastShared,

        [Parameter()]
        [System.Object[]]
        $sharingHistory,

        [Parameter()]
        [System.Object]
        $lastSharedMethod,

        [Parameter()]
        [System.Object]
        $resource
    )
}
function New-SharedObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $owner,

        [Parameter()]
        [System.String]
        $scope,

        [Parameter()]
        [System.DateTimeOffset]
        $sharedDateTime,

        [Parameter()]
        [System.Object]
        $sharedBy
    )
}
function New-SharedPCAccountManagerPolicyObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $accountDeletionPolicy,

        [Parameter()]
        [System.Int32]
        $removeAccountsBelowDiskFreePercentage,

        [Parameter()]
        [System.Int32]
        $cacheAccountsAboveDiskFreePercentage,

        [Parameter()]
        [System.Int32]
        $inactiveThresholdDays
    )
}
function New-SharepointIdsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $siteUrl,

        [Parameter()]
        [System.String]
        $listItemUniqueId,

        [Parameter()]
        [System.String]
        $webId,

        [Parameter()]
        [System.String]
        $listItemId,

        [Parameter()]
        [System.String]
        $siteId,

        [Parameter()]
        [System.String]
        $listId
    )
}
function New-SharingDetailObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $sharingType,

        [Parameter()]
        [System.DateTimeOffset]
        $sharedDateTime,

        [Parameter()]
        [System.String]
        $sharingSubject,

        [Parameter()]
        [System.Object]
        $sharedBy
    )
}
function New-SharingInvitationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $redeemedBy,

        [Parameter()]
        [System.Boolean]
        $signInRequired,

        [Parameter()]
        [System.Object]
        $invitedBy,

        [Parameter()]
        [System.String]
        $email
    )
}
function New-SharingLinkObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $type,

        [Parameter()]
        [System.String]
        $scope,

        [Parameter()]
        [System.String]
        $webUrl,

        [Parameter()]
        [System.Object]
        $application
    )
}
function New-SignInLocationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $geoCoordinates,

        [Parameter()]
        [System.String]
        $countryOrRegion,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.String]
        $city
    )
}
function New-SignInObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $riskDetail,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $signIn,

        [Parameter()]
        [System.Object]
        $location,

        [Parameter()]
        [System.String]
        $riskState,

        [Parameter()]
        [System.Boolean]
        $isInteractive,

        [Parameter()]
        [System.String[]]
        $riskEventTypes,

        [Parameter()]
        [System.String]
        $ipAddress,

        [Parameter()]
        [System.String]
        $riskLevelDuringSignIn,

        [Parameter()]
        [System.String]
        $resourceId,

        [Parameter()]
        [System.String]
        $resourceDisplayName,

        [Parameter()]
        [System.Object]
        $status,

        [Parameter()]
        [System.Object[]]
        $appliedConditionalAccessPolicies,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $restrictedSignIn,

        [Parameter()]
        [System.String]
        $correlationId,

        [Parameter()]
        [System.Guid]
        $targetTenantId,

        [Parameter()]
        [System.String]
        $appDisplayName,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.String]
        $riskLevelAggregated,

        [Parameter()]
        [System.Object]
        $deviceDetail,

        [Parameter()]
        [System.String]
        $clientAppUsed,

        [Parameter()]
        [System.String]
        $conditionalAccessStatus,

        [Parameter()]
        [System.String]
        $appId
    )
}
function New-SignInStatusObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $errorCode,

        [Parameter()]
        [System.String]
        $additionalDetails,

        [Parameter()]
        [System.String]
        $failureReason
    )
}
function New-SingleValueLegacyExtendedPropertyObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $value
    )
}
function New-SiteCollectionObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $root,

        [Parameter()]
        [System.String]
        $hostname
    )
}
function New-SizeRangeObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $minimumSize,

        [Parameter()]
        [System.Int32]
        $maximumSize
    )
}
function New-SoftwareUpdateStatusSummaryObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $conflictUserCount,

        [Parameter()]
        [System.Int32]
        $compliantUserCount,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.Int32]
        $remediatedUserCount,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $nonCompliantUserCount,

        [Parameter()]
        [System.Int32]
        $errorUserCount,

        [Parameter()]
        [System.Int32]
        $unknownUserCount,

        [Parameter()]
        [System.Int32]
        $notApplicableUserCount,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function New-SpecialFolderObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $name
    )
}
function New-StandardTimeZoneOffsetObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $dayOccurrence,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $standardTimeZoneOffset,

        [Parameter()]
        [System.Int32]
        $daylightBias,

        [Parameter()]
        [System.TimeSpan]
        $time,

        [Parameter()]
        [System.String]
        $dayOfWeek,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $daylightTimeZoneOffset,

        [Parameter()]
        [System.Int32]
        $month,

        [Parameter()]
        [System.Int32]
        $year
    )
}
function New-SubscribedSkuObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $skuPartNumber,

        [Parameter()]
        [System.String]
        $appliesTo,

        [Parameter()]
        [System.Int32]
        $consumedUnits,

        [Parameter()]
        [System.Guid]
        $skuId,

        [Parameter()]
        [System.Object[]]
        $servicePlans,

        [Parameter()]
        [System.Object]
        $prepaidUnits,

        [Parameter()]
        [System.String]
        $capabilityStatus
    )
}
function New-SubscriptionObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $expirationDateTime,

        [Parameter()]
        [System.String]
        $creatorId,

        [Parameter()]
        [System.String]
        $clientState,

        [Parameter()]
        [System.String]
        $applicationId,

        [Parameter()]
        [System.String]
        $changeType,

        [Parameter()]
        [System.String]
        $notificationUrl,

        [Parameter()]
        [System.String]
        $resource
    )
}
function New-SystemFacetObject
{
    [CmdletBinding()]
    param(

    )
}
function New-TargetedManagedAppPolicyAssignmentObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $target
    )
}
function New-TargetResourceObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupType,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $type,

        [Parameter()]
        [System.Object[]]
        $modifiedProperties
    )
}
function New-TeamClassSettingsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $notifyGuardiansAboutAssignments
    )
}
function New-TeamFunSettingsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $allowGiphy,

        [Parameter()]
        [System.String]
        $giphyContentRating,

        [Parameter()]
        [System.Boolean]
        $allowStickersAndMemes,

        [Parameter()]
        [System.Boolean]
        $allowCustomMemes
    )
}
function New-TeamGuestSettingsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $allowDeleteChannels,

        [Parameter()]
        [System.Boolean]
        $allowCreateUpdateChannels
    )
}
function New-TeamMemberSettingsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $allowAddRemoveApps,

        [Parameter()]
        [System.Boolean]
        $allowCreateUpdateRemoveTabs,

        [Parameter()]
        [System.Boolean]
        $allowDeleteChannels,

        [Parameter()]
        [System.Boolean]
        $allowCreateUpdateChannels,

        [Parameter()]
        [System.Boolean]
        $allowCreateUpdateRemoveConnectors
    )
}
function New-TeamMessagingSettingsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $allowOwnerDeleteMessages,

        [Parameter()]
        [System.Boolean]
        $allowUserEditMessages,

        [Parameter()]
        [System.Boolean]
        $allowUserDeleteMessages,

        [Parameter()]
        [System.Boolean]
        $allowTeamMentions,

        [Parameter()]
        [System.Boolean]
        $allowChannelMentions
    )
}
function New-TeamObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $funSettings,

        [Parameter()]
        [System.Object[]]
        $operations,

        [Parameter()]
        [System.Object[]]
        $installedApps,

        [Parameter()]
        [System.Boolean]
        $isArchived,

        [Parameter()]
        [System.Object]
        $guestSettings,

        [Parameter()]
        [System.Object]
        $messagingSettings,

        [Parameter()]
        [System.String]
        $webUrl,

        [Parameter()]
        [System.Object]
        $memberSettings,

        [Parameter()]
        [System.Object[]]
        $channels
    )
}
function New-TeamsAppDefinitionObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $teamsAppId
    )
}
function New-TeamsAppInstallationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $teamsApp,

        [Parameter()]
        [System.Object]
        $teamsAppDefinition
    )
}
function New-TeamsAppObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $distributionMethod,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $appDefinitions,

        [Parameter()]
        [System.String]
        $externalId
    )
}
function New-TeamsAsyncOperationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetResourceLocation,

        [Parameter()]
        [System.String]
        $operationType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastActionDateTime,

        [Parameter()]
        [System.Int32]
        $attemptsCount,

        [Parameter()]
        [System.String]
        $targetResourceId,

        [Parameter()]
        [System.Object]
        $error,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $status
    )
}
function New-TeamsTabConfigurationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $entityId,

        [Parameter()]
        [System.String]
        $removeUrl,

        [Parameter()]
        [System.String]
        $websiteUrl,

        [Parameter()]
        [System.String]
        $contentUrl
    )
}
function New-TeamsTabObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object]
        $teamsApp,

        [Parameter()]
        [System.String]
        $webUrl,

        [Parameter()]
        [System.Object]
        $configuration
    )
}
function New-TelecomExpenseManagementPartnerObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $appAuthorized,

        [Parameter()]
        [System.DateTimeOffset]
        $lastConnectionDateTime,

        [Parameter()]
        [System.String]
        $url,

        [Parameter()]
        [System.Boolean]
        $enabled
    )
}
function New-TermsAndConditionsAcceptanceStatusObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $acceptedVersion,

        [Parameter()]
        [System.Object]
        $termsAndConditions,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.DateTimeOffset]
        $acceptedDateTime
    )
}
function New-TermsAndConditionsAssignmentObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $target
    )
}
function New-TermsAndConditionsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $acceptanceStatement,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $title,

        [Parameter()]
        [System.Object[]]
        $acceptanceStatuses,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.String]
        $bodyText
    )
}
function New-TextColumnObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $textType,

        [Parameter()]
        [System.Boolean]
        $appendChangesToExistingText,

        [Parameter()]
        [System.Int32]
        $linesForEditing,

        [Parameter()]
        [System.Boolean]
        $allowMultipleLines,

        [Parameter()]
        [System.Int32]
        $maxLength
    )
}
function New-ThumbnailObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $sourceItemId,

        [Parameter()]
        [System.IO.Stream]
        $content,

        [Parameter()]
        [System.Int32]
        $height,

        [Parameter()]
        [System.String]
        $url,

        [Parameter()]
        [System.Int32]
        $width
    )
}
function New-ThumbnailSetObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $source,

        [Parameter()]
        [System.Object]
        $medium,

        [Parameter()]
        [System.Object]
        $large,

        [Parameter()]
        [System.Object]
        $small
    )
}
function New-TimeConstraintObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $activityDomain,

        [Parameter()]
        [System.Object[]]
        $timeSlots
    )
}
function New-TimeSlotObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $end,

        [Parameter()]
        [System.Object]
        $start
    )
}
function New-TimeZoneBaseObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $timeZoneBase,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $customTimeZone,

        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.Int32]
        $bias,

        [Parameter()]
        [System.Object]
        $daylightOffset,

        [Parameter()]
        [System.Object]
        $standardOffset
    )
}
function New-TimeZoneInformationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $alias
    )
}
function New-TrendingObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object]
        $resource,

        [Parameter()]
        [System.Double]
        $weight
    )
}
function New-UpdateWindowsDeviceAccountActionParameterObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $passwordRotationEnabled,

        [Parameter()]
        [System.Boolean]
        $calendarSyncEnabled,

        [Parameter()]
        [System.Object]
        $deviceAccount,

        [Parameter()]
        [System.String]
        $sessionInitiationProtocalAddress,

        [Parameter()]
        [System.String]
        $deviceAccountEmail,

        [Parameter()]
        [System.String]
        $exchangeServer
    )
}
function New-UploadSessionObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $expirationDateTime,

        [Parameter()]
        [System.String]
        $uploadUrl,

        [Parameter()]
        [System.String[]]
        $nextExpectedRanges
    )
}
function New-UsageDetailsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $lastAccessedDateTime
    )
}
function New-UsedInsightObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $lastUsed,

        [Parameter()]
        [System.Object]
        $resource
    )
}
function New-UserActivityObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $expirationDateTime,

        [Parameter()]
        [System.Object[]]
        $historyItems,

        [Parameter()]
        [System.String]
        $userTimezone,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $activationUrl,

        [Parameter()]
        [System.String]
        $appActivityId,

        [Parameter()]
        [System.String]
        $activitySourceHost,

        [Parameter()]
        [System.String]
        $appDisplayName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object]
        $visualElements,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.String]
        $contentUrl,

        [Parameter()]
        [System.String]
        $fallbackUrl,

        [Parameter()]
        [System.Object]
        $contentInfo
    )
}
function New-UserIdentityObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $ipAddress,

        [Parameter()]
        [System.String]
        $displayName
    )
}
function New-UserInstallStateSummaryObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notInstalledDeviceCount,

        [Parameter()]
        [System.Int32]
        $failedDeviceCount,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.Object[]]
        $deviceStates,

        [Parameter()]
        [System.Int32]
        $installedDeviceCount
    )
}
function New-UserSecurityStateObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $userAccountType,

        [Parameter()]
        [System.String]
        $aadUserId,

        [Parameter()]
        [System.DateTimeOffset]
        $logonDateTime,

        [Parameter()]
        [System.String]
        $emailRole,

        [Parameter()]
        [System.String]
        $onPremisesSecurityIdentifier,

        [Parameter()]
        [System.String]
        $logonLocation,

        [Parameter()]
        [System.String]
        $accountName,

        [Parameter()]
        [System.String]
        $logonIp,

        [Parameter()]
        [System.String]
        $logonId,

        [Parameter()]
        [System.String]
        $riskScore,

        [Parameter()]
        [System.String]
        $logonType,

        [Parameter()]
        [System.String]
        $domainName,

        [Parameter()]
        [System.Boolean]
        $isVpn
    )
}
function New-UserSettingsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $contributionToContentDiscoveryDisabled,

        [Parameter()]
        [System.Boolean]
        $contributionToContentDiscoveryAsOrganizationDisabled
    )
}
function New-VerifiedDomainObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.Boolean]
        $isInitial,

        [Parameter()]
        [System.String]
        $type,

        [Parameter()]
        [System.String]
        $capabilities,

        [Parameter()]
        [System.Boolean]
        $isDefault
    )
}
function New-VideoObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $bitrate,

        [Parameter()]
        [System.Int32]
        $audioBitsPerSample,

        [Parameter()]
        [System.String]
        $audioFormat,

        [Parameter()]
        [System.Int32]
        $audioSamplesPerSecond,

        [Parameter()]
        [System.String]
        $fourCC,

        [Parameter()]
        [System.Double]
        $frameRate,

        [Parameter()]
        [System.Int32]
        $audioChannels,

        [Parameter()]
        [System.Int32]
        $height,

        [Parameter()]
        [System.Int64]
        $duration,

        [Parameter()]
        [System.Int32]
        $width
    )
}
function New-VisualInfoObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Object]
        $attribution,

        [Parameter()]
        [System.Object]
        $content,

        [Parameter()]
        [System.String]
        $backgroundColor,

        [Parameter()]
        [System.String]
        $displayText
    )
}
function New-VppLicensingTypeObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $supportsUserLicensing,

        [Parameter()]
        [System.Boolean]
        $supportsDeviceLicensing
    )
}
function New-VppTokenObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $expirationDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $organizationName,

        [Parameter()]
        [System.String]
        $appleId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.Boolean]
        $automaticallyUpdateApps,

        [Parameter()]
        [System.String]
        $token,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.String]
        $lastSyncStatus,

        [Parameter()]
        [System.String]
        $countryOrRegion,

        [Parameter()]
        [System.String]
        $vppTokenAccountType
    )
}
function New-VulnerabilityStateObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $severity,

        [Parameter()]
        [System.String]
        $cve,

        [Parameter()]
        [System.Boolean]
        $wasRunning
    )
}
function New-WebsiteObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $type,

        [Parameter()]
        [System.String]
        $address
    )
}
function New-Windows10NetworkProxyServerObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $exceptions,

        [Parameter()]
        [System.String]
        $address,

        [Parameter()]
        [System.Boolean]
        $useForLocalAddresses
    )
}
function New-WindowsDeviceAccountObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsDeviceAccount,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsDeviceADAccount,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $password,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsDeviceAzureADAccount,

        [Parameter()]
        [System.String]
        $domainName
    )
}
function New-WindowsFirewallNetworkProfileObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $inboundNotificationsBlocked,

        [Parameter()]
        [System.Boolean]
        $unicastResponsesToMulticastBroadcastsBlocked,

        [Parameter()]
        [System.Boolean]
        $incomingTrafficBlocked,

        [Parameter()]
        [System.String]
        $firewallEnabled,

        [Parameter()]
        [System.Boolean]
        $connectionSecurityRulesFromGroupPolicyMerged,

        [Parameter()]
        [System.Boolean]
        $authorizedApplicationRulesFromGroupPolicyMerged,

        [Parameter()]
        [System.Boolean]
        $outboundConnectionsBlocked,

        [Parameter()]
        [System.Boolean]
        $stealthModeBlocked,

        [Parameter()]
        [System.Boolean]
        $inboundConnectionsBlocked,

        [Parameter()]
        [System.Boolean]
        $globalPortRulesFromGroupPolicyMerged,

        [Parameter()]
        [System.Boolean]
        $securedPacketExemptionAllowed,

        [Parameter()]
        [System.Boolean]
        $policyRulesFromGroupPolicyMerged
    )
}
function New-WindowsInformationProtectionAppLearningSummaryObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $applicationName,

        [Parameter()]
        [System.Int32]
        $deviceCount,

        [Parameter()]
        [System.String]
        $applicationType
    )
}
function New-WindowsInformationProtectionAppLockerFileObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $fileHash
    )
}
function New-WindowsInformationProtectionAppObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsInformationProtectionStoreApp,

        [Parameter()]
        [System.String]
        $binaryVersionHigh,

        [Parameter()]
        [System.String]
        $publisherName,

        [Parameter()]
        [System.String]
        $binaryName,

        [Parameter()]
        [System.String]
        $productName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsInformationProtectionDesktopApp,

        [Parameter()]
        [System.Boolean]
        $denied,

        [Parameter()]
        [System.String]
        $binaryVersionLow
    )
}
function New-WindowsInformationProtectionDataRecoveryCertificateObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $expirationDateTime,

        [Parameter()]
        [System.Byte[]]
        $certificate,

        [Parameter()]
        [System.String]
        $subjectName,

        [Parameter()]
        [System.String]
        $description
    )
}
function New-WindowsInformationProtectionIPRangeCollectionObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $ranges,

        [Parameter()]
        [System.String]
        $displayName
    )
}
function New-WindowsInformationProtectionNetworkLearningSummaryObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $deviceCount,

        [Parameter()]
        [System.String]
        $url
    )
}
function New-WindowsInformationProtectionProxiedDomainCollectionObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $proxiedDomains
    )
}
function New-WindowsInformationProtectionResourceCollectionObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $resources,

        [Parameter()]
        [System.String]
        $displayName
    )
}
function New-WindowsMinimumOperatingSystemObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $v10_0,

        [Parameter()]
        [System.Boolean]
        $v8_1,

        [Parameter()]
        [System.Boolean]
        $v8_0
    )
}
function New-WindowsUpdateInstallScheduleTypeObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.TimeSpan]
        $activeHoursStart,

        [Parameter()]
        [System.TimeSpan]
        $activeHoursEnd,

        [Parameter()]
        [System.TimeSpan]
        $scheduledInstallTime,

        [Parameter()]
        [System.String]
        $scheduledInstallDay,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsUpdateActiveHoursInstall,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsUpdateScheduledInstall
    )
}
function New-WorkbookApplicationObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $calculationMode
    )
}
function New-WorkbookChartAreaFormatObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $fill,

        [Parameter()]
        [System.Object]
        $font
    )
}
function New-WorkbookChartAxesObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $valueAxis,

        [Parameter()]
        [System.Object]
        $categoryAxis,

        [Parameter()]
        [System.Object]
        $seriesAxis
    )
}
function New-WorkbookChartAxisFormatObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $line,

        [Parameter()]
        [System.Object]
        $font
    )
}
function New-WorkbookChartAxisObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $minorUnit,

        [Parameter()]
        [System.Object]
        $format,

        [Parameter()]
        [System.Object]
        $majorGridlines,

        [Parameter()]
        [System.Object]
        $title,

        [Parameter()]
        [System.Object]
        $maximum,

        [Parameter()]
        [System.Object]
        $minorGridlines,

        [Parameter()]
        [System.Object]
        $majorUnit,

        [Parameter()]
        [System.Object]
        $minimum
    )
}
function New-WorkbookChartAxisTitleFormatObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $font
    )
}
function New-WorkbookChartAxisTitleObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $visible,

        [Parameter()]
        [System.Object]
        $format,

        [Parameter()]
        [System.String]
        $text
    )
}
function New-WorkbookChartDataLabelFormatObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $fill,

        [Parameter()]
        [System.Object]
        $font
    )
}
function New-WorkbookChartDataLabelsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $showValue,

        [Parameter()]
        [System.Object]
        $format,

        [Parameter()]
        [System.String]
        $position,

        [Parameter()]
        [System.Boolean]
        $showSeriesName,

        [Parameter()]
        [System.Boolean]
        $showBubbleSize,

        [Parameter()]
        [System.Boolean]
        $showCategoryName,

        [Parameter()]
        [System.Boolean]
        $showLegendKey,

        [Parameter()]
        [System.String]
        $separator,

        [Parameter()]
        [System.Boolean]
        $showPercentage
    )
}
function New-WorkbookChartFillObject
{
    [CmdletBinding()]
    param(

    )
}
function New-WorkbookChartFontObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.Boolean]
        $bold,

        [Parameter()]
        [System.String]
        $color,

        [Parameter()]
        [System.Boolean]
        $italic,

        [Parameter()]
        [System.Double]
        $size,

        [Parameter()]
        [System.String]
        $underline
    )
}
function New-WorkbookChartGridlinesFormatObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $line
    )
}
function New-WorkbookChartGridlinesObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $visible,

        [Parameter()]
        [System.Object]
        $format
    )
}
function New-WorkbookChartLegendFormatObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $fill,

        [Parameter()]
        [System.Object]
        $font
    )
}
function New-WorkbookChartLegendObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $visible,

        [Parameter()]
        [System.Object]
        $format,

        [Parameter()]
        [System.String]
        $position,

        [Parameter()]
        [System.Boolean]
        $overlay
    )
}
function New-WorkbookChartLineFormatObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $color
    )
}
function New-WorkbookChartObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Double]
        $left,

        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.Object]
        $legend,

        [Parameter()]
        [System.Object]
        $format,

        [Parameter()]
        [System.Object]
        $title,

        [Parameter()]
        [System.Double]
        $top,

        [Parameter()]
        [System.Object]
        $dataLabels,

        [Parameter()]
        [System.Double]
        $height,

        [Parameter()]
        [System.Object[]]
        $series,

        [Parameter()]
        [System.Object]
        $worksheet,

        [Parameter()]
        [System.Object]
        $axes,

        [Parameter()]
        [System.Double]
        $width
    )
}
function New-WorkbookChartPointFormatObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $fill
    )
}
function New-WorkbookChartPointObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $value,

        [Parameter()]
        [System.Object]
        $format
    )
}
function New-WorkbookChartSeriesFormatObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $fill,

        [Parameter()]
        [System.Object]
        $line
    )
}
function New-WorkbookChartSeriesObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.Object]
        $format,

        [Parameter()]
        [System.Object[]]
        $points
    )
}
function New-WorkbookChartTitleFormatObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $fill,

        [Parameter()]
        [System.Object]
        $font
    )
}
function New-WorkbookChartTitleObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $visible,

        [Parameter()]
        [System.Object]
        $format,

        [Parameter()]
        [System.Boolean]
        $overlay,

        [Parameter()]
        [System.String]
        $text
    )
}
function New-WorkbookCommentObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $content,

        [Parameter()]
        [System.String]
        $contentType,

        [Parameter()]
        [System.Object[]]
        $replies
    )
}
function New-WorkbookCommentReplyObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $content,

        [Parameter()]
        [System.String]
        $contentType
    )
}
function New-WorkbookFilterCriteriaObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $values
    )
}
function New-WorkbookFilterDatetimeObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $specificity,

        [Parameter()]
        [System.String]
        $date
    )
}
function New-WorkbookFilterObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $criteria
    )
}
function New-WorkbookFormatProtectionObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $formulaHidden,

        [Parameter()]
        [System.Boolean]
        $locked
    )
}
function New-WorkbookFunctionResultObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $value,

        [Parameter()]
        [System.String]
        $error
    )
}
function New-WorkbookFunctionsObject
{
    [CmdletBinding()]
    param(

    )
}
function New-WorkbookIconObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $set,

        [Parameter()]
        [System.Int32]
        $index
    )
}
function New-WorkbookNamedItemObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.Object]
        $value,

        [Parameter()]
        [System.String]
        $type,

        [Parameter()]
        [System.String]
        $comment,

        [Parameter()]
        [System.String]
        $scope,

        [Parameter()]
        [System.Boolean]
        $visible,

        [Parameter()]
        [System.Object]
        $worksheet
    )
}
function New-WorkbookObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $tables,

        [Parameter()]
        [System.Object[]]
        $comments,

        [Parameter()]
        [System.Object[]]
        $names,

        [Parameter()]
        [System.Object[]]
        $worksheets,

        [Parameter()]
        [System.Object]
        $application,

        [Parameter()]
        [System.Object]
        $functions
    )
}
function New-WorkbookPivotTableObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.Object]
        $worksheet
    )
}
function New-WorkbookRangeBorderObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $sideIndex,

        [Parameter()]
        [System.String]
        $color,

        [Parameter()]
        [System.String]
        $weight,

        [Parameter()]
        [System.String]
        $style
    )
}
function New-WorkbookRangeFillObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $color
    )
}
function New-WorkbookRangeFontObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.Boolean]
        $bold,

        [Parameter()]
        [System.String]
        $color,

        [Parameter()]
        [System.Boolean]
        $italic,

        [Parameter()]
        [System.Double]
        $size,

        [Parameter()]
        [System.String]
        $underline
    )
}
function New-WorkbookRangeFormatObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $fill,

        [Parameter()]
        [System.Double]
        $columnWidth,

        [Parameter()]
        [System.Object]
        $font,

        [Parameter()]
        [System.Object]
        $protection,

        [Parameter()]
        [System.Object[]]
        $borders,

        [Parameter()]
        [System.Double]
        $rowHeight,

        [Parameter()]
        [System.String]
        $verticalAlignment,

        [Parameter()]
        [System.Boolean]
        $wrapText,

        [Parameter()]
        [System.String]
        $horizontalAlignment
    )
}
function New-WorkbookRangeObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $values
    )
}
function New-WorkbookRangeReferenceObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $address
    )
}
function New-WorkbookRangeSortObject
{
    [CmdletBinding()]
    param(

    )
}
function New-WorkbookRangeViewObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $values
    )
}
function New-WorkbookSessionInfoObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $persistChanges
    )
}
function New-WorkbookSortFieldObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $icon,

        [Parameter()]
        [System.String]
        $color,

        [Parameter()]
        [System.String]
        $sortOn,

        [Parameter()]
        [System.Boolean]
        $ascending,

        [Parameter()]
        [System.Int32]
        $key,

        [Parameter()]
        [System.String]
        $dataOption
    )
}
function New-WorkbookTableColumnObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $values
    )
}
function New-WorkbookTableObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $showHeaders,

        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.Boolean]
        $showFilterButton,

        [Parameter()]
        [System.Boolean]
        $showBandedColumns,

        [Parameter()]
        [System.String]
        $legacyId,

        [Parameter()]
        [System.Object]
        $sort,

        [Parameter()]
        [System.Object]
        $worksheet,

        [Parameter()]
        [System.Boolean]
        $showTotals,

        [Parameter()]
        [System.Boolean]
        $showBandedRows,

        [Parameter()]
        [System.Object[]]
        $columns,

        [Parameter()]
        [System.Boolean]
        $highlightFirstColumn,

        [Parameter()]
        [System.Object[]]
        $rows,

        [Parameter()]
        [System.Boolean]
        $highlightLastColumn,

        [Parameter()]
        [System.String]
        $style
    )
}
function New-WorkbookTableRowObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $values
    )
}
function New-WorkbookTableSortObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $matchCase,

        [Parameter()]
        [System.String]
        $method,

        [Parameter()]
        [System.Object[]]
        $fields
    )
}
function New-WorkbookWorksheetObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $tables,

        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.Object]
        $protection,

        [Parameter()]
        [System.Int32]
        $position,

        [Parameter()]
        [System.Object[]]
        $charts,

        [Parameter()]
        [System.Object[]]
        $names,

        [Parameter()]
        [System.String]
        $visibility,

        [Parameter()]
        [System.Object[]]
        $pivotTables
    )
}
function New-WorkbookWorksheetProtectionObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $options,

        [Parameter()]
        [System.Boolean]
        $protected
    )
}
function New-WorkbookWorksheetProtectionOptionsObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $allowSort,

        [Parameter()]
        [System.Boolean]
        $allowFormatColumns,

        [Parameter()]
        [System.Boolean]
        $allowFormatRows,

        [Parameter()]
        [System.Boolean]
        $allowDeleteRows,

        [Parameter()]
        [System.Boolean]
        $allowFormatCells,

        [Parameter()]
        [System.Boolean]
        $allowInsertColumns,

        [Parameter()]
        [System.Boolean]
        $allowInsertRows,

        [Parameter()]
        [System.Boolean]
        $allowInsertHyperlinks,

        [Parameter()]
        [System.Boolean]
        $allowAutoFilter,

        [Parameter()]
        [System.Boolean]
        $allowPivotTables,

        [Parameter()]
        [System.Boolean]
        $allowDeleteColumns
    )
}
function New-WorkingHoursObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.TimeSpan]
        $startTime,

        [Parameter()]
        [System.Object]
        $timeZone,

        [Parameter()]
        [System.TimeSpan]
        $endTime,

        [Parameter()]
        [System.String[]]
        $daysOfWeek
    )
}
function Remove-DeviceAppManagement
{
    [CmdletBinding()]
    param(

    )
}
function Remove-DeviceAppManagement_AndroidManagedAppProtections
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId
    )
}
function Remove-DeviceAppManagement_AndroidManagedAppProtections_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId
    )
}
function Remove-DeviceAppManagement_AndroidManagedAppProtections_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionODataType,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId
    )
}
function Remove-DeviceAppManagement_AndroidManagedAppProtections_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId
    )
}
function Remove-DeviceAppManagement_DefaultManagedAppProtections
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId
    )
}
function Remove-DeviceAppManagement_DefaultManagedAppProtections_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId,

        [Parameter()]
        [System.String]
        $managedMobileAppId
    )
}
function Remove-DeviceAppManagement_DefaultManagedAppProtections_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId
    )
}
function Remove-DeviceAppManagement_IosManagedAppProtections
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId
    )
}
function Remove-DeviceAppManagement_IosManagedAppProtections_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.String]
        $managedMobileAppId
    )
}
function Remove-DeviceAppManagement_IosManagedAppProtections_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionODataType
    )
}
function Remove-DeviceAppManagement_IosManagedAppProtections_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId
    )
}
function Remove-DeviceAppManagement_ManagedAppPolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Remove-DeviceAppManagement_ManagedAppPolicies_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Remove-DeviceAppManagement_ManagedAppPolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Remove-DeviceAppManagement_ManagedAppPolicies_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Remove-DeviceAppManagement_ManagedAppPolicies_ExemptAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Remove-DeviceAppManagement_ManagedAppPolicies_ProtectedAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Remove-DeviceAppManagement_ManagedAppRegistrations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId
    )
}
function Remove-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Remove-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $appliedPolicyODataType
    )
}
function Remove-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $appliedPolicyODataType
    )
}
function Remove-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $appliedPolicyODataType
    )
}
function Remove-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies_ExemptAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $appliedPolicyODataType
    )
}
function Remove-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies_ProtectedAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $appliedPolicyODataType
    )
}
function Remove-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Remove-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $intendedPolicyODataType
    )
}
function Remove-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $intendedPolicyODataType
    )
}
function Remove-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $intendedPolicyODataType
    )
}
function Remove-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies_ExemptAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $intendedPolicyODataType
    )
}
function Remove-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies_ProtectedAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $intendedPolicyODataType
    )
}
function Remove-DeviceAppManagement_ManagedAppRegistrations_Operations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppOperationId,

        [Parameter()]
        [System.String]
        $managedAppRegistrationId
    )
}
function Remove-DeviceAppManagement_ManagedAppStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppStatusId
    )
}
function Remove-DeviceAppManagement_ManagedEBooks
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Remove-DeviceAppManagement_ManagedEBooks_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedEBookAssignmentId,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Remove-DeviceAppManagement_ManagedEBooks_DeviceStates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceInstallStateId,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Remove-DeviceAppManagement_ManagedEBooks_InstallSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Remove-DeviceAppManagement_ManagedEBooks_UserStateSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userInstallStateSummaryId,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Remove-DeviceAppManagement_ManagedEBooks_UserStateSummary_DeviceStates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userInstallStateSummaryId,

        [Parameter()]
        [System.String]
        $deviceInstallStateId,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Remove-DeviceAppManagement_MdmWindowsInformationProtectionPolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId
    )
}
function Remove-DeviceAppManagement_MdmWindowsInformationProtectionPolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId
    )
}
function Remove-DeviceAppManagement_MdmWindowsInformationProtectionPolicies_ExemptAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId
    )
}
function Remove-DeviceAppManagement_MdmWindowsInformationProtectionPolicies_ProtectedAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId
    )
}
function Remove-DeviceAppManagement_MobileAppCategories
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppCategoryId
    )
}
function Remove-DeviceAppManagement_MobileAppConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId
    )
}
function Remove-DeviceAppManagement_MobileAppConfigurations_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationAssignmentId,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId
    )
}
function Remove-DeviceAppManagement_MobileAppConfigurations_DeviceStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationDeviceStatusId,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId
    )
}
function Remove-DeviceAppManagement_MobileAppConfigurations_DeviceStatusSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId
    )
}
function Remove-DeviceAppManagement_MobileAppConfigurations_UserStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationUserStatusId,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId
    )
}
function Remove-DeviceAppManagement_MobileAppConfigurations_UserStatusSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId
    )
}
function Remove-DeviceAppManagement_MobileApps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppId
    )
}
function Remove-DeviceAppManagement_MobileApps_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppAssignmentId,

        [Parameter()]
        [System.String]
        $mobileAppId
    )
}
function Remove-DeviceAppManagement_MobileApps_CategoriesReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppCategoryId,

        [Parameter()]
        [System.String]
        $mobileAppId
    )
}
function Remove-DeviceAppManagement_MobileApps_ContentVersions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String]
        $mobileAppODataType,

        [Parameter()]
        [System.String]
        $mobileAppContentId
    )
}
function Remove-DeviceAppManagement_MobileApps_ContentVersions_Files
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppContentFileId,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String]
        $mobileAppODataType,

        [Parameter()]
        [System.String]
        $mobileAppContentId
    )
}
function Remove-DeviceAppManagement_TargetedManagedAppConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function Remove-DeviceAppManagement_TargetedManagedAppConfigurations_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function Remove-DeviceAppManagement_TargetedManagedAppConfigurations_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function Remove-DeviceAppManagement_TargetedManagedAppConfigurations_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function Remove-DeviceAppManagement_VppTokens
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $vppTokenId
    )
}
function Remove-DeviceAppManagement_WindowsInformationProtectionPolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId
    )
}
function Remove-DeviceAppManagement_WindowsInformationProtectionPolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId
    )
}
function Remove-DeviceAppManagement_WindowsInformationProtectionPolicies_ExemptAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId
    )
}
function Remove-DeviceAppManagement_WindowsInformationProtectionPolicies_ProtectedAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId
    )
}
function Remove-DeviceManagement
{
    [CmdletBinding()]
    param(

    )
}
function Remove-DeviceManagement_ApplePushNotificationCertificate
{
    [CmdletBinding()]
    param(

    )
}
function Remove-DeviceManagement_ConditionalAccessSettings
{
    [CmdletBinding()]
    param(

    )
}
function Remove-DeviceManagement_DetectedApps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $detectedAppId
    )
}
function Remove-DeviceManagement_DetectedApps_ManagedDevicesReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String]
        $detectedAppId
    )
}
function Remove-DeviceManagement_DeviceCategories
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCategoryId
    )
}
function Remove-DeviceManagement_DeviceCompliancePolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId
    )
}
function Remove-DeviceManagement_DeviceCompliancePolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyAssignmentId
    )
}
function Remove-DeviceManagement_DeviceCompliancePolicies_DeviceSettingStateSummaries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $settingStateDeviceSummaryId
    )
}
function Remove-DeviceManagement_DeviceCompliancePolicies_DeviceStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $deviceComplianceDeviceStatusId
    )
}
function Remove-DeviceManagement_DeviceCompliancePolicies_DeviceStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId
    )
}
function Remove-DeviceManagement_DeviceCompliancePolicies_ScheduledActionsForRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $deviceComplianceScheduledActionForRuleId
    )
}
function Remove-DeviceManagement_DeviceCompliancePolicies_ScheduledActionsForRule_ScheduledActionConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceComplianceActionItemId,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $deviceComplianceScheduledActionForRuleId
    )
}
function Remove-DeviceManagement_DeviceCompliancePolicies_UserStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $deviceComplianceUserStatusId
    )
}
function Remove-DeviceManagement_DeviceCompliancePolicies_UserStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId
    )
}
function Remove-DeviceManagement_DeviceCompliancePolicyDeviceStateSummary
{
    [CmdletBinding()]
    param(

    )
}
function Remove-DeviceManagement_DeviceCompliancePolicySettingStateSummaries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicySettingStateSummaryId
    )
}
function Remove-DeviceManagement_DeviceCompliancePolicySettingStateSummaries_DeviceComplianceSettingStates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceComplianceSettingStateId,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicySettingStateSummaryId
    )
}
function Remove-DeviceManagement_DeviceConfigurationDeviceStateSummaries
{
    [CmdletBinding()]
    param(

    )
}
function Remove-DeviceManagement_DeviceConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceConfigurationId
    )
}
function Remove-DeviceManagement_DeviceConfigurations_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceConfigurationAssignmentId,

        [Parameter()]
        [System.String]
        $deviceConfigurationId
    )
}
function Remove-DeviceManagement_DeviceConfigurations_DeviceSettingStateSummaries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $settingStateDeviceSummaryId,

        [Parameter()]
        [System.String]
        $deviceConfigurationId
    )
}
function Remove-DeviceManagement_DeviceConfigurations_DeviceStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceConfigurationDeviceStatusId,

        [Parameter()]
        [System.String]
        $deviceConfigurationId
    )
}
function Remove-DeviceManagement_DeviceConfigurations_DeviceStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceConfigurationId
    )
}
function Remove-DeviceManagement_DeviceConfigurations_UserStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceConfigurationUserStatusId,

        [Parameter()]
        [System.String]
        $deviceConfigurationId
    )
}
function Remove-DeviceManagement_DeviceConfigurations_UserStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceConfigurationId
    )
}
function Remove-DeviceManagement_DeviceEnrollmentConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceEnrollmentConfigurationId
    )
}
function Remove-DeviceManagement_DeviceEnrollmentConfigurations_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $enrollmentConfigurationAssignmentId,

        [Parameter()]
        [System.String]
        $deviceEnrollmentConfigurationId
    )
}
function Remove-DeviceManagement_DeviceManagementPartners
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceManagementPartnerId
    )
}
function Remove-DeviceManagement_ExchangeConnectors
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceManagementExchangeConnectorId
    )
}
function Remove-DeviceManagement_IosUpdateStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $iosUpdateDeviceStatusId
    )
}
function Remove-DeviceManagement_ManagedDeviceOverviewReference
{
    [CmdletBinding()]
    param(

    )
}
function Remove-DeviceManagement_ManagedDevices
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Remove-DeviceManagement_ManagedDevices_DeviceCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Remove-DeviceManagement_ManagedDevices_DeviceCompliancePolicyStates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyStateId
    )
}
function Remove-DeviceManagement_ManagedDevices_DeviceConfigurationStates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceConfigurationStateId,

        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Remove-DeviceManagement_MobileThreatDefenseConnectors
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileThreatDefenseConnectorId
    )
}
function Remove-DeviceManagement_NotificationMessageTemplates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $notificationMessageTemplateId
    )
}
function Remove-DeviceManagement_NotificationMessageTemplates_LocalizedNotificationMessages
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $notificationMessageTemplateId,

        [Parameter()]
        [System.String]
        $localizedNotificationMessageId
    )
}
function Remove-DeviceManagement_RemoteAssistancePartners
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $remoteAssistancePartnerId
    )
}
function Remove-DeviceManagement_ResourceOperations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $resourceOperationId
    )
}
function Remove-DeviceManagement_RoleAssignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceAndAppManagementRoleAssignmentId
    )
}
function Remove-DeviceManagement_RoleAssignments_RoleDefinitionReference
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $roleAssignmentODataType,

        [Parameter()]
        [System.String]
        $deviceAndAppManagementRoleAssignmentId
    )
}
function Remove-DeviceManagement_RoleDefinitions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $roleDefinitionId
    )
}
function Remove-DeviceManagement_RoleDefinitions_RoleAssignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $roleDefinitionId,

        [Parameter()]
        [System.String]
        $roleAssignmentId
    )
}
function Remove-DeviceManagement_RoleDefinitions_RoleAssignments_RoleDefinitionReference
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $roleDefinitionId,

        [Parameter()]
        [System.String]
        $roleAssignmentId
    )
}
function Remove-DeviceManagement_SoftwareUpdateStatusSummaryReference
{
    [CmdletBinding()]
    param(

    )
}
function Remove-DeviceManagement_TelecomExpenseManagementPartners
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $telecomExpenseManagementPartnerId
    )
}
function Remove-DeviceManagement_TermsAndConditions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $termsAndConditionId
    )
}
function Remove-DeviceManagement_TermsAndConditions_AcceptanceStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $termsAndConditionId,

        [Parameter()]
        [System.String]
        $termsAndConditionsAcceptanceStatusId
    )
}
function Remove-DeviceManagement_TermsAndConditions_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $termsAndConditionsAssignmentId,

        [Parameter()]
        [System.String]
        $termsAndConditionId
    )
}
function Remove-DeviceManagement_TroubleshootingEvents
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceManagementTroubleshootingEventId
    )
}
function Remove-DeviceManagement_WindowsInformationProtectionAppLearningSummaries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLearningSummaryId
    )
}
function Remove-DeviceManagement_WindowsInformationProtectionNetworkLearningSummaries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionNetworkLearningSummaryId
    )
}
function Remove-Groups
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Remove-Groups_CreatedOnBehalfOfReference
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Remove-Groups_GroupLifecyclePolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupLifecyclePolicyId,

        [Parameter()]
        [System.String]
        $groupId
    )
}
function Remove-Groups_MemberOfReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $directoryObjectId
    )
}
function Remove-Groups_MembersReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $directoryObjectId
    )
}
function Remove-Groups_MembersWithLicenseErrorsReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $directoryObjectId
    )
}
function Remove-Groups_OwnersReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $directoryObjectId
    )
}
function Remove-Groups_PhotoData
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Remove-Groups_PhotosData
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $profilePhotoId
    )
}
function Remove-Groups_Settings
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupSettingId,

        [Parameter()]
        [System.String]
        $groupId
    )
}
function Remove-Groups_TransitiveMemberOfReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $directoryObjectId
    )
}
function Remove-Groups_TransitiveMembersReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $directoryObjectId
    )
}
function Remove-Organization
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $organizationId
    )
}
function Remove-Organization_Extensions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $extensionId,

        [Parameter()]
        [System.String]
        $organizationId
    )
}
function Set-Groups_PhotoData
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $ContentType,

        [Parameter()]
        [System.String]
        $Data
    )
}
function Set-Groups_PhotosData
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $ContentType,

        [Parameter()]
        [System.String]
        $Data,

        [Parameter()]
        [System.String]
        $profilePhotoId
    )
}
function Update-DeviceAppManagement
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $microsoftStoreForBusinessLastSuccessfulSyncDateTime,

        [Parameter()]
        [System.Object[]]
        $targetedManagedAppConfigurations,

        [Parameter()]
        [System.Object[]]
        $managedEBooks,

        [Parameter()]
        [System.Object[]]
        $mobileApps,

        [Parameter()]
        [System.String]
        $microsoftStoreForBusinessLanguage,

        [Parameter()]
        [System.Object[]]
        $managedAppPolicies,

        [Parameter()]
        [System.Object[]]
        $managedAppStatuses,

        [Parameter()]
        [System.Boolean]
        $isEnabledForMicrosoftStoreForBusiness,

        [Parameter()]
        [System.Object[]]
        $managedAppRegistrations,

        [Parameter()]
        [System.Object[]]
        $defaultManagedAppProtections,

        [Parameter()]
        [System.DateTimeOffset]
        $microsoftStoreForBusinessLastCompletedApplicationSyncTime,

        [Parameter()]
        [System.Object[]]
        $iosManagedAppProtections,

        [Parameter()]
        [System.Object[]]
        $mobileAppCategories,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $vppTokens,

        [Parameter()]
        [System.Object[]]
        $windowsInformationProtectionPolicies,

        [Parameter()]
        [System.Object[]]
        $androidManagedAppProtections,

        [Parameter()]
        [System.Object[]]
        $mdmWindowsInformationProtectionPolicies,

        [Parameter()]
        [System.Object[]]
        $mobileAppConfigurations
    )
}
function Update-DeviceAppManagement_AndroidManagedAppProtections
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $minimumRequiredAppVersion,

        [Parameter()]
        [System.Int32]
        $minimumPinLength,

        [Parameter()]
        [System.String]
        $allowedInboundDataTransferSources,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Boolean]
        $disableAppEncryptionIfDeviceEncryptionIsEnabled,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $minimumRequiredOsVersion,

        [Parameter()]
        [System.Boolean]
        $pinRequired,

        [Parameter()]
        [System.String]
        $allowedOutboundDataTransferDestinations,

        [Parameter()]
        [System.Int32]
        $maximumPinRetries,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $minimumWarningOsVersion,

        [Parameter()]
        [System.Boolean]
        $fingerprintBlocked,

        [Parameter()]
        [System.Boolean]
        $managedBrowserToOpenLinksRequired,

        [Parameter()]
        [System.Boolean]
        $organizationalCredentialsRequired,

        [Parameter()]
        [System.Boolean]
        $simplePinBlocked,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeWipeIsEnforced,

        [Parameter()]
        [System.String[]]
        $allowedDataStorageLocations,

        [Parameter()]
        [System.Boolean]
        $screenCaptureBlocked,

        [Parameter()]
        [System.String]
        $minimumRequiredPatchVersion,

        [Parameter()]
        [System.Boolean]
        $encryptAppData,

        [Parameter()]
        [System.String]
        $allowedOutboundClipboardSharingLevel,

        [Parameter()]
        [System.Boolean]
        $printBlocked,

        [Parameter()]
        [System.String]
        $minimumWarningPatchVersion,

        [Parameter()]
        [System.TimeSpan]
        $periodBeforePinReset,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Boolean]
        $deviceComplianceRequired,

        [Parameter()]
        [System.Boolean]
        $dataBackupBlocked,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.Boolean]
        $contactSyncBlocked,

        [Parameter()]
        [System.Boolean]
        $disableAppPinIfDevicePinIsSet,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId,

        [Parameter()]
        [System.String]
        $minimumWarningAppVersion,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.String]
        $pinCharacterSet,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeAccessCheck,

        [Parameter()]
        [System.Boolean]
        $saveAsBlocked,

        [Parameter()]
        [System.TimeSpan]
        $periodOnlineBeforeAccessCheck
    )
}
function Update-DeviceAppManagement_AndroidManagedAppProtections_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId
    )
}
function Update-DeviceAppManagement_AndroidManagedAppProtections_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $androidManagedAppProtectionODataType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId
    )
}
function Update-DeviceAppManagement_AndroidManagedAppProtections_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId
    )
}
function Update-DeviceAppManagement_DefaultManagedAppProtections
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $minimumRequiredAppVersion,

        [Parameter()]
        [System.Int32]
        $minimumPinLength,

        [Parameter()]
        [System.String]
        $allowedInboundDataTransferSources,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Boolean]
        $disableAppEncryptionIfDeviceEncryptionIsEnabled,

        [Parameter()]
        [System.String]
        $minimumRequiredSdkVersion,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $faceIdBlocked,

        [Parameter()]
        [System.String]
        $minimumRequiredOsVersion,

        [Parameter()]
        [System.Boolean]
        $pinRequired,

        [Parameter()]
        [System.Object[]]
        $customSettings,

        [Parameter()]
        [System.String]
        $allowedOutboundDataTransferDestinations,

        [Parameter()]
        [System.Int32]
        $maximumPinRetries,

        [Parameter()]
        [System.String]
        $appDataEncryptionType,

        [Parameter()]
        [System.String]
        $minimumWarningOsVersion,

        [Parameter()]
        [System.Boolean]
        $fingerprintBlocked,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.Boolean]
        $managedBrowserToOpenLinksRequired,

        [Parameter()]
        [System.Boolean]
        $organizationalCredentialsRequired,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeWipeIsEnforced,

        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId,

        [Parameter()]
        [System.Boolean]
        $screenCaptureBlocked,

        [Parameter()]
        [System.Boolean]
        $encryptAppData,

        [Parameter()]
        [System.String]
        $minimumRequiredPatchVersion,

        [Parameter()]
        [System.Boolean]
        $simplePinBlocked,

        [Parameter()]
        [System.String]
        $allowedOutboundClipboardSharingLevel,

        [Parameter()]
        [System.Boolean]
        $printBlocked,

        [Parameter()]
        [System.String]
        $minimumWarningPatchVersion,

        [Parameter()]
        [System.TimeSpan]
        $periodBeforePinReset,

        [Parameter()]
        [System.Boolean]
        $deviceComplianceRequired,

        [Parameter()]
        [System.Boolean]
        $dataBackupBlocked,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.Boolean]
        $contactSyncBlocked,

        [Parameter()]
        [System.Boolean]
        $disableAppPinIfDevicePinIsSet,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String[]]
        $allowedDataStorageLocations,

        [Parameter()]
        [System.String]
        $minimumWarningAppVersion,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $pinCharacterSet,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeAccessCheck,

        [Parameter()]
        [System.Boolean]
        $saveAsBlocked,

        [Parameter()]
        [System.TimeSpan]
        $periodOnlineBeforeAccessCheck
    )
}
function Update-DeviceAppManagement_DefaultManagedAppProtections_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $managedMobileAppId
    )
}
function Update-DeviceAppManagement_DefaultManagedAppProtections_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp
    )
}
function Update-DeviceAppManagement_IosManagedAppProtections
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $minimumRequiredAppVersion,

        [Parameter()]
        [System.String]
        $allowedInboundDataTransferSources,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.String]
        $minimumRequiredSdkVersion,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $minimumRequiredOsVersion,

        [Parameter()]
        [System.Boolean]
        $pinRequired,

        [Parameter()]
        [System.String]
        $allowedOutboundDataTransferDestinations,

        [Parameter()]
        [System.Int32]
        $maximumPinRetries,

        [Parameter()]
        [System.String]
        $appDataEncryptionType,

        [Parameter()]
        [System.String]
        $minimumWarningOsVersion,

        [Parameter()]
        [System.Boolean]
        $fingerprintBlocked,

        [Parameter()]
        [System.Boolean]
        $managedBrowserToOpenLinksRequired,

        [Parameter()]
        [System.Boolean]
        $organizationalCredentialsRequired,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.Boolean]
        $faceIdBlocked,

        [Parameter()]
        [System.Boolean]
        $simplePinBlocked,

        [Parameter()]
        [System.String]
        $allowedOutboundClipboardSharingLevel,

        [Parameter()]
        [System.Boolean]
        $printBlocked,

        [Parameter()]
        [System.TimeSpan]
        $periodBeforePinReset,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Boolean]
        $deviceComplianceRequired,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeWipeIsEnforced,

        [Parameter()]
        [System.Boolean]
        $dataBackupBlocked,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.Boolean]
        $contactSyncBlocked,

        [Parameter()]
        [System.Boolean]
        $disableAppPinIfDevicePinIsSet,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String[]]
        $allowedDataStorageLocations,

        [Parameter()]
        [System.Int32]
        $minimumPinLength,

        [Parameter()]
        [System.String]
        $minimumWarningAppVersion,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.String]
        $pinCharacterSet,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeAccessCheck,

        [Parameter()]
        [System.Boolean]
        $saveAsBlocked,

        [Parameter()]
        [System.TimeSpan]
        $periodOnlineBeforeAccessCheck
    )
}
function Update-DeviceAppManagement_IosManagedAppProtections_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $managedMobileAppId
    )
}
function Update-DeviceAppManagement_IosManagedAppProtections_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionODataType,

        [Parameter()]
        [System.Object]
        $target
    )
}
function Update-DeviceAppManagement_IosManagedAppProtections_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp
    )
}
function Update-DeviceAppManagement_ManagedAppPolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $enterpriseProxyServers,

        [Parameter()]
        [System.Boolean]
        $fingerprintBlocked,

        [Parameter()]
        [System.Object[]]
        $enterpriseProtectedDomainNames,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosManagedAppProtection,

        [Parameter()]
        [System.Boolean]
        $revokeOnMdmHandoffDisabled,

        [Parameter()]
        [System.String]
        $enforcementLevel,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $smbAutoEncryptedFileExtensions,

        [Parameter()]
        [System.Boolean]
        $dataBackupBlocked,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.TimeSpan]
        $periodOnlineBeforeAccessCheck,

        [Parameter()]
        [System.Object[]]
        $customSettings,

        [Parameter()]
        [System.Int32]
        $pinExpirationDays,

        [Parameter()]
        [System.Boolean]
        $contactSyncBlocked,

        [Parameter()]
        [System.Boolean]
        $windowsHelloForBusinessBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $defaultManagedAppProtection,

        [Parameter()]
        [System.String]
        $minimumWarningPatchVersion,

        [Parameter()]
        [System.Int32]
        $numberOfPastPinsRemembered,

        [Parameter()]
        [System.String]
        $enterpriseDomain,

        [Parameter()]
        [System.Boolean]
        $printBlocked,

        [Parameter()]
        [System.Boolean]
        $pinRequired,

        [Parameter()]
        [System.String]
        $appDataEncryptionType,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.String[]]
        $allowedDataStorageLocations,

        [Parameter()]
        [System.Int32]
        $passwordMaximumAttemptCount,

        [Parameter()]
        [System.Boolean]
        $faceIdBlocked,

        [Parameter()]
        [System.Object[]]
        $enterpriseIPRanges,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $mdmWindowsInformationProtectionPolicy,

        [Parameter()]
        [System.Object[]]
        $exemptAppLockerFiles,

        [Parameter()]
        [System.Boolean]
        $enterpriseIPRangesAreAuthoritative,

        [Parameter()]
        [System.Boolean]
        $deviceComplianceRequired,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeAccessCheck,

        [Parameter()]
        [System.String]
        $minimumRequiredOsVersion,

        [Parameter()]
        [System.Boolean]
        $revokeOnUnenrollDisabled,

        [Parameter()]
        [System.Boolean]
        $disableAppEncryptionIfDeviceEncryptionIsEnabled,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $minimumWarningAppVersion,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxiedDomains,

        [Parameter()]
        [System.Int32]
        $maximumPinRetries,

        [Parameter()]
        [System.Object[]]
        $enterpriseInternalProxyServers,

        [Parameter()]
        [System.Boolean]
        $encryptAppData,

        [Parameter()]
        [System.Boolean]
        $enterpriseProxyServersAreAuthoritative,

        [Parameter()]
        [System.String]
        $pinSpecialCharacters,

        [Parameter()]
        [System.String]
        $allowedOutboundDataTransferDestinations,

        [Parameter()]
        [System.Boolean]
        $azureRightsManagementServicesAllowed,

        [Parameter()]
        [System.Object[]]
        $protectedApps,

        [Parameter()]
        [System.Boolean]
        $organizationalCredentialsRequired,

        [Parameter()]
        [System.Object[]]
        $protectedAppLockerFiles,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $pinLowercaseLetters,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Int32]
        $minimumPinLength,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidManagedAppProtection,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.String]
        $minimumRequiredSdkVersion,

        [Parameter()]
        [System.Boolean]
        $protectionUnderLockConfigRequired,

        [Parameter()]
        [System.Boolean]
        $simplePinBlocked,

        [Parameter()]
        [System.Boolean]
        $iconsVisible,

        [Parameter()]
        [System.String]
        $minimumRequiredAppVersion,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $targetedManagedAppConfiguration,

        [Parameter()]
        [System.Boolean]
        $screenCaptureBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsInformationProtectionPolicy,

        [Parameter()]
        [System.Object[]]
        $enterpriseNetworkDomainNames,

        [Parameter()]
        [System.Object[]]
        $exemptApps,

        [Parameter()]
        [System.String]
        $minimumWarningOsVersion,

        [Parameter()]
        [System.Int32]
        $minutesOfInactivityBeforeDeviceLock,

        [Parameter()]
        [System.Guid]
        $rightsManagementServicesTemplateId,

        [Parameter()]
        [System.Boolean]
        $indexingEncryptedStoresOrItemsBlocked,

        [Parameter()]
        [System.String]
        $mdmEnrollmentUrl,

        [Parameter()]
        [System.Object[]]
        $neutralDomainResources,

        [Parameter()]
        [System.String]
        $pinUppercaseLetters,

        [Parameter()]
        [System.Boolean]
        $saveAsBlocked,

        [Parameter()]
        [System.TimeSpan]
        $periodBeforePinReset,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $allowedInboundDataTransferSources,

        [Parameter()]
        [System.Int32]
        $daysWithoutContactBeforeUnenroll,

        [Parameter()]
        [System.Object]
        $dataRecoveryCertificate,

        [Parameter()]
        [System.Boolean]
        $disableAppPinIfDevicePinIsSet,

        [Parameter()]
        [System.String]
        $minimumRequiredPatchVersion,

        [Parameter()]
        [System.Int32]
        $pinMinimumLength,

        [Parameter()]
        [System.String]
        $allowedOutboundClipboardSharingLevel,

        [Parameter()]
        [System.Boolean]
        $managedBrowserToOpenLinksRequired,

        [Parameter()]
        [System.String]
        $pinCharacterSet,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeWipeIsEnforced
    )
}
function Update-DeviceAppManagement_ManagedAppPolicies_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Update-DeviceAppManagement_ManagedAppPolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Update-DeviceAppManagement_ManagedAppPolicies_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Update-DeviceAppManagement_ManagedAppPolicies_ExemptAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Update-DeviceAppManagement_ManagedAppPolicies_ProtectedAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Update-DeviceAppManagement_ManagedAppRegistrations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $deviceTag,

        [Parameter()]
        [System.String]
        $managementSdkVersion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosManagedAppRegistration,

        [Parameter()]
        [System.Object[]]
        $intendedPolicies,

        [Parameter()]
        [System.String]
        $applicationVersion,

        [Parameter()]
        [System.Object[]]
        $appliedPolicies,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $platformVersion,

        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $deviceType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $operations,

        [Parameter()]
        [System.String[]]
        $flaggedReasons,

        [Parameter()]
        [System.Object]
        $appIdentifier,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidManagedAppRegistration
    )
}
function Update-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $enterpriseProxyServers,

        [Parameter()]
        [System.Boolean]
        $fingerprintBlocked,

        [Parameter()]
        [System.Object[]]
        $enterpriseProtectedDomainNames,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosManagedAppProtection,

        [Parameter()]
        [System.Boolean]
        $revokeOnMdmHandoffDisabled,

        [Parameter()]
        [System.String]
        $enforcementLevel,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $smbAutoEncryptedFileExtensions,

        [Parameter()]
        [System.Boolean]
        $dataBackupBlocked,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.TimeSpan]
        $periodOnlineBeforeAccessCheck,

        [Parameter()]
        [System.Object[]]
        $customSettings,

        [Parameter()]
        [System.Int32]
        $pinExpirationDays,

        [Parameter()]
        [System.Boolean]
        $contactSyncBlocked,

        [Parameter()]
        [System.Boolean]
        $windowsHelloForBusinessBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $defaultManagedAppProtection,

        [Parameter()]
        [System.String]
        $minimumWarningPatchVersion,

        [Parameter()]
        [System.Int32]
        $numberOfPastPinsRemembered,

        [Parameter()]
        [System.String]
        $enterpriseDomain,

        [Parameter()]
        [System.Boolean]
        $printBlocked,

        [Parameter()]
        [System.Boolean]
        $pinRequired,

        [Parameter()]
        [System.String]
        $appDataEncryptionType,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.String[]]
        $allowedDataStorageLocations,

        [Parameter()]
        [System.Int32]
        $passwordMaximumAttemptCount,

        [Parameter()]
        [System.Boolean]
        $faceIdBlocked,

        [Parameter()]
        [System.Object[]]
        $enterpriseIPRanges,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $mdmWindowsInformationProtectionPolicy,

        [Parameter()]
        [System.Object[]]
        $exemptAppLockerFiles,

        [Parameter()]
        [System.Boolean]
        $enterpriseIPRangesAreAuthoritative,

        [Parameter()]
        [System.Boolean]
        $deviceComplianceRequired,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeAccessCheck,

        [Parameter()]
        [System.String]
        $minimumRequiredOsVersion,

        [Parameter()]
        [System.Boolean]
        $revokeOnUnenrollDisabled,

        [Parameter()]
        [System.Boolean]
        $disableAppEncryptionIfDeviceEncryptionIsEnabled,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $minimumWarningAppVersion,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxiedDomains,

        [Parameter()]
        [System.Int32]
        $maximumPinRetries,

        [Parameter()]
        [System.Object[]]
        $enterpriseInternalProxyServers,

        [Parameter()]
        [System.Boolean]
        $encryptAppData,

        [Parameter()]
        [System.Boolean]
        $enterpriseProxyServersAreAuthoritative,

        [Parameter()]
        [System.String]
        $pinSpecialCharacters,

        [Parameter()]
        [System.String]
        $allowedOutboundDataTransferDestinations,

        [Parameter()]
        [System.Boolean]
        $azureRightsManagementServicesAllowed,

        [Parameter()]
        [System.Object[]]
        $protectedApps,

        [Parameter()]
        [System.Boolean]
        $organizationalCredentialsRequired,

        [Parameter()]
        [System.Object[]]
        $protectedAppLockerFiles,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $pinLowercaseLetters,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Int32]
        $minimumPinLength,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidManagedAppProtection,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.String]
        $minimumRequiredSdkVersion,

        [Parameter()]
        [System.Boolean]
        $protectionUnderLockConfigRequired,

        [Parameter()]
        [System.Boolean]
        $simplePinBlocked,

        [Parameter()]
        [System.Boolean]
        $iconsVisible,

        [Parameter()]
        [System.String]
        $minimumRequiredAppVersion,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $targetedManagedAppConfiguration,

        [Parameter()]
        [System.Boolean]
        $screenCaptureBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsInformationProtectionPolicy,

        [Parameter()]
        [System.Object[]]
        $enterpriseNetworkDomainNames,

        [Parameter()]
        [System.Object[]]
        $exemptApps,

        [Parameter()]
        [System.String]
        $minimumWarningOsVersion,

        [Parameter()]
        [System.Int32]
        $minutesOfInactivityBeforeDeviceLock,

        [Parameter()]
        [System.Guid]
        $rightsManagementServicesTemplateId,

        [Parameter()]
        [System.Boolean]
        $indexingEncryptedStoresOrItemsBlocked,

        [Parameter()]
        [System.String]
        $mdmEnrollmentUrl,

        [Parameter()]
        [System.Object[]]
        $neutralDomainResources,

        [Parameter()]
        [System.String]
        $pinUppercaseLetters,

        [Parameter()]
        [System.Boolean]
        $saveAsBlocked,

        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.TimeSpan]
        $periodBeforePinReset,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $allowedInboundDataTransferSources,

        [Parameter()]
        [System.Int32]
        $daysWithoutContactBeforeUnenroll,

        [Parameter()]
        [System.Object]
        $dataRecoveryCertificate,

        [Parameter()]
        [System.Boolean]
        $disableAppPinIfDevicePinIsSet,

        [Parameter()]
        [System.String]
        $minimumRequiredPatchVersion,

        [Parameter()]
        [System.Int32]
        $pinMinimumLength,

        [Parameter()]
        [System.String]
        $allowedOutboundClipboardSharingLevel,

        [Parameter()]
        [System.Boolean]
        $managedBrowserToOpenLinksRequired,

        [Parameter()]
        [System.String]
        $pinCharacterSet,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeWipeIsEnforced
    )
}
function Update-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $appliedPolicyODataType
    )
}
function Update-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $appliedPolicyODataType
    )
}
function Update-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $appliedPolicyODataType
    )
}
function Update-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies_ExemptAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $appliedPolicyODataType
    )
}
function Update-DeviceAppManagement_ManagedAppRegistrations_AppliedPolicies_ProtectedAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $appliedPolicyODataType
    )
}
function Update-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $enterpriseProxyServers,

        [Parameter()]
        [System.Boolean]
        $fingerprintBlocked,

        [Parameter()]
        [System.Object[]]
        $enterpriseProtectedDomainNames,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosManagedAppProtection,

        [Parameter()]
        [System.Boolean]
        $revokeOnMdmHandoffDisabled,

        [Parameter()]
        [System.String]
        $enforcementLevel,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $smbAutoEncryptedFileExtensions,

        [Parameter()]
        [System.Boolean]
        $dataBackupBlocked,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.TimeSpan]
        $periodOnlineBeforeAccessCheck,

        [Parameter()]
        [System.Object[]]
        $customSettings,

        [Parameter()]
        [System.Int32]
        $pinExpirationDays,

        [Parameter()]
        [System.Boolean]
        $contactSyncBlocked,

        [Parameter()]
        [System.Boolean]
        $windowsHelloForBusinessBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $defaultManagedAppProtection,

        [Parameter()]
        [System.String]
        $minimumWarningPatchVersion,

        [Parameter()]
        [System.Int32]
        $numberOfPastPinsRemembered,

        [Parameter()]
        [System.String]
        $enterpriseDomain,

        [Parameter()]
        [System.Boolean]
        $printBlocked,

        [Parameter()]
        [System.Boolean]
        $pinRequired,

        [Parameter()]
        [System.String]
        $appDataEncryptionType,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.String[]]
        $allowedDataStorageLocations,

        [Parameter()]
        [System.Int32]
        $passwordMaximumAttemptCount,

        [Parameter()]
        [System.Boolean]
        $faceIdBlocked,

        [Parameter()]
        [System.Object[]]
        $enterpriseIPRanges,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $mdmWindowsInformationProtectionPolicy,

        [Parameter()]
        [System.Object[]]
        $exemptAppLockerFiles,

        [Parameter()]
        [System.Boolean]
        $enterpriseIPRangesAreAuthoritative,

        [Parameter()]
        [System.Boolean]
        $deviceComplianceRequired,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeAccessCheck,

        [Parameter()]
        [System.String]
        $minimumRequiredOsVersion,

        [Parameter()]
        [System.Boolean]
        $revokeOnUnenrollDisabled,

        [Parameter()]
        [System.Boolean]
        $disableAppEncryptionIfDeviceEncryptionIsEnabled,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $minimumWarningAppVersion,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxiedDomains,

        [Parameter()]
        [System.Int32]
        $maximumPinRetries,

        [Parameter()]
        [System.Object[]]
        $enterpriseInternalProxyServers,

        [Parameter()]
        [System.Boolean]
        $encryptAppData,

        [Parameter()]
        [System.Boolean]
        $enterpriseProxyServersAreAuthoritative,

        [Parameter()]
        [System.String]
        $pinSpecialCharacters,

        [Parameter()]
        [System.String]
        $allowedOutboundDataTransferDestinations,

        [Parameter()]
        [System.Boolean]
        $azureRightsManagementServicesAllowed,

        [Parameter()]
        [System.Object[]]
        $protectedApps,

        [Parameter()]
        [System.Boolean]
        $organizationalCredentialsRequired,

        [Parameter()]
        [System.Object[]]
        $protectedAppLockerFiles,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $pinLowercaseLetters,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Int32]
        $minimumPinLength,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidManagedAppProtection,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.String]
        $minimumRequiredSdkVersion,

        [Parameter()]
        [System.Boolean]
        $protectionUnderLockConfigRequired,

        [Parameter()]
        [System.Boolean]
        $simplePinBlocked,

        [Parameter()]
        [System.Boolean]
        $iconsVisible,

        [Parameter()]
        [System.String]
        $minimumRequiredAppVersion,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $targetedManagedAppConfiguration,

        [Parameter()]
        [System.Boolean]
        $screenCaptureBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsInformationProtectionPolicy,

        [Parameter()]
        [System.Object[]]
        $enterpriseNetworkDomainNames,

        [Parameter()]
        [System.Object[]]
        $exemptApps,

        [Parameter()]
        [System.String]
        $minimumWarningOsVersion,

        [Parameter()]
        [System.Int32]
        $minutesOfInactivityBeforeDeviceLock,

        [Parameter()]
        [System.Guid]
        $rightsManagementServicesTemplateId,

        [Parameter()]
        [System.Boolean]
        $indexingEncryptedStoresOrItemsBlocked,

        [Parameter()]
        [System.String]
        $mdmEnrollmentUrl,

        [Parameter()]
        [System.Object[]]
        $neutralDomainResources,

        [Parameter()]
        [System.String]
        $pinUppercaseLetters,

        [Parameter()]
        [System.Boolean]
        $saveAsBlocked,

        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.TimeSpan]
        $periodBeforePinReset,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $allowedInboundDataTransferSources,

        [Parameter()]
        [System.Int32]
        $daysWithoutContactBeforeUnenroll,

        [Parameter()]
        [System.Object]
        $dataRecoveryCertificate,

        [Parameter()]
        [System.Boolean]
        $disableAppPinIfDevicePinIsSet,

        [Parameter()]
        [System.String]
        $minimumRequiredPatchVersion,

        [Parameter()]
        [System.Int32]
        $pinMinimumLength,

        [Parameter()]
        [System.String]
        $allowedOutboundClipboardSharingLevel,

        [Parameter()]
        [System.Boolean]
        $managedBrowserToOpenLinksRequired,

        [Parameter()]
        [System.String]
        $pinCharacterSet,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeWipeIsEnforced
    )
}
function Update-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $intendedPolicyODataType
    )
}
function Update-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $intendedPolicyODataType
    )
}
function Update-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $intendedPolicyODataType
    )
}
function Update-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies_ExemptAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $intendedPolicyODataType,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Update-DeviceAppManagement_ManagedAppRegistrations_IntendedPolicies_ProtectedAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $intendedPolicyODataType,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Update-DeviceAppManagement_ManagedAppRegistrations_Operations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $managedAppOperationId,

        [Parameter()]
        [System.String]
        $state
    )
}
function Update-DeviceAppManagement_ManagedAppStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $managedAppStatusId,

        [Parameter()]
        [System.Object]
        $content,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedAppStatusRaw
    )
}
function Update-DeviceAppManagement_ManagedEBooks
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.DateTimeOffset]
        $publishedDateTime,

        [Parameter()]
        [System.Int32]
        $totalLicenseCount,

        [Parameter()]
        [System.Guid]
        $vppTokenId,

        [Parameter()]
        [System.String]
        $seller,

        [Parameter()]
        [System.String]
        $vppOrganizationName,

        [Parameter()]
        [System.Object[]]
        $deviceStates,

        [Parameter()]
        [System.Object]
        $largeCover,

        [Parameter()]
        [System.String[]]
        $genres,

        [Parameter()]
        [System.Object]
        $installSummary,

        [Parameter()]
        [System.Int32]
        $usedLicenseCount,

        [Parameter()]
        [System.String]
        $privacyInformationUrl,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $appleId,

        [Parameter()]
        [System.Object[]]
        $userStateSummary,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosVppEBook,

        [Parameter()]
        [System.String]
        $managedEBookId,

        [Parameter()]
        [System.String]
        $language,

        [Parameter()]
        [System.String]
        $publisher,

        [Parameter()]
        [System.String]
        $informationUrl
    )
}
function Update-DeviceAppManagement_ManagedEBooks_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $installIntent,

        [Parameter()]
        [System.String]
        $managedEBookAssignmentId,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosVppEBookAssignment,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedEBookAssignment,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Update-DeviceAppManagement_ManagedEBooks_DeviceStates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $errorCode,

        [Parameter()]
        [System.String]
        $installState,

        [Parameter()]
        [System.String]
        $deviceInstallStateId,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $osDescription,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.String]
        $deviceId,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Update-DeviceAppManagement_ManagedEBooks_InstallSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notInstalledDeviceCount,

        [Parameter()]
        [System.Int32]
        $failedUserCount,

        [Parameter()]
        [System.Int32]
        $installedUserCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $failedDeviceCount,

        [Parameter()]
        [System.Int32]
        $installedDeviceCount,

        [Parameter()]
        [System.Int32]
        $notInstalledUserCount,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Update-DeviceAppManagement_ManagedEBooks_UserStateSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notInstalledDeviceCount,

        [Parameter()]
        [System.Int32]
        $failedDeviceCount,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $userInstallStateSummaryId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $deviceStates,

        [Parameter()]
        [System.Int32]
        $installedDeviceCount,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Update-DeviceAppManagement_ManagedEBooks_UserStateSummary_DeviceStates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $errorCode,

        [Parameter()]
        [System.String]
        $userInstallStateSummaryId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $managedEBookId,

        [Parameter()]
        [System.String]
        $deviceInstallStateId,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $osDescription,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.String]
        $deviceId,

        [Parameter()]
        [System.String]
        $installState
    )
}
function Update-DeviceAppManagement_MdmWindowsInformationProtectionPolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxiedDomains,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $enterpriseProxyServersAreAuthoritative,

        [Parameter()]
        [System.Object[]]
        $smbAutoEncryptedFileExtensions,

        [Parameter()]
        [System.Boolean]
        $protectionUnderLockConfigRequired,

        [Parameter()]
        [System.String]
        $enforcementLevel,

        [Parameter()]
        [System.String]
        $enterpriseDomain,

        [Parameter()]
        [System.Object[]]
        $enterpriseInternalProxyServers,

        [Parameter()]
        [System.Boolean]
        $indexingEncryptedStoresOrItemsBlocked,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Boolean]
        $revokeOnUnenrollDisabled,

        [Parameter()]
        [System.Guid]
        $rightsManagementServicesTemplateId,

        [Parameter()]
        [System.Object[]]
        $exemptAppLockerFiles,

        [Parameter()]
        [System.Object]
        $dataRecoveryCertificate,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Object[]]
        $neutralDomainResources,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxyServers,

        [Parameter()]
        [System.Object[]]
        $exemptApps,

        [Parameter()]
        [System.Boolean]
        $azureRightsManagementServicesAllowed,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Boolean]
        $enterpriseIPRangesAreAuthoritative,

        [Parameter()]
        [System.Boolean]
        $iconsVisible,

        [Parameter()]
        [System.Object[]]
        $enterpriseProtectedDomainNames,

        [Parameter()]
        [System.Object[]]
        $protectedAppLockerFiles,

        [Parameter()]
        [System.Object[]]
        $protectedApps,

        [Parameter()]
        [System.Object[]]
        $enterpriseIPRanges,

        [Parameter()]
        [System.Object[]]
        $enterpriseNetworkDomainNames
    )
}
function Update-DeviceAppManagement_MdmWindowsInformationProtectionPolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.Object]
        $target
    )
}
function Update-DeviceAppManagement_MdmWindowsInformationProtectionPolicies_ExemptAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId
    )
}
function Update-DeviceAppManagement_MdmWindowsInformationProtectionPolicies_ProtectedAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId
    )
}
function Update-DeviceAppManagement_MobileAppCategories
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $mobileAppCategoryId,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-DeviceAppManagement_MobileAppConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $settings,

        [Parameter()]
        [System.Byte[]]
        $encodedSettingXml,

        [Parameter()]
        [System.Object]
        $deviceStatusSummary,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.Object[]]
        $deviceStatuses,

        [Parameter()]
        [System.String[]]
        $targetedMobileApps,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $userStatusSummary,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosMobileAppConfiguration,

        [Parameter()]
        [System.Object[]]
        $userStatuses
    )
}
function Update-DeviceAppManagement_MobileAppConfigurations_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationAssignmentId,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-DeviceAppManagement_MobileAppConfigurations_DeviceStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationDeviceStatusId,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.String]
        $deviceDisplayName,

        [Parameter()]
        [System.String]
        $deviceModel
    )
}
function Update-DeviceAppManagement_MobileAppConfigurations_DeviceStatusSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime,

        [Parameter()]
        [System.Int32]
        $failedCount
    )
}
function Update-DeviceAppManagement_MobileAppConfigurations_UserStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $devicesCount,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationUserStatusId,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.String]
        $status
    )
}
function Update-DeviceAppManagement_MobileAppConfigurations_UserStatusSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime,

        [Parameter()]
        [System.Int32]
        $failedCount
    )
}
function Update-DeviceAppManagement_MobileApps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $useManagedBrowser,

        [Parameter()]
        [System.String]
        $versionNumber,

        [Parameter()]
        [System.String]
        $identityPublisherHash,

        [Parameter()]
        [System.String]
        $identityVersion,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosStoreApp,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsUniversalAppX,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosVppApp,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.Int32]
        $totalLicenseCount,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedAndroidStoreApp,

        [Parameter()]
        [System.String]
        $versionName,

        [Parameter()]
        [System.String]
        $appUrl,

        [Parameter()]
        [System.Boolean]
        $isBundle,

        [Parameter()]
        [System.DateTimeOffset]
        $expirationDateTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSOfficeSuiteApp,

        [Parameter()]
        [System.Int64]
        $size,

        [Parameter()]
        [System.String]
        $productKey,

        [Parameter()]
        [System.Object]
        $minimumSupportedOperatingSystem,

        [Parameter()]
        [System.Object]
        $largeIcon,

        [Parameter()]
        [System.Int32]
        $usedLicenseCount,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedAndroidLobApp,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $isFeatured,

        [Parameter()]
        [System.String]
        $fileName,

        [Parameter()]
        [System.String]
        $vppTokenAppleId,

        [Parameter()]
        [System.String]
        $owner,

        [Parameter()]
        [System.String]
        $committedContentVersion,

        [Parameter()]
        [System.Object[]]
        $categories,

        [Parameter()]
        [System.String]
        $informationUrl,

        [Parameter()]
        [System.String]
        $applicableArchitectures,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidLobApp,

        [Parameter()]
        [System.String]
        $notes,

        [Parameter()]
        [System.Boolean]
        $ignoreVersionDetection,

        [Parameter()]
        [System.String]
        $versionCode,

        [Parameter()]
        [System.String]
        $bundleId,

        [Parameter()]
        [System.String]
        $packageId,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $commandLine,

        [Parameter()]
        [System.String]
        $applicableDeviceTypes,

        [Parameter()]
        [System.String]
        $productVersion,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Object[]]
        $contentVersions,

        [Parameter()]
        [System.DateTimeOffset]
        $releaseDateTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidStoreApp,

        [Parameter()]
        [System.Object]
        $licensingType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $microsoftStoreForBusinessApp,

        [Parameter()]
        [System.String]
        $publishingState,

        [Parameter()]
        [System.String]
        $packageIdentityName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedIOSLobApp,

        [Parameter()]
        [System.String]
        $identityResourceIdentifier,

        [Parameter()]
        [System.String]
        $appStoreUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosLobApp,

        [Parameter()]
        [System.String]
        $buildNumber,

        [Parameter()]
        [System.Object]
        $applicableDeviceType,

        [Parameter()]
        [System.String]
        $privacyInformationUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedIOSStoreApp,

        [Parameter()]
        [System.String]
        $licenseType,

        [Parameter()]
        [System.String]
        $appAvailability,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $publisher,

        [Parameter()]
        [System.String]
        $productCode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $webApp,

        [Parameter()]
        [System.String]
        $vppTokenOrganizationName,

        [Parameter()]
        [System.String]
        $identityName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsMobileMSI,

        [Parameter()]
        [System.String]
        $developer,

        [Parameter()]
        [System.String]
        $vppTokenAccountType
    )
}
function Update-DeviceAppManagement_MobileApps_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $mobileAppAssignmentId,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String]
        $intent,

        [Parameter()]
        [System.Object]
        $settings
    )
}
function Update-DeviceAppManagement_MobileApps_ContentVersions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String]
        $mobileAppODataType,

        [Parameter()]
        [System.String]
        $mobileAppContentId,

        [Parameter()]
        [System.Object[]]
        $files
    )
}
function Update-DeviceAppManagement_MobileApps_ContentVersions_Files
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppODataType,

        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Boolean]
        $isCommitted,

        [Parameter()]
        [System.DateTimeOffset]
        $azureStorageUriExpirationDateTime,

        [Parameter()]
        [System.Int64]
        $sizeEncrypted,

        [Parameter()]
        [System.Int64]
        $size,

        [Parameter()]
        [System.String]
        $mobileAppContentFileId,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.Byte[]]
        $manifest,

        [Parameter()]
        [System.String]
        $mobileAppContentId,

        [Parameter()]
        [System.String]
        $uploadState,

        [Parameter()]
        [System.String]
        $azureStorageUri,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-DeviceAppManagement_TargetedManagedAppConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $customSettings,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.Object[]]
        $assignments
    )
}
function Update-DeviceAppManagement_TargetedManagedAppConfigurations_Apps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function Update-DeviceAppManagement_TargetedManagedAppConfigurations_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-DeviceAppManagement_TargetedManagedAppConfigurations_DeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function Update-DeviceAppManagement_VppTokens
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $expirationDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $organizationName,

        [Parameter()]
        [System.String]
        $appleId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.Boolean]
        $automaticallyUpdateApps,

        [Parameter()]
        [System.String]
        $token,

        [Parameter()]
        [System.String]
        $vppTokenId,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.String]
        $lastSyncStatus,

        [Parameter()]
        [System.String]
        $countryOrRegion,

        [Parameter()]
        [System.String]
        $vppTokenAccountType
    )
}
function Update-DeviceAppManagement_WindowsInformationProtectionPolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $enforcementLevel,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $pinLowercaseLetters,

        [Parameter()]
        [System.Boolean]
        $enterpriseProxyServersAreAuthoritative,

        [Parameter()]
        [System.Object[]]
        $smbAutoEncryptedFileExtensions,

        [Parameter()]
        [System.Boolean]
        $protectionUnderLockConfigRequired,

        [Parameter()]
        [System.Boolean]
        $windowsHelloForBusinessBlocked,

        [Parameter()]
        [System.String]
        $enterpriseDomain,

        [Parameter()]
        [System.Object[]]
        $enterpriseInternalProxyServers,

        [Parameter()]
        [System.Boolean]
        $indexingEncryptedStoresOrItemsBlocked,

        [Parameter()]
        [System.Int32]
        $minutesOfInactivityBeforeDeviceLock,

        [Parameter()]
        [System.Boolean]
        $enterpriseIPRangesAreAuthoritative,

        [Parameter()]
        [System.String]
        $pinUppercaseLetters,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Boolean]
        $revokeOnUnenrollDisabled,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId,

        [Parameter()]
        [System.Guid]
        $rightsManagementServicesTemplateId,

        [Parameter()]
        [System.Int32]
        $numberOfPastPinsRemembered,

        [Parameter()]
        [System.Int32]
        $pinMinimumLength,

        [Parameter()]
        [System.Object[]]
        $exemptAppLockerFiles,

        [Parameter()]
        [System.Object]
        $dataRecoveryCertificate,

        [Parameter()]
        [System.Object[]]
        $exemptApps,

        [Parameter()]
        [System.Boolean]
        $revokeOnMdmHandoffDisabled,

        [Parameter()]
        [System.String]
        $mdmEnrollmentUrl,

        [Parameter()]
        [System.Object[]]
        $neutralDomainResources,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxyServers,

        [Parameter()]
        [System.Boolean]
        $azureRightsManagementServicesAllowed,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $pinSpecialCharacters,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Int32]
        $daysWithoutContactBeforeUnenroll,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxiedDomains,

        [Parameter()]
        [System.Boolean]
        $iconsVisible,

        [Parameter()]
        [System.Object[]]
        $enterpriseProtectedDomainNames,

        [Parameter()]
        [System.Object[]]
        $protectedAppLockerFiles,

        [Parameter()]
        [System.Int32]
        $passwordMaximumAttemptCount,

        [Parameter()]
        [System.Object[]]
        $protectedApps,

        [Parameter()]
        [System.Int32]
        $pinExpirationDays,

        [Parameter()]
        [System.Object[]]
        $enterpriseIPRanges,

        [Parameter()]
        [System.Object[]]
        $enterpriseNetworkDomainNames
    )
}
function Update-DeviceAppManagement_WindowsInformationProtectionPolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $target
    )
}
function Update-DeviceAppManagement_WindowsInformationProtectionPolicies_ExemptAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-DeviceAppManagement_WindowsInformationProtectionPolicies_ProtectedAppLockerFiles
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-DeviceManagement
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $deviceCategories,

        [Parameter()]
        [System.Object]
        $applePushNotificationCertificate,

        [Parameter()]
        [System.Object[]]
        $deviceManagementPartners,

        [Parameter()]
        [System.Object[]]
        $termsAndConditions,

        [Parameter()]
        [System.Object]
        $settings,

        [Parameter()]
        [System.Object[]]
        $windowsInformationProtectionNetworkLearningSummaries,

        [Parameter()]
        [System.String]
        $subscriptionState,

        [Parameter()]
        [System.Object]
        $deviceCompliancePolicyDeviceStateSummary,

        [Parameter()]
        [System.Object]
        $intuneBrand,

        [Parameter()]
        [System.Object[]]
        $troubleshootingEvents,

        [Parameter()]
        [System.Object]
        $deviceConfigurationDeviceStateSummaries,

        [Parameter()]
        [System.Object[]]
        $roleDefinitions,

        [Parameter()]
        [System.Object[]]
        $telecomExpenseManagementPartners,

        [Parameter()]
        [System.Object]
        $managedDeviceOverview,

        [Parameter()]
        [System.Object]
        $softwareUpdateStatusSummary,

        [Parameter()]
        [System.Object[]]
        $managedDevices,

        [Parameter()]
        [System.Object[]]
        $notificationMessageTemplates,

        [Parameter()]
        [System.Object[]]
        $roleAssignments,

        [Parameter()]
        [System.Object[]]
        $resourceOperations,

        [Parameter()]
        [System.Object[]]
        $deviceCompliancePolicies,

        [Parameter()]
        [System.Object[]]
        $windowsInformationProtectionAppLearningSummaries,

        [Parameter()]
        [System.Object[]]
        $remoteAssistancePartners,

        [Parameter()]
        [System.Object[]]
        $exchangeConnectors,

        [Parameter()]
        [System.Object[]]
        $iosUpdateStatuses,

        [Parameter()]
        [System.Object[]]
        $mobileThreatDefenseConnectors,

        [Parameter()]
        [System.Object]
        $conditionalAccessSettings,

        [Parameter()]
        [System.Object[]]
        $deviceConfigurations,

        [Parameter()]
        [System.Object[]]
        $detectedApps,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $deviceEnrollmentConfigurations,

        [Parameter()]
        [System.Object[]]
        $deviceCompliancePolicySettingStateSummaries
    )
}
function Update-DeviceManagement_ApplePushNotificationCertificate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $expirationDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $certificate,

        [Parameter()]
        [System.String]
        $topicIdentifier,

        [Parameter()]
        [System.String]
        $appleIdentifier,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-DeviceManagement_ConditionalAccessSettings
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Guid[]]
        $includedGroups,

        [Parameter()]
        [System.Guid[]]
        $excludedGroups,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Boolean]
        $overrideDefaultRule,

        [Parameter()]
        [System.Boolean]
        $enabled
    )
}
function Update-DeviceManagement_DetectedApps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $detectedAppId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $managedDevices,

        [Parameter()]
        [System.Int32]
        $deviceCount,

        [Parameter()]
        [System.Int64]
        $sizeInByte
    )
}
function Update-DeviceManagement_DeviceCategories
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCategoryId,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-DeviceManagement_DeviceCompliancePolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $passcodeBlockSimple,

        [Parameter()]
        [System.Boolean]
        $firewallEnabled,

        [Parameter()]
        [System.String]
        $mobileOsMinimumVersion,

        [Parameter()]
        [System.Int32]
        $passcodeExpirationDays,

        [Parameter()]
        [System.Boolean]
        $bitLockerEnabled,

        [Parameter()]
        [System.String]
        $minAndroidSecurityPatchLevel,

        [Parameter()]
        [System.Object[]]
        $userStatuses,

        [Parameter()]
        [System.Object[]]
        $deviceSettingStateSummaries,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosCompliancePolicy,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Boolean]
        $firewallEnableStealthMode,

        [Parameter()]
        [System.String]
        $passwordRequiredType,

        [Parameter()]
        [System.String]
        $osMinimumVersion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsPhone81CompliancePolicy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows81CompliancePolicy,

        [Parameter()]
        [System.Boolean]
        $securityRequireGooglePlayServices,

        [Parameter()]
        [System.String]
        $mobileOsMaximumVersion,

        [Parameter()]
        [System.Boolean]
        $securityDisableUsbDebugging,

        [Parameter()]
        [System.Boolean]
        $storageRequireEncryption,

        [Parameter()]
        [System.Int32]
        $passcodeMinimumLength,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10CompliancePolicy,

        [Parameter()]
        [System.Object]
        $userStatusOverview,

        [Parameter()]
        [System.Boolean]
        $codeIntegrityEnabled,

        [Parameter()]
        [System.Boolean]
        $securityRequireUpToDateSecurityProviders,

        [Parameter()]
        [System.Boolean]
        $securityBlockJailbrokenDevices,

        [Parameter()]
        [System.Int32]
        $passcodeMinimumCharacterSetCount,

        [Parameter()]
        [System.Boolean]
        $securityRequireSafetyNetAttestationBasicIntegrity,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Int32]
        $passcodePreviousPasscodeBlockCount,

        [Parameter()]
        [System.Int32]
        $passcodeMinutesOfInactivityBeforeLock,

        [Parameter()]
        [System.Int32]
        $passwordExpirationDays,

        [Parameter()]
        [System.Boolean]
        $securityRequireCompanyPortalAppIntegrity,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Boolean]
        $securityPreventInstallAppsFromUnknownSources,

        [Parameter()]
        [System.Int32]
        $passwordPreviousPasswordBlockCount,

        [Parameter()]
        [System.Boolean]
        $firewallBlockAllIncoming,

        [Parameter()]
        [System.Object]
        $deviceStatusOverview,

        [Parameter()]
        [System.Boolean]
        $securityRequireSafetyNetAttestationCertifiedDevice,

        [Parameter()]
        [System.Int32]
        $passwordMinimumCharacterSetCount,

        [Parameter()]
        [System.Boolean]
        $earlyLaunchAntiMalwareDriverEnabled,

        [Parameter()]
        [System.Boolean]
        $passwordBlockSimple,

        [Parameter()]
        [System.Boolean]
        $requireHealthyDeviceReport,

        [Parameter()]
        [System.String]
        $passcodeRequiredType,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.Boolean]
        $passwordRequired,

        [Parameter()]
        [System.Boolean]
        $passwordRequireToUnlockFromIdle,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Int32]
        $passwordMinimumLength,

        [Parameter()]
        [System.Boolean]
        $systemIntegrityProtectionEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidCompliancePolicy,

        [Parameter()]
        [System.Object[]]
        $deviceStatuses,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSCompliancePolicy,

        [Parameter()]
        [System.Boolean]
        $passcodeRequired,

        [Parameter()]
        [System.Boolean]
        $deviceThreatProtectionEnabled,

        [Parameter()]
        [System.Boolean]
        $secureBootEnabled,

        [Parameter()]
        [System.Boolean]
        $securityRequireVerifyApps,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidWorkProfileCompliancePolicy,

        [Parameter()]
        [System.Boolean]
        $managedEmailProfileRequired,

        [Parameter()]
        [System.String]
        $deviceThreatProtectionRequiredSecurityLevel,

        [Parameter()]
        [System.Object[]]
        $scheduledActionsForRule,

        [Parameter()]
        [System.String]
        $osMaximumVersion,

        [Parameter()]
        [System.Int32]
        $passwordMinutesOfInactivityBeforeLock,

        [Parameter()]
        [System.Boolean]
        $passwordRequiredToUnlockFromIdle,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10MobileCompliancePolicy
    )
}
function Update-DeviceManagement_DeviceCompliancePolicies_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyAssignmentId,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-DeviceManagement_DeviceCompliancePolicies_DeviceSettingStateSummaries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.String]
        $settingName,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.String]
        $instancePath,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $settingStateDeviceSummaryId,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function Update-DeviceManagement_DeviceCompliancePolicies_DeviceStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $deviceModel,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.String]
        $deviceDisplayName,

        [Parameter()]
        [System.String]
        $deviceComplianceDeviceStatusId
    )
}
function Update-DeviceManagement_DeviceCompliancePolicies_DeviceStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.Int32]
        $failedCount,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime
    )
}
function Update-DeviceManagement_DeviceCompliancePolicies_ScheduledActionsForRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $scheduledActionConfigurations,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $ruleName,

        [Parameter()]
        [System.String]
        $deviceComplianceScheduledActionForRuleId
    )
}
function Update-DeviceManagement_DeviceCompliancePolicies_ScheduledActionsForRule_ScheduledActionConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $deviceComplianceActionItemId,

        [Parameter()]
        [System.String]
        $actionType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $notificationTemplateId,

        [Parameter()]
        [System.Int32]
        $gracePeriodHours,

        [Parameter()]
        [System.String]
        $deviceComplianceScheduledActionForRuleId,

        [Parameter()]
        [System.String[]]
        $notificationMessageCCList
    )
}
function Update-DeviceManagement_DeviceCompliancePolicies_UserStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.String]
        $deviceComplianceUserStatusId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $devicesCount,

        [Parameter()]
        [System.String]
        $status
    )
}
function Update-DeviceManagement_DeviceCompliancePolicies_UserStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.Int32]
        $failedCount,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime
    )
}
function Update-DeviceManagement_DeviceCompliancePolicyDeviceStateSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $inGracePeriodCount,

        [Parameter()]
        [System.Int32]
        $configManagerCount,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function Update-DeviceManagement_DeviceCompliancePolicySettingStateSummaries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.String]
        $settingName,

        [Parameter()]
        [System.String]
        $setting,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $deviceComplianceSettingStates,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicySettingStateSummaryId,

        [Parameter()]
        [System.String]
        $platformType,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function Update-DeviceManagement_DeviceCompliancePolicySettingStateSummaries_DeviceComplianceSettingStates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userEmail,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $settingName,

        [Parameter()]
        [System.String]
        $deviceComplianceSettingStateId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $setting,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicySettingStateSummaryId,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $deviceModel,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.String]
        $deviceId
    )
}
function Update-DeviceManagement_DeviceConfigurationDeviceStateSummaries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function Update-DeviceManagement_DeviceConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $settingsBlockChangeLanguage,

        [Parameter()]
        [System.Boolean]
        $browserBlockSingleWordEntryOnIntranetSites,

        [Parameter()]
        [System.Boolean]
        $settingsBlockNetworkInternetPage,

        [Parameter()]
        [System.Byte[]]
        $startMenuLayoutXml,

        [Parameter()]
        [System.Boolean]
        $appStoreBlockInAppPurchases,

        [Parameter()]
        [System.Boolean]
        $edgeBlockAccessToAboutFlags,

        [Parameter()]
        [System.Boolean]
        $airDropBlocked,

        [Parameter()]
        [System.Boolean]
        $oneDriveDisableFileSync,

        [Parameter()]
        [System.Boolean]
        $edgeBlockAutofill,

        [Parameter()]
        [System.Object]
        $edgeSearchEngine,

        [Parameter()]
        [System.String]
        $appsAllowTrustedAppsSideloading,

        [Parameter()]
        [System.Object[]]
        $appsSingleAppModeList,

        [Parameter()]
        [System.Boolean]
        $workProfileRequirePassword,

        [Parameter()]
        [System.Boolean]
        $firewallIPSecExemptionsAllowDHCP,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidCustomConfiguration,

        [Parameter()]
        [System.Boolean]
        $firewallIPSecExemptionsAllowRouterDiscovery,

        [Parameter()]
        [System.String]
        $firewallPreSharedKeyEncodingMethod,

        [Parameter()]
        [System.Boolean]
        $resetProtectionModeBlocked,

        [Parameter()]
        [System.Boolean]
        $startMenuHideRecentJumpLists,

        [Parameter()]
        [System.String]
        $userAccountControlSettings,

        [Parameter()]
        [System.String]
        $appsVisibilityListType,

        [Parameter()]
        [System.Int32]
        $passwordMinutesOfInactivityBeforeScreenTimeout,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowAutoLock,

        [Parameter()]
        [System.Boolean]
        $updatesRequireAutomaticUpdates,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10TeamGeneralConfiguration,

        [Parameter()]
        [System.Boolean]
        $edgeBlockDeveloperTools,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockOnActionCenter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosUpdateConfiguration,

        [Parameter()]
        [System.Int32]
        $maintenanceWindowDurationInHours,

        [Parameter()]
        [System.Boolean]
        $miracastBlocked,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockPassbook,

        [Parameter()]
        [System.Boolean]
        $powerOffBlocked,

        [Parameter()]
        [System.Int32]
        $defenderScanMaxCpu,

        [Parameter()]
        [System.Byte[]]
        $payload,

        [Parameter()]
        [System.Boolean]
        $appStoreBlockUIAppInstallation,

        [Parameter()]
        [System.String]
        $assetTagTemplate,

        [Parameter()]
        [System.Boolean]
        $applicationGuardBlockNonEnterpriseContent,

        [Parameter()]
        [System.String]
        $defenderMonitorFileActivity,

        [Parameter()]
        [System.Boolean]
        $storageRequireMobileDeviceEncryption,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockThirdPartyNotifications,

        [Parameter()]
        [System.Boolean]
        $deviceSharingAllowed,

        [Parameter()]
        [System.Boolean]
        $passwordRequireWhenResumeFromIdleState,

        [Parameter()]
        [System.Boolean]
        $wifiBlockHotspotReporting,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockCrossProfileCopyPaste,

        [Parameter()]
        [System.Boolean]
        $bitLockerEncryptDevice,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockNotificationView,

        [Parameter()]
        [System.Int32]
        $passwordMinimumLength,

        [Parameter()]
        [System.Boolean]
        $windowsStoreEnablePrivateStoreOnly,

        [Parameter()]
        [System.Boolean]
        $spotlightBlockInternetResults,

        [Parameter()]
        [System.Boolean]
        $factoryResetBlocked,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintMopriaDiscoveryResourceIdentifier,

        [Parameter()]
        [System.Boolean]
        $settingsBlockRemoveProvisioningPackage,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPersistence,

        [Parameter()]
        [System.String]
        $welcomeScreenBackgroundImageUrl,

        [Parameter()]
        [System.Boolean]
        $appleNewsBlocked,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintOAuthClientIdentifier,

        [Parameter()]
        [System.Boolean]
        $appleWatchForceWristDetection,

        [Parameter()]
        [System.Boolean]
        $edgeBlockAddressBarDropdown,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireMonoAudio,

        [Parameter()]
        [System.Boolean]
        $wirelessDisplayBlockProjectionToThisDevice,

        [Parameter()]
        [System.Boolean]
        $miracastRequirePin,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockPredictive,

        [Parameter()]
        [System.Boolean]
        $bitLockerDisableWarningForOtherDiskEncryption,

        [Parameter()]
        [System.Boolean]
        $networkProxyApplySettingsDeviceWide,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Boolean]
        $startMenuHideFrequentlyUsedApps,

        [Parameter()]
        [System.Boolean]
        $classroomAppForceUnpromptedScreenObservation,

        [Parameter()]
        [System.String[]]
        $defenderGuardedFoldersAllowedAppPaths,

        [Parameter()]
        [System.Boolean]
        $hostPairingBlocked,

        [Parameter()]
        [System.Boolean]
        $kioskModeBlockSleepButton,

        [Parameter()]
        [System.Boolean]
        $locationServicesBlocked,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockConsumerSpecificFeatures,

        [Parameter()]
        [System.Object]
        $mediaContentRatingUnitedStates,

        [Parameter()]
        [System.TimeSpan]
        $activeHoursEnd,

        [Parameter()]
        [System.String]
        $deliveryOptimizationMode,

        [Parameter()]
        [System.Int32]
        $wiFiScanInterval,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPrintToLocalPrinters,

        [Parameter()]
        [System.String]
        $licenseType,

        [Parameter()]
        [System.Boolean]
        $allowScreenCapture,

        [Parameter()]
        [System.Boolean]
        $smartScreenEnableInShell,

        [Parameter()]
        [System.String]
        $productKey,

        [Parameter()]
        [System.Boolean]
        $defenderScanNetworkFiles,

        [Parameter()]
        [System.Boolean]
        $searchEnableRemoteQueries,

        [Parameter()]
        [System.Boolean]
        $definitionLookupBlocked,

        [Parameter()]
        [System.Object[]]
        $deviceStatuses,

        [Parameter()]
        [System.Boolean]
        $cellularBlockVoiceRoaming,

        [Parameter()]
        [System.String]
        $networkProxyAutomaticConfigurationUrl,

        [Parameter()]
        [System.Boolean]
        $settingsBlockUpdateSecurityPage,

        [Parameter()]
        [System.Object[]]
        $appsLaunchBlockList,

        [Parameter()]
        [System.Boolean]
        $passwordBlockFingerprintUnlock,

        [Parameter()]
        [System.String]
        $browserLoggingReportLocation,

        [Parameter()]
        [System.Boolean]
        $iCloudRequireEncryptedBackup,

        [Parameter()]
        [System.String]
        $defenderCloudBlockLevel,

        [Parameter()]
        [System.String]
        $passwordRequiredType,

        [Parameter()]
        [System.Boolean]
        $startMenuHideRecentlyAddedApps,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsPhone81GeneralConfiguration,

        [Parameter()]
        [System.Boolean]
        $settingsBlockTimeLanguagePage,

        [Parameter()]
        [System.Boolean]
        $searchBlockDiacritics,

        [Parameter()]
        [System.Int32]
        $passcodeMinutesOfInactivityBeforeLock,

        [Parameter()]
        [System.Boolean]
        $smartScreenBlockPromptOverrideForFiles,

        [Parameter()]
        [System.Int32]
        $settingsSleepTimeoutInMinutes,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockShortcuts,

        [Parameter()]
        [System.Int32]
        $passwordSignInFailureCountBeforeFactoryReset,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.Boolean]
        $storageRestrictAppDataToSystemVolume,

        [Parameter()]
        [System.Boolean]
        $googlePlayStoreBlocked,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordSignInFailureCountBeforeFactoryReset,

        [Parameter()]
        [System.Boolean]
        $deviceBlockEraseContentAndSettings,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockPhotoLibrary,

        [Parameter()]
        [System.Byte[]]
        $startMenuLayoutEdgeAssetsXml,

        [Parameter()]
        [System.Boolean]
        $edgeBlockJavaScript,

        [Parameter()]
        [System.String[]]
        $defenderProcessesToExclude,

        [Parameter()]
        [System.Boolean]
        $settingsBlockSettingsApp,

        [Parameter()]
        [System.Boolean]
        $microsoftAccountBlockSettingsSync,

        [Parameter()]
        [System.Boolean]
        $documentsBlockManagedDocumentsInUnmanagedApps,

        [Parameter()]
        [System.Object]
        $firewallProfilePublic,

        [Parameter()]
        [System.String]
        $edgeFirstRunUrl,

        [Parameter()]
        [System.Boolean]
        $experienceBlockErrorDialogWhenNoSIM,

        [Parameter()]
        [System.Boolean]
        $connectedDevicesServiceBlocked,

        [Parameter()]
        [System.Boolean]
        $activationLockAllowWhenSupervised,

        [Parameter()]
        [System.String]
        $miracastChannel,

        [Parameter()]
        [System.Boolean]
        $settingsBlockChangeSystemTime,

        [Parameter()]
        [System.Object]
        $mediaContentRatingJapan,

        [Parameter()]
        [System.String]
        $license,

        [Parameter()]
        [System.Boolean]
        $storageRequireDeviceEncryption,

        [Parameter()]
        [System.Boolean]
        $disablePowerPolicies,

        [Parameter()]
        [System.Boolean]
        $edgeBlockInPrivateBrowsing,

        [Parameter()]
        [System.Int32]
        $settingsDefaultVolume,

        [Parameter()]
        [System.Boolean]
        $startMenuHideChangeAccountSettings,

        [Parameter()]
        [System.String]
        $safeSearchFilter,

        [Parameter()]
        [System.String]
        $kioskAppDisplayName,

        [Parameter()]
        [System.Boolean]
        $networkProxyDisableAutoDetect,

        [Parameter()]
        [System.Boolean]
        $passwordRequired,

        [Parameter()]
        [System.Boolean]
        $settingsBlockSigninSuggestions,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowTouchscreen,

        [Parameter()]
        [System.Boolean]
        $edgeBlockLiveTileDataCollection,

        [Parameter()]
        [System.Int32]
        $enterpriseCloudPrintDiscoveryMaxLimit,

        [Parameter()]
        [System.Boolean]
        $messagesBlocked,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinNonLetterCharacters,

        [Parameter()]
        [System.Boolean]
        $certificatesBlockUntrustedTlsCertificates,

        [Parameter()]
        [System.Boolean]
        $uninstallBuiltInApps,

        [Parameter()]
        [System.String]
        $defenderExploitProtectionXmlFileName,

        [Parameter()]
        [System.String]
        $privacyAdvertisingId,

        [Parameter()]
        [System.String]
        $prereleaseFeatures,

        [Parameter()]
        [System.Int32]
        $passwordMinutesOfInactivityBeforeLock,

        [Parameter()]
        [System.Boolean]
        $searchDisableIndexingRemovableDrive,

        [Parameter()]
        [System.Boolean]
        $browserRequireHighSecurityForRestrictedSites,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidWorkProfileCustomConfiguration,

        [Parameter()]
        [System.Boolean]
        $appStoreRequirePassword,

        [Parameter()]
        [System.String]
        $developerUnlockSetting,

        [Parameter()]
        [System.Boolean]
        $passcodeBlockModification,

        [Parameter()]
        [System.Boolean]
        $appsBlockYouTube,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockCrossProfileContactsSearch,

        [Parameter()]
        [System.Object[]]
        $appsHideList,

        [Parameter()]
        [System.DateTimeOffset]
        $qualityUpdatesPauseExpiryDateTime,

        [Parameter()]
        [System.Object[]]
        $networkUsageRules,

        [Parameter()]
        [System.Boolean]
        $wiFiConnectOnlyToConfiguredNetworks,

        [Parameter()]
        [System.Boolean]
        $cellularBlockDataRoaming,

        [Parameter()]
        [System.Boolean]
        $safariRequireFraudWarning,

        [Parameter()]
        [System.Boolean]
        $disableSignInOnResume,

        [Parameter()]
        [System.Int32]
        $firewallIdleTimeoutForSecurityAssociationInSeconds,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowRingerSwitch,

        [Parameter()]
        [System.Boolean]
        $qualityUpdatesPaused,

        [Parameter()]
        [System.Boolean]
        $webBrowserBlockPopups,

        [Parameter()]
        [System.Boolean]
        $edgeBlockSendingDoNotTrackHeader,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlockAdvertising,

        [Parameter()]
        [System.Object[]]
        $homeScreenPages,

        [Parameter()]
        [System.Boolean]
        $browserBlockJavaScript,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockWelcomeExperience,

        [Parameter()]
        [System.Boolean]
        $cellularBlockVpn,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderPictures,

        [Parameter()]
        [System.Boolean]
        $safariBlockAutofill,

        [Parameter()]
        [System.DateTimeOffset]
        $featureUpdatesPauseExpiryDateTime,

        [Parameter()]
        [System.String]
        $safariCookieSettings,

        [Parameter()]
        [System.Boolean]
        $accountsBlockAddingNonMicrosoftAccountEmail,

        [Parameter()]
        [System.String]
        $windowsSpotlightConfigureOnLockScreen,

        [Parameter()]
        [System.String]
        $kioskModeAppStoreUrl,

        [Parameter()]
        [System.Int32]
        $passwordExpirationDays,

        [Parameter()]
        [System.Object]
        $mediaContentRatingIreland,

        [Parameter()]
        [System.Boolean]
        $voiceDialingBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsDefenderAdvancedThreatProtectionConfiguration,

        [Parameter()]
        [System.Boolean]
        $iBooksStoreBlocked,

        [Parameter()]
        [System.Boolean]
        $cellularBlockPersonalHotspot,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10EndpointProtectionConfiguration,

        [Parameter()]
        [System.Boolean]
        $wiFiBlockManualConfiguration,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockWindowsTips,

        [Parameter()]
        [System.String]
        $payloadFileName,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinutesOfInactivityBeforeScreenTimeout,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockCrossProfileCallerId,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowVoiceOverSettings,

        [Parameter()]
        [System.Boolean]
        $settingsBlockAppsPage,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockToastNotifications,

        [Parameter()]
        [System.Boolean]
        $disableEduPolicies,

        [Parameter()]
        [System.Boolean]
        $internetSharingBlocked,

        [Parameter()]
        [System.Boolean]
        $iBooksStoreBlockErotica,

        [Parameter()]
        [System.Int32]
        $passcodeMinimumLength,

        [Parameter()]
        [System.Boolean]
        $defenderScanRemovableDrivesDuringFullScan,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlocked,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlockModification,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinSymbolCharacters,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10SecureAssessmentConfiguration,

        [Parameter()]
        [System.Boolean]
        $wirelessDisplayRequirePinForPairing,

        [Parameter()]
        [System.Boolean]
        $edgeBlockCompatibilityList,

        [Parameter()]
        [System.Boolean]
        $gamingBlockMultiplayer,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockControlCenter,

        [Parameter()]
        [System.Boolean]
        $sharedUserAppDataAllowed,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsUpdateForBusinessConfiguration,

        [Parameter()]
        [System.Boolean]
        $webBrowserBlockAutofill,

        [Parameter()]
        [System.Boolean]
        $defenderScanScriptsLoadedInInternetExplorer,

        [Parameter()]
        [System.Boolean]
        $settingsBlockAddProvisioningPackage,

        [Parameter()]
        [System.Boolean]
        $searchEnableAutomaticIndexSizeManangement,

        [Parameter()]
        [System.Boolean]
        $tenantLockdownRequireNetworkDuringOutOfBoxExperience,

        [Parameter()]
        [System.Boolean]
        $microsoftUpdateServiceAllowed,

        [Parameter()]
        [System.Object]
        $mediaContentRatingGermany,

        [Parameter()]
        [System.String]
        $kioskAppUserModelId,

        [Parameter()]
        [System.Boolean]
        $defenderScanIncomingMail,

        [Parameter()]
        [System.Boolean]
        $windowsStoreBlockAutoUpdate,

        [Parameter()]
        [System.Boolean]
        $settingsBlockChangePowerSleep,

        [Parameter()]
        [System.String[]]
        $defenderFilesAndFoldersToExclude,

        [Parameter()]
        [System.Boolean]
        $wifiBlocked,

        [Parameter()]
        [System.Object[]]
        $userStatuses,

        [Parameter()]
        [System.Boolean]
        $deviceBlockEnableRestrictions,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Boolean]
        $allowTextSuggestion,

        [Parameter()]
        [System.Boolean]
        $featureUpdatesPaused,

        [Parameter()]
        [System.Boolean]
        $defenderRequireBehaviorMonitoring,

        [Parameter()]
        [System.String]
        $allowedAccounts,

        [Parameter()]
        [System.Boolean]
        $settingsBlockSessionResume,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockTodayView,

        [Parameter()]
        [System.Boolean]
        $connectAppBlockAutoLaunch,

        [Parameter()]
        [System.Boolean]
        $startMenuHideSwitchAccount,

        [Parameter()]
        [System.Boolean]
        $workProfileBluetoothEnableContactSharing,

        [Parameter()]
        [System.Object[]]
        $omaSettings,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowAssistiveSpeak,

        [Parameter()]
        [System.Boolean]
        $antiTheftModeBlocked,

        [Parameter()]
        [System.Boolean]
        $safariBlockPopups,

        [Parameter()]
        [System.Boolean]
        $edgeSendIntranetTrafficToInternetExplorer,

        [Parameter()]
        [System.Boolean]
        $logonBlockFastUserSwitching,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockDictation,

        [Parameter()]
        [System.Boolean]
        $airPlayForcePairingPasswordForOutgoingRequests,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowVolumeButtons,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows81GeneralConfiguration,

        [Parameter()]
        [System.Boolean]
        $iTunesBlockRadio,

        [Parameter()]
        [System.Boolean]
        $defenderRequireRealTimeMonitoring,

        [Parameter()]
        [System.Boolean]
        $certificatesBlockManualRootCertificateInstallation,

        [Parameter()]
        [System.Boolean]
        $allowSampleSharing,

        [Parameter()]
        [System.Boolean]
        $welcomeScreenBlockAutomaticWakeUp,

        [Parameter()]
        [System.Boolean]
        $privacyBlockInputPersonalization,

        [Parameter()]
        [System.String]
        $welcomeScreenMeetingInformation,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderDocuments,

        [Parameter()]
        [System.String]
        $firewallCertificateRevocationListCheckMethod,

        [Parameter()]
        [System.String]
        $workFoldersUrl,

        [Parameter()]
        [System.Boolean]
        $deviceManagementBlockManualUnenroll,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlockPrePairing,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSGeneralDeviceConfiguration,

        [Parameter()]
        [System.Boolean]
        $storageRequireRemovableStorageEncryption,

        [Parameter()]
        [System.String]
        $defenderScanType,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowZoomSettings,

        [Parameter()]
        [System.Boolean]
        $findMyFriendsBlocked,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinNumericCharacters,

        [Parameter()]
        [System.String]
        $kioskModeManagedAppId,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockBackup,

        [Parameter()]
        [System.Boolean]
        $safariBlocked,

        [Parameter()]
        [System.Boolean]
        $edgeAllowStartPagesModification,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $editionUpgradeConfiguration,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockScreenCapture,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderFileExplorer,

        [Parameter()]
        [System.String[]]
        $safariPasswordAutoFillDomains,

        [Parameter()]
        [System.Boolean]
        $edgeBlockExtensions,

        [Parameter()]
        [System.Boolean]
        $windowsStoreBlocked,

        [Parameter()]
        [System.Boolean]
        $settingsBlockSystemPage,

        [Parameter()]
        [System.String]
        $personalizationLockScreenImageUrl,

        [Parameter()]
        [System.Boolean]
        $diagnosticDataBlockSubmission,

        [Parameter()]
        [System.Boolean]
        $searchDisableAutoLanguageDetection,

        [Parameter()]
        [System.Boolean]
        $defenderBlockEndUserAccess,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinimumLength,

        [Parameter()]
        [System.Boolean]
        $edgeBlockSearchSuggestions,

        [Parameter()]
        [System.Boolean]
        $siriBlockedWhenLocked,

        [Parameter()]
        [System.Boolean]
        $bitLockerEnableStorageCardEncryptionOnMobile,

        [Parameter()]
        [System.String]
        $lockScreenFootnote,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10CustomConfiguration,

        [Parameter()]
        [System.Boolean]
        $wirelessDisplayBlockUserInputFromReceiver,

        [Parameter()]
        [System.Boolean]
        $edgeClearBrowsingDataOnExit,

        [Parameter()]
        [System.Int32]
        $settingsScreenTimeoutInMinutes,

        [Parameter()]
        [System.String]
        $personalizationDesktopImageUrl,

        [Parameter()]
        [System.Int32]
        $defenderSignatureUpdateIntervalInHours,

        [Parameter()]
        [System.Boolean]
        $experienceBlockTaskSwitcher,

        [Parameter()]
        [System.Boolean]
        $passwordBlockSimple,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowScreenRotation,

        [Parameter()]
        [System.Object]
        $bitLockerRemovableDrivePolicy,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireColorInversion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidGeneralDeviceConfiguration,

        [Parameter()]
        [System.String]
        $azureOperationalInsightsWorkspaceKey,

        [Parameter()]
        [System.Boolean]
        $iTunesBlockMusicService,

        [Parameter()]
        [System.Int32]
        $utcTimeOffsetInMinutes,

        [Parameter()]
        [System.Object]
        $defenderDetectedMalwareActions,

        [Parameter()]
        [System.Boolean]
        $defenderSecurityCenterBlockExploitProtectionOverride,

        [Parameter()]
        [System.Boolean]
        $edgeBlocked,

        [Parameter()]
        [System.TimeSpan]
        $maintenanceStartTime,

        [Parameter()]
        [System.Boolean]
        $edgeBlockPopups,

        [Parameter()]
        [System.Boolean]
        $defenderScanMappedNetworkDrivesDuringFullScan,

        [Parameter()]
        [System.Boolean]
        $passwordBlockTrustAgents,

        [Parameter()]
        [System.Object]
        $mediaContentRatingNewZealand,

        [Parameter()]
        [System.Boolean]
        $nfcBlocked,

        [Parameter()]
        [System.Boolean]
        $deviceManagementBlockFactoryResetOnMobile,

        [Parameter()]
        [System.String]
        $configurationAccount,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordPreviousPasswordBlockCount,

        [Parameter()]
        [System.Boolean]
        $workProfilePasswordBlockFingerprintUnlock,

        [Parameter()]
        [System.Int32]
        $passcodeExpirationDays,

        [Parameter()]
        [System.Boolean]
        $diagnosticDataBlockSubmissionModification,

        [Parameter()]
        [System.Boolean]
        $gamingBlockGameCenterFriends,

        [Parameter()]
        [System.Boolean]
        $defenderRequireNetworkInspectionSystem,

        [Parameter()]
        [System.Boolean]
        $cellularBlockDataWhenRoaming,

        [Parameter()]
        [System.Boolean]
        $copyPasteBlocked,

        [Parameter()]
        [System.Boolean]
        $enterpriseAppBlockTrustModification,

        [Parameter()]
        [System.Boolean]
        $storageRestrictAppInstallToSystemVolume,

        [Parameter()]
        [System.String]
        $launchUri,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowSleepButton,

        [Parameter()]
        [System.Byte[]]
        $defenderExploitProtectionXml,

        [Parameter()]
        [System.Boolean]
        $wallpaperBlockModification,

        [Parameter()]
        [System.Int32]
        $passcodeMinutesOfInactivityBeforeScreenTimeout,

        [Parameter()]
        [System.Boolean]
        $iTunesBlockExplicitContent,

        [Parameter()]
        [System.Boolean]
        $voiceRecordingBlocked,

        [Parameter()]
        [System.Object[]]
        $kioskModeApps,

        [Parameter()]
        [System.Boolean]
        $browserBlockPlugins,

        [Parameter()]
        [System.Boolean]
        $passcodeBlockFingerprintModification,

        [Parameter()]
        [System.Boolean]
        $applicationGuardForceAuditing,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSDeviceFeaturesConfiguration,

        [Parameter()]
        [System.Boolean]
        $browserRequireFirewall,

        [Parameter()]
        [System.Boolean]
        $securityRequireVerifyApps,

        [Parameter()]
        [System.Boolean]
        $enabled,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockSharedPhotoStream,

        [Parameter()]
        [System.Boolean]
        $startMenuHideRestartOptions,

        [Parameter()]
        [System.Boolean]
        $allowLocalStorage,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockAutoCorrect,

        [Parameter()]
        [System.Boolean]
        $applicationGuardEnabled,

        [Parameter()]
        [System.Boolean]
        $firewallMergeKeyingModuleSettings,

        [Parameter()]
        [System.Boolean]
        $browserBlockSendingDoNotTrackHeader,

        [Parameter()]
        [System.Boolean]
        $settingsBlockGamingPage,

        [Parameter()]
        [System.Boolean]
        $screenCaptureBlocked,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderSettings,

        [Parameter()]
        [System.Boolean]
        $siriBlocked,

        [Parameter()]
        [System.String]
        $appLockerApplicationControl,

        [Parameter()]
        [System.Boolean]
        $kioskModeBlockVolumeButtons,

        [Parameter()]
        [System.Boolean]
        $settingsBlockPrivacyPage,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockSpellCheck,

        [Parameter()]
        [System.Boolean]
        $passcodeRequired,

        [Parameter()]
        [System.Boolean]
        $cameraBlocked,

        [Parameter()]
        [System.String]
        $businessReadyUpdatesOnly,

        [Parameter()]
        [System.Boolean]
        $webBrowserBlocked,

        [Parameter()]
        [System.Int32]
        $idleTimeBeforeSleepInSeconds,

        [Parameter()]
        [System.String]
        $applicationGuardBlockClipboardSharing,

        [Parameter()]
        [System.Int32]
        $featureUpdatesDeferralPeriodInDays,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Boolean]
        $startBlockUnpinningAppsFromTaskbar,

        [Parameter()]
        [System.String]
        $azureOperationalInsightsWorkspaceId,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderNetwork,

        [Parameter()]
        [System.Boolean]
        $lockScreenAllowTimeoutConfiguration,

        [Parameter()]
        [System.String[]]
        $edgeHomepageUrls,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowAssistiveTouchSettings,

        [Parameter()]
        [System.String]
        $startMenuAppListVisibility,

        [Parameter()]
        [System.Boolean]
        $cellularBlockPerAppDataModification,

        [Parameter()]
        [System.Boolean]
        $browserBlockAutofill,

        [Parameter()]
        [System.Boolean]
        $edgeBlockSendingIntranetTrafficToInternetExplorer,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordExpirationDays,

        [Parameter()]
        [System.Boolean]
        $startMenuHidePowerButton,

        [Parameter()]
        [System.Boolean]
        $settingsBlockEditDeviceName,

        [Parameter()]
        [System.Boolean]
        $startMenuHideSignOut,

        [Parameter()]
        [System.Boolean]
        $privacyAutoAcceptPairingAndConsentPrompts,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockCortana,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10GeneralConfiguration,

        [Parameter()]
        [System.Boolean]
        $settingsBlockEaseOfAccessPage,

        [Parameter()]
        [System.Boolean]
        $driversExcluded,

        [Parameter()]
        [System.Int32]
        $qualityUpdatesDeferralPeriodInDays,

        [Parameter()]
        [System.Boolean]
        $settingsBlockDevicesPage,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockCamera,

        [Parameter()]
        [System.Object]
        $firewallProfileDomain,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderDownloads,

        [Parameter()]
        [System.String]
        $passcodeRequiredType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10EnterpriseModernAppManagementConfiguration,

        [Parameter()]
        [System.Boolean]
        $accountBlockModification,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $sharedPCConfiguration,

        [Parameter()]
        [System.Boolean]
        $edgeDisableFirstRunPage,

        [Parameter()]
        [System.Object[]]
        $homeScreenDockIcons,

        [Parameter()]
        [System.Boolean]
        $notificationsBlockSettingsModification,

        [Parameter()]
        [System.Boolean]
        $firewallIPSecExemptionsAllowICMP,

        [Parameter()]
        [System.Int32]
        $passcodeMinimumCharacterSetCount,

        [Parameter()]
        [System.Boolean]
        $deviceBlockNameModification,

        [Parameter()]
        [System.Object]
        $firewallProfilePrivate,

        [Parameter()]
        [System.String[]]
        $emailInDomainSuffixes,

        [Parameter()]
        [System.Boolean]
        $appleWatchBlockPairing,

        [Parameter()]
        [System.String]
        $diagnosticsDataSubmissionMode,

        [Parameter()]
        [System.Boolean]
        $smartScreenEnableAppInstallControl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsPhone81CustomConfiguration,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintResourceIdentifier,

        [Parameter()]
        [System.Boolean]
        $startMenuHideHibernate,

        [Parameter()]
        [System.String[]]
        $scheduledInstallDays,

        [Parameter()]
        [System.String]
        $edgeCookiePolicy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosCustomConfiguration,

        [Parameter()]
        [System.TimeSpan]
        $defenderScheduledQuickScanTime,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireVoiceOver,

        [Parameter()]
        [System.Boolean]
        $appsBlockWindowsStoreOriginatedApps,

        [Parameter()]
        [System.Int32]
        $passwordMinimumCharacterSetCount,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockAddingAccounts,

        [Parameter()]
        [System.Boolean]
        $passcodeBlockFingerprintUnlock,

        [Parameter()]
        [System.Boolean]
        $defenderRequireCloudProtection,

        [Parameter()]
        [System.Boolean]
        $azureOperationalInsightsBlockTelemetry,

        [Parameter()]
        [System.String[]]
        $defenderAdditionalGuardedFolders,

        [Parameter()]
        [System.String]
        $defenderPromptForSampleSubmission,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockNotificationsWhileDeviceLocked,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockManagedAppsSync,

        [Parameter()]
        [System.String]
        $targetEdition,

        [Parameter()]
        [System.Boolean]
        $configurationProfileBlockChanges,

        [Parameter()]
        [System.Boolean]
        $faceTimeBlocked,

        [Parameter()]
        [System.Boolean]
        $smartScreenBlockOverrideForFiles,

        [Parameter()]
        [System.Object[]]
        $notificationSettings,

        [Parameter()]
        [System.Boolean]
        $startMenuHideUserTile,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockPhotoStreamSync,

        [Parameter()]
        [System.String[]]
        $defenderAttackSurfaceReductionExcludedPaths,

        [Parameter()]
        [System.Int32]
        $defenderDaysBeforeDeletingQuarantinedMalware,

        [Parameter()]
        [System.Boolean]
        $wifiBlockAutomaticConnectHotspots,

        [Parameter()]
        [System.Object]
        $accountManagerPolicy,

        [Parameter()]
        [System.TimeSpan]
        $maintenanceWindowStartTime,

        [Parameter()]
        [System.String]
        $defenderSystemScanSchedule,

        [Parameter()]
        [System.Boolean]
        $browserBlockAutomaticDetectionOfIntranetSites,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPrintToXPS,

        [Parameter()]
        [System.Boolean]
        $appsBlockClipboardSharing,

        [Parameter()]
        [System.String[]]
        $safariManagedDomains,

        [Parameter()]
        [System.Boolean]
        $storageBlockRemovableStorage,

        [Parameter()]
        [System.Boolean]
        $siriBlockUserGeneratedContent,

        [Parameter()]
        [System.Boolean]
        $cellularBlockWifiTethering,

        [Parameter()]
        [System.Boolean]
        $startMenuHideLock,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSCustomConfiguration,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintOAuthAuthority,

        [Parameter()]
        [System.String]
        $edgeEnterpriseModeSiteListLocation,

        [Parameter()]
        [System.String]
        $kioskModeBuiltInAppId,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinLowerCaseCharacters,

        [Parameter()]
        [System.Boolean]
        $podcastsBlocked,

        [Parameter()]
        [System.Object[]]
        $deviceSettingStateSummaries,

        [Parameter()]
        [System.Boolean]
        $storageBlockGoogleBackup,

        [Parameter()]
        [System.Boolean]
        $settingsBlockMyMeetingsAndFiles,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockActivityContinuation,

        [Parameter()]
        [System.Boolean]
        $firewallIPSecExemptionsAllowNeighborDiscovery,

        [Parameter()]
        [System.String]
        $workProfileDefaultAppPermissionPolicy,

        [Parameter()]
        [System.Object]
        $userStatusOverview,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockDocumentSync,

        [Parameter()]
        [System.Boolean]
        $safariBlockJavaScript,

        [Parameter()]
        [System.TimeSpan]
        $defenderScheduledScanTime,

        [Parameter()]
        [System.Boolean]
        $gameDvrBlocked,

        [Parameter()]
        [System.Boolean]
        $voiceAssistantBlocked,

        [Parameter()]
        [System.Boolean]
        $searchDisableIndexerBackoff,

        [Parameter()]
        [System.Object[]]
        $compliantAppsList,

        [Parameter()]
        [System.Boolean]
        $googleAccountBlockAutoSync,

        [Parameter()]
        [System.Boolean]
        $passwordBlockPicturePasswordAndPin,

        [Parameter()]
        [System.Boolean]
        $settingsBlockPersonalizationPage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosDeviceFeaturesConfiguration,

        [Parameter()]
        [System.Boolean]
        $usbBlocked,

        [Parameter()]
        [System.Boolean]
        $firewallBlockStatefulFTP,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockTailoredExperiences,

        [Parameter()]
        [System.String[]]
        $defenderFileExtensionsToExclude,

        [Parameter()]
        [System.Boolean]
        $searchDisableIndexingEncryptedItems,

        [Parameter()]
        [System.TimeSpan]
        $activeHoursStart,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinLetterCharacters,

        [Parameter()]
        [System.Boolean]
        $webRtcBlockLocalhostIpAddress,

        [Parameter()]
        [System.Boolean]
        $browserRequireSmartScreen,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowColorInversionSettings,

        [Parameter()]
        [System.Boolean]
        $passcodeBlockSimple,

        [Parameter()]
        [System.Object]
        $mediaContentRatingFrance,

        [Parameter()]
        [System.Boolean]
        $emailBlockAddingAccounts,

        [Parameter()]
        [System.String]
        $applicationGuardBlockFileTransfer,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintDiscoveryEndPoint,

        [Parameter()]
        [System.Boolean]
        $allowPrinting,

        [Parameter()]
        [System.Boolean]
        $settingsBlockChangeRegion,

        [Parameter()]
        [System.Boolean]
        $edgeSyncFavoritesWithInternetExplorer,

        [Parameter()]
        [System.Boolean]
        $settingsBlockAccountsPage,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPrintToNetworkPrinters,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireAssistiveTouch,

        [Parameter()]
        [System.Boolean]
        $cellularBlockGlobalBackgroundFetchWhileRoaming,

        [Parameter()]
        [System.Boolean]
        $storageRequireEncryption,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderVideos,

        [Parameter()]
        [System.String]
        $browserTrustedSitesSecurityLevel,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.Boolean]
        $microsoftAccountBlocked,

        [Parameter()]
        [System.Boolean]
        $edgeBlockPasswordManager,

        [Parameter()]
        [System.String]
        $payloadName,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlocked,

        [Parameter()]
        [System.String]
        $workProfileDataSharingType,

        [Parameter()]
        [System.Boolean]
        $experienceBlockDeviceDiscovery,

        [Parameter()]
        [System.String]
        $browserEnterpriseModeSiteListLocation,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderHomeGroup,

        [Parameter()]
        [System.Object]
        $mediaContentRatingAustralia,

        [Parameter()]
        [System.Object]
        $installationSchedule,

        [Parameter()]
        [System.Boolean]
        $enableExpeditedTelemetryReporting,

        [Parameter()]
        [System.String]
        $browserInternetSecurityLevel,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderPersonalFolder,

        [Parameter()]
        [System.String]
        $compliantAppListType,

        [Parameter()]
        [System.Boolean]
        $smartScreenBlockPromptOverride,

        [Parameter()]
        [System.Boolean]
        $cellularBlockVpnWhenRoaming,

        [Parameter()]
        [System.Boolean]
        $startMenuHideShutDown,

        [Parameter()]
        [System.Boolean]
        $appsBlockCopyPaste,

        [Parameter()]
        [System.Int32]
        $passwordPreviousPasswordBlockCount,

        [Parameter()]
        [System.Boolean]
        $airDropForceUnmanagedDropTarget,

        [Parameter()]
        [System.Int32]
        $passcodeSignInFailureCountBeforeWipe,

        [Parameter()]
        [System.String[]]
        $bluetoothAllowedServices,

        [Parameter()]
        [System.Object[]]
        $appsInstallAllowList,

        [Parameter()]
        [System.Object]
        $deviceStatusOverview,

        [Parameter()]
        [System.Boolean]
        $browserRequireFraudWarning,

        [Parameter()]
        [System.Boolean]
        $defenderScanArchiveFiles,

        [Parameter()]
        [System.Boolean]
        $browserBlockPopups,

        [Parameter()]
        [System.Boolean]
        $startMenuHideSleep,

        [Parameter()]
        [System.String]
        $firewallPacketQueueingMethod,

        [Parameter()]
        [System.Boolean]
        $appStoreBlocked,

        [Parameter()]
        [System.Boolean]
        $siriRequireProfanityFilter,

        [Parameter()]
        [System.Object]
        $networkProxyServer,

        [Parameter()]
        [System.Object[]]
        $appsVisibilityList,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockActionCenterNotifications,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireZoom,

        [Parameter()]
        [System.String]
        $webBrowserCookieSettings,

        [Parameter()]
        [System.Boolean]
        $browserBlockEnterpriseModeAccess,

        [Parameter()]
        [System.Int32]
        $settingsSessionTimeoutInMinutes,

        [Parameter()]
        [System.String]
        $mediaContentRatingApps,

        [Parameter()]
        [System.Object]
        $mediaContentRatingUnitedKingdom,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidWorkProfileGeneralDeviceConfiguration,

        [Parameter()]
        [System.Boolean]
        $edgeRequireSmartScreen,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $maintenanceWindowBlocked,

        [Parameter()]
        [System.Boolean]
        $gameCenterBlocked,

        [Parameter()]
        [System.Int32]
        $lockScreenTimeoutInSeconds,

        [Parameter()]
        [System.Boolean]
        $cortanaBlocked,

        [Parameter()]
        [System.Boolean]
        $defenderScanDownloads,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPrintToPDF,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderMusic,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinUpperCaseCharacters,

        [Parameter()]
        [System.String]
        $workProfilePasswordRequiredType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosGeneralDeviceConfiguration,

        [Parameter()]
        [System.Boolean]
        $webBrowserBlockJavaScript,

        [Parameter()]
        [System.Boolean]
        $documentsBlockUnmanagedDocumentsInManagedApps,

        [Parameter()]
        [System.Int32]
        $passcodePreviousPasscodeBlockCount,

        [Parameter()]
        [System.Boolean]
        $classroomAppBlockRemoteScreenObservation,

        [Parameter()]
        [System.Object]
        $mediaContentRatingCanada,

        [Parameter()]
        [System.String]
        $browserIntranetSecurityLevel,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlockDiscoverableMode,

        [Parameter()]
        [System.String]
        $startMenuMode,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $automaticUpdateMode,

        [Parameter()]
        [System.Boolean]
        $enterpriseAppBlockTrust,

        [Parameter()]
        [System.Boolean]
        $workProfilePasswordBlockTrustAgents,

        [Parameter()]
        [System.Boolean]
        $diagnosticsBlockDataSubmission,

        [Parameter()]
        [System.Boolean]
        $cellularBlockMessaging,

        [Parameter()]
        [System.Boolean]
        $disableAccountManager,

        [Parameter()]
        [System.Boolean]
        $appStoreBlockAutomaticDownloads
    )
}
function Update-DeviceManagement_DeviceConfigurations_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.String]
        $deviceConfigurationAssignmentId,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-DeviceManagement_DeviceConfigurations_DeviceSettingStateSummaries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.String]
        $settingName,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.String]
        $instancePath,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $settingStateDeviceSummaryId,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function Update-DeviceManagement_DeviceConfigurations_DeviceStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $deviceConfigurationDeviceStatusId,

        [Parameter()]
        [System.String]
        $deviceModel,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.String]
        $deviceDisplayName,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime
    )
}
function Update-DeviceManagement_DeviceConfigurations_DeviceStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.Int32]
        $failedCount,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime
    )
}
function Update-DeviceManagement_DeviceConfigurations_UserStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.String]
        $deviceConfigurationUserStatusId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $devicesCount,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.String]
        $status
    )
}
function Update-DeviceManagement_DeviceConfigurations_UserStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.Int32]
        $failedCount,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime
    )
}
function Update-DeviceManagement_DeviceEnrollmentConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Boolean]
        $unlockWithBiometricsEnabled,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object]
        $windowsRestriction,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceEnrollmentPlatformRestrictionsConfiguration,

        [Parameter()]
        [System.Boolean]
        $remotePassportEnabled,

        [Parameter()]
        [System.Boolean]
        $securityDeviceRequired,

        [Parameter()]
        [System.Int32]
        $pinPreviousBlockCount,

        [Parameter()]
        [System.Int32]
        $priority,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceEnrollmentLimitConfiguration,

        [Parameter()]
        [System.Object]
        $androidRestriction,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.Object]
        $windowsMobileRestriction,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.Object]
        $macOSRestriction,

        [Parameter()]
        [System.Int32]
        $pinExpirationInDays,

        [Parameter()]
        [System.Int32]
        $pinMaximumLength,

        [Parameter()]
        [System.String]
        $pinLowercaseCharactersUsage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceEnrollmentWindowsHelloForBusinessConfiguration,

        [Parameter()]
        [System.Int32]
        $pinMinimumLength,

        [Parameter()]
        [System.String]
        $deviceEnrollmentConfigurationId,

        [Parameter()]
        [System.String]
        $pinSpecialCharactersUsage,

        [Parameter()]
        [System.String]
        $pinUppercaseCharactersUsage,

        [Parameter()]
        [System.Int32]
        $limit,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $iosRestriction,

        [Parameter()]
        [System.String]
        $enhancedBiometricsState
    )
}
function Update-DeviceManagement_DeviceEnrollmentConfigurations_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $enrollmentConfigurationAssignmentId,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $deviceEnrollmentConfigurationId,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-DeviceManagement_DeviceManagementPartners
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceManagementPartnerId,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.DateTimeOffset]
        $whenPartnerDevicesWillBeRemovedDateTime,

        [Parameter()]
        [System.String]
        $partnerAppType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $partnerState,

        [Parameter()]
        [System.Boolean]
        $isConfigured,

        [Parameter()]
        [System.String]
        $singleTenantAppId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastHeartbeatDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $whenPartnerDevicesWillBeMarkedAsNonCompliantDateTime
    )
}
function Update-DeviceManagement_ExchangeConnectors
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $exchangeAlias,

        [Parameter()]
        [System.String]
        $serverName,

        [Parameter()]
        [System.String]
        $exchangeConnectorType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $primarySmtpAddress,

        [Parameter()]
        [System.String]
        $deviceManagementExchangeConnectorId,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $exchangeOrganization,

        [Parameter()]
        [System.String]
        $connectorServerName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.String]
        $status
    )
}
function Update-DeviceManagement_IosUpdateStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $installStatus,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $deviceId,

        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.String]
        $deviceModel,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.String]
        $deviceDisplayName,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime,

        [Parameter()]
        [System.String]
        $iosUpdateDeviceStatusId
    )
}
function Update-DeviceManagement_ManagedDevices
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $deviceCompliancePolicyStates,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime,

        [Parameter()]
        [System.String]
        $deviceCategoryDisplayName,

        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.String]
        $managementAgent,

        [Parameter()]
        [System.String]
        $complianceState,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.Boolean]
        $isEncrypted,

        [Parameter()]
        [System.String]
        $model,

        [Parameter()]
        [System.Int64]
        $freeStorageSpaceInBytes,

        [Parameter()]
        [System.String]
        $partnerReportedThreatState,

        [Parameter()]
        [System.String]
        $emailAddress,

        [Parameter()]
        [System.DateTimeOffset]
        $enrolledDateTime,

        [Parameter()]
        [System.Int64]
        $totalStorageSpaceInBytes,

        [Parameter()]
        [System.String]
        $deviceRegistrationState,

        [Parameter()]
        [System.String]
        $activationLockBypassCode,

        [Parameter()]
        [System.String]
        $exchangeAccessState,

        [Parameter()]
        [System.String]
        $exchangeAccessStateReason,

        [Parameter()]
        [System.String]
        $operatingSystem,

        [Parameter()]
        [System.String]
        $meid,

        [Parameter()]
        [System.String]
        $serialNumber,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $deviceEnrollmentType,

        [Parameter()]
        [System.Object]
        $deviceCategory,

        [Parameter()]
        [System.Boolean]
        $easActivated,

        [Parameter()]
        [System.Object]
        $deviceHealthAttestationState,

        [Parameter()]
        [System.String]
        $easDeviceId,

        [Parameter()]
        [System.Boolean]
        $isSupervised,

        [Parameter()]
        [System.Object[]]
        $deviceConfigurationStates,

        [Parameter()]
        [System.String]
        $imei,

        [Parameter()]
        [System.String]
        $managedDeviceName,

        [Parameter()]
        [System.String]
        $androidSecurityPatchLevel,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $manufacturer,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.DateTimeOffset]
        $easActivationDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $exchangeLastSuccessfulSyncDateTime,

        [Parameter()]
        [System.String]
        $managedDeviceOwnerType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $azureADDeviceId,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.Boolean]
        $azureADRegistered,

        [Parameter()]
        [System.String]
        $phoneNumber,

        [Parameter()]
        [System.Object[]]
        $deviceActionResults,

        [Parameter()]
        [System.String]
        $remoteAssistanceSessionErrorDetails,

        [Parameter()]
        [System.Object]
        $configurationManagerClientEnabledFeatures,

        [Parameter()]
        [System.String]
        $subscriberCarrier,

        [Parameter()]
        [System.String]
        $remoteAssistanceSessionUrl,

        [Parameter()]
        [System.String]
        $wiFiMacAddress,

        [Parameter()]
        [System.String]
        $jailBroken
    )
}
function Update-DeviceManagement_ManagedDevices_DeviceCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-DeviceManagement_ManagedDevices_DeviceCompliancePolicyStates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $settingStates,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String]
        $platformType,

        [Parameter()]
        [System.Int32]
        $settingCount,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyStateId
    )
}
function Update-DeviceManagement_ManagedDevices_DeviceConfigurationStates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $settingStates,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $deviceConfigurationStateId,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String]
        $platformType,

        [Parameter()]
        [System.Int32]
        $settingCount,

        [Parameter()]
        [System.String]
        $state
    )
}
function Update-DeviceManagement_MobileThreatDefenseConnectors
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Boolean]
        $iosDeviceBlockedOnMissingPartnerData,

        [Parameter()]
        [System.DateTimeOffset]
        $lastHeartbeatDateTime,

        [Parameter()]
        [System.String]
        $partnerState,

        [Parameter()]
        [System.Boolean]
        $iosEnabled,

        [Parameter()]
        [System.Boolean]
        $androidDeviceBlockedOnMissingPartnerData,

        [Parameter()]
        [System.Boolean]
        $partnerUnsupportedOsVersionBlocked,

        [Parameter()]
        [System.Boolean]
        $androidEnabled,

        [Parameter()]
        [System.String]
        $mobileThreatDefenseConnectorId,

        [Parameter()]
        [System.Int32]
        $partnerUnresponsivenessThresholdInDays
    )
}
function Update-DeviceManagement_NotificationMessageTemplates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $notificationMessageTemplateId,

        [Parameter()]
        [System.Object[]]
        $localizedNotificationMessages,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $defaultLocale,

        [Parameter()]
        [System.String]
        $brandingOptions
    )
}
function Update-DeviceManagement_NotificationMessageTemplates_LocalizedNotificationMessages
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $notificationMessageTemplateId,

        [Parameter()]
        [System.String]
        $subject,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $localizedNotificationMessageId,

        [Parameter()]
        [System.String]
        $messageTemplate,

        [Parameter()]
        [System.String]
        $locale,

        [Parameter()]
        [System.Boolean]
        $isDefault
    )
}
function Update-DeviceManagement_RemoteAssistancePartners
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $remoteAssistancePartnerId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastConnectionDateTime,

        [Parameter()]
        [System.String]
        $onboardingStatus,

        [Parameter()]
        [System.String]
        $onboardingUrl
    )
}
function Update-DeviceManagement_ResourceOperations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $resourceName,

        [Parameter()]
        [System.String]
        $actionName,

        [Parameter()]
        [System.String]
        $resourceOperationId
    )
}
function Update-DeviceManagement_RoleAssignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String[]]
        $members,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String[]]
        $resourceScopes,

        [Parameter()]
        [System.Object]
        $roleDefinition,

        [Parameter()]
        [System.String]
        $deviceAndAppManagementRoleAssignmentId
    )
}
function Update-DeviceManagement_RoleDefinitions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $roleDefinitionId,

        [Parameter()]
        [System.Object[]]
        $rolePermissions,

        [Parameter()]
        [System.Boolean]
        $isBuiltIn,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceAndAppManagementRoleDefinition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $roleDefinition,

        [Parameter()]
        [System.Object[]]
        $roleAssignments
    )
}
function Update-DeviceManagement_RoleDefinitions_RoleAssignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String[]]
        $members,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String[]]
        $resourceScopes,

        [Parameter()]
        [System.Object]
        $roleDefinition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceAndAppManagementRoleAssignment,

        [Parameter()]
        [System.String]
        $roleDefinitionId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $roleAssignment,

        [Parameter()]
        [System.String]
        $roleAssignmentId
    )
}
function Update-DeviceManagement_TelecomExpenseManagementPartners
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $appAuthorized,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $telecomExpenseManagementPartnerId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastConnectionDateTime,

        [Parameter()]
        [System.String]
        $url,

        [Parameter()]
        [System.Boolean]
        $enabled
    )
}
function Update-DeviceManagement_TermsAndConditions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $acceptanceStatement,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $termsAndConditionId,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $bodyText,

        [Parameter()]
        [System.String]
        $title,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $acceptanceStatuses,

        [Parameter()]
        [System.Object[]]
        $assignments
    )
}
function Update-DeviceManagement_TermsAndConditions_AcceptanceStatuses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $acceptedVersion,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $termsAndConditions,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.String]
        $termsAndConditionId,

        [Parameter()]
        [System.String]
        $termsAndConditionsAcceptanceStatusId,

        [Parameter()]
        [System.DateTimeOffset]
        $acceptedDateTime
    )
}
function Update-DeviceManagement_TermsAndConditions_Assignments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $termsAndConditionsAssignmentId,

        [Parameter()]
        [System.String]
        $termsAndConditionId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $target
    )
}
function Update-DeviceManagement_TroubleshootingEvents
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $operatingSystem,

        [Parameter()]
        [System.DateTimeOffset]
        $eventDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $enrollmentTroubleshootingEvent,

        [Parameter()]
        [System.String]
        $failureCategory,

        [Parameter()]
        [System.String]
        $deviceId,

        [Parameter()]
        [System.String]
        $enrollmentType,

        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.String]
        $failureReason,

        [Parameter()]
        [System.String]
        $correlationId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceManagementTroubleshootingEvent,

        [Parameter()]
        [System.String]
        $managedDeviceIdentifier,

        [Parameter()]
        [System.String]
        $deviceManagementTroubleshootingEventId
    )
}
function Update-DeviceManagement_WindowsInformationProtectionAppLearningSummaries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLearningSummaryId,

        [Parameter()]
        [System.String]
        $applicationName,

        [Parameter()]
        [System.Int32]
        $deviceCount,

        [Parameter()]
        [System.String]
        $applicationType
    )
}
function Update-DeviceManagement_WindowsInformationProtectionNetworkLearningSummaries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $deviceCount,

        [Parameter()]
        [System.String]
        $url,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionNetworkLearningSummaryId,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-Groups
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $photos,

        [Parameter()]
        [System.Object[]]
        $transitiveMemberOf,

        [Parameter()]
        [System.Object[]]
        $groupLifecyclePolicies,

        [Parameter()]
        [System.Int32]
        $unseenCount,

        [Parameter()]
        [System.String]
        $mailNickname,

        [Parameter()]
        [System.Boolean]
        $isSubscribedByMail,

        [Parameter()]
        [System.Object]
        $licenseProcessingState,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $settings,

        [Parameter()]
        [System.Object]
        $createdOnBehalfOf,

        [Parameter()]
        [System.Object[]]
        $membersWithLicenseErrors,

        [Parameter()]
        [System.String]
        $classification,

        [Parameter()]
        [System.DateTimeOffset]
        $renewedDateTime,

        [Parameter()]
        [System.Boolean]
        $isArchived,

        [Parameter()]
        [System.Object[]]
        $onPremisesProvisioningErrors,

        [Parameter()]
        [System.String[]]
        $groupTypes,

        [Parameter()]
        [System.Boolean]
        $autoSubscribeNewMembers,

        [Parameter()]
        [System.Boolean]
        $securityEnabled,

        [Parameter()]
        [System.Object[]]
        $transitiveMembers,

        [Parameter()]
        [System.Object]
        $photo,

        [Parameter()]
        [System.Boolean]
        $allowExternalSenders,

        [Parameter()]
        [System.Object[]]
        $assignedLicenses,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.Boolean]
        $mailEnabled,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Object[]]
        $owners,

        [Parameter()]
        [System.Object[]]
        $memberOf,

        [Parameter()]
        [System.Boolean]
        $hasMembersWithLicenseErrors,

        [Parameter()]
        [System.Object[]]
        $members,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $deletedDateTime,

        [Parameter()]
        [System.String[]]
        $proxyAddresses,

        [Parameter()]
        [System.String]
        $visibility,

        [Parameter()]
        [System.String]
        $mail,

        [Parameter()]
        [System.Boolean]
        $onPremisesSyncEnabled,

        [Parameter()]
        [System.String]
        $preferredDataLocation,

        [Parameter()]
        [System.String]
        $onPremisesSecurityIdentifier,

        [Parameter()]
        [System.DateTimeOffset]
        $onPremisesLastSyncDateTime
    )
}
function Update-Groups_GroupLifecyclePolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupLifecyclePolicyId,

        [Parameter()]
        [System.String]
        $alternateNotificationEmails,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $managedGroupTypes,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.Int32]
        $groupLifetimeInDays
    )
}
function Update-Groups_Photo
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.Int32]
        $height,

        [Parameter()]
        [System.Int32]
        $width,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-Groups_Settings
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $values
    )
}
function Update-MSGraphEnvironment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $RedirectLink,

        [Parameter()]
        [System.String]
        $AppId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Quiet,

        [Parameter()]
        [System.String]
        $AuthUrl,

        [Parameter()]
        [System.String]
        $SchemaVersion,

        [Parameter()]
        [System.String]
        $GraphResourceId,

        [Parameter()]
        [System.String]
        $GraphBaseUrl
    )
}
function Update-Organization
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $postalCode,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String[]]
        $businessPhones,

        [Parameter()]
        [System.String]
        $street,

        [Parameter()]
        [System.String]
        $preferredLanguage,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.String]
        $city,

        [Parameter()]
        [System.String[]]
        $marketingNotificationEmails,

        [Parameter()]
        [System.Object[]]
        $assignedPlans,

        [Parameter()]
        [System.String]
        $mobileDeviceManagementAuthority,

        [Parameter()]
        [System.String]
        $country,

        [Parameter()]
        [System.String[]]
        $securityComplianceNotificationMails,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $privacyProfile,

        [Parameter()]
        [System.Object[]]
        $extensions,

        [Parameter()]
        [System.DateTimeOffset]
        $deletedDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $onPremisesLastSyncDateTime,

        [Parameter()]
        [System.Object[]]
        $provisionedPlans,

        [Parameter()]
        [System.String[]]
        $technicalNotificationMails,

        [Parameter()]
        [System.String]
        $countryLetterCode,

        [Parameter()]
        [System.Boolean]
        $onPremisesSyncEnabled,

        [Parameter()]
        [System.String]
        $organizationId,

        [Parameter()]
        [System.String[]]
        $securityComplianceNotificationPhones,

        [Parameter()]
        [System.Object[]]
        $verifiedDomains
    )
}
function Update-Organization_Extensions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $extensionId,

        [Parameter()]
        [System.String]
        $extensionName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $openTypeExtension,

        [Parameter()]
        [System.String]
        $organizationId
    )
}
function Get-AADGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-AADGroupCreatedOnBehalfOf
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Get-AADGroupCreatedOnBehalfOfReference
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Get-AADGroupGroupLifecyclePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $groupLifecyclePolicyId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-AADGroupMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $directoryObjectId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-AADGroupMemberOf
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $directoryObjectId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-AADGroupMemberOfReferenceSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $directoryObjectId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-AADGroupMemberReferenceSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $directoryObjectId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-AADGroupOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $directoryObjectId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-AADGroupOwnerReferenceSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $directoryObjectId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-AADGroupPhoto
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Get-AADGroupPhotoDataData
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Get-AADGroupPhotoSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $profilePhotoId,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-AADGroupPhotoSetDataData
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $profilePhotoId
    )
}
function Get-AADGroupSetting
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $groupSettingId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneAppConfigurationPolicyTargeted
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneAppConfigurationPolicyTargetedApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneAppConfigurationPolicyTargetedAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneAppConfigurationPolicyTargetedDeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function Get-IntuneApplePushNotificationCertificate
{
    [CmdletBinding()]
    param(

    )
}
function Get-IntuneAppProtectionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneAppProtectionPolicyAndroid
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneAppProtectionPolicyAndroidApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneAppProtectionPolicyAndroidAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionODataType,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneAppProtectionPolicyAndroidDeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId
    )
}
function Get-IntuneAppProtectionPolicyApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneAppProtectionPolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneAppProtectionPolicyDefault
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneAppProtectionPolicyDefaultApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneAppProtectionPolicyDefaultDeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId
    )
}
function Get-IntuneAppProtectionPolicyDeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Get-IntuneAppProtectionPolicyExemptAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneAppProtectionPolicyIos
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneAppProtectionPolicyIosApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneAppProtectionPolicyIosAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionODataType,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneAppProtectionPolicyIosDeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId
    )
}
function Get-IntuneAppProtectionPolicyProtectedAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneConditionalAccessSetting
{
    [CmdletBinding()]
    param(

    )
}
function Get-IntuneDetectedApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $detectedAppId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-IntuneDetectedAppDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $detectedAppId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneDetectedAppDeviceReferenceSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $detectedAppId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneDeviceAppManagement
{
    [CmdletBinding()]
    param(

    )
}
function Get-IntuneDeviceCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCategoryId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneDeviceCompliancePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneDeviceCompliancePolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyAssignmentId,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneDeviceCompliancePolicyDeviceSettingStateSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $settingStateDeviceSummaryId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneDeviceCompliancePolicyDeviceStateSummary
{
    [CmdletBinding()]
    param(

    )
}
function Get-IntuneDeviceCompliancePolicyDeviceStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $deviceComplianceDeviceStatusId,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneDeviceCompliancePolicyDeviceStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId
    )
}
function Get-IntuneDeviceCompliancePolicyScheduledActionsForRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $deviceComplianceScheduledActionForRuleId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneDeviceCompliancePolicyScheduledActionsForRuleConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $deviceComplianceActionItemId,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $deviceComplianceScheduledActionForRuleId,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-IntuneDeviceCompliancePolicySettingSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicySettingStateSummaryId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneDeviceCompliancePolicyUserStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $deviceComplianceUserStatusId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneDeviceCompliancePolicyUserStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId
    )
}
function Get-IntuneDeviceComplianceSettingState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $deviceComplianceSettingStateId,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicySettingStateSummaryId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneDeviceConfigurationDeviceStateSummary
{
    [CmdletBinding()]
    param(

    )
}
function Get-IntuneDeviceConfigurationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-IntuneDeviceConfigurationPolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.String]
        $deviceConfigurationAssignmentId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-IntuneDeviceConfigurationPolicyDeviceSettingStateSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.String]
        $settingStateDeviceSummaryId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-IntuneDeviceConfigurationPolicyDeviceStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.String]
        $deviceConfigurationDeviceStatusId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-IntuneDeviceConfigurationPolicyDeviceStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceConfigurationId
    )
}
function Get-IntuneDeviceConfigurationPolicyUserStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $deviceConfigurationUserStatusId,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-IntuneDeviceConfigurationPolicyUserStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceConfigurationId
    )
}
function Get-IntuneDeviceEnrollmentConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $deviceEnrollmentConfigurationId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneDeviceEnrollmentConfigurationAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $enrollmentConfigurationAssignmentId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $deviceEnrollmentConfigurationId,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneDeviceManagement
{
    [CmdletBinding()]
    param(

    )
}
function Get-IntuneDeviceManagementPartner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $deviceManagementPartnerId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneExchangeConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $deviceManagementExchangeConnectorId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneIosUpdateStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $iosUpdateDeviceStatusId
    )
}
function Get-IntuneLocalizedNotificationMessage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $notificationMessageTemplateId,

        [Parameter()]
        [System.String]
        $localizedNotificationMessageId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneManagedAppRegistration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneManagedAppStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $managedAppStatusId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneManagedDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneManagedDeviceDeviceCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Get-IntuneManagedDeviceDeviceCompliancePolicyState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyStateId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneManagedDeviceDeviceConfigurationState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $deviceConfigurationStateId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneManagedDeviceOverview
{
    [CmdletBinding()]
    param(

    )
}
function Get-IntuneManagedDeviceOverviewReference
{
    [CmdletBinding()]
    param(

    )
}
function Get-IntuneManagedEBook
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Get-IntuneManagedEBookAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $managedEBookAssignmentId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Get-IntuneManagedEBookDeviceState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $deviceInstallStateId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Get-IntuneManagedEBookInstallSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Get-IntuneManagedEBookUserStateSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $managedEBookId,

        [Parameter()]
        [System.String]
        $userInstallStateSummaryId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneManagedEBookUserStateSummaryDeviceState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $userInstallStateSummaryId,

        [Parameter()]
        [System.String]
        $deviceInstallStateId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Get-IntuneMdmWindowsInformationProtectionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneMdmWindowsInformationProtectionPolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneMdmWindowsInformationProtectionPolicyExemptAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneMdmWindowsInformationProtectionPolicyProtectedAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneMobileApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneMobileAppAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $mobileAppAssignmentId,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneMobileAppCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $mobileAppCategoryId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneMobileAppCategorySet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $mobileAppCategoryId,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneMobileAppCategorySetReferenceSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $mobileAppCategoryId,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneMobileAppConfigurationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneMobileAppConfigurationPolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationAssignmentId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneMobileAppConfigurationPolicyDeviceStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationDeviceStatusId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneMobileAppConfigurationPolicyDeviceStatusSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId
    )
}
function Get-IntuneMobileAppConfigurationPolicyUserStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationUserStatusId,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneMobileAppConfigurationPolicyUserStatusSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId
    )
}
function Get-IntuneMobileAppContentVersion
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String]
        $mobileAppODataType,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $mobileAppContentId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneMobileAppContentVersionFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $mobileAppContentFileId,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String]
        $mobileAppODataType,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $mobileAppContentId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneMobileThreatDefenseConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $mobileThreatDefenseConnectorId
    )
}
function Get-IntuneNotificationMessageTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $notificationMessageTemplateId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneRemoteAssistancePartner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $remoteAssistancePartnerId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneResourceOperation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $resourceOperationId,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $deviceAndAppManagementRoleAssignmentId,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneRoleDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $roleDefinitionId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneSoftwareUpdateStatusSummary
{
    [CmdletBinding()]
    param(

    )
}
function Get-IntuneSoftwareUpdateStatusSummaryReference
{
    [CmdletBinding()]
    param(

    )
}
function Get-IntuneTelecomExpenseManagementPartner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $telecomExpenseManagementPartnerId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneTermsAndConditions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $termsAndConditionId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter
    )
}
function Get-IntuneTermsAndConditionsAcceptanceStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $termsAndConditionId,

        [Parameter()]
        [System.String]
        $termsAndConditionsAcceptanceStatusId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneTermsAndConditionsAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $termsAndConditionsAssignmentId,

        [Parameter()]
        [System.String]
        $termsAndConditionId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneTroubleshootingEvent
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $deviceManagementTroubleshootingEventId,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneVppToken
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $vppTokenId,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneWindowsInformationProtectionAppLearningSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLearningSummaryId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneWindowsInformationProtectionNetworkLearningSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionNetworkLearningSummaryId,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneWindowsInformationProtectionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneWindowsInformationProtectionPolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Get-IntuneWindowsInformationProtectionPolicyExemptAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId
    )
}
function Get-IntuneWindowsInformationProtectionPolicyProtectedAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $Search,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId
    )
}
function Invoke-AADGroupAddFavorite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Invoke-AADGroupCheckMemberGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $groupIds,

        [Parameter()]
        [System.String]
        $groupId
    )
}
function Invoke-AADGroupDelta
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Invoke-AADGroupGetById
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $types,

        [Parameter()]
        [System.String[]]
        $ids
    )
}
function Invoke-AADGroupGetMemberGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.Boolean]
        $securityEnabledOnly
    )
}
function Invoke-AADGroupGetMemberObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.Boolean]
        $securityEnabledOnly
    )
}
function Invoke-AADGroupGroupLifecyclePolicyAddGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupLifecyclePolicyId,

        [Parameter()]
        [System.String]
        $groupId
    )
}
function Invoke-AADGroupGroupLifecyclePolicyRemoveGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupLifecyclePolicyId,

        [Parameter()]
        [System.String]
        $groupId
    )
}
function Invoke-AADGroupRemoveFavorite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Invoke-AADGroupRenew
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Invoke-AADGroupResetUnseenCount
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Invoke-AADGroupRestore
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Invoke-AADGroupSubscribeByMail
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Invoke-AADGroupUnsubscribeByMail
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Invoke-IntuneAppConfigurationPolicyTargetedAssign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function Invoke-IntuneAppConfigurationPolicyTargetedTargetedApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function Invoke-IntuneAppProtectionPolicyAndroidAssign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId
    )
}
function Invoke-IntuneAppProtectionPolicyAndroidTargetApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId
    )
}
function Invoke-IntuneAppProtectionPolicyDefaultTargetApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId
    )
}
function Invoke-IntuneAppProtectionPolicyIosAssign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.Object[]]
        $assignments
    )
}
function Invoke-IntuneAppProtectionPolicyIosTargetApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId
    )
}
function Invoke-IntuneAppProtectionPolicyTargetApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Invoke-IntuneDeviceCompliancePolicyAssign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Object[]]
        $assignments
    )
}
function Invoke-IntuneDeviceCompliancePolicyScheduleActionsForRules
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Object[]]
        $deviceComplianceScheduledActionForRules
    )
}
function Invoke-IntuneDeviceConfigurationPolicyAssign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.Object[]]
        $assignments
    )
}
function Invoke-IntuneDeviceEnrollmentConfigurationAssign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $enrollmentConfigurationAssignments,

        [Parameter()]
        [System.String]
        $deviceEnrollmentConfigurationId
    )
}
function Invoke-IntuneDeviceEnrollmentConfigurationSetPriority
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $priority,

        [Parameter()]
        [System.String]
        $deviceEnrollmentConfigurationId
    )
}
function Invoke-IntuneDownloadApplePushNotificationCertificateSigningRequest
{
    [CmdletBinding()]
    param(

    )
}
function Invoke-IntuneExchangeConnectorSync
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceManagementExchangeConnectorId,

        [Parameter()]
        [System.String]
        $syncType
    )
}
function Invoke-IntuneGetEffectivePermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.String]
        $scope,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Invoke-IntuneGetUserIdsWithFlaggedAppRegistration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $MaxPageSize,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Skip,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Top,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Search
    )
}
function Invoke-IntuneLogoutSharedAppleDeviceActiveUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-IntuneManagedDeviceBypassActivationLock
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-IntuneManagedDeviceCleanWindowsDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.Boolean]
        $keepUserData
    )
}
function Invoke-IntuneManagedDeviceDeleteUserFromSharedAppleDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-IntuneManagedDeviceDisableLostMode
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-IntuneManagedDeviceLocateDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-IntuneManagedDeviceRebootNow
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-IntuneManagedDeviceRecoverPasscode
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-IntuneManagedDeviceRemoteLock
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-IntuneManagedDeviceResetPasscode
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-IntuneManagedDeviceRetire
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-IntuneManagedDeviceShutDownDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-IntuneManagedDeviceSyncDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-IntuneManagedDeviceUpdateWindowsDeviceAccount
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $updateWindowsDeviceAccountActionParameter,

        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-IntuneManagedDeviceWindowsDefenderScan
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.Boolean]
        $quickScan
    )
}
function Invoke-IntuneManagedDeviceWindowsDefenderUpdateSignature
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-IntuneManagedDeviceWipeDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $keepEnrollmentData,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String]
        $macOsUnlockCode,

        [Parameter()]
        [System.Boolean]
        $keepUserData
    )
}
function Invoke-IntuneManagedEBookAssign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $managedEBookAssignments,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Invoke-IntuneMangedDeviceRequestRemoteAssistance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Invoke-IntuneMdmWindowsInformationProtectionPolicyAssign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.Object[]]
        $assignments
    )
}
function Invoke-IntuneMdmWindowsInformationProtectionPolicyTargetApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId
    )
}
function Invoke-IntuneMobileAppAssign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.Object[]]
        $mobileAppAssignments
    )
}
function Invoke-IntuneMobileAppContentVersionFileCommit
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppContentFileId,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String]
        $mobileAppODataType,

        [Parameter()]
        [System.String]
        $mobileAppContentId,

        [Parameter()]
        [System.Object]
        $fileEncryptionInfo
    )
}
function Invoke-IntuneMobileAppContentVersionRenewUpload
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppContentFileId,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String]
        $mobileAppODataType,

        [Parameter()]
        [System.String]
        $mobileAppContentId
    )
}
function Invoke-IntuneRemoteAssistancePartnerBeginOnboarding
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $remoteAssistancePartnerId
    )
}
function Invoke-IntuneRemoteAssistancePartnerDisconnect
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $remoteAssistancePartnerId
    )
}
function Invoke-IntuneSendTestMessage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $notificationMessageTemplateId
    )
}
function Invoke-IntuneSyncMicrosoftStoreForBusinessApp
{
    [CmdletBinding()]
    param(

    )
}
function Invoke-IntuneVerifyWindowsEnrollmentAutoDiscovery
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $domainName
    )
}
function Invoke-IntuneVppTokenSyncLicense
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $vppTokenId
    )
}
function Invoke-IntuneWindowsInformationProtectionPolicyAssign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId,

        [Parameter()]
        [System.Object[]]
        $assignments
    )
}
function Invoke-IntuneWindowsInformationProtectionPolicyTargetApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId,

        [Parameter()]
        [System.Object[]]
        $apps
    )
}
function New-AADGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $photos,

        [Parameter()]
        [System.Object[]]
        $transitiveMemberOf,

        [Parameter()]
        [System.Object[]]
        $groupLifecyclePolicies,

        [Parameter()]
        [System.Int32]
        $unseenCount,

        [Parameter()]
        [System.String]
        $mailNickname,

        [Parameter()]
        [System.Boolean]
        $isSubscribedByMail,

        [Parameter()]
        [System.Object]
        $licenseProcessingState,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $settings,

        [Parameter()]
        [System.Object]
        $createdOnBehalfOf,

        [Parameter()]
        [System.Object[]]
        $membersWithLicenseErrors,

        [Parameter()]
        [System.String]
        $classification,

        [Parameter()]
        [System.DateTimeOffset]
        $renewedDateTime,

        [Parameter()]
        [System.Boolean]
        $isArchived,

        [Parameter()]
        [System.Object[]]
        $onPremisesProvisioningErrors,

        [Parameter()]
        [System.String[]]
        $groupTypes,

        [Parameter()]
        [System.Boolean]
        $autoSubscribeNewMembers,

        [Parameter()]
        [System.Boolean]
        $securityEnabled,

        [Parameter()]
        [System.Object[]]
        $transitiveMembers,

        [Parameter()]
        [System.Object]
        $photo,

        [Parameter()]
        [System.Boolean]
        $allowExternalSenders,

        [Parameter()]
        [System.Object[]]
        $assignedLicenses,

        [Parameter()]
        [System.Boolean]
        $mailEnabled,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Object[]]
        $owners,

        [Parameter()]
        [System.Object[]]
        $memberOf,

        [Parameter()]
        [System.Boolean]
        $hasMembersWithLicenseErrors,

        [Parameter()]
        [System.Object[]]
        $members,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $deletedDateTime,

        [Parameter()]
        [System.String[]]
        $proxyAddresses,

        [Parameter()]
        [System.String]
        $visibility,

        [Parameter()]
        [System.String]
        $mail,

        [Parameter()]
        [System.Boolean]
        $onPremisesSyncEnabled,

        [Parameter()]
        [System.String]
        $preferredDataLocation,

        [Parameter()]
        [System.String]
        $onPremisesSecurityIdentifier,

        [Parameter()]
        [System.DateTimeOffset]
        $onPremisesLastSyncDateTime
    )
}
function New-AADGroupCreatedOnBehalfOfReference
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $directoryObjectReferenceUrl,

        [Parameter()]
        [System.String]
        $groupId
    )
}
function New-AADGroupGroupLifecyclePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $alternateNotificationEmails,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $managedGroupTypes,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.Int32]
        $groupLifetimeInDays
    )
}
function New-AADGroupMemberOfReferenceSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $directoryObjectReferenceUrl,

        [Parameter()]
        [System.String]
        $groupId
    )
}
function New-AADGroupMemberReferenceSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $directoryObjectReferenceUrl,

        [Parameter()]
        [System.String]
        $groupId
    )
}
function New-AADGroupOwnerReferenceSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $directoryObjectReferenceUrl,

        [Parameter()]
        [System.String]
        $groupId
    )
}
function New-AADGroupPhotoData
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $ContentType,

        [Parameter()]
        [System.String]
        $Data
    )
}
function New-AADGroupPhotoSetData
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $ContentType,

        [Parameter()]
        [System.String]
        $Data,

        [Parameter()]
        [System.String]
        $profilePhotoId
    )
}
function New-AADGroupSetting
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $values
    )
}
function New-IntuneAppConfigurationPolicyTargeted
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $customSettings,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.Object[]]
        $assignments
    )
}
function New-IntuneAppConfigurationPolicyTargetedApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-IntuneAppConfigurationPolicyTargetedAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function New-IntuneAppConfigurationPolicyTargetedDeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function New-IntuneApplePushNotificationCertificate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $expirationDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $certificate,

        [Parameter()]
        [System.String]
        $topicIdentifier,

        [Parameter()]
        [System.String]
        $appleIdentifier,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-IntuneAppProtectionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $enterpriseProxyServers,

        [Parameter()]
        [System.Boolean]
        $fingerprintBlocked,

        [Parameter()]
        [System.Object[]]
        $enterpriseProtectedDomainNames,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosManagedAppProtection,

        [Parameter()]
        [System.Boolean]
        $revokeOnMdmHandoffDisabled,

        [Parameter()]
        [System.String]
        $enforcementLevel,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $smbAutoEncryptedFileExtensions,

        [Parameter()]
        [System.Boolean]
        $dataBackupBlocked,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.TimeSpan]
        $periodOnlineBeforeAccessCheck,

        [Parameter()]
        [System.Object[]]
        $customSettings,

        [Parameter()]
        [System.Int32]
        $pinExpirationDays,

        [Parameter()]
        [System.Boolean]
        $contactSyncBlocked,

        [Parameter()]
        [System.Boolean]
        $windowsHelloForBusinessBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $defaultManagedAppProtection,

        [Parameter()]
        [System.String]
        $minimumWarningPatchVersion,

        [Parameter()]
        [System.Int32]
        $numberOfPastPinsRemembered,

        [Parameter()]
        [System.String]
        $enterpriseDomain,

        [Parameter()]
        [System.Boolean]
        $printBlocked,

        [Parameter()]
        [System.Boolean]
        $pinRequired,

        [Parameter()]
        [System.String]
        $appDataEncryptionType,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.String[]]
        $allowedDataStorageLocations,

        [Parameter()]
        [System.Int32]
        $passwordMaximumAttemptCount,

        [Parameter()]
        [System.Boolean]
        $faceIdBlocked,

        [Parameter()]
        [System.Object[]]
        $enterpriseIPRanges,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $mdmWindowsInformationProtectionPolicy,

        [Parameter()]
        [System.Object[]]
        $exemptAppLockerFiles,

        [Parameter()]
        [System.Boolean]
        $enterpriseIPRangesAreAuthoritative,

        [Parameter()]
        [System.Boolean]
        $deviceComplianceRequired,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeAccessCheck,

        [Parameter()]
        [System.String]
        $minimumRequiredOsVersion,

        [Parameter()]
        [System.Boolean]
        $revokeOnUnenrollDisabled,

        [Parameter()]
        [System.Boolean]
        $disableAppEncryptionIfDeviceEncryptionIsEnabled,

        [Parameter()]
        [System.String]
        $minimumWarningAppVersion,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxiedDomains,

        [Parameter()]
        [System.Int32]
        $maximumPinRetries,

        [Parameter()]
        [System.Object[]]
        $enterpriseInternalProxyServers,

        [Parameter()]
        [System.Boolean]
        $encryptAppData,

        [Parameter()]
        [System.Boolean]
        $enterpriseProxyServersAreAuthoritative,

        [Parameter()]
        [System.String]
        $pinSpecialCharacters,

        [Parameter()]
        [System.String]
        $allowedOutboundDataTransferDestinations,

        [Parameter()]
        [System.Boolean]
        $azureRightsManagementServicesAllowed,

        [Parameter()]
        [System.Object[]]
        $protectedApps,

        [Parameter()]
        [System.Boolean]
        $organizationalCredentialsRequired,

        [Parameter()]
        [System.Object[]]
        $protectedAppLockerFiles,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $pinLowercaseLetters,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Int32]
        $minimumPinLength,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidManagedAppProtection,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.String]
        $minimumRequiredSdkVersion,

        [Parameter()]
        [System.Boolean]
        $protectionUnderLockConfigRequired,

        [Parameter()]
        [System.Boolean]
        $simplePinBlocked,

        [Parameter()]
        [System.Boolean]
        $iconsVisible,

        [Parameter()]
        [System.String]
        $minimumRequiredAppVersion,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $targetedManagedAppConfiguration,

        [Parameter()]
        [System.Boolean]
        $screenCaptureBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsInformationProtectionPolicy,

        [Parameter()]
        [System.Object[]]
        $enterpriseNetworkDomainNames,

        [Parameter()]
        [System.Object[]]
        $exemptApps,

        [Parameter()]
        [System.String]
        $minimumWarningOsVersion,

        [Parameter()]
        [System.Int32]
        $minutesOfInactivityBeforeDeviceLock,

        [Parameter()]
        [System.Guid]
        $rightsManagementServicesTemplateId,

        [Parameter()]
        [System.Boolean]
        $indexingEncryptedStoresOrItemsBlocked,

        [Parameter()]
        [System.String]
        $mdmEnrollmentUrl,

        [Parameter()]
        [System.Object[]]
        $neutralDomainResources,

        [Parameter()]
        [System.String]
        $pinUppercaseLetters,

        [Parameter()]
        [System.Boolean]
        $saveAsBlocked,

        [Parameter()]
        [System.TimeSpan]
        $periodBeforePinReset,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $allowedInboundDataTransferSources,

        [Parameter()]
        [System.Int32]
        $daysWithoutContactBeforeUnenroll,

        [Parameter()]
        [System.Object]
        $dataRecoveryCertificate,

        [Parameter()]
        [System.Boolean]
        $disableAppPinIfDevicePinIsSet,

        [Parameter()]
        [System.String]
        $minimumRequiredPatchVersion,

        [Parameter()]
        [System.Int32]
        $pinMinimumLength,

        [Parameter()]
        [System.String]
        $allowedOutboundClipboardSharingLevel,

        [Parameter()]
        [System.Boolean]
        $managedBrowserToOpenLinksRequired,

        [Parameter()]
        [System.String]
        $pinCharacterSet,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeWipeIsEnforced
    )
}
function New-IntuneAppProtectionPolicyAndroid
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $minimumRequiredAppVersion,

        [Parameter()]
        [System.Int32]
        $minimumPinLength,

        [Parameter()]
        [System.String]
        $allowedInboundDataTransferSources,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Boolean]
        $disableAppEncryptionIfDeviceEncryptionIsEnabled,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $minimumRequiredOsVersion,

        [Parameter()]
        [System.Boolean]
        $pinRequired,

        [Parameter()]
        [System.String]
        $allowedOutboundDataTransferDestinations,

        [Parameter()]
        [System.Int32]
        $maximumPinRetries,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $minimumWarningOsVersion,

        [Parameter()]
        [System.Boolean]
        $fingerprintBlocked,

        [Parameter()]
        [System.Boolean]
        $organizationalCredentialsRequired,

        [Parameter()]
        [System.Boolean]
        $managedBrowserToOpenLinksRequired,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeWipeIsEnforced,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.Boolean]
        $screenCaptureBlocked,

        [Parameter()]
        [System.Boolean]
        $encryptAppData,

        [Parameter()]
        [System.String]
        $minimumRequiredPatchVersion,

        [Parameter()]
        [System.Boolean]
        $simplePinBlocked,

        [Parameter()]
        [System.String]
        $allowedOutboundClipboardSharingLevel,

        [Parameter()]
        [System.Boolean]
        $printBlocked,

        [Parameter()]
        [System.String]
        $minimumWarningPatchVersion,

        [Parameter()]
        [System.TimeSpan]
        $periodBeforePinReset,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Boolean]
        $deviceComplianceRequired,

        [Parameter()]
        [System.Boolean]
        $dataBackupBlocked,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.Boolean]
        $contactSyncBlocked,

        [Parameter()]
        [System.Boolean]
        $disableAppPinIfDevicePinIsSet,

        [Parameter()]
        [System.String[]]
        $allowedDataStorageLocations,

        [Parameter()]
        [System.String]
        $minimumWarningAppVersion,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $pinCharacterSet,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeAccessCheck,

        [Parameter()]
        [System.Boolean]
        $saveAsBlocked,

        [Parameter()]
        [System.TimeSpan]
        $periodOnlineBeforeAccessCheck
    )
}
function New-IntuneAppProtectionPolicyAndroidApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-IntuneAppProtectionPolicyAndroidAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $androidManagedAppProtectionODataType,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-IntuneAppProtectionPolicyAndroidDeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId
    )
}
function New-IntuneAppProtectionPolicyApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function New-IntuneAppProtectionPolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-IntuneAppProtectionPolicyDefault
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $minimumRequiredAppVersion,

        [Parameter()]
        [System.String]
        $allowedInboundDataTransferSources,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Boolean]
        $disableAppEncryptionIfDeviceEncryptionIsEnabled,

        [Parameter()]
        [System.String]
        $minimumRequiredSdkVersion,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $minimumRequiredOsVersion,

        [Parameter()]
        [System.Boolean]
        $pinRequired,

        [Parameter()]
        [System.Object[]]
        $customSettings,

        [Parameter()]
        [System.String]
        $allowedOutboundDataTransferDestinations,

        [Parameter()]
        [System.Int32]
        $maximumPinRetries,

        [Parameter()]
        [System.String]
        $appDataEncryptionType,

        [Parameter()]
        [System.String]
        $minimumWarningOsVersion,

        [Parameter()]
        [System.Boolean]
        $fingerprintBlocked,

        [Parameter()]
        [System.Boolean]
        $managedBrowserToOpenLinksRequired,

        [Parameter()]
        [System.Boolean]
        $organizationalCredentialsRequired,

        [Parameter()]
        [System.Boolean]
        $faceIdBlocked,

        [Parameter()]
        [System.Boolean]
        $screenCaptureBlocked,

        [Parameter()]
        [System.Boolean]
        $encryptAppData,

        [Parameter()]
        [System.String]
        $minimumRequiredPatchVersion,

        [Parameter()]
        [System.Boolean]
        $simplePinBlocked,

        [Parameter()]
        [System.String]
        $allowedOutboundClipboardSharingLevel,

        [Parameter()]
        [System.Boolean]
        $printBlocked,

        [Parameter()]
        [System.String]
        $minimumWarningPatchVersion,

        [Parameter()]
        [System.TimeSpan]
        $periodBeforePinReset,

        [Parameter()]
        [System.Boolean]
        $deviceComplianceRequired,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeWipeIsEnforced,

        [Parameter()]
        [System.Boolean]
        $dataBackupBlocked,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.Boolean]
        $contactSyncBlocked,

        [Parameter()]
        [System.Boolean]
        $disableAppPinIfDevicePinIsSet,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String[]]
        $allowedDataStorageLocations,

        [Parameter()]
        [System.Int32]
        $minimumPinLength,

        [Parameter()]
        [System.String]
        $minimumWarningAppVersion,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.String]
        $pinCharacterSet,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeAccessCheck,

        [Parameter()]
        [System.Boolean]
        $saveAsBlocked,

        [Parameter()]
        [System.TimeSpan]
        $periodOnlineBeforeAccessCheck
    )
}
function New-IntuneAppProtectionPolicyDefaultApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-IntuneAppProtectionPolicyDefaultDeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp
    )
}
function New-IntuneAppProtectionPolicyDeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function New-IntuneAppProtectionPolicyExemptAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function New-IntuneAppProtectionPolicyIos
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $minimumRequiredAppVersion,

        [Parameter()]
        [System.String]
        $allowedInboundDataTransferSources,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.String]
        $minimumRequiredSdkVersion,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $minimumRequiredOsVersion,

        [Parameter()]
        [System.Boolean]
        $pinRequired,

        [Parameter()]
        [System.String]
        $allowedOutboundDataTransferDestinations,

        [Parameter()]
        [System.Int32]
        $maximumPinRetries,

        [Parameter()]
        [System.String]
        $appDataEncryptionType,

        [Parameter()]
        [System.String]
        $minimumWarningOsVersion,

        [Parameter()]
        [System.Boolean]
        $fingerprintBlocked,

        [Parameter()]
        [System.Boolean]
        $managedBrowserToOpenLinksRequired,

        [Parameter()]
        [System.Boolean]
        $organizationalCredentialsRequired,

        [Parameter()]
        [System.Boolean]
        $faceIdBlocked,

        [Parameter()]
        [System.Boolean]
        $simplePinBlocked,

        [Parameter()]
        [System.String]
        $allowedOutboundClipboardSharingLevel,

        [Parameter()]
        [System.Boolean]
        $printBlocked,

        [Parameter()]
        [System.TimeSpan]
        $periodBeforePinReset,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Boolean]
        $deviceComplianceRequired,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeWipeIsEnforced,

        [Parameter()]
        [System.Boolean]
        $dataBackupBlocked,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.Boolean]
        $contactSyncBlocked,

        [Parameter()]
        [System.Boolean]
        $disableAppPinIfDevicePinIsSet,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String[]]
        $allowedDataStorageLocations,

        [Parameter()]
        [System.Int32]
        $minimumPinLength,

        [Parameter()]
        [System.String]
        $minimumWarningAppVersion,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.String]
        $pinCharacterSet,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeAccessCheck,

        [Parameter()]
        [System.Boolean]
        $saveAsBlocked,

        [Parameter()]
        [System.TimeSpan]
        $periodOnlineBeforeAccessCheck
    )
}
function New-IntuneAppProtectionPolicyIosApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-IntuneAppProtectionPolicyIosAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionODataType,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-IntuneAppProtectionPolicyIosDeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp
    )
}
function New-IntuneAppProtectionPolicyProtectedAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function New-IntuneConditionalAccessSetting
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Guid[]]
        $includedGroups,

        [Parameter()]
        [System.Guid[]]
        $excludedGroups,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Boolean]
        $overrideDefaultRule,

        [Parameter()]
        [System.Boolean]
        $enabled
    )
}
function New-IntuneDetectedApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $managedDevices,

        [Parameter()]
        [System.Int32]
        $deviceCount,

        [Parameter()]
        [System.Int64]
        $sizeInByte
    )
}
function New-IntuneDetectedAppDeviceReferenceSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceReferenceUrl,

        [Parameter()]
        [System.String]
        $detectedAppId
    )
}
function New-IntuneDeviceAppManagement
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $microsoftStoreForBusinessLastSuccessfulSyncDateTime,

        [Parameter()]
        [System.Object[]]
        $targetedManagedAppConfigurations,

        [Parameter()]
        [System.Object[]]
        $managedEBooks,

        [Parameter()]
        [System.Object[]]
        $mobileApps,

        [Parameter()]
        [System.String]
        $microsoftStoreForBusinessLanguage,

        [Parameter()]
        [System.Object[]]
        $managedAppPolicies,

        [Parameter()]
        [System.Object[]]
        $managedAppStatuses,

        [Parameter()]
        [System.Boolean]
        $isEnabledForMicrosoftStoreForBusiness,

        [Parameter()]
        [System.Object[]]
        $managedAppRegistrations,

        [Parameter()]
        [System.Object[]]
        $defaultManagedAppProtections,

        [Parameter()]
        [System.DateTimeOffset]
        $microsoftStoreForBusinessLastCompletedApplicationSyncTime,

        [Parameter()]
        [System.Object[]]
        $iosManagedAppProtections,

        [Parameter()]
        [System.Object[]]
        $mobileAppCategories,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $vppTokens,

        [Parameter()]
        [System.Object[]]
        $windowsInformationProtectionPolicies,

        [Parameter()]
        [System.Object[]]
        $androidManagedAppProtections,

        [Parameter()]
        [System.Object[]]
        $mdmWindowsInformationProtectionPolicies,

        [Parameter()]
        [System.Object[]]
        $mobileAppConfigurations
    )
}
function New-IntuneDeviceCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-IntuneDeviceCompliancePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $passcodeBlockSimple,

        [Parameter()]
        [System.Boolean]
        $firewallEnabled,

        [Parameter()]
        [System.String]
        $mobileOsMinimumVersion,

        [Parameter()]
        [System.Int32]
        $passcodeExpirationDays,

        [Parameter()]
        [System.Boolean]
        $bitLockerEnabled,

        [Parameter()]
        [System.String]
        $minAndroidSecurityPatchLevel,

        [Parameter()]
        [System.Object[]]
        $userStatuses,

        [Parameter()]
        [System.Object[]]
        $deviceSettingStateSummaries,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosCompliancePolicy,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Boolean]
        $firewallEnableStealthMode,

        [Parameter()]
        [System.String]
        $passwordRequiredType,

        [Parameter()]
        [System.String]
        $osMinimumVersion,

        [Parameter()]
        [System.String]
        $deviceThreatProtectionRequiredSecurityLevel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsPhone81CompliancePolicy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows81CompliancePolicy,

        [Parameter()]
        [System.Boolean]
        $securityRequireGooglePlayServices,

        [Parameter()]
        [System.String]
        $mobileOsMaximumVersion,

        [Parameter()]
        [System.Boolean]
        $securityDisableUsbDebugging,

        [Parameter()]
        [System.Boolean]
        $storageRequireEncryption,

        [Parameter()]
        [System.Int32]
        $passcodeMinimumLength,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10CompliancePolicy,

        [Parameter()]
        [System.Object]
        $userStatusOverview,

        [Parameter()]
        [System.Boolean]
        $codeIntegrityEnabled,

        [Parameter()]
        [System.Boolean]
        $securityRequireUpToDateSecurityProviders,

        [Parameter()]
        [System.Boolean]
        $securityBlockJailbrokenDevices,

        [Parameter()]
        [System.Int32]
        $passcodeMinimumCharacterSetCount,

        [Parameter()]
        [System.Boolean]
        $securityRequireSafetyNetAttestationBasicIntegrity,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $passcodePreviousPasscodeBlockCount,

        [Parameter()]
        [System.Int32]
        $passcodeMinutesOfInactivityBeforeLock,

        [Parameter()]
        [System.Int32]
        $passwordExpirationDays,

        [Parameter()]
        [System.Boolean]
        $securityRequireCompanyPortalAppIntegrity,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Boolean]
        $securityPreventInstallAppsFromUnknownSources,

        [Parameter()]
        [System.Int32]
        $passwordPreviousPasswordBlockCount,

        [Parameter()]
        [System.Boolean]
        $firewallBlockAllIncoming,

        [Parameter()]
        [System.Boolean]
        $passwordRequiredToUnlockFromIdle,

        [Parameter()]
        [System.Boolean]
        $securityRequireSafetyNetAttestationCertifiedDevice,

        [Parameter()]
        [System.Int32]
        $passwordMinimumCharacterSetCount,

        [Parameter()]
        [System.Boolean]
        $earlyLaunchAntiMalwareDriverEnabled,

        [Parameter()]
        [System.Boolean]
        $passwordBlockSimple,

        [Parameter()]
        [System.Boolean]
        $requireHealthyDeviceReport,

        [Parameter()]
        [System.String]
        $passcodeRequiredType,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.Boolean]
        $passwordRequired,

        [Parameter()]
        [System.Boolean]
        $passwordRequireToUnlockFromIdle,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Int32]
        $passwordMinimumLength,

        [Parameter()]
        [System.Boolean]
        $systemIntegrityProtectionEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidCompliancePolicy,

        [Parameter()]
        [System.Object[]]
        $deviceStatuses,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSCompliancePolicy,

        [Parameter()]
        [System.Boolean]
        $passcodeRequired,

        [Parameter()]
        [System.Boolean]
        $deviceThreatProtectionEnabled,

        [Parameter()]
        [System.Boolean]
        $managedEmailProfileRequired,

        [Parameter()]
        [System.Boolean]
        $secureBootEnabled,

        [Parameter()]
        [System.Boolean]
        $securityRequireVerifyApps,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidWorkProfileCompliancePolicy,

        [Parameter()]
        [System.Object]
        $deviceStatusOverview,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $scheduledActionsForRule,

        [Parameter()]
        [System.String]
        $osMaximumVersion,

        [Parameter()]
        [System.Int32]
        $passwordMinutesOfInactivityBeforeLock,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10MobileCompliancePolicy
    )
}
function New-IntuneDeviceCompliancePolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $target
    )
}
function New-IntuneDeviceCompliancePolicyDeviceSettingStateSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.String]
        $settingName,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.String]
        $instancePath,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function New-IntuneDeviceCompliancePolicyDeviceStateSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $inGracePeriodCount,

        [Parameter()]
        [System.Int32]
        $configManagerCount,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function New-IntuneDeviceCompliancePolicyDeviceStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $deviceModel,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.String]
        $deviceDisplayName,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime
    )
}
function New-IntuneDeviceCompliancePolicyDeviceStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.Int32]
        $failedCount,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime
    )
}
function New-IntuneDeviceCompliancePolicyScheduledActionsForRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $scheduledActionConfigurations,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $ruleName,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-IntuneDeviceCompliancePolicyScheduledActionsForRuleConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $actionType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $notificationTemplateId,

        [Parameter()]
        [System.Int32]
        $gracePeriodHours,

        [Parameter()]
        [System.String]
        $deviceComplianceScheduledActionForRuleId,

        [Parameter()]
        [System.String[]]
        $notificationMessageCCList
    )
}
function New-IntuneDeviceCompliancePolicySettingSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.String]
        $settingName,

        [Parameter()]
        [System.String]
        $setting,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $deviceComplianceSettingStates,

        [Parameter()]
        [System.String]
        $platformType,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function New-IntuneDeviceCompliancePolicyUserStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $devicesCount,

        [Parameter()]
        [System.String]
        $status
    )
}
function New-IntuneDeviceCompliancePolicyUserStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.Int32]
        $failedCount,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime
    )
}
function New-IntuneDeviceComplianceSettingState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userEmail,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $settingName,

        [Parameter()]
        [System.String]
        $setting,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicySettingStateSummaryId,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $deviceModel,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.String]
        $deviceId
    )
}
function New-IntuneDeviceConfigurationDeviceStateSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function New-IntuneDeviceConfigurationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $settingsBlockChangeLanguage,

        [Parameter()]
        [System.Boolean]
        $browserBlockSingleWordEntryOnIntranetSites,

        [Parameter()]
        [System.Boolean]
        $settingsBlockNetworkInternetPage,

        [Parameter()]
        [System.Byte[]]
        $startMenuLayoutXml,

        [Parameter()]
        [System.Boolean]
        $appStoreBlockInAppPurchases,

        [Parameter()]
        [System.Boolean]
        $edgeBlockAccessToAboutFlags,

        [Parameter()]
        [System.Boolean]
        $airDropBlocked,

        [Parameter()]
        [System.Boolean]
        $oneDriveDisableFileSync,

        [Parameter()]
        [System.Boolean]
        $edgeBlockAutofill,

        [Parameter()]
        [System.Object]
        $edgeSearchEngine,

        [Parameter()]
        [System.String]
        $appsAllowTrustedAppsSideloading,

        [Parameter()]
        [System.Object[]]
        $appsSingleAppModeList,

        [Parameter()]
        [System.Boolean]
        $workProfileRequirePassword,

        [Parameter()]
        [System.Boolean]
        $firewallIPSecExemptionsAllowDHCP,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidCustomConfiguration,

        [Parameter()]
        [System.Boolean]
        $firewallIPSecExemptionsAllowRouterDiscovery,

        [Parameter()]
        [System.String]
        $firewallPreSharedKeyEncodingMethod,

        [Parameter()]
        [System.Boolean]
        $resetProtectionModeBlocked,

        [Parameter()]
        [System.Boolean]
        $startMenuHideRecentJumpLists,

        [Parameter()]
        [System.String]
        $userAccountControlSettings,

        [Parameter()]
        [System.String]
        $appsVisibilityListType,

        [Parameter()]
        [System.Int32]
        $passwordMinutesOfInactivityBeforeScreenTimeout,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowAutoLock,

        [Parameter()]
        [System.Boolean]
        $updatesRequireAutomaticUpdates,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10TeamGeneralConfiguration,

        [Parameter()]
        [System.Boolean]
        $edgeBlockDeveloperTools,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockOnActionCenter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosUpdateConfiguration,

        [Parameter()]
        [System.Int32]
        $maintenanceWindowDurationInHours,

        [Parameter()]
        [System.Boolean]
        $miracastBlocked,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockPassbook,

        [Parameter()]
        [System.Boolean]
        $powerOffBlocked,

        [Parameter()]
        [System.Int32]
        $defenderScanMaxCpu,

        [Parameter()]
        [System.Byte[]]
        $payload,

        [Parameter()]
        [System.Boolean]
        $appStoreBlockUIAppInstallation,

        [Parameter()]
        [System.String]
        $assetTagTemplate,

        [Parameter()]
        [System.Boolean]
        $applicationGuardBlockNonEnterpriseContent,

        [Parameter()]
        [System.String]
        $defenderMonitorFileActivity,

        [Parameter()]
        [System.Boolean]
        $storageRequireMobileDeviceEncryption,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockThirdPartyNotifications,

        [Parameter()]
        [System.Boolean]
        $deviceSharingAllowed,

        [Parameter()]
        [System.Boolean]
        $passwordRequireWhenResumeFromIdleState,

        [Parameter()]
        [System.Boolean]
        $wifiBlockHotspotReporting,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockCrossProfileCopyPaste,

        [Parameter()]
        [System.Boolean]
        $bitLockerEncryptDevice,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockNotificationView,

        [Parameter()]
        [System.Int32]
        $passwordMinimumLength,

        [Parameter()]
        [System.Boolean]
        $windowsStoreEnablePrivateStoreOnly,

        [Parameter()]
        [System.Boolean]
        $spotlightBlockInternetResults,

        [Parameter()]
        [System.Boolean]
        $factoryResetBlocked,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintMopriaDiscoveryResourceIdentifier,

        [Parameter()]
        [System.Boolean]
        $settingsBlockRemoveProvisioningPackage,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPersistence,

        [Parameter()]
        [System.String]
        $welcomeScreenBackgroundImageUrl,

        [Parameter()]
        [System.Boolean]
        $appleNewsBlocked,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintOAuthClientIdentifier,

        [Parameter()]
        [System.Boolean]
        $appleWatchForceWristDetection,

        [Parameter()]
        [System.Boolean]
        $edgeBlockAddressBarDropdown,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireMonoAudio,

        [Parameter()]
        [System.Boolean]
        $wirelessDisplayBlockProjectionToThisDevice,

        [Parameter()]
        [System.Boolean]
        $miracastRequirePin,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockPredictive,

        [Parameter()]
        [System.Boolean]
        $bitLockerDisableWarningForOtherDiskEncryption,

        [Parameter()]
        [System.Boolean]
        $networkProxyApplySettingsDeviceWide,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Boolean]
        $startMenuHideFrequentlyUsedApps,

        [Parameter()]
        [System.Boolean]
        $classroomAppForceUnpromptedScreenObservation,

        [Parameter()]
        [System.String[]]
        $defenderGuardedFoldersAllowedAppPaths,

        [Parameter()]
        [System.Boolean]
        $hostPairingBlocked,

        [Parameter()]
        [System.Boolean]
        $kioskModeBlockSleepButton,

        [Parameter()]
        [System.Boolean]
        $locationServicesBlocked,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockConsumerSpecificFeatures,

        [Parameter()]
        [System.Object]
        $mediaContentRatingUnitedStates,

        [Parameter()]
        [System.TimeSpan]
        $activeHoursEnd,

        [Parameter()]
        [System.String]
        $deliveryOptimizationMode,

        [Parameter()]
        [System.Int32]
        $wiFiScanInterval,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPrintToLocalPrinters,

        [Parameter()]
        [System.String]
        $licenseType,

        [Parameter()]
        [System.Boolean]
        $allowScreenCapture,

        [Parameter()]
        [System.Boolean]
        $smartScreenEnableInShell,

        [Parameter()]
        [System.String]
        $productKey,

        [Parameter()]
        [System.Boolean]
        $defenderScanNetworkFiles,

        [Parameter()]
        [System.Boolean]
        $searchEnableRemoteQueries,

        [Parameter()]
        [System.Boolean]
        $definitionLookupBlocked,

        [Parameter()]
        [System.Object[]]
        $deviceStatuses,

        [Parameter()]
        [System.Boolean]
        $cellularBlockVoiceRoaming,

        [Parameter()]
        [System.String]
        $networkProxyAutomaticConfigurationUrl,

        [Parameter()]
        [System.Boolean]
        $settingsBlockUpdateSecurityPage,

        [Parameter()]
        [System.Object[]]
        $appsLaunchBlockList,

        [Parameter()]
        [System.Boolean]
        $passwordBlockFingerprintUnlock,

        [Parameter()]
        [System.String]
        $browserLoggingReportLocation,

        [Parameter()]
        [System.Boolean]
        $iCloudRequireEncryptedBackup,

        [Parameter()]
        [System.String]
        $defenderCloudBlockLevel,

        [Parameter()]
        [System.String]
        $passwordRequiredType,

        [Parameter()]
        [System.Boolean]
        $startMenuHideRecentlyAddedApps,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsPhone81GeneralConfiguration,

        [Parameter()]
        [System.Boolean]
        $settingsBlockTimeLanguagePage,

        [Parameter()]
        [System.Boolean]
        $searchBlockDiacritics,

        [Parameter()]
        [System.Int32]
        $passcodeMinutesOfInactivityBeforeLock,

        [Parameter()]
        [System.Boolean]
        $smartScreenBlockPromptOverrideForFiles,

        [Parameter()]
        [System.Int32]
        $settingsSleepTimeoutInMinutes,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockShortcuts,

        [Parameter()]
        [System.Int32]
        $passwordSignInFailureCountBeforeFactoryReset,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockPhotoStreamSync,

        [Parameter()]
        [System.Boolean]
        $storageRestrictAppDataToSystemVolume,

        [Parameter()]
        [System.Boolean]
        $googlePlayStoreBlocked,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordSignInFailureCountBeforeFactoryReset,

        [Parameter()]
        [System.Boolean]
        $deviceBlockEraseContentAndSettings,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockPhotoLibrary,

        [Parameter()]
        [System.Byte[]]
        $startMenuLayoutEdgeAssetsXml,

        [Parameter()]
        [System.Boolean]
        $edgeBlockJavaScript,

        [Parameter()]
        [System.String[]]
        $defenderProcessesToExclude,

        [Parameter()]
        [System.Boolean]
        $settingsBlockSettingsApp,

        [Parameter()]
        [System.Boolean]
        $microsoftAccountBlockSettingsSync,

        [Parameter()]
        [System.Boolean]
        $documentsBlockManagedDocumentsInUnmanagedApps,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockSharedPhotoStream,

        [Parameter()]
        [System.Object]
        $firewallProfilePublic,

        [Parameter()]
        [System.String]
        $edgeFirstRunUrl,

        [Parameter()]
        [System.Boolean]
        $experienceBlockErrorDialogWhenNoSIM,

        [Parameter()]
        [System.Boolean]
        $connectedDevicesServiceBlocked,

        [Parameter()]
        [System.Boolean]
        $activationLockAllowWhenSupervised,

        [Parameter()]
        [System.String]
        $miracastChannel,

        [Parameter()]
        [System.Boolean]
        $settingsBlockChangeSystemTime,

        [Parameter()]
        [System.Object]
        $mediaContentRatingJapan,

        [Parameter()]
        [System.String]
        $license,

        [Parameter()]
        [System.Boolean]
        $storageRequireDeviceEncryption,

        [Parameter()]
        [System.Boolean]
        $disablePowerPolicies,

        [Parameter()]
        [System.Boolean]
        $edgeBlockInPrivateBrowsing,

        [Parameter()]
        [System.Int32]
        $settingsDefaultVolume,

        [Parameter()]
        [System.Boolean]
        $startMenuHideChangeAccountSettings,

        [Parameter()]
        [System.String]
        $safeSearchFilter,

        [Parameter()]
        [System.String]
        $kioskAppDisplayName,

        [Parameter()]
        [System.Boolean]
        $networkProxyDisableAutoDetect,

        [Parameter()]
        [System.Boolean]
        $passwordRequired,

        [Parameter()]
        [System.Boolean]
        $settingsBlockSigninSuggestions,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowTouchscreen,

        [Parameter()]
        [System.Boolean]
        $edgeBlockLiveTileDataCollection,

        [Parameter()]
        [System.Int32]
        $enterpriseCloudPrintDiscoveryMaxLimit,

        [Parameter()]
        [System.Boolean]
        $messagesBlocked,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinNonLetterCharacters,

        [Parameter()]
        [System.Boolean]
        $certificatesBlockUntrustedTlsCertificates,

        [Parameter()]
        [System.Boolean]
        $uninstallBuiltInApps,

        [Parameter()]
        [System.String]
        $defenderExploitProtectionXmlFileName,

        [Parameter()]
        [System.String]
        $privacyAdvertisingId,

        [Parameter()]
        [System.String]
        $prereleaseFeatures,

        [Parameter()]
        [System.Int32]
        $passwordMinutesOfInactivityBeforeLock,

        [Parameter()]
        [System.Boolean]
        $searchDisableIndexingRemovableDrive,

        [Parameter()]
        [System.Boolean]
        $browserRequireHighSecurityForRestrictedSites,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidWorkProfileCustomConfiguration,

        [Parameter()]
        [System.Boolean]
        $appStoreRequirePassword,

        [Parameter()]
        [System.String]
        $developerUnlockSetting,

        [Parameter()]
        [System.Boolean]
        $passcodeBlockModification,

        [Parameter()]
        [System.Boolean]
        $appsBlockYouTube,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockCrossProfileContactsSearch,

        [Parameter()]
        [System.Object[]]
        $appsHideList,

        [Parameter()]
        [System.DateTimeOffset]
        $qualityUpdatesPauseExpiryDateTime,

        [Parameter()]
        [System.Object[]]
        $networkUsageRules,

        [Parameter()]
        [System.Boolean]
        $wiFiConnectOnlyToConfiguredNetworks,

        [Parameter()]
        [System.Boolean]
        $cellularBlockDataRoaming,

        [Parameter()]
        [System.Boolean]
        $safariRequireFraudWarning,

        [Parameter()]
        [System.Boolean]
        $disableSignInOnResume,

        [Parameter()]
        [System.Int32]
        $firewallIdleTimeoutForSecurityAssociationInSeconds,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowRingerSwitch,

        [Parameter()]
        [System.Boolean]
        $qualityUpdatesPaused,

        [Parameter()]
        [System.Boolean]
        $webBrowserBlockPopups,

        [Parameter()]
        [System.Boolean]
        $edgeBlockSendingDoNotTrackHeader,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlockAdvertising,

        [Parameter()]
        [System.Object[]]
        $homeScreenPages,

        [Parameter()]
        [System.Boolean]
        $browserBlockJavaScript,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockWelcomeExperience,

        [Parameter()]
        [System.Boolean]
        $cellularBlockVpn,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderPictures,

        [Parameter()]
        [System.Boolean]
        $safariBlockAutofill,

        [Parameter()]
        [System.DateTimeOffset]
        $featureUpdatesPauseExpiryDateTime,

        [Parameter()]
        [System.String]
        $safariCookieSettings,

        [Parameter()]
        [System.Boolean]
        $accountsBlockAddingNonMicrosoftAccountEmail,

        [Parameter()]
        [System.String]
        $windowsSpotlightConfigureOnLockScreen,

        [Parameter()]
        [System.String]
        $kioskModeAppStoreUrl,

        [Parameter()]
        [System.Int32]
        $passwordExpirationDays,

        [Parameter()]
        [System.Object]
        $mediaContentRatingIreland,

        [Parameter()]
        [System.Boolean]
        $voiceDialingBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsDefenderAdvancedThreatProtectionConfiguration,

        [Parameter()]
        [System.Boolean]
        $iBooksStoreBlocked,

        [Parameter()]
        [System.Boolean]
        $cellularBlockPersonalHotspot,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10EndpointProtectionConfiguration,

        [Parameter()]
        [System.Boolean]
        $wiFiBlockManualConfiguration,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockWindowsTips,

        [Parameter()]
        [System.String]
        $payloadFileName,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinutesOfInactivityBeforeScreenTimeout,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockCrossProfileCallerId,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowVoiceOverSettings,

        [Parameter()]
        [System.Boolean]
        $settingsBlockAppsPage,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockToastNotifications,

        [Parameter()]
        [System.Boolean]
        $disableEduPolicies,

        [Parameter()]
        [System.Boolean]
        $internetSharingBlocked,

        [Parameter()]
        [System.Boolean]
        $iBooksStoreBlockErotica,

        [Parameter()]
        [System.Int32]
        $passcodeMinimumLength,

        [Parameter()]
        [System.Boolean]
        $defenderScanRemovableDrivesDuringFullScan,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlocked,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlockModification,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinSymbolCharacters,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10SecureAssessmentConfiguration,

        [Parameter()]
        [System.Boolean]
        $wirelessDisplayRequirePinForPairing,

        [Parameter()]
        [System.Boolean]
        $edgeBlockCompatibilityList,

        [Parameter()]
        [System.Boolean]
        $gamingBlockMultiplayer,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockControlCenter,

        [Parameter()]
        [System.Boolean]
        $sharedUserAppDataAllowed,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsUpdateForBusinessConfiguration,

        [Parameter()]
        [System.Boolean]
        $webBrowserBlockAutofill,

        [Parameter()]
        [System.Boolean]
        $defenderScanScriptsLoadedInInternetExplorer,

        [Parameter()]
        [System.Boolean]
        $settingsBlockAddProvisioningPackage,

        [Parameter()]
        [System.Boolean]
        $searchEnableAutomaticIndexSizeManangement,

        [Parameter()]
        [System.Boolean]
        $tenantLockdownRequireNetworkDuringOutOfBoxExperience,

        [Parameter()]
        [System.Boolean]
        $microsoftUpdateServiceAllowed,

        [Parameter()]
        [System.Object]
        $mediaContentRatingGermany,

        [Parameter()]
        [System.String]
        $kioskAppUserModelId,

        [Parameter()]
        [System.Boolean]
        $defenderScanIncomingMail,

        [Parameter()]
        [System.Boolean]
        $windowsStoreBlockAutoUpdate,

        [Parameter()]
        [System.Boolean]
        $settingsBlockChangePowerSleep,

        [Parameter()]
        [System.String[]]
        $defenderFilesAndFoldersToExclude,

        [Parameter()]
        [System.Boolean]
        $wifiBlocked,

        [Parameter()]
        [System.Object[]]
        $userStatuses,

        [Parameter()]
        [System.Boolean]
        $deviceBlockEnableRestrictions,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Boolean]
        $allowTextSuggestion,

        [Parameter()]
        [System.Boolean]
        $featureUpdatesPaused,

        [Parameter()]
        [System.Boolean]
        $defenderRequireBehaviorMonitoring,

        [Parameter()]
        [System.String]
        $allowedAccounts,

        [Parameter()]
        [System.Boolean]
        $settingsBlockSessionResume,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockTodayView,

        [Parameter()]
        [System.Boolean]
        $connectAppBlockAutoLaunch,

        [Parameter()]
        [System.Boolean]
        $startMenuHideSwitchAccount,

        [Parameter()]
        [System.Boolean]
        $documentsBlockUnmanagedDocumentsInManagedApps,

        [Parameter()]
        [System.Boolean]
        $workProfileBluetoothEnableContactSharing,

        [Parameter()]
        [System.Object[]]
        $omaSettings,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowAssistiveSpeak,

        [Parameter()]
        [System.Boolean]
        $antiTheftModeBlocked,

        [Parameter()]
        [System.Boolean]
        $safariBlockPopups,

        [Parameter()]
        [System.Boolean]
        $edgeSendIntranetTrafficToInternetExplorer,

        [Parameter()]
        [System.Boolean]
        $logonBlockFastUserSwitching,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockDictation,

        [Parameter()]
        [System.Boolean]
        $airPlayForcePairingPasswordForOutgoingRequests,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowVolumeButtons,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows81GeneralConfiguration,

        [Parameter()]
        [System.Boolean]
        $iTunesBlockRadio,

        [Parameter()]
        [System.Boolean]
        $defenderRequireRealTimeMonitoring,

        [Parameter()]
        [System.Boolean]
        $certificatesBlockManualRootCertificateInstallation,

        [Parameter()]
        [System.Boolean]
        $allowSampleSharing,

        [Parameter()]
        [System.Boolean]
        $welcomeScreenBlockAutomaticWakeUp,

        [Parameter()]
        [System.Boolean]
        $privacyBlockInputPersonalization,

        [Parameter()]
        [System.String]
        $welcomeScreenMeetingInformation,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderDocuments,

        [Parameter()]
        [System.String]
        $firewallCertificateRevocationListCheckMethod,

        [Parameter()]
        [System.String]
        $workFoldersUrl,

        [Parameter()]
        [System.Boolean]
        $deviceManagementBlockManualUnenroll,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlockPrePairing,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSGeneralDeviceConfiguration,

        [Parameter()]
        [System.Boolean]
        $storageRequireRemovableStorageEncryption,

        [Parameter()]
        [System.String]
        $defenderScanType,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowZoomSettings,

        [Parameter()]
        [System.Boolean]
        $findMyFriendsBlocked,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinNumericCharacters,

        [Parameter()]
        [System.String]
        $kioskModeManagedAppId,

        [Parameter()]
        [System.Boolean]
        $safariBlocked,

        [Parameter()]
        [System.Boolean]
        $edgeAllowStartPagesModification,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $editionUpgradeConfiguration,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockScreenCapture,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderFileExplorer,

        [Parameter()]
        [System.String[]]
        $safariPasswordAutoFillDomains,

        [Parameter()]
        [System.Boolean]
        $edgeBlockExtensions,

        [Parameter()]
        [System.Boolean]
        $windowsStoreBlocked,

        [Parameter()]
        [System.Boolean]
        $settingsBlockSystemPage,

        [Parameter()]
        [System.String]
        $personalizationLockScreenImageUrl,

        [Parameter()]
        [System.Boolean]
        $diagnosticDataBlockSubmission,

        [Parameter()]
        [System.Boolean]
        $searchDisableAutoLanguageDetection,

        [Parameter()]
        [System.Boolean]
        $defenderBlockEndUserAccess,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinimumLength,

        [Parameter()]
        [System.Boolean]
        $edgeBlockSearchSuggestions,

        [Parameter()]
        [System.Boolean]
        $siriBlockedWhenLocked,

        [Parameter()]
        [System.Boolean]
        $bitLockerEnableStorageCardEncryptionOnMobile,

        [Parameter()]
        [System.String]
        $lockScreenFootnote,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10CustomConfiguration,

        [Parameter()]
        [System.Boolean]
        $wirelessDisplayBlockUserInputFromReceiver,

        [Parameter()]
        [System.Boolean]
        $edgeClearBrowsingDataOnExit,

        [Parameter()]
        [System.Int32]
        $settingsScreenTimeoutInMinutes,

        [Parameter()]
        [System.String]
        $personalizationDesktopImageUrl,

        [Parameter()]
        [System.Int32]
        $defenderSignatureUpdateIntervalInHours,

        [Parameter()]
        [System.Boolean]
        $experienceBlockTaskSwitcher,

        [Parameter()]
        [System.Boolean]
        $passwordBlockSimple,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowScreenRotation,

        [Parameter()]
        [System.Object]
        $bitLockerRemovableDrivePolicy,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireColorInversion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidGeneralDeviceConfiguration,

        [Parameter()]
        [System.String]
        $azureOperationalInsightsWorkspaceKey,

        [Parameter()]
        [System.Boolean]
        $iTunesBlockMusicService,

        [Parameter()]
        [System.Int32]
        $utcTimeOffsetInMinutes,

        [Parameter()]
        [System.Object]
        $defenderDetectedMalwareActions,

        [Parameter()]
        [System.Boolean]
        $defenderSecurityCenterBlockExploitProtectionOverride,

        [Parameter()]
        [System.Boolean]
        $edgeBlocked,

        [Parameter()]
        [System.TimeSpan]
        $maintenanceStartTime,

        [Parameter()]
        [System.Boolean]
        $edgeBlockPopups,

        [Parameter()]
        [System.Boolean]
        $defenderScanMappedNetworkDrivesDuringFullScan,

        [Parameter()]
        [System.Boolean]
        $passwordBlockTrustAgents,

        [Parameter()]
        [System.Object]
        $mediaContentRatingNewZealand,

        [Parameter()]
        [System.Boolean]
        $nfcBlocked,

        [Parameter()]
        [System.Boolean]
        $deviceManagementBlockFactoryResetOnMobile,

        [Parameter()]
        [System.String]
        $configurationAccount,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordPreviousPasswordBlockCount,

        [Parameter()]
        [System.Boolean]
        $workProfilePasswordBlockFingerprintUnlock,

        [Parameter()]
        [System.Int32]
        $passcodeExpirationDays,

        [Parameter()]
        [System.Boolean]
        $diagnosticDataBlockSubmissionModification,

        [Parameter()]
        [System.Boolean]
        $gamingBlockGameCenterFriends,

        [Parameter()]
        [System.Boolean]
        $defenderRequireNetworkInspectionSystem,

        [Parameter()]
        [System.Boolean]
        $cellularBlockDataWhenRoaming,

        [Parameter()]
        [System.Boolean]
        $copyPasteBlocked,

        [Parameter()]
        [System.Boolean]
        $enterpriseAppBlockTrustModification,

        [Parameter()]
        [System.Boolean]
        $storageRestrictAppInstallToSystemVolume,

        [Parameter()]
        [System.String]
        $launchUri,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowSleepButton,

        [Parameter()]
        [System.Byte[]]
        $defenderExploitProtectionXml,

        [Parameter()]
        [System.Boolean]
        $wallpaperBlockModification,

        [Parameter()]
        [System.Int32]
        $passcodeMinutesOfInactivityBeforeScreenTimeout,

        [Parameter()]
        [System.Boolean]
        $iTunesBlockExplicitContent,

        [Parameter()]
        [System.Boolean]
        $voiceRecordingBlocked,

        [Parameter()]
        [System.Object[]]
        $kioskModeApps,

        [Parameter()]
        [System.Boolean]
        $browserBlockPlugins,

        [Parameter()]
        [System.Boolean]
        $passcodeBlockFingerprintModification,

        [Parameter()]
        [System.Boolean]
        $applicationGuardForceAuditing,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSDeviceFeaturesConfiguration,

        [Parameter()]
        [System.Boolean]
        $browserRequireFirewall,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderDownloads,

        [Parameter()]
        [System.Boolean]
        $securityRequireVerifyApps,

        [Parameter()]
        [System.Boolean]
        $enabled,

        [Parameter()]
        [System.Boolean]
        $startMenuHideHibernate,

        [Parameter()]
        [System.Boolean]
        $startMenuHideRestartOptions,

        [Parameter()]
        [System.Boolean]
        $allowLocalStorage,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockAutoCorrect,

        [Parameter()]
        [System.Boolean]
        $applicationGuardEnabled,

        [Parameter()]
        [System.Boolean]
        $firewallMergeKeyingModuleSettings,

        [Parameter()]
        [System.Boolean]
        $browserBlockSendingDoNotTrackHeader,

        [Parameter()]
        [System.Boolean]
        $settingsBlockGamingPage,

        [Parameter()]
        [System.Boolean]
        $screenCaptureBlocked,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderSettings,

        [Parameter()]
        [System.Boolean]
        $siriBlocked,

        [Parameter()]
        [System.String]
        $appLockerApplicationControl,

        [Parameter()]
        [System.Boolean]
        $kioskModeBlockVolumeButtons,

        [Parameter()]
        [System.Boolean]
        $settingsBlockPrivacyPage,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockSpellCheck,

        [Parameter()]
        [System.Boolean]
        $passcodeRequired,

        [Parameter()]
        [System.Boolean]
        $cameraBlocked,

        [Parameter()]
        [System.String]
        $businessReadyUpdatesOnly,

        [Parameter()]
        [System.Boolean]
        $webBrowserBlocked,

        [Parameter()]
        [System.Int32]
        $idleTimeBeforeSleepInSeconds,

        [Parameter()]
        [System.String]
        $applicationGuardBlockClipboardSharing,

        [Parameter()]
        [System.Int32]
        $featureUpdatesDeferralPeriodInDays,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Boolean]
        $startBlockUnpinningAppsFromTaskbar,

        [Parameter()]
        [System.String]
        $azureOperationalInsightsWorkspaceId,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderNetwork,

        [Parameter()]
        [System.Boolean]
        $lockScreenAllowTimeoutConfiguration,

        [Parameter()]
        [System.String[]]
        $edgeHomepageUrls,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowAssistiveTouchSettings,

        [Parameter()]
        [System.String]
        $startMenuAppListVisibility,

        [Parameter()]
        [System.Boolean]
        $cellularBlockPerAppDataModification,

        [Parameter()]
        [System.Boolean]
        $browserBlockAutofill,

        [Parameter()]
        [System.Boolean]
        $edgeBlockSendingIntranetTrafficToInternetExplorer,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordExpirationDays,

        [Parameter()]
        [System.Boolean]
        $startMenuHidePowerButton,

        [Parameter()]
        [System.Boolean]
        $settingsBlockEditDeviceName,

        [Parameter()]
        [System.Boolean]
        $startMenuHideSignOut,

        [Parameter()]
        [System.Boolean]
        $privacyAutoAcceptPairingAndConsentPrompts,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockCortana,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10GeneralConfiguration,

        [Parameter()]
        [System.Boolean]
        $settingsBlockEaseOfAccessPage,

        [Parameter()]
        [System.Boolean]
        $driversExcluded,

        [Parameter()]
        [System.Int32]
        $qualityUpdatesDeferralPeriodInDays,

        [Parameter()]
        [System.Boolean]
        $settingsBlockDevicesPage,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockCamera,

        [Parameter()]
        [System.Object]
        $firewallProfileDomain,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockBackup,

        [Parameter()]
        [System.String]
        $passcodeRequiredType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10EnterpriseModernAppManagementConfiguration,

        [Parameter()]
        [System.Boolean]
        $accountBlockModification,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $sharedPCConfiguration,

        [Parameter()]
        [System.Boolean]
        $edgeDisableFirstRunPage,

        [Parameter()]
        [System.Object[]]
        $homeScreenDockIcons,

        [Parameter()]
        [System.Boolean]
        $notificationsBlockSettingsModification,

        [Parameter()]
        [System.Boolean]
        $firewallIPSecExemptionsAllowICMP,

        [Parameter()]
        [System.Int32]
        $passcodeMinimumCharacterSetCount,

        [Parameter()]
        [System.Object]
        $firewallProfilePrivate,

        [Parameter()]
        [System.String[]]
        $emailInDomainSuffixes,

        [Parameter()]
        [System.Boolean]
        $appleWatchBlockPairing,

        [Parameter()]
        [System.String]
        $diagnosticsDataSubmissionMode,

        [Parameter()]
        [System.Boolean]
        $smartScreenEnableAppInstallControl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsPhone81CustomConfiguration,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintResourceIdentifier,

        [Parameter()]
        [System.String[]]
        $scheduledInstallDays,

        [Parameter()]
        [System.String]
        $edgeCookiePolicy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosCustomConfiguration,

        [Parameter()]
        [System.TimeSpan]
        $defenderScheduledQuickScanTime,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireVoiceOver,

        [Parameter()]
        [System.Boolean]
        $appsBlockWindowsStoreOriginatedApps,

        [Parameter()]
        [System.Int32]
        $passwordMinimumCharacterSetCount,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockAddingAccounts,

        [Parameter()]
        [System.Boolean]
        $passcodeBlockFingerprintUnlock,

        [Parameter()]
        [System.Boolean]
        $defenderRequireCloudProtection,

        [Parameter()]
        [System.Boolean]
        $azureOperationalInsightsBlockTelemetry,

        [Parameter()]
        [System.String[]]
        $defenderAdditionalGuardedFolders,

        [Parameter()]
        [System.String]
        $defenderPromptForSampleSubmission,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockManagedAppsSync,

        [Parameter()]
        [System.String]
        $targetEdition,

        [Parameter()]
        [System.Boolean]
        $configurationProfileBlockChanges,

        [Parameter()]
        [System.Boolean]
        $faceTimeBlocked,

        [Parameter()]
        [System.Boolean]
        $smartScreenBlockOverrideForFiles,

        [Parameter()]
        [System.Object[]]
        $notificationSettings,

        [Parameter()]
        [System.Boolean]
        $startMenuHideUserTile,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockNotificationsWhileDeviceLocked,

        [Parameter()]
        [System.String[]]
        $defenderAttackSurfaceReductionExcludedPaths,

        [Parameter()]
        [System.Int32]
        $defenderDaysBeforeDeletingQuarantinedMalware,

        [Parameter()]
        [System.Boolean]
        $wifiBlockAutomaticConnectHotspots,

        [Parameter()]
        [System.Object]
        $accountManagerPolicy,

        [Parameter()]
        [System.TimeSpan]
        $maintenanceWindowStartTime,

        [Parameter()]
        [System.String]
        $defenderSystemScanSchedule,

        [Parameter()]
        [System.Boolean]
        $browserBlockAutomaticDetectionOfIntranetSites,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPrintToXPS,

        [Parameter()]
        [System.Boolean]
        $appsBlockClipboardSharing,

        [Parameter()]
        [System.String[]]
        $safariManagedDomains,

        [Parameter()]
        [System.Boolean]
        $storageBlockRemovableStorage,

        [Parameter()]
        [System.Boolean]
        $siriBlockUserGeneratedContent,

        [Parameter()]
        [System.Boolean]
        $cellularBlockWifiTethering,

        [Parameter()]
        [System.Boolean]
        $startMenuHideLock,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSCustomConfiguration,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintOAuthAuthority,

        [Parameter()]
        [System.String]
        $edgeEnterpriseModeSiteListLocation,

        [Parameter()]
        [System.String]
        $kioskModeBuiltInAppId,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinLowerCaseCharacters,

        [Parameter()]
        [System.Boolean]
        $podcastsBlocked,

        [Parameter()]
        [System.Object[]]
        $deviceSettingStateSummaries,

        [Parameter()]
        [System.Boolean]
        $storageBlockGoogleBackup,

        [Parameter()]
        [System.Boolean]
        $settingsBlockMyMeetingsAndFiles,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockActivityContinuation,

        [Parameter()]
        [System.Boolean]
        $firewallIPSecExemptionsAllowNeighborDiscovery,

        [Parameter()]
        [System.String]
        $workProfileDefaultAppPermissionPolicy,

        [Parameter()]
        [System.Object]
        $userStatusOverview,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockDocumentSync,

        [Parameter()]
        [System.Boolean]
        $safariBlockJavaScript,

        [Parameter()]
        [System.TimeSpan]
        $defenderScheduledScanTime,

        [Parameter()]
        [System.Boolean]
        $gameDvrBlocked,

        [Parameter()]
        [System.Boolean]
        $voiceAssistantBlocked,

        [Parameter()]
        [System.Boolean]
        $searchDisableIndexerBackoff,

        [Parameter()]
        [System.Object[]]
        $compliantAppsList,

        [Parameter()]
        [System.Boolean]
        $googleAccountBlockAutoSync,

        [Parameter()]
        [System.Boolean]
        $passwordBlockPicturePasswordAndPin,

        [Parameter()]
        [System.Boolean]
        $settingsBlockPersonalizationPage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosDeviceFeaturesConfiguration,

        [Parameter()]
        [System.Boolean]
        $usbBlocked,

        [Parameter()]
        [System.Boolean]
        $firewallBlockStatefulFTP,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockTailoredExperiences,

        [Parameter()]
        [System.String[]]
        $defenderFileExtensionsToExclude,

        [Parameter()]
        [System.Boolean]
        $searchDisableIndexingEncryptedItems,

        [Parameter()]
        [System.TimeSpan]
        $activeHoursStart,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinLetterCharacters,

        [Parameter()]
        [System.Boolean]
        $webRtcBlockLocalhostIpAddress,

        [Parameter()]
        [System.Boolean]
        $browserRequireSmartScreen,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowColorInversionSettings,

        [Parameter()]
        [System.Boolean]
        $passcodeBlockSimple,

        [Parameter()]
        [System.Object]
        $mediaContentRatingFrance,

        [Parameter()]
        [System.Boolean]
        $emailBlockAddingAccounts,

        [Parameter()]
        [System.String]
        $applicationGuardBlockFileTransfer,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintDiscoveryEndPoint,

        [Parameter()]
        [System.Boolean]
        $allowPrinting,

        [Parameter()]
        [System.Boolean]
        $settingsBlockChangeRegion,

        [Parameter()]
        [System.Boolean]
        $edgeSyncFavoritesWithInternetExplorer,

        [Parameter()]
        [System.Boolean]
        $settingsBlockAccountsPage,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPrintToNetworkPrinters,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireAssistiveTouch,

        [Parameter()]
        [System.Boolean]
        $cellularBlockGlobalBackgroundFetchWhileRoaming,

        [Parameter()]
        [System.Boolean]
        $storageRequireEncryption,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderVideos,

        [Parameter()]
        [System.String]
        $browserTrustedSitesSecurityLevel,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.Boolean]
        $microsoftAccountBlocked,

        [Parameter()]
        [System.Boolean]
        $edgeBlockPasswordManager,

        [Parameter()]
        [System.String]
        $payloadName,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlocked,

        [Parameter()]
        [System.String]
        $workProfileDataSharingType,

        [Parameter()]
        [System.Boolean]
        $experienceBlockDeviceDiscovery,

        [Parameter()]
        [System.String]
        $browserEnterpriseModeSiteListLocation,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderHomeGroup,

        [Parameter()]
        [System.Object]
        $mediaContentRatingAustralia,

        [Parameter()]
        [System.Object]
        $installationSchedule,

        [Parameter()]
        [System.Boolean]
        $enableExpeditedTelemetryReporting,

        [Parameter()]
        [System.String]
        $browserInternetSecurityLevel,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderPersonalFolder,

        [Parameter()]
        [System.String]
        $compliantAppListType,

        [Parameter()]
        [System.Boolean]
        $smartScreenBlockPromptOverride,

        [Parameter()]
        [System.Boolean]
        $cellularBlockVpnWhenRoaming,

        [Parameter()]
        [System.Boolean]
        $startMenuHideShutDown,

        [Parameter()]
        [System.Boolean]
        $appsBlockCopyPaste,

        [Parameter()]
        [System.Int32]
        $passwordPreviousPasswordBlockCount,

        [Parameter()]
        [System.Boolean]
        $airDropForceUnmanagedDropTarget,

        [Parameter()]
        [System.Int32]
        $passcodeSignInFailureCountBeforeWipe,

        [Parameter()]
        [System.String[]]
        $bluetoothAllowedServices,

        [Parameter()]
        [System.Object[]]
        $appsInstallAllowList,

        [Parameter()]
        [System.Object]
        $deviceStatusOverview,

        [Parameter()]
        [System.Boolean]
        $browserRequireFraudWarning,

        [Parameter()]
        [System.Boolean]
        $defenderScanArchiveFiles,

        [Parameter()]
        [System.Boolean]
        $browserBlockPopups,

        [Parameter()]
        [System.Boolean]
        $startMenuHideSleep,

        [Parameter()]
        [System.String]
        $firewallPacketQueueingMethod,

        [Parameter()]
        [System.Boolean]
        $appStoreBlocked,

        [Parameter()]
        [System.Boolean]
        $siriRequireProfanityFilter,

        [Parameter()]
        [System.Object]
        $networkProxyServer,

        [Parameter()]
        [System.Object[]]
        $appsVisibilityList,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockActionCenterNotifications,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireZoom,

        [Parameter()]
        [System.String]
        $webBrowserCookieSettings,

        [Parameter()]
        [System.Boolean]
        $browserBlockEnterpriseModeAccess,

        [Parameter()]
        [System.Int32]
        $settingsSessionTimeoutInMinutes,

        [Parameter()]
        [System.String]
        $mediaContentRatingApps,

        [Parameter()]
        [System.Object]
        $mediaContentRatingUnitedKingdom,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidWorkProfileGeneralDeviceConfiguration,

        [Parameter()]
        [System.Boolean]
        $edgeRequireSmartScreen,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $maintenanceWindowBlocked,

        [Parameter()]
        [System.Boolean]
        $gameCenterBlocked,

        [Parameter()]
        [System.Int32]
        $lockScreenTimeoutInSeconds,

        [Parameter()]
        [System.Boolean]
        $cortanaBlocked,

        [Parameter()]
        [System.Boolean]
        $defenderScanDownloads,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPrintToPDF,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderMusic,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinUpperCaseCharacters,

        [Parameter()]
        [System.String]
        $workProfilePasswordRequiredType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosGeneralDeviceConfiguration,

        [Parameter()]
        [System.Boolean]
        $webBrowserBlockJavaScript,

        [Parameter()]
        [System.Object]
        $mediaContentRatingCanada,

        [Parameter()]
        [System.Int32]
        $passcodePreviousPasscodeBlockCount,

        [Parameter()]
        [System.Boolean]
        $classroomAppBlockRemoteScreenObservation,

        [Parameter()]
        [System.Boolean]
        $deviceBlockNameModification,

        [Parameter()]
        [System.String]
        $browserIntranetSecurityLevel,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlockDiscoverableMode,

        [Parameter()]
        [System.String]
        $startMenuMode,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $automaticUpdateMode,

        [Parameter()]
        [System.Boolean]
        $enterpriseAppBlockTrust,

        [Parameter()]
        [System.Boolean]
        $workProfilePasswordBlockTrustAgents,

        [Parameter()]
        [System.Boolean]
        $diagnosticsBlockDataSubmission,

        [Parameter()]
        [System.Boolean]
        $cellularBlockMessaging,

        [Parameter()]
        [System.Boolean]
        $disableAccountManager,

        [Parameter()]
        [System.Boolean]
        $appStoreBlockAutomaticDownloads
    )
}
function New-IntuneDeviceConfigurationPolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $target
    )
}
function New-IntuneDeviceConfigurationPolicyDeviceSettingStateSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.String]
        $settingName,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.String]
        $instancePath,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function New-IntuneDeviceConfigurationPolicyDeviceStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $deviceModel,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.String]
        $deviceDisplayName,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime
    )
}
function New-IntuneDeviceConfigurationPolicyDeviceStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.Int32]
        $failedCount,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime
    )
}
function New-IntuneDeviceConfigurationPolicyUserStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $devicesCount,

        [Parameter()]
        [System.String]
        $status
    )
}
function New-IntuneDeviceConfigurationPolicyUserStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.Int32]
        $failedCount,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime
    )
}
function New-IntuneDeviceEnrollmentConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Boolean]
        $unlockWithBiometricsEnabled,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object]
        $windowsRestriction,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceEnrollmentPlatformRestrictionsConfiguration,

        [Parameter()]
        [System.Boolean]
        $remotePassportEnabled,

        [Parameter()]
        [System.Boolean]
        $securityDeviceRequired,

        [Parameter()]
        [System.Int32]
        $pinPreviousBlockCount,

        [Parameter()]
        [System.Int32]
        $priority,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceEnrollmentLimitConfiguration,

        [Parameter()]
        [System.Object]
        $androidRestriction,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.Object]
        $windowsMobileRestriction,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.Object]
        $macOSRestriction,

        [Parameter()]
        [System.Int32]
        $pinExpirationInDays,

        [Parameter()]
        [System.Int32]
        $pinMaximumLength,

        [Parameter()]
        [System.String]
        $pinLowercaseCharactersUsage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceEnrollmentWindowsHelloForBusinessConfiguration,

        [Parameter()]
        [System.Int32]
        $pinMinimumLength,

        [Parameter()]
        [System.String]
        $pinSpecialCharactersUsage,

        [Parameter()]
        [System.String]
        $pinUppercaseCharactersUsage,

        [Parameter()]
        [System.Int32]
        $limit,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $iosRestriction,

        [Parameter()]
        [System.String]
        $enhancedBiometricsState
    )
}
function New-IntuneDeviceEnrollmentConfigurationAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $deviceEnrollmentConfigurationId
    )
}
function New-IntuneDeviceManagement
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $deviceCategories,

        [Parameter()]
        [System.Object]
        $applePushNotificationCertificate,

        [Parameter()]
        [System.Object[]]
        $deviceManagementPartners,

        [Parameter()]
        [System.Object[]]
        $termsAndConditions,

        [Parameter()]
        [System.Object]
        $settings,

        [Parameter()]
        [System.Object[]]
        $windowsInformationProtectionNetworkLearningSummaries,

        [Parameter()]
        [System.String]
        $subscriptionState,

        [Parameter()]
        [System.Object]
        $deviceCompliancePolicyDeviceStateSummary,

        [Parameter()]
        [System.Object]
        $intuneBrand,

        [Parameter()]
        [System.Object[]]
        $troubleshootingEvents,

        [Parameter()]
        [System.Object]
        $deviceConfigurationDeviceStateSummaries,

        [Parameter()]
        [System.Object[]]
        $roleDefinitions,

        [Parameter()]
        [System.Object[]]
        $telecomExpenseManagementPartners,

        [Parameter()]
        [System.Object]
        $managedDeviceOverview,

        [Parameter()]
        [System.Object]
        $softwareUpdateStatusSummary,

        [Parameter()]
        [System.Object[]]
        $managedDevices,

        [Parameter()]
        [System.Object[]]
        $notificationMessageTemplates,

        [Parameter()]
        [System.Object[]]
        $roleAssignments,

        [Parameter()]
        [System.Object[]]
        $resourceOperations,

        [Parameter()]
        [System.Object[]]
        $deviceCompliancePolicies,

        [Parameter()]
        [System.Object[]]
        $windowsInformationProtectionAppLearningSummaries,

        [Parameter()]
        [System.Object[]]
        $remoteAssistancePartners,

        [Parameter()]
        [System.Object[]]
        $exchangeConnectors,

        [Parameter()]
        [System.Object[]]
        $iosUpdateStatuses,

        [Parameter()]
        [System.Object[]]
        $mobileThreatDefenseConnectors,

        [Parameter()]
        [System.Object]
        $conditionalAccessSettings,

        [Parameter()]
        [System.Object[]]
        $deviceConfigurations,

        [Parameter()]
        [System.Object[]]
        $detectedApps,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $deviceEnrollmentConfigurations,

        [Parameter()]
        [System.Object[]]
        $deviceCompliancePolicySettingStateSummaries
    )
}
function New-IntuneDeviceManagementPartner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $whenPartnerDevicesWillBeMarkedAsNonCompliantDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.DateTimeOffset]
        $whenPartnerDevicesWillBeRemovedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $partnerState,

        [Parameter()]
        [System.Boolean]
        $isConfigured,

        [Parameter()]
        [System.String]
        $singleTenantAppId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastHeartbeatDateTime,

        [Parameter()]
        [System.String]
        $partnerAppType
    )
}
function New-IntuneExchangeConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $exchangeAlias,

        [Parameter()]
        [System.String]
        $serverName,

        [Parameter()]
        [System.String]
        $exchangeConnectorType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $primarySmtpAddress,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $exchangeOrganization,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.String]
        $connectorServerName
    )
}
function New-IntuneIosUpdateStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $installStatus,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime,

        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.String]
        $deviceModel,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.String]
        $deviceDisplayName,

        [Parameter()]
        [System.String]
        $deviceId
    )
}
function New-IntuneLocalizedNotificationMessage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $notificationMessageTemplateId,

        [Parameter()]
        [System.String]
        $subject,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $locale,

        [Parameter()]
        [System.String]
        $messageTemplate,

        [Parameter()]
        [System.Boolean]
        $isDefault
    )
}
function New-IntuneManagedAppRegistration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $deviceTag,

        [Parameter()]
        [System.String]
        $managementSdkVersion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosManagedAppRegistration,

        [Parameter()]
        [System.Object[]]
        $intendedPolicies,

        [Parameter()]
        [System.String]
        $applicationVersion,

        [Parameter()]
        [System.Object[]]
        $appliedPolicies,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $platformVersion,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $deviceType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $operations,

        [Parameter()]
        [System.String[]]
        $flaggedReasons,

        [Parameter()]
        [System.Object]
        $appIdentifier,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidManagedAppRegistration
    )
}
function New-IntuneManagedAppStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $content,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedAppStatusRaw
    )
}
function New-IntuneManagedDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $deviceCompliancePolicyStates,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime,

        [Parameter()]
        [System.String]
        $deviceCategoryDisplayName,

        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.String]
        $managementAgent,

        [Parameter()]
        [System.String]
        $complianceState,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.Boolean]
        $isEncrypted,

        [Parameter()]
        [System.String]
        $model,

        [Parameter()]
        [System.Int64]
        $freeStorageSpaceInBytes,

        [Parameter()]
        [System.String]
        $partnerReportedThreatState,

        [Parameter()]
        [System.String]
        $emailAddress,

        [Parameter()]
        [System.DateTimeOffset]
        $enrolledDateTime,

        [Parameter()]
        [System.Int64]
        $totalStorageSpaceInBytes,

        [Parameter()]
        [System.String]
        $deviceRegistrationState,

        [Parameter()]
        [System.String]
        $activationLockBypassCode,

        [Parameter()]
        [System.String]
        $exchangeAccessState,

        [Parameter()]
        [System.String]
        $exchangeAccessStateReason,

        [Parameter()]
        [System.String]
        $operatingSystem,

        [Parameter()]
        [System.String]
        $meid,

        [Parameter()]
        [System.String]
        $serialNumber,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $deviceEnrollmentType,

        [Parameter()]
        [System.Object]
        $deviceCategory,

        [Parameter()]
        [System.Boolean]
        $easActivated,

        [Parameter()]
        [System.Object]
        $deviceHealthAttestationState,

        [Parameter()]
        [System.String]
        $easDeviceId,

        [Parameter()]
        [System.Boolean]
        $isSupervised,

        [Parameter()]
        [System.Object[]]
        $deviceConfigurationStates,

        [Parameter()]
        [System.String]
        $imei,

        [Parameter()]
        [System.String]
        $managedDeviceName,

        [Parameter()]
        [System.String]
        $androidSecurityPatchLevel,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $manufacturer,

        [Parameter()]
        [System.DateTimeOffset]
        $easActivationDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $exchangeLastSuccessfulSyncDateTime,

        [Parameter()]
        [System.String]
        $managedDeviceOwnerType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $azureADDeviceId,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.Boolean]
        $azureADRegistered,

        [Parameter()]
        [System.String]
        $phoneNumber,

        [Parameter()]
        [System.Object[]]
        $deviceActionResults,

        [Parameter()]
        [System.String]
        $remoteAssistanceSessionErrorDetails,

        [Parameter()]
        [System.Object]
        $configurationManagerClientEnabledFeatures,

        [Parameter()]
        [System.String]
        $subscriberCarrier,

        [Parameter()]
        [System.String]
        $remoteAssistanceSessionUrl,

        [Parameter()]
        [System.String]
        $wiFiMacAddress,

        [Parameter()]
        [System.String]
        $jailBroken
    )
}
function New-IntuneManagedDeviceDeviceCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-IntuneManagedDeviceDeviceCompliancePolicyState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $settingStates,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String]
        $platformType,

        [Parameter()]
        [System.Int32]
        $settingCount,

        [Parameter()]
        [System.String]
        $state
    )
}
function New-IntuneManagedDeviceDeviceConfigurationState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $settingStates,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String]
        $platformType,

        [Parameter()]
        [System.Int32]
        $settingCount,

        [Parameter()]
        [System.String]
        $state
    )
}
function New-IntuneManagedDeviceOverviewReference
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceOverviewReferenceUrl
    )
}
function New-IntuneManagedEBook
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.DateTimeOffset]
        $publishedDateTime,

        [Parameter()]
        [System.Int32]
        $totalLicenseCount,

        [Parameter()]
        [System.Guid]
        $vppTokenId,

        [Parameter()]
        [System.String]
        $seller,

        [Parameter()]
        [System.String]
        $vppOrganizationName,

        [Parameter()]
        [System.Object[]]
        $deviceStates,

        [Parameter()]
        [System.Object]
        $largeCover,

        [Parameter()]
        [System.String[]]
        $genres,

        [Parameter()]
        [System.Object]
        $installSummary,

        [Parameter()]
        [System.Int32]
        $usedLicenseCount,

        [Parameter()]
        [System.String]
        $privacyInformationUrl,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $appleId,

        [Parameter()]
        [System.Object[]]
        $userStateSummary,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosVppEBook,

        [Parameter()]
        [System.String]
        $language,

        [Parameter()]
        [System.String]
        $publisher,

        [Parameter()]
        [System.String]
        $informationUrl
    )
}
function New-IntuneManagedEBookAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $installIntent,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosVppEBookAssignment,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedEBookAssignment,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function New-IntuneManagedEBookDeviceState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $errorCode,

        [Parameter()]
        [System.String]
        $installState,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $osDescription,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.String]
        $deviceId,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function New-IntuneManagedEBookInstallSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notInstalledDeviceCount,

        [Parameter()]
        [System.Int32]
        $failedUserCount,

        [Parameter()]
        [System.Int32]
        $installedUserCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $failedDeviceCount,

        [Parameter()]
        [System.Int32]
        $installedDeviceCount,

        [Parameter()]
        [System.Int32]
        $notInstalledUserCount,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function New-IntuneManagedEBookUserStateSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notInstalledDeviceCount,

        [Parameter()]
        [System.Int32]
        $failedDeviceCount,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $deviceStates,

        [Parameter()]
        [System.Int32]
        $installedDeviceCount,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function New-IntuneManagedEBookUserStateSummaryDeviceState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $errorCode,

        [Parameter()]
        [System.String]
        $userInstallStateSummaryId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $managedEBookId,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $osDescription,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.String]
        $deviceId,

        [Parameter()]
        [System.String]
        $installState
    )
}
function New-IntuneMdmWindowsInformationProtectionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxiedDomains,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $enterpriseProxyServersAreAuthoritative,

        [Parameter()]
        [System.Object[]]
        $smbAutoEncryptedFileExtensions,

        [Parameter()]
        [System.Boolean]
        $protectionUnderLockConfigRequired,

        [Parameter()]
        [System.String]
        $enforcementLevel,

        [Parameter()]
        [System.String]
        $enterpriseDomain,

        [Parameter()]
        [System.Object[]]
        $enterpriseInternalProxyServers,

        [Parameter()]
        [System.Boolean]
        $indexingEncryptedStoresOrItemsBlocked,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Boolean]
        $revokeOnUnenrollDisabled,

        [Parameter()]
        [System.Guid]
        $rightsManagementServicesTemplateId,

        [Parameter()]
        [System.Object[]]
        $exemptAppLockerFiles,

        [Parameter()]
        [System.Object]
        $dataRecoveryCertificate,

        [Parameter()]
        [System.Object[]]
        $exemptApps,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Object[]]
        $neutralDomainResources,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxyServers,

        [Parameter()]
        [System.Boolean]
        $azureRightsManagementServicesAllowed,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Boolean]
        $enterpriseIPRangesAreAuthoritative,

        [Parameter()]
        [System.Boolean]
        $iconsVisible,

        [Parameter()]
        [System.Object[]]
        $enterpriseProtectedDomainNames,

        [Parameter()]
        [System.Object[]]
        $protectedAppLockerFiles,

        [Parameter()]
        [System.Object[]]
        $protectedApps,

        [Parameter()]
        [System.Object[]]
        $enterpriseIPRanges,

        [Parameter()]
        [System.Object[]]
        $enterpriseNetworkDomainNames
    )
}
function New-IntuneMdmWindowsInformationProtectionPolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-IntuneMdmWindowsInformationProtectionPolicyExemptAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $fileHash
    )
}
function New-IntuneMdmWindowsInformationProtectionPolicyProtectedAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $fileHash
    )
}
function New-IntuneMobileApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $useManagedBrowser,

        [Parameter()]
        [System.String]
        $versionNumber,

        [Parameter()]
        [System.String]
        $identityPublisherHash,

        [Parameter()]
        [System.String]
        $identityVersion,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosStoreApp,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsUniversalAppX,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosVppApp,

        [Parameter()]
        [System.Int32]
        $totalLicenseCount,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedAndroidStoreApp,

        [Parameter()]
        [System.String]
        $versionName,

        [Parameter()]
        [System.String]
        $appUrl,

        [Parameter()]
        [System.Boolean]
        $isBundle,

        [Parameter()]
        [System.DateTimeOffset]
        $expirationDateTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSOfficeSuiteApp,

        [Parameter()]
        [System.Int64]
        $size,

        [Parameter()]
        [System.String]
        $productKey,

        [Parameter()]
        [System.Object]
        $minimumSupportedOperatingSystem,

        [Parameter()]
        [System.Object]
        $largeIcon,

        [Parameter()]
        [System.Int32]
        $usedLicenseCount,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedAndroidLobApp,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $isFeatured,

        [Parameter()]
        [System.String]
        $fileName,

        [Parameter()]
        [System.String]
        $vppTokenAppleId,

        [Parameter()]
        [System.String]
        $owner,

        [Parameter()]
        [System.String]
        $committedContentVersion,

        [Parameter()]
        [System.Object[]]
        $categories,

        [Parameter()]
        [System.String]
        $informationUrl,

        [Parameter()]
        [System.String]
        $applicableArchitectures,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidLobApp,

        [Parameter()]
        [System.String]
        $notes,

        [Parameter()]
        [System.Boolean]
        $ignoreVersionDetection,

        [Parameter()]
        [System.String]
        $versionCode,

        [Parameter()]
        [System.String]
        $bundleId,

        [Parameter()]
        [System.String]
        $packageId,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $commandLine,

        [Parameter()]
        [System.String]
        $applicableDeviceTypes,

        [Parameter()]
        [System.String]
        $productVersion,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Object[]]
        $contentVersions,

        [Parameter()]
        [System.DateTimeOffset]
        $releaseDateTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidStoreApp,

        [Parameter()]
        [System.Object]
        $licensingType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $microsoftStoreForBusinessApp,

        [Parameter()]
        [System.String]
        $publishingState,

        [Parameter()]
        [System.String]
        $packageIdentityName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedIOSLobApp,

        [Parameter()]
        [System.String]
        $identityResourceIdentifier,

        [Parameter()]
        [System.String]
        $appStoreUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosLobApp,

        [Parameter()]
        [System.String]
        $buildNumber,

        [Parameter()]
        [System.Object]
        $applicableDeviceType,

        [Parameter()]
        [System.String]
        $privacyInformationUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedIOSStoreApp,

        [Parameter()]
        [System.String]
        $licenseType,

        [Parameter()]
        [System.String]
        $appAvailability,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $publisher,

        [Parameter()]
        [System.String]
        $productCode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $webApp,

        [Parameter()]
        [System.String]
        $vppTokenOrganizationName,

        [Parameter()]
        [System.String]
        $identityName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsMobileMSI,

        [Parameter()]
        [System.String]
        $developer,

        [Parameter()]
        [System.String]
        $vppTokenAccountType
    )
}
function New-IntuneMobileAppAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String]
        $intent,

        [Parameter()]
        [System.Object]
        $settings
    )
}
function New-IntuneMobileAppCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-IntuneMobileAppCategorySetReferenceSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String]
        $mobileAppCategoryReferenceUrl
    )
}
function New-IntuneMobileAppConfigurationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Object[]]
        $deviceStatuses,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $userStatuses,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $deviceStatusSummary,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosMobileAppConfiguration,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Object[]]
        $settings,

        [Parameter()]
        [System.Byte[]]
        $encodedSettingXml,

        [Parameter()]
        [System.String[]]
        $targetedMobileApps,

        [Parameter()]
        [System.Object]
        $userStatusSummary
    )
}
function New-IntuneMobileAppConfigurationPolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.Object]
        $target
    )
}
function New-IntuneMobileAppConfigurationPolicyDeviceStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.String]
        $deviceDisplayName,

        [Parameter()]
        [System.String]
        $deviceModel
    )
}
function New-IntuneMobileAppConfigurationPolicyDeviceStatusSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime,

        [Parameter()]
        [System.Int32]
        $failedCount
    )
}
function New-IntuneMobileAppConfigurationPolicyUserStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $devicesCount,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.String]
        $status
    )
}
function New-IntuneMobileAppConfigurationPolicyUserStatusSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime,

        [Parameter()]
        [System.Int32]
        $failedCount
    )
}
function New-IntuneMobileAppContentVersion
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String]
        $mobileAppODataType,

        [Parameter()]
        [System.Object[]]
        $files,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-IntuneMobileAppContentVersionFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppODataType,

        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Boolean]
        $isCommitted,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $azureStorageUriExpirationDateTime,

        [Parameter()]
        [System.Int64]
        $sizeEncrypted,

        [Parameter()]
        [System.Int64]
        $size,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.Byte[]]
        $manifest,

        [Parameter()]
        [System.String]
        $mobileAppContentId,

        [Parameter()]
        [System.String]
        $uploadState,

        [Parameter()]
        [System.String]
        $azureStorageUri
    )
}
function New-IntuneMobileThreatDefenseConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Boolean]
        $iosDeviceBlockedOnMissingPartnerData,

        [Parameter()]
        [System.DateTimeOffset]
        $lastHeartbeatDateTime,

        [Parameter()]
        [System.String]
        $partnerState,

        [Parameter()]
        [System.Boolean]
        $iosEnabled,

        [Parameter()]
        [System.Boolean]
        $androidDeviceBlockedOnMissingPartnerData,

        [Parameter()]
        [System.Boolean]
        $partnerUnsupportedOsVersionBlocked,

        [Parameter()]
        [System.Boolean]
        $androidEnabled,

        [Parameter()]
        [System.Int32]
        $partnerUnresponsivenessThresholdInDays
    )
}
function New-IntuneNotificationMessageTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $defaultLocale,

        [Parameter()]
        [System.String]
        $brandingOptions,

        [Parameter()]
        [System.Object[]]
        $localizedNotificationMessages
    )
}
function New-IntuneRemoteAssistancePartner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastConnectionDateTime,

        [Parameter()]
        [System.String]
        $onboardingStatus,

        [Parameter()]
        [System.String]
        $onboardingUrl
    )
}
function New-IntuneResourceOperation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $actionName,

        [Parameter()]
        [System.String]
        $resourceName,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-IntuneRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String[]]
        $members,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String[]]
        $resourceScopes,

        [Parameter()]
        [System.Object]
        $roleDefinition
    )
}
function New-IntuneRoleDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $isBuiltIn,

        [Parameter()]
        [System.Object[]]
        $rolePermissions,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceAndAppManagementRoleDefinition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $roleDefinition,

        [Parameter()]
        [System.Object[]]
        $roleAssignments
    )
}
function New-IntuneSoftwareUpdateStatusSummaryReference
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $softwareUpdateStatusSummaryReferenceUrl
    )
}
function New-IntuneTelecomExpenseManagementPartner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $appAuthorized,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastConnectionDateTime,

        [Parameter()]
        [System.String]
        $url,

        [Parameter()]
        [System.Boolean]
        $enabled
    )
}
function New-IntuneTermsAndConditions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $acceptanceStatement,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $title,

        [Parameter()]
        [System.Object[]]
        $acceptanceStatuses,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.String]
        $bodyText
    )
}
function New-IntuneTermsAndConditionsAcceptanceStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $acceptedVersion,

        [Parameter()]
        [System.Object]
        $termsAndConditions,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.String]
        $termsAndConditionId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $acceptedDateTime
    )
}
function New-IntuneTermsAndConditionsAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $termsAndConditionId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $target
    )
}
function New-IntuneTroubleshootingEvent
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $operatingSystem,

        [Parameter()]
        [System.DateTimeOffset]
        $eventDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $enrollmentTroubleshootingEvent,

        [Parameter()]
        [System.String]
        $failureCategory,

        [Parameter()]
        [System.String]
        $enrollmentType,

        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.String]
        $failureReason,

        [Parameter()]
        [System.String]
        $correlationId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceManagementTroubleshootingEvent,

        [Parameter()]
        [System.String]
        $deviceId,

        [Parameter()]
        [System.String]
        $managedDeviceIdentifier
    )
}
function New-IntuneVppToken
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $expirationDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $organizationName,

        [Parameter()]
        [System.String]
        $appleId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.Boolean]
        $automaticallyUpdateApps,

        [Parameter()]
        [System.String]
        $token,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.String]
        $lastSyncStatus,

        [Parameter()]
        [System.String]
        $countryOrRegion,

        [Parameter()]
        [System.String]
        $vppTokenAccountType
    )
}
function New-IntuneWindowsInformationProtectionAppLearningSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $applicationName,

        [Parameter()]
        [System.Int32]
        $deviceCount,

        [Parameter()]
        [System.String]
        $applicationType,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-IntuneWindowsInformationProtectionNetworkLearningSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $deviceCount,

        [Parameter()]
        [System.String]
        $url
    )
}
function New-IntuneWindowsInformationProtectionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $enforcementLevel,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $pinLowercaseLetters,

        [Parameter()]
        [System.Boolean]
        $enterpriseProxyServersAreAuthoritative,

        [Parameter()]
        [System.Object[]]
        $smbAutoEncryptedFileExtensions,

        [Parameter()]
        [System.Boolean]
        $protectionUnderLockConfigRequired,

        [Parameter()]
        [System.Boolean]
        $windowsHelloForBusinessBlocked,

        [Parameter()]
        [System.String]
        $enterpriseDomain,

        [Parameter()]
        [System.Object[]]
        $enterpriseInternalProxyServers,

        [Parameter()]
        [System.Boolean]
        $indexingEncryptedStoresOrItemsBlocked,

        [Parameter()]
        [System.Int32]
        $minutesOfInactivityBeforeDeviceLock,

        [Parameter()]
        [System.Boolean]
        $enterpriseIPRangesAreAuthoritative,

        [Parameter()]
        [System.String]
        $pinUppercaseLetters,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Boolean]
        $revokeOnUnenrollDisabled,

        [Parameter()]
        [System.Guid]
        $rightsManagementServicesTemplateId,

        [Parameter()]
        [System.Int32]
        $numberOfPastPinsRemembered,

        [Parameter()]
        [System.Int32]
        $pinMinimumLength,

        [Parameter()]
        [System.Object[]]
        $exemptAppLockerFiles,

        [Parameter()]
        [System.Object]
        $dataRecoveryCertificate,

        [Parameter()]
        [System.Object[]]
        $exemptApps,

        [Parameter()]
        [System.Boolean]
        $revokeOnMdmHandoffDisabled,

        [Parameter()]
        [System.String]
        $mdmEnrollmentUrl,

        [Parameter()]
        [System.Object[]]
        $neutralDomainResources,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxyServers,

        [Parameter()]
        [System.Boolean]
        $azureRightsManagementServicesAllowed,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $pinSpecialCharacters,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Int32]
        $daysWithoutContactBeforeUnenroll,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxiedDomains,

        [Parameter()]
        [System.Boolean]
        $iconsVisible,

        [Parameter()]
        [System.Object[]]
        $enterpriseProtectedDomainNames,

        [Parameter()]
        [System.Object[]]
        $protectedAppLockerFiles,

        [Parameter()]
        [System.Int32]
        $passwordMaximumAttemptCount,

        [Parameter()]
        [System.Object[]]
        $protectedApps,

        [Parameter()]
        [System.Int32]
        $pinExpirationDays,

        [Parameter()]
        [System.Object[]]
        $enterpriseIPRanges,

        [Parameter()]
        [System.Object[]]
        $enterpriseNetworkDomainNames
    )
}
function New-IntuneWindowsInformationProtectionPolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function New-IntuneWindowsInformationProtectionPolicyExemptAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $fileHash
    )
}
function New-IntuneWindowsInformationProtectionPolicyProtectedAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $fileHash
    )
}
function Remove-AADGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Remove-AADGroupCreatedOnBehalfOfReference
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Remove-AADGroupGroupLifecyclePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupLifecyclePolicyId,

        [Parameter()]
        [System.String]
        $groupId
    )
}
function Remove-AADGroupMemberOfReferenceSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $directoryObjectId
    )
}
function Remove-AADGroupMemberReferenceSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $directoryObjectId
    )
}
function Remove-AADGroupOwnerReferenceSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $directoryObjectId
    )
}
function Remove-AADGroupPhotoData
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId
    )
}
function Remove-AADGroupPhotoSetData
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $profilePhotoId
    )
}
function Remove-AADGroupSetting
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupSettingId,

        [Parameter()]
        [System.String]
        $groupId
    )
}
function Remove-IntuneAppConfigurationPolicyTargeted
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function Remove-IntuneAppConfigurationPolicyTargetedApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function Remove-IntuneAppConfigurationPolicyTargetedAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function Remove-IntuneAppConfigurationPolicyTargetedDeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function Remove-IntuneApplePushNotificationCertificate
{
    [CmdletBinding()]
    param(

    )
}
function Remove-IntuneAppProtectionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Remove-IntuneAppProtectionPolicyAndroid
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId
    )
}
function Remove-IntuneAppProtectionPolicyAndroidApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId
    )
}
function Remove-IntuneAppProtectionPolicyAndroidAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionODataType,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId
    )
}
function Remove-IntuneAppProtectionPolicyAndroidDeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId
    )
}
function Remove-IntuneAppProtectionPolicyApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Remove-IntuneAppProtectionPolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Remove-IntuneAppProtectionPolicyDefault
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId
    )
}
function Remove-IntuneAppProtectionPolicyDefaultApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId,

        [Parameter()]
        [System.String]
        $managedMobileAppId
    )
}
function Remove-IntuneAppProtectionPolicyDefaultDeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId
    )
}
function Remove-IntuneAppProtectionPolicyDeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Remove-IntuneAppProtectionPolicyExemptAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Remove-IntuneAppProtectionPolicyIos
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId
    )
}
function Remove-IntuneAppProtectionPolicyIosApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.String]
        $managedMobileAppId
    )
}
function Remove-IntuneAppProtectionPolicyIosAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionODataType
    )
}
function Remove-IntuneAppProtectionPolicyIosDeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId
    )
}
function Remove-IntuneAppProtectionPolicyProtectedAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Remove-IntuneConditionalAccessSetting
{
    [CmdletBinding()]
    param(

    )
}
function Remove-IntuneDetectedApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $detectedAppId
    )
}
function Remove-IntuneDetectedAppDeviceReferenceSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String]
        $detectedAppId
    )
}
function Remove-IntuneDeviceAppManagement
{
    [CmdletBinding()]
    param(

    )
}
function Remove-IntuneDeviceCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCategoryId
    )
}
function Remove-IntuneDeviceCompliancePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId
    )
}
function Remove-IntuneDeviceCompliancePolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyAssignmentId
    )
}
function Remove-IntuneDeviceCompliancePolicyDeviceSettingStateSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $settingStateDeviceSummaryId
    )
}
function Remove-IntuneDeviceCompliancePolicyDeviceStateSummary
{
    [CmdletBinding()]
    param(

    )
}
function Remove-IntuneDeviceCompliancePolicyDeviceStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $deviceComplianceDeviceStatusId
    )
}
function Remove-IntuneDeviceCompliancePolicyDeviceStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId
    )
}
function Remove-IntuneDeviceCompliancePolicyScheduledActionsForRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $deviceComplianceScheduledActionForRuleId
    )
}
function Remove-IntuneDeviceCompliancePolicyScheduledActionsForRuleConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceComplianceActionItemId,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $deviceComplianceScheduledActionForRuleId
    )
}
function Remove-IntuneDeviceCompliancePolicySettingSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicySettingStateSummaryId
    )
}
function Remove-IntuneDeviceCompliancePolicyUserStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $deviceComplianceUserStatusId
    )
}
function Remove-IntuneDeviceCompliancePolicyUserStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId
    )
}
function Remove-IntuneDeviceComplianceSettingState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceComplianceSettingStateId,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicySettingStateSummaryId
    )
}
function Remove-IntuneDeviceConfigurationDeviceStateSummary
{
    [CmdletBinding()]
    param(

    )
}
function Remove-IntuneDeviceConfigurationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceConfigurationId
    )
}
function Remove-IntuneDeviceConfigurationPolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceConfigurationAssignmentId,

        [Parameter()]
        [System.String]
        $deviceConfigurationId
    )
}
function Remove-IntuneDeviceConfigurationPolicyDeviceSettingStateSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $settingStateDeviceSummaryId,

        [Parameter()]
        [System.String]
        $deviceConfigurationId
    )
}
function Remove-IntuneDeviceConfigurationPolicyDeviceStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceConfigurationDeviceStatusId,

        [Parameter()]
        [System.String]
        $deviceConfigurationId
    )
}
function Remove-IntuneDeviceConfigurationPolicyDeviceStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceConfigurationId
    )
}
function Remove-IntuneDeviceConfigurationPolicyUserStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceConfigurationUserStatusId,

        [Parameter()]
        [System.String]
        $deviceConfigurationId
    )
}
function Remove-IntuneDeviceConfigurationPolicyUserStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceConfigurationId
    )
}
function Remove-IntuneDeviceEnrollmentConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceEnrollmentConfigurationId
    )
}
function Remove-IntuneDeviceEnrollmentConfigurationAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $enrollmentConfigurationAssignmentId,

        [Parameter()]
        [System.String]
        $deviceEnrollmentConfigurationId
    )
}
function Remove-IntuneDeviceManagement
{
    [CmdletBinding()]
    param(

    )
}
function Remove-IntuneDeviceManagementPartner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceManagementPartnerId
    )
}
function Remove-IntuneExchangeConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceManagementExchangeConnectorId
    )
}
function Remove-IntuneIosUpdateStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $iosUpdateDeviceStatusId
    )
}
function Remove-IntuneLocalizedNotificationMessage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $notificationMessageTemplateId,

        [Parameter()]
        [System.String]
        $localizedNotificationMessageId
    )
}
function Remove-IntuneManagedAppRegistration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppRegistrationId
    )
}
function Remove-IntuneManagedAppStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedAppStatusId
    )
}
function Remove-IntuneManagedDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Remove-IntuneManagedDeviceDeviceCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Remove-IntuneManagedDeviceDeviceCompliancePolicyState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyStateId
    )
}
function Remove-IntuneManagedDeviceDeviceConfigurationState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceConfigurationStateId,

        [Parameter()]
        [System.String]
        $managedDeviceId
    )
}
function Remove-IntuneManagedDeviceOverviewReference
{
    [CmdletBinding()]
    param(

    )
}
function Remove-IntuneManagedEBook
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Remove-IntuneManagedEBookAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedEBookAssignmentId,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Remove-IntuneManagedEBookDeviceState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceInstallStateId,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Remove-IntuneManagedEBookInstallSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Remove-IntuneManagedEBookUserStateSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userInstallStateSummaryId,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Remove-IntuneManagedEBookUserStateSummaryDeviceState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userInstallStateSummaryId,

        [Parameter()]
        [System.String]
        $deviceInstallStateId,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Remove-IntuneMdmWindowsInformationProtectionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId
    )
}
function Remove-IntuneMdmWindowsInformationProtectionPolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId
    )
}
function Remove-IntuneMdmWindowsInformationProtectionPolicyExemptAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId
    )
}
function Remove-IntuneMdmWindowsInformationProtectionPolicyProtectedAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId
    )
}
function Remove-IntuneMobileApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppId
    )
}
function Remove-IntuneMobileAppAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppAssignmentId,

        [Parameter()]
        [System.String]
        $mobileAppId
    )
}
function Remove-IntuneMobileAppCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppCategoryId
    )
}
function Remove-IntuneMobileAppCategorySetReferenceSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppCategoryId,

        [Parameter()]
        [System.String]
        $mobileAppId
    )
}
function Remove-IntuneMobileAppConfigurationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId
    )
}
function Remove-IntuneMobileAppConfigurationPolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationAssignmentId,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId
    )
}
function Remove-IntuneMobileAppConfigurationPolicyDeviceStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationDeviceStatusId,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId
    )
}
function Remove-IntuneMobileAppConfigurationPolicyDeviceStatusSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId
    )
}
function Remove-IntuneMobileAppConfigurationPolicyUserStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationUserStatusId,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId
    )
}
function Remove-IntuneMobileAppConfigurationPolicyUserStatusSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId
    )
}
function Remove-IntuneMobileAppContentVersion
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String]
        $mobileAppODataType,

        [Parameter()]
        [System.String]
        $mobileAppContentId
    )
}
function Remove-IntuneMobileAppContentVersionFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppContentFileId,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String]
        $mobileAppODataType,

        [Parameter()]
        [System.String]
        $mobileAppContentId
    )
}
function Remove-IntuneMobileThreatDefenseConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileThreatDefenseConnectorId
    )
}
function Remove-IntuneNotificationMessageTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $notificationMessageTemplateId
    )
}
function Remove-IntuneRemoteAssistancePartner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $remoteAssistancePartnerId
    )
}
function Remove-IntuneResourceOperation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $resourceOperationId
    )
}
function Remove-IntuneRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceAndAppManagementRoleAssignmentId
    )
}
function Remove-IntuneRoleDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $roleDefinitionId
    )
}
function Remove-IntuneSoftwareUpdateStatusSummaryReference
{
    [CmdletBinding()]
    param(

    )
}
function Remove-IntuneTelecomExpenseManagementPartner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $telecomExpenseManagementPartnerId
    )
}
function Remove-IntuneTermsAndConditions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $termsAndConditionId
    )
}
function Remove-IntuneTermsAndConditionsAcceptanceStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $termsAndConditionId,

        [Parameter()]
        [System.String]
        $termsAndConditionsAcceptanceStatusId
    )
}
function Remove-IntuneTermsAndConditionsAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $termsAndConditionsAssignmentId,

        [Parameter()]
        [System.String]
        $termsAndConditionId
    )
}
function Remove-IntuneTroubleshootingEvent
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceManagementTroubleshootingEventId
    )
}
function Remove-IntuneVppToken
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $vppTokenId
    )
}
function Remove-IntuneWindowsInformationProtectionAppLearningSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLearningSummaryId
    )
}
function Remove-IntuneWindowsInformationProtectionNetworkLearningSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionNetworkLearningSummaryId
    )
}
function Remove-IntuneWindowsInformationProtectionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId
    )
}
function Remove-IntuneWindowsInformationProtectionPolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId
    )
}
function Remove-IntuneWindowsInformationProtectionPolicyExemptAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId
    )
}
function Remove-IntuneWindowsInformationProtectionPolicyProtectedAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId
    )
}
function Set-AADGroupPhotoData
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $ContentType,

        [Parameter()]
        [System.String]
        $Data
    )
}
function Set-AADGroupPhotoSetData
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.String]
        $ContentType,

        [Parameter()]
        [System.String]
        $Data,

        [Parameter()]
        [System.String]
        $profilePhotoId
    )
}
function Update-AADGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $photos,

        [Parameter()]
        [System.Object[]]
        $transitiveMemberOf,

        [Parameter()]
        [System.Object[]]
        $groupLifecyclePolicies,

        [Parameter()]
        [System.Int32]
        $unseenCount,

        [Parameter()]
        [System.String]
        $mailNickname,

        [Parameter()]
        [System.Boolean]
        $isSubscribedByMail,

        [Parameter()]
        [System.Object]
        $licenseProcessingState,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $settings,

        [Parameter()]
        [System.Object]
        $createdOnBehalfOf,

        [Parameter()]
        [System.Object[]]
        $membersWithLicenseErrors,

        [Parameter()]
        [System.String]
        $classification,

        [Parameter()]
        [System.DateTimeOffset]
        $renewedDateTime,

        [Parameter()]
        [System.Boolean]
        $isArchived,

        [Parameter()]
        [System.Object[]]
        $onPremisesProvisioningErrors,

        [Parameter()]
        [System.String[]]
        $groupTypes,

        [Parameter()]
        [System.Boolean]
        $autoSubscribeNewMembers,

        [Parameter()]
        [System.Boolean]
        $securityEnabled,

        [Parameter()]
        [System.Object[]]
        $transitiveMembers,

        [Parameter()]
        [System.Object]
        $photo,

        [Parameter()]
        [System.Boolean]
        $allowExternalSenders,

        [Parameter()]
        [System.Object[]]
        $assignedLicenses,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.Boolean]
        $mailEnabled,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Object[]]
        $owners,

        [Parameter()]
        [System.Object[]]
        $memberOf,

        [Parameter()]
        [System.Boolean]
        $hasMembersWithLicenseErrors,

        [Parameter()]
        [System.Object[]]
        $members,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $deletedDateTime,

        [Parameter()]
        [System.String[]]
        $proxyAddresses,

        [Parameter()]
        [System.String]
        $visibility,

        [Parameter()]
        [System.String]
        $mail,

        [Parameter()]
        [System.Boolean]
        $onPremisesSyncEnabled,

        [Parameter()]
        [System.String]
        $preferredDataLocation,

        [Parameter()]
        [System.String]
        $onPremisesSecurityIdentifier,

        [Parameter()]
        [System.DateTimeOffset]
        $onPremisesLastSyncDateTime
    )
}
function Update-AADGroupGroupLifecyclePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupLifecyclePolicyId,

        [Parameter()]
        [System.String]
        $alternateNotificationEmails,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $managedGroupTypes,

        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.Int32]
        $groupLifetimeInDays
    )
}
function Update-AADGroupPhoto
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $groupId,

        [Parameter()]
        [System.Int32]
        $height,

        [Parameter()]
        [System.Int32]
        $width,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-AADGroupSetting
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $values
    )
}
function Update-IntuneAppConfigurationPolicyTargeted
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $customSettings,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.Object[]]
        $assignments
    )
}
function Update-IntuneAppConfigurationPolicyTargetedApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function Update-IntuneAppConfigurationPolicyTargetedAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-IntuneAppConfigurationPolicyTargetedDeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp,

        [Parameter()]
        [System.String]
        $targetedManagedAppConfigurationId
    )
}
function Update-IntuneApplePushNotificationCertificate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $expirationDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $certificate,

        [Parameter()]
        [System.String]
        $topicIdentifier,

        [Parameter()]
        [System.String]
        $appleIdentifier,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-IntuneAppProtectionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $enterpriseProxyServers,

        [Parameter()]
        [System.Boolean]
        $fingerprintBlocked,

        [Parameter()]
        [System.Object[]]
        $enterpriseProtectedDomainNames,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosManagedAppProtection,

        [Parameter()]
        [System.Boolean]
        $revokeOnMdmHandoffDisabled,

        [Parameter()]
        [System.String]
        $enforcementLevel,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $smbAutoEncryptedFileExtensions,

        [Parameter()]
        [System.Boolean]
        $dataBackupBlocked,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.TimeSpan]
        $periodOnlineBeforeAccessCheck,

        [Parameter()]
        [System.Object[]]
        $customSettings,

        [Parameter()]
        [System.Int32]
        $pinExpirationDays,

        [Parameter()]
        [System.Boolean]
        $contactSyncBlocked,

        [Parameter()]
        [System.Boolean]
        $windowsHelloForBusinessBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $defaultManagedAppProtection,

        [Parameter()]
        [System.String]
        $minimumWarningPatchVersion,

        [Parameter()]
        [System.Int32]
        $numberOfPastPinsRemembered,

        [Parameter()]
        [System.String]
        $enterpriseDomain,

        [Parameter()]
        [System.Boolean]
        $printBlocked,

        [Parameter()]
        [System.Boolean]
        $pinRequired,

        [Parameter()]
        [System.String]
        $appDataEncryptionType,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.String[]]
        $allowedDataStorageLocations,

        [Parameter()]
        [System.Int32]
        $passwordMaximumAttemptCount,

        [Parameter()]
        [System.Boolean]
        $faceIdBlocked,

        [Parameter()]
        [System.Object[]]
        $enterpriseIPRanges,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $mdmWindowsInformationProtectionPolicy,

        [Parameter()]
        [System.Object[]]
        $exemptAppLockerFiles,

        [Parameter()]
        [System.Boolean]
        $enterpriseIPRangesAreAuthoritative,

        [Parameter()]
        [System.Boolean]
        $deviceComplianceRequired,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeAccessCheck,

        [Parameter()]
        [System.String]
        $minimumRequiredOsVersion,

        [Parameter()]
        [System.Boolean]
        $revokeOnUnenrollDisabled,

        [Parameter()]
        [System.Boolean]
        $disableAppEncryptionIfDeviceEncryptionIsEnabled,

        [Parameter()]
        [System.String]
        $managedAppPolicyId,

        [Parameter()]
        [System.String]
        $minimumWarningAppVersion,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxiedDomains,

        [Parameter()]
        [System.Int32]
        $maximumPinRetries,

        [Parameter()]
        [System.Object[]]
        $enterpriseInternalProxyServers,

        [Parameter()]
        [System.Boolean]
        $encryptAppData,

        [Parameter()]
        [System.Boolean]
        $enterpriseProxyServersAreAuthoritative,

        [Parameter()]
        [System.String]
        $pinSpecialCharacters,

        [Parameter()]
        [System.String]
        $allowedOutboundDataTransferDestinations,

        [Parameter()]
        [System.Boolean]
        $azureRightsManagementServicesAllowed,

        [Parameter()]
        [System.Object[]]
        $protectedApps,

        [Parameter()]
        [System.Boolean]
        $organizationalCredentialsRequired,

        [Parameter()]
        [System.Object[]]
        $protectedAppLockerFiles,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $pinLowercaseLetters,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Int32]
        $minimumPinLength,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidManagedAppProtection,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.String]
        $minimumRequiredSdkVersion,

        [Parameter()]
        [System.Boolean]
        $protectionUnderLockConfigRequired,

        [Parameter()]
        [System.Boolean]
        $simplePinBlocked,

        [Parameter()]
        [System.Boolean]
        $iconsVisible,

        [Parameter()]
        [System.String]
        $minimumRequiredAppVersion,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $targetedManagedAppConfiguration,

        [Parameter()]
        [System.Boolean]
        $screenCaptureBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsInformationProtectionPolicy,

        [Parameter()]
        [System.Object[]]
        $enterpriseNetworkDomainNames,

        [Parameter()]
        [System.Object[]]
        $exemptApps,

        [Parameter()]
        [System.String]
        $minimumWarningOsVersion,

        [Parameter()]
        [System.Int32]
        $minutesOfInactivityBeforeDeviceLock,

        [Parameter()]
        [System.Guid]
        $rightsManagementServicesTemplateId,

        [Parameter()]
        [System.Boolean]
        $indexingEncryptedStoresOrItemsBlocked,

        [Parameter()]
        [System.String]
        $mdmEnrollmentUrl,

        [Parameter()]
        [System.Object[]]
        $neutralDomainResources,

        [Parameter()]
        [System.String]
        $pinUppercaseLetters,

        [Parameter()]
        [System.Boolean]
        $saveAsBlocked,

        [Parameter()]
        [System.TimeSpan]
        $periodBeforePinReset,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $allowedInboundDataTransferSources,

        [Parameter()]
        [System.Int32]
        $daysWithoutContactBeforeUnenroll,

        [Parameter()]
        [System.Object]
        $dataRecoveryCertificate,

        [Parameter()]
        [System.Boolean]
        $disableAppPinIfDevicePinIsSet,

        [Parameter()]
        [System.String]
        $minimumRequiredPatchVersion,

        [Parameter()]
        [System.Int32]
        $pinMinimumLength,

        [Parameter()]
        [System.String]
        $allowedOutboundClipboardSharingLevel,

        [Parameter()]
        [System.Boolean]
        $managedBrowserToOpenLinksRequired,

        [Parameter()]
        [System.String]
        $pinCharacterSet,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeWipeIsEnforced
    )
}
function Update-IntuneAppProtectionPolicyAndroid
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $minimumRequiredAppVersion,

        [Parameter()]
        [System.Int32]
        $minimumPinLength,

        [Parameter()]
        [System.String]
        $allowedInboundDataTransferSources,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Boolean]
        $disableAppEncryptionIfDeviceEncryptionIsEnabled,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $minimumRequiredOsVersion,

        [Parameter()]
        [System.Boolean]
        $pinRequired,

        [Parameter()]
        [System.String]
        $allowedOutboundDataTransferDestinations,

        [Parameter()]
        [System.Int32]
        $maximumPinRetries,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $minimumWarningOsVersion,

        [Parameter()]
        [System.Boolean]
        $fingerprintBlocked,

        [Parameter()]
        [System.Boolean]
        $managedBrowserToOpenLinksRequired,

        [Parameter()]
        [System.Boolean]
        $organizationalCredentialsRequired,

        [Parameter()]
        [System.Boolean]
        $simplePinBlocked,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeWipeIsEnforced,

        [Parameter()]
        [System.String[]]
        $allowedDataStorageLocations,

        [Parameter()]
        [System.Boolean]
        $screenCaptureBlocked,

        [Parameter()]
        [System.String]
        $minimumRequiredPatchVersion,

        [Parameter()]
        [System.Boolean]
        $encryptAppData,

        [Parameter()]
        [System.String]
        $allowedOutboundClipboardSharingLevel,

        [Parameter()]
        [System.Boolean]
        $printBlocked,

        [Parameter()]
        [System.String]
        $minimumWarningPatchVersion,

        [Parameter()]
        [System.TimeSpan]
        $periodBeforePinReset,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Boolean]
        $deviceComplianceRequired,

        [Parameter()]
        [System.Boolean]
        $dataBackupBlocked,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.Boolean]
        $contactSyncBlocked,

        [Parameter()]
        [System.Boolean]
        $disableAppPinIfDevicePinIsSet,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId,

        [Parameter()]
        [System.String]
        $minimumWarningAppVersion,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.String]
        $pinCharacterSet,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeAccessCheck,

        [Parameter()]
        [System.Boolean]
        $saveAsBlocked,

        [Parameter()]
        [System.TimeSpan]
        $periodOnlineBeforeAccessCheck
    )
}
function Update-IntuneAppProtectionPolicyAndroidApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId
    )
}
function Update-IntuneAppProtectionPolicyAndroidAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $androidManagedAppProtectionODataType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId
    )
}
function Update-IntuneAppProtectionPolicyAndroidDeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp,

        [Parameter()]
        [System.String]
        $androidManagedAppProtectionId
    )
}
function Update-IntuneAppProtectionPolicyApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $managedMobileAppId,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Update-IntuneAppProtectionPolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Update-IntuneAppProtectionPolicyDefault
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $minimumRequiredAppVersion,

        [Parameter()]
        [System.Int32]
        $minimumPinLength,

        [Parameter()]
        [System.String]
        $allowedInboundDataTransferSources,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Boolean]
        $disableAppEncryptionIfDeviceEncryptionIsEnabled,

        [Parameter()]
        [System.String]
        $minimumRequiredSdkVersion,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $faceIdBlocked,

        [Parameter()]
        [System.String]
        $minimumRequiredOsVersion,

        [Parameter()]
        [System.Boolean]
        $pinRequired,

        [Parameter()]
        [System.Object[]]
        $customSettings,

        [Parameter()]
        [System.String]
        $allowedOutboundDataTransferDestinations,

        [Parameter()]
        [System.Int32]
        $maximumPinRetries,

        [Parameter()]
        [System.String]
        $appDataEncryptionType,

        [Parameter()]
        [System.String]
        $minimumWarningOsVersion,

        [Parameter()]
        [System.Boolean]
        $fingerprintBlocked,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.Boolean]
        $managedBrowserToOpenLinksRequired,

        [Parameter()]
        [System.Boolean]
        $organizationalCredentialsRequired,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeWipeIsEnforced,

        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId,

        [Parameter()]
        [System.Boolean]
        $screenCaptureBlocked,

        [Parameter()]
        [System.Boolean]
        $encryptAppData,

        [Parameter()]
        [System.String]
        $minimumRequiredPatchVersion,

        [Parameter()]
        [System.Boolean]
        $simplePinBlocked,

        [Parameter()]
        [System.String]
        $allowedOutboundClipboardSharingLevel,

        [Parameter()]
        [System.Boolean]
        $printBlocked,

        [Parameter()]
        [System.String]
        $minimumWarningPatchVersion,

        [Parameter()]
        [System.TimeSpan]
        $periodBeforePinReset,

        [Parameter()]
        [System.Boolean]
        $deviceComplianceRequired,

        [Parameter()]
        [System.Boolean]
        $dataBackupBlocked,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.Boolean]
        $contactSyncBlocked,

        [Parameter()]
        [System.Boolean]
        $disableAppPinIfDevicePinIsSet,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String[]]
        $allowedDataStorageLocations,

        [Parameter()]
        [System.String]
        $minimumWarningAppVersion,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $pinCharacterSet,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeAccessCheck,

        [Parameter()]
        [System.Boolean]
        $saveAsBlocked,

        [Parameter()]
        [System.TimeSpan]
        $periodOnlineBeforeAccessCheck
    )
}
function Update-IntuneAppProtectionPolicyDefaultApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $managedMobileAppId
    )
}
function Update-IntuneAppProtectionPolicyDefaultDeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $defaultManagedAppProtectionId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp
    )
}
function Update-IntuneAppProtectionPolicyDeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Update-IntuneAppProtectionPolicyExemptAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Update-IntuneAppProtectionPolicyIos
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $minimumRequiredAppVersion,

        [Parameter()]
        [System.String]
        $allowedInboundDataTransferSources,

        [Parameter()]
        [System.Int32]
        $deployedAppCount,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.String]
        $minimumRequiredSdkVersion,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $minimumRequiredOsVersion,

        [Parameter()]
        [System.Boolean]
        $pinRequired,

        [Parameter()]
        [System.String]
        $allowedOutboundDataTransferDestinations,

        [Parameter()]
        [System.Int32]
        $maximumPinRetries,

        [Parameter()]
        [System.String]
        $appDataEncryptionType,

        [Parameter()]
        [System.String]
        $minimumWarningOsVersion,

        [Parameter()]
        [System.Boolean]
        $fingerprintBlocked,

        [Parameter()]
        [System.Boolean]
        $managedBrowserToOpenLinksRequired,

        [Parameter()]
        [System.Boolean]
        $organizationalCredentialsRequired,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.Boolean]
        $faceIdBlocked,

        [Parameter()]
        [System.Boolean]
        $simplePinBlocked,

        [Parameter()]
        [System.String]
        $allowedOutboundClipboardSharingLevel,

        [Parameter()]
        [System.Boolean]
        $printBlocked,

        [Parameter()]
        [System.TimeSpan]
        $periodBeforePinReset,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Boolean]
        $deviceComplianceRequired,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeWipeIsEnforced,

        [Parameter()]
        [System.Boolean]
        $dataBackupBlocked,

        [Parameter()]
        [System.Object[]]
        $apps,

        [Parameter()]
        [System.Boolean]
        $contactSyncBlocked,

        [Parameter()]
        [System.Boolean]
        $disableAppPinIfDevicePinIsSet,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String[]]
        $allowedDataStorageLocations,

        [Parameter()]
        [System.Int32]
        $minimumPinLength,

        [Parameter()]
        [System.String]
        $minimumWarningAppVersion,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $deploymentSummary,

        [Parameter()]
        [System.String]
        $pinCharacterSet,

        [Parameter()]
        [System.TimeSpan]
        $periodOfflineBeforeAccessCheck,

        [Parameter()]
        [System.Boolean]
        $saveAsBlocked,

        [Parameter()]
        [System.TimeSpan]
        $periodOnlineBeforeAccessCheck
    )
}
function Update-IntuneAppProtectionPolicyIosApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.Object]
        $mobileAppIdentifier,

        [Parameter()]
        [System.String]
        $managedMobileAppId
    )
}
function Update-IntuneAppProtectionPolicyIosAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionODataType,

        [Parameter()]
        [System.Object]
        $target
    )
}
function Update-IntuneAppProtectionPolicyIosDeploymentSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Int32]
        $configurationDeployedUserCount,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $iosManagedAppProtectionId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastRefreshTime,

        [Parameter()]
        [System.Object[]]
        $configurationDeploymentSummaryPerApp
    )
}
function Update-IntuneAppProtectionPolicyProtectedAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $managedAppPolicyODataType,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $managedAppPolicyId
    )
}
function Update-IntuneConditionalAccessSetting
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Guid[]]
        $includedGroups,

        [Parameter()]
        [System.Guid[]]
        $excludedGroups,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Boolean]
        $overrideDefaultRule,

        [Parameter()]
        [System.Boolean]
        $enabled
    )
}
function Update-IntuneDetectedApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $detectedAppId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $managedDevices,

        [Parameter()]
        [System.Int32]
        $deviceCount,

        [Parameter()]
        [System.Int64]
        $sizeInByte
    )
}
function Update-IntuneDeviceAppManagement
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $microsoftStoreForBusinessLastSuccessfulSyncDateTime,

        [Parameter()]
        [System.Object[]]
        $targetedManagedAppConfigurations,

        [Parameter()]
        [System.Object[]]
        $managedEBooks,

        [Parameter()]
        [System.Object[]]
        $mobileApps,

        [Parameter()]
        [System.String]
        $microsoftStoreForBusinessLanguage,

        [Parameter()]
        [System.Object[]]
        $managedAppPolicies,

        [Parameter()]
        [System.Object[]]
        $managedAppStatuses,

        [Parameter()]
        [System.Boolean]
        $isEnabledForMicrosoftStoreForBusiness,

        [Parameter()]
        [System.Object[]]
        $managedAppRegistrations,

        [Parameter()]
        [System.Object[]]
        $defaultManagedAppProtections,

        [Parameter()]
        [System.DateTimeOffset]
        $microsoftStoreForBusinessLastCompletedApplicationSyncTime,

        [Parameter()]
        [System.Object[]]
        $iosManagedAppProtections,

        [Parameter()]
        [System.Object[]]
        $mobileAppCategories,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $vppTokens,

        [Parameter()]
        [System.Object[]]
        $windowsInformationProtectionPolicies,

        [Parameter()]
        [System.Object[]]
        $androidManagedAppProtections,

        [Parameter()]
        [System.Object[]]
        $mdmWindowsInformationProtectionPolicies,

        [Parameter()]
        [System.Object[]]
        $mobileAppConfigurations
    )
}
function Update-IntuneDeviceCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCategoryId,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-IntuneDeviceCompliancePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $passcodeBlockSimple,

        [Parameter()]
        [System.Boolean]
        $firewallEnabled,

        [Parameter()]
        [System.String]
        $mobileOsMinimumVersion,

        [Parameter()]
        [System.Int32]
        $passcodeExpirationDays,

        [Parameter()]
        [System.Boolean]
        $bitLockerEnabled,

        [Parameter()]
        [System.String]
        $minAndroidSecurityPatchLevel,

        [Parameter()]
        [System.Object[]]
        $userStatuses,

        [Parameter()]
        [System.Object[]]
        $deviceSettingStateSummaries,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosCompliancePolicy,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Boolean]
        $firewallEnableStealthMode,

        [Parameter()]
        [System.String]
        $passwordRequiredType,

        [Parameter()]
        [System.String]
        $osMinimumVersion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsPhone81CompliancePolicy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows81CompliancePolicy,

        [Parameter()]
        [System.Boolean]
        $securityRequireGooglePlayServices,

        [Parameter()]
        [System.String]
        $mobileOsMaximumVersion,

        [Parameter()]
        [System.Boolean]
        $securityDisableUsbDebugging,

        [Parameter()]
        [System.Boolean]
        $storageRequireEncryption,

        [Parameter()]
        [System.Int32]
        $passcodeMinimumLength,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10CompliancePolicy,

        [Parameter()]
        [System.Object]
        $userStatusOverview,

        [Parameter()]
        [System.Boolean]
        $codeIntegrityEnabled,

        [Parameter()]
        [System.Boolean]
        $securityRequireUpToDateSecurityProviders,

        [Parameter()]
        [System.Boolean]
        $securityBlockJailbrokenDevices,

        [Parameter()]
        [System.Int32]
        $passcodeMinimumCharacterSetCount,

        [Parameter()]
        [System.Boolean]
        $securityRequireSafetyNetAttestationBasicIntegrity,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Int32]
        $passcodePreviousPasscodeBlockCount,

        [Parameter()]
        [System.Int32]
        $passcodeMinutesOfInactivityBeforeLock,

        [Parameter()]
        [System.Int32]
        $passwordExpirationDays,

        [Parameter()]
        [System.Boolean]
        $securityRequireCompanyPortalAppIntegrity,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Boolean]
        $securityPreventInstallAppsFromUnknownSources,

        [Parameter()]
        [System.Int32]
        $passwordPreviousPasswordBlockCount,

        [Parameter()]
        [System.Boolean]
        $firewallBlockAllIncoming,

        [Parameter()]
        [System.Object]
        $deviceStatusOverview,

        [Parameter()]
        [System.Boolean]
        $securityRequireSafetyNetAttestationCertifiedDevice,

        [Parameter()]
        [System.Int32]
        $passwordMinimumCharacterSetCount,

        [Parameter()]
        [System.Boolean]
        $earlyLaunchAntiMalwareDriverEnabled,

        [Parameter()]
        [System.Boolean]
        $passwordBlockSimple,

        [Parameter()]
        [System.Boolean]
        $requireHealthyDeviceReport,

        [Parameter()]
        [System.String]
        $passcodeRequiredType,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.Boolean]
        $passwordRequired,

        [Parameter()]
        [System.Boolean]
        $passwordRequireToUnlockFromIdle,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Int32]
        $passwordMinimumLength,

        [Parameter()]
        [System.Boolean]
        $systemIntegrityProtectionEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidCompliancePolicy,

        [Parameter()]
        [System.Object[]]
        $deviceStatuses,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSCompliancePolicy,

        [Parameter()]
        [System.Boolean]
        $passcodeRequired,

        [Parameter()]
        [System.Boolean]
        $deviceThreatProtectionEnabled,

        [Parameter()]
        [System.Boolean]
        $secureBootEnabled,

        [Parameter()]
        [System.Boolean]
        $securityRequireVerifyApps,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidWorkProfileCompliancePolicy,

        [Parameter()]
        [System.Boolean]
        $managedEmailProfileRequired,

        [Parameter()]
        [System.String]
        $deviceThreatProtectionRequiredSecurityLevel,

        [Parameter()]
        [System.Object[]]
        $scheduledActionsForRule,

        [Parameter()]
        [System.String]
        $osMaximumVersion,

        [Parameter()]
        [System.Int32]
        $passwordMinutesOfInactivityBeforeLock,

        [Parameter()]
        [System.Boolean]
        $passwordRequiredToUnlockFromIdle,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10MobileCompliancePolicy
    )
}
function Update-IntuneDeviceCompliancePolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyAssignmentId,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-IntuneDeviceCompliancePolicyDeviceSettingStateSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.String]
        $settingName,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.String]
        $instancePath,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $settingStateDeviceSummaryId,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function Update-IntuneDeviceCompliancePolicyDeviceStateSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $inGracePeriodCount,

        [Parameter()]
        [System.Int32]
        $configManagerCount,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function Update-IntuneDeviceCompliancePolicyDeviceStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $deviceModel,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.String]
        $deviceDisplayName,

        [Parameter()]
        [System.String]
        $deviceComplianceDeviceStatusId
    )
}
function Update-IntuneDeviceCompliancePolicyDeviceStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.Int32]
        $failedCount,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime
    )
}
function Update-IntuneDeviceCompliancePolicyScheduledActionsForRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $scheduledActionConfigurations,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $ruleName,

        [Parameter()]
        [System.String]
        $deviceComplianceScheduledActionForRuleId
    )
}
function Update-IntuneDeviceCompliancePolicyScheduledActionsForRuleConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.String]
        $deviceComplianceActionItemId,

        [Parameter()]
        [System.String]
        $actionType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $notificationTemplateId,

        [Parameter()]
        [System.Int32]
        $gracePeriodHours,

        [Parameter()]
        [System.String]
        $deviceComplianceScheduledActionForRuleId,

        [Parameter()]
        [System.String[]]
        $notificationMessageCCList
    )
}
function Update-IntuneDeviceCompliancePolicySettingSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.String]
        $settingName,

        [Parameter()]
        [System.String]
        $setting,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $deviceComplianceSettingStates,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicySettingStateSummaryId,

        [Parameter()]
        [System.String]
        $platformType,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function Update-IntuneDeviceCompliancePolicyUserStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.String]
        $deviceComplianceUserStatusId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $devicesCount,

        [Parameter()]
        [System.String]
        $status
    )
}
function Update-IntuneDeviceCompliancePolicyUserStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.Int32]
        $failedCount,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyId,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime
    )
}
function Update-IntuneDeviceComplianceSettingState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userEmail,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $settingName,

        [Parameter()]
        [System.String]
        $deviceComplianceSettingStateId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $setting,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicySettingStateSummaryId,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $deviceModel,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.String]
        $deviceId
    )
}
function Update-IntuneDeviceConfigurationDeviceStateSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function Update-IntuneDeviceConfigurationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $settingsBlockChangeLanguage,

        [Parameter()]
        [System.Boolean]
        $browserBlockSingleWordEntryOnIntranetSites,

        [Parameter()]
        [System.Boolean]
        $settingsBlockNetworkInternetPage,

        [Parameter()]
        [System.Byte[]]
        $startMenuLayoutXml,

        [Parameter()]
        [System.Boolean]
        $appStoreBlockInAppPurchases,

        [Parameter()]
        [System.Boolean]
        $edgeBlockAccessToAboutFlags,

        [Parameter()]
        [System.Boolean]
        $airDropBlocked,

        [Parameter()]
        [System.Boolean]
        $oneDriveDisableFileSync,

        [Parameter()]
        [System.Boolean]
        $edgeBlockAutofill,

        [Parameter()]
        [System.Object]
        $edgeSearchEngine,

        [Parameter()]
        [System.String]
        $appsAllowTrustedAppsSideloading,

        [Parameter()]
        [System.Object[]]
        $appsSingleAppModeList,

        [Parameter()]
        [System.Boolean]
        $workProfileRequirePassword,

        [Parameter()]
        [System.Boolean]
        $firewallIPSecExemptionsAllowDHCP,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidCustomConfiguration,

        [Parameter()]
        [System.Boolean]
        $firewallIPSecExemptionsAllowRouterDiscovery,

        [Parameter()]
        [System.String]
        $firewallPreSharedKeyEncodingMethod,

        [Parameter()]
        [System.Boolean]
        $resetProtectionModeBlocked,

        [Parameter()]
        [System.Boolean]
        $startMenuHideRecentJumpLists,

        [Parameter()]
        [System.String]
        $userAccountControlSettings,

        [Parameter()]
        [System.String]
        $appsVisibilityListType,

        [Parameter()]
        [System.Int32]
        $passwordMinutesOfInactivityBeforeScreenTimeout,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowAutoLock,

        [Parameter()]
        [System.Boolean]
        $updatesRequireAutomaticUpdates,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10TeamGeneralConfiguration,

        [Parameter()]
        [System.Boolean]
        $edgeBlockDeveloperTools,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockOnActionCenter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosUpdateConfiguration,

        [Parameter()]
        [System.Int32]
        $maintenanceWindowDurationInHours,

        [Parameter()]
        [System.Boolean]
        $miracastBlocked,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockPassbook,

        [Parameter()]
        [System.Boolean]
        $powerOffBlocked,

        [Parameter()]
        [System.Int32]
        $defenderScanMaxCpu,

        [Parameter()]
        [System.Byte[]]
        $payload,

        [Parameter()]
        [System.Boolean]
        $appStoreBlockUIAppInstallation,

        [Parameter()]
        [System.String]
        $assetTagTemplate,

        [Parameter()]
        [System.Boolean]
        $applicationGuardBlockNonEnterpriseContent,

        [Parameter()]
        [System.String]
        $defenderMonitorFileActivity,

        [Parameter()]
        [System.Boolean]
        $storageRequireMobileDeviceEncryption,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockThirdPartyNotifications,

        [Parameter()]
        [System.Boolean]
        $deviceSharingAllowed,

        [Parameter()]
        [System.Boolean]
        $passwordRequireWhenResumeFromIdleState,

        [Parameter()]
        [System.Boolean]
        $wifiBlockHotspotReporting,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockCrossProfileCopyPaste,

        [Parameter()]
        [System.Boolean]
        $bitLockerEncryptDevice,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockNotificationView,

        [Parameter()]
        [System.Int32]
        $passwordMinimumLength,

        [Parameter()]
        [System.Boolean]
        $windowsStoreEnablePrivateStoreOnly,

        [Parameter()]
        [System.Boolean]
        $spotlightBlockInternetResults,

        [Parameter()]
        [System.Boolean]
        $factoryResetBlocked,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintMopriaDiscoveryResourceIdentifier,

        [Parameter()]
        [System.Boolean]
        $settingsBlockRemoveProvisioningPackage,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPersistence,

        [Parameter()]
        [System.String]
        $welcomeScreenBackgroundImageUrl,

        [Parameter()]
        [System.Boolean]
        $appleNewsBlocked,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintOAuthClientIdentifier,

        [Parameter()]
        [System.Boolean]
        $appleWatchForceWristDetection,

        [Parameter()]
        [System.Boolean]
        $edgeBlockAddressBarDropdown,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireMonoAudio,

        [Parameter()]
        [System.Boolean]
        $wirelessDisplayBlockProjectionToThisDevice,

        [Parameter()]
        [System.Boolean]
        $miracastRequirePin,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockPredictive,

        [Parameter()]
        [System.Boolean]
        $bitLockerDisableWarningForOtherDiskEncryption,

        [Parameter()]
        [System.Boolean]
        $networkProxyApplySettingsDeviceWide,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Boolean]
        $startMenuHideFrequentlyUsedApps,

        [Parameter()]
        [System.Boolean]
        $classroomAppForceUnpromptedScreenObservation,

        [Parameter()]
        [System.String[]]
        $defenderGuardedFoldersAllowedAppPaths,

        [Parameter()]
        [System.Boolean]
        $hostPairingBlocked,

        [Parameter()]
        [System.Boolean]
        $kioskModeBlockSleepButton,

        [Parameter()]
        [System.Boolean]
        $locationServicesBlocked,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockConsumerSpecificFeatures,

        [Parameter()]
        [System.Object]
        $mediaContentRatingUnitedStates,

        [Parameter()]
        [System.TimeSpan]
        $activeHoursEnd,

        [Parameter()]
        [System.String]
        $deliveryOptimizationMode,

        [Parameter()]
        [System.Int32]
        $wiFiScanInterval,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPrintToLocalPrinters,

        [Parameter()]
        [System.String]
        $licenseType,

        [Parameter()]
        [System.Boolean]
        $allowScreenCapture,

        [Parameter()]
        [System.Boolean]
        $smartScreenEnableInShell,

        [Parameter()]
        [System.String]
        $productKey,

        [Parameter()]
        [System.Boolean]
        $defenderScanNetworkFiles,

        [Parameter()]
        [System.Boolean]
        $searchEnableRemoteQueries,

        [Parameter()]
        [System.Boolean]
        $definitionLookupBlocked,

        [Parameter()]
        [System.Object[]]
        $deviceStatuses,

        [Parameter()]
        [System.Boolean]
        $cellularBlockVoiceRoaming,

        [Parameter()]
        [System.String]
        $networkProxyAutomaticConfigurationUrl,

        [Parameter()]
        [System.Boolean]
        $settingsBlockUpdateSecurityPage,

        [Parameter()]
        [System.Object[]]
        $appsLaunchBlockList,

        [Parameter()]
        [System.Boolean]
        $passwordBlockFingerprintUnlock,

        [Parameter()]
        [System.String]
        $browserLoggingReportLocation,

        [Parameter()]
        [System.Boolean]
        $iCloudRequireEncryptedBackup,

        [Parameter()]
        [System.String]
        $defenderCloudBlockLevel,

        [Parameter()]
        [System.String]
        $passwordRequiredType,

        [Parameter()]
        [System.Boolean]
        $startMenuHideRecentlyAddedApps,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsPhone81GeneralConfiguration,

        [Parameter()]
        [System.Boolean]
        $settingsBlockTimeLanguagePage,

        [Parameter()]
        [System.Boolean]
        $searchBlockDiacritics,

        [Parameter()]
        [System.Int32]
        $passcodeMinutesOfInactivityBeforeLock,

        [Parameter()]
        [System.Boolean]
        $smartScreenBlockPromptOverrideForFiles,

        [Parameter()]
        [System.Int32]
        $settingsSleepTimeoutInMinutes,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockShortcuts,

        [Parameter()]
        [System.Int32]
        $passwordSignInFailureCountBeforeFactoryReset,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.Boolean]
        $storageRestrictAppDataToSystemVolume,

        [Parameter()]
        [System.Boolean]
        $googlePlayStoreBlocked,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordSignInFailureCountBeforeFactoryReset,

        [Parameter()]
        [System.Boolean]
        $deviceBlockEraseContentAndSettings,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockPhotoLibrary,

        [Parameter()]
        [System.Byte[]]
        $startMenuLayoutEdgeAssetsXml,

        [Parameter()]
        [System.Boolean]
        $edgeBlockJavaScript,

        [Parameter()]
        [System.String[]]
        $defenderProcessesToExclude,

        [Parameter()]
        [System.Boolean]
        $settingsBlockSettingsApp,

        [Parameter()]
        [System.Boolean]
        $microsoftAccountBlockSettingsSync,

        [Parameter()]
        [System.Boolean]
        $documentsBlockManagedDocumentsInUnmanagedApps,

        [Parameter()]
        [System.Object]
        $firewallProfilePublic,

        [Parameter()]
        [System.String]
        $edgeFirstRunUrl,

        [Parameter()]
        [System.Boolean]
        $experienceBlockErrorDialogWhenNoSIM,

        [Parameter()]
        [System.Boolean]
        $connectedDevicesServiceBlocked,

        [Parameter()]
        [System.Boolean]
        $activationLockAllowWhenSupervised,

        [Parameter()]
        [System.String]
        $miracastChannel,

        [Parameter()]
        [System.Boolean]
        $settingsBlockChangeSystemTime,

        [Parameter()]
        [System.Object]
        $mediaContentRatingJapan,

        [Parameter()]
        [System.String]
        $license,

        [Parameter()]
        [System.Boolean]
        $storageRequireDeviceEncryption,

        [Parameter()]
        [System.Boolean]
        $disablePowerPolicies,

        [Parameter()]
        [System.Boolean]
        $edgeBlockInPrivateBrowsing,

        [Parameter()]
        [System.Int32]
        $settingsDefaultVolume,

        [Parameter()]
        [System.Boolean]
        $startMenuHideChangeAccountSettings,

        [Parameter()]
        [System.String]
        $safeSearchFilter,

        [Parameter()]
        [System.String]
        $kioskAppDisplayName,

        [Parameter()]
        [System.Boolean]
        $networkProxyDisableAutoDetect,

        [Parameter()]
        [System.Boolean]
        $passwordRequired,

        [Parameter()]
        [System.Boolean]
        $settingsBlockSigninSuggestions,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowTouchscreen,

        [Parameter()]
        [System.Boolean]
        $edgeBlockLiveTileDataCollection,

        [Parameter()]
        [System.Int32]
        $enterpriseCloudPrintDiscoveryMaxLimit,

        [Parameter()]
        [System.Boolean]
        $messagesBlocked,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinNonLetterCharacters,

        [Parameter()]
        [System.Boolean]
        $certificatesBlockUntrustedTlsCertificates,

        [Parameter()]
        [System.Boolean]
        $uninstallBuiltInApps,

        [Parameter()]
        [System.String]
        $defenderExploitProtectionXmlFileName,

        [Parameter()]
        [System.String]
        $privacyAdvertisingId,

        [Parameter()]
        [System.String]
        $prereleaseFeatures,

        [Parameter()]
        [System.Int32]
        $passwordMinutesOfInactivityBeforeLock,

        [Parameter()]
        [System.Boolean]
        $searchDisableIndexingRemovableDrive,

        [Parameter()]
        [System.Boolean]
        $browserRequireHighSecurityForRestrictedSites,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidWorkProfileCustomConfiguration,

        [Parameter()]
        [System.Boolean]
        $appStoreRequirePassword,

        [Parameter()]
        [System.String]
        $developerUnlockSetting,

        [Parameter()]
        [System.Boolean]
        $passcodeBlockModification,

        [Parameter()]
        [System.Boolean]
        $appsBlockYouTube,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockCrossProfileContactsSearch,

        [Parameter()]
        [System.Object[]]
        $appsHideList,

        [Parameter()]
        [System.DateTimeOffset]
        $qualityUpdatesPauseExpiryDateTime,

        [Parameter()]
        [System.Object[]]
        $networkUsageRules,

        [Parameter()]
        [System.Boolean]
        $wiFiConnectOnlyToConfiguredNetworks,

        [Parameter()]
        [System.Boolean]
        $cellularBlockDataRoaming,

        [Parameter()]
        [System.Boolean]
        $safariRequireFraudWarning,

        [Parameter()]
        [System.Boolean]
        $disableSignInOnResume,

        [Parameter()]
        [System.Int32]
        $firewallIdleTimeoutForSecurityAssociationInSeconds,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowRingerSwitch,

        [Parameter()]
        [System.Boolean]
        $qualityUpdatesPaused,

        [Parameter()]
        [System.Boolean]
        $webBrowserBlockPopups,

        [Parameter()]
        [System.Boolean]
        $edgeBlockSendingDoNotTrackHeader,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlockAdvertising,

        [Parameter()]
        [System.Object[]]
        $homeScreenPages,

        [Parameter()]
        [System.Boolean]
        $browserBlockJavaScript,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockWelcomeExperience,

        [Parameter()]
        [System.Boolean]
        $cellularBlockVpn,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderPictures,

        [Parameter()]
        [System.Boolean]
        $safariBlockAutofill,

        [Parameter()]
        [System.DateTimeOffset]
        $featureUpdatesPauseExpiryDateTime,

        [Parameter()]
        [System.String]
        $safariCookieSettings,

        [Parameter()]
        [System.Boolean]
        $accountsBlockAddingNonMicrosoftAccountEmail,

        [Parameter()]
        [System.String]
        $windowsSpotlightConfigureOnLockScreen,

        [Parameter()]
        [System.String]
        $kioskModeAppStoreUrl,

        [Parameter()]
        [System.Int32]
        $passwordExpirationDays,

        [Parameter()]
        [System.Object]
        $mediaContentRatingIreland,

        [Parameter()]
        [System.Boolean]
        $voiceDialingBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsDefenderAdvancedThreatProtectionConfiguration,

        [Parameter()]
        [System.Boolean]
        $iBooksStoreBlocked,

        [Parameter()]
        [System.Boolean]
        $cellularBlockPersonalHotspot,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10EndpointProtectionConfiguration,

        [Parameter()]
        [System.Boolean]
        $wiFiBlockManualConfiguration,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockWindowsTips,

        [Parameter()]
        [System.String]
        $payloadFileName,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinutesOfInactivityBeforeScreenTimeout,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockCrossProfileCallerId,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowVoiceOverSettings,

        [Parameter()]
        [System.Boolean]
        $settingsBlockAppsPage,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockToastNotifications,

        [Parameter()]
        [System.Boolean]
        $disableEduPolicies,

        [Parameter()]
        [System.Boolean]
        $internetSharingBlocked,

        [Parameter()]
        [System.Boolean]
        $iBooksStoreBlockErotica,

        [Parameter()]
        [System.Int32]
        $passcodeMinimumLength,

        [Parameter()]
        [System.Boolean]
        $defenderScanRemovableDrivesDuringFullScan,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlocked,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlockModification,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinSymbolCharacters,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10SecureAssessmentConfiguration,

        [Parameter()]
        [System.Boolean]
        $wirelessDisplayRequirePinForPairing,

        [Parameter()]
        [System.Boolean]
        $edgeBlockCompatibilityList,

        [Parameter()]
        [System.Boolean]
        $gamingBlockMultiplayer,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockControlCenter,

        [Parameter()]
        [System.Boolean]
        $sharedUserAppDataAllowed,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsUpdateForBusinessConfiguration,

        [Parameter()]
        [System.Boolean]
        $webBrowserBlockAutofill,

        [Parameter()]
        [System.Boolean]
        $defenderScanScriptsLoadedInInternetExplorer,

        [Parameter()]
        [System.Boolean]
        $settingsBlockAddProvisioningPackage,

        [Parameter()]
        [System.Boolean]
        $searchEnableAutomaticIndexSizeManangement,

        [Parameter()]
        [System.Boolean]
        $tenantLockdownRequireNetworkDuringOutOfBoxExperience,

        [Parameter()]
        [System.Boolean]
        $microsoftUpdateServiceAllowed,

        [Parameter()]
        [System.Object]
        $mediaContentRatingGermany,

        [Parameter()]
        [System.String]
        $kioskAppUserModelId,

        [Parameter()]
        [System.Boolean]
        $defenderScanIncomingMail,

        [Parameter()]
        [System.Boolean]
        $windowsStoreBlockAutoUpdate,

        [Parameter()]
        [System.Boolean]
        $settingsBlockChangePowerSleep,

        [Parameter()]
        [System.String[]]
        $defenderFilesAndFoldersToExclude,

        [Parameter()]
        [System.Boolean]
        $wifiBlocked,

        [Parameter()]
        [System.Object[]]
        $userStatuses,

        [Parameter()]
        [System.Boolean]
        $deviceBlockEnableRestrictions,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Boolean]
        $allowTextSuggestion,

        [Parameter()]
        [System.Boolean]
        $featureUpdatesPaused,

        [Parameter()]
        [System.Boolean]
        $defenderRequireBehaviorMonitoring,

        [Parameter()]
        [System.String]
        $allowedAccounts,

        [Parameter()]
        [System.Boolean]
        $settingsBlockSessionResume,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockTodayView,

        [Parameter()]
        [System.Boolean]
        $connectAppBlockAutoLaunch,

        [Parameter()]
        [System.Boolean]
        $startMenuHideSwitchAccount,

        [Parameter()]
        [System.Boolean]
        $workProfileBluetoothEnableContactSharing,

        [Parameter()]
        [System.Object[]]
        $omaSettings,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowAssistiveSpeak,

        [Parameter()]
        [System.Boolean]
        $antiTheftModeBlocked,

        [Parameter()]
        [System.Boolean]
        $safariBlockPopups,

        [Parameter()]
        [System.Boolean]
        $edgeSendIntranetTrafficToInternetExplorer,

        [Parameter()]
        [System.Boolean]
        $logonBlockFastUserSwitching,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockDictation,

        [Parameter()]
        [System.Boolean]
        $airPlayForcePairingPasswordForOutgoingRequests,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowVolumeButtons,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows81GeneralConfiguration,

        [Parameter()]
        [System.Boolean]
        $iTunesBlockRadio,

        [Parameter()]
        [System.Boolean]
        $defenderRequireRealTimeMonitoring,

        [Parameter()]
        [System.Boolean]
        $certificatesBlockManualRootCertificateInstallation,

        [Parameter()]
        [System.Boolean]
        $allowSampleSharing,

        [Parameter()]
        [System.Boolean]
        $welcomeScreenBlockAutomaticWakeUp,

        [Parameter()]
        [System.Boolean]
        $privacyBlockInputPersonalization,

        [Parameter()]
        [System.String]
        $welcomeScreenMeetingInformation,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderDocuments,

        [Parameter()]
        [System.String]
        $firewallCertificateRevocationListCheckMethod,

        [Parameter()]
        [System.String]
        $workFoldersUrl,

        [Parameter()]
        [System.Boolean]
        $deviceManagementBlockManualUnenroll,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlockPrePairing,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSGeneralDeviceConfiguration,

        [Parameter()]
        [System.Boolean]
        $storageRequireRemovableStorageEncryption,

        [Parameter()]
        [System.String]
        $defenderScanType,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowZoomSettings,

        [Parameter()]
        [System.Boolean]
        $findMyFriendsBlocked,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinNumericCharacters,

        [Parameter()]
        [System.String]
        $kioskModeManagedAppId,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockBackup,

        [Parameter()]
        [System.Boolean]
        $safariBlocked,

        [Parameter()]
        [System.Boolean]
        $edgeAllowStartPagesModification,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $editionUpgradeConfiguration,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockScreenCapture,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderFileExplorer,

        [Parameter()]
        [System.String[]]
        $safariPasswordAutoFillDomains,

        [Parameter()]
        [System.Boolean]
        $edgeBlockExtensions,

        [Parameter()]
        [System.Boolean]
        $windowsStoreBlocked,

        [Parameter()]
        [System.Boolean]
        $settingsBlockSystemPage,

        [Parameter()]
        [System.String]
        $personalizationLockScreenImageUrl,

        [Parameter()]
        [System.Boolean]
        $diagnosticDataBlockSubmission,

        [Parameter()]
        [System.Boolean]
        $searchDisableAutoLanguageDetection,

        [Parameter()]
        [System.Boolean]
        $defenderBlockEndUserAccess,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinimumLength,

        [Parameter()]
        [System.Boolean]
        $edgeBlockSearchSuggestions,

        [Parameter()]
        [System.Boolean]
        $siriBlockedWhenLocked,

        [Parameter()]
        [System.Boolean]
        $bitLockerEnableStorageCardEncryptionOnMobile,

        [Parameter()]
        [System.String]
        $lockScreenFootnote,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10CustomConfiguration,

        [Parameter()]
        [System.Boolean]
        $wirelessDisplayBlockUserInputFromReceiver,

        [Parameter()]
        [System.Boolean]
        $edgeClearBrowsingDataOnExit,

        [Parameter()]
        [System.Int32]
        $settingsScreenTimeoutInMinutes,

        [Parameter()]
        [System.String]
        $personalizationDesktopImageUrl,

        [Parameter()]
        [System.Int32]
        $defenderSignatureUpdateIntervalInHours,

        [Parameter()]
        [System.Boolean]
        $experienceBlockTaskSwitcher,

        [Parameter()]
        [System.Boolean]
        $passwordBlockSimple,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowScreenRotation,

        [Parameter()]
        [System.Object]
        $bitLockerRemovableDrivePolicy,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireColorInversion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidGeneralDeviceConfiguration,

        [Parameter()]
        [System.String]
        $azureOperationalInsightsWorkspaceKey,

        [Parameter()]
        [System.Boolean]
        $iTunesBlockMusicService,

        [Parameter()]
        [System.Int32]
        $utcTimeOffsetInMinutes,

        [Parameter()]
        [System.Object]
        $defenderDetectedMalwareActions,

        [Parameter()]
        [System.Boolean]
        $defenderSecurityCenterBlockExploitProtectionOverride,

        [Parameter()]
        [System.Boolean]
        $edgeBlocked,

        [Parameter()]
        [System.TimeSpan]
        $maintenanceStartTime,

        [Parameter()]
        [System.Boolean]
        $edgeBlockPopups,

        [Parameter()]
        [System.Boolean]
        $defenderScanMappedNetworkDrivesDuringFullScan,

        [Parameter()]
        [System.Boolean]
        $passwordBlockTrustAgents,

        [Parameter()]
        [System.Object]
        $mediaContentRatingNewZealand,

        [Parameter()]
        [System.Boolean]
        $nfcBlocked,

        [Parameter()]
        [System.Boolean]
        $deviceManagementBlockFactoryResetOnMobile,

        [Parameter()]
        [System.String]
        $configurationAccount,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordPreviousPasswordBlockCount,

        [Parameter()]
        [System.Boolean]
        $workProfilePasswordBlockFingerprintUnlock,

        [Parameter()]
        [System.Int32]
        $passcodeExpirationDays,

        [Parameter()]
        [System.Boolean]
        $diagnosticDataBlockSubmissionModification,

        [Parameter()]
        [System.Boolean]
        $gamingBlockGameCenterFriends,

        [Parameter()]
        [System.Boolean]
        $defenderRequireNetworkInspectionSystem,

        [Parameter()]
        [System.Boolean]
        $cellularBlockDataWhenRoaming,

        [Parameter()]
        [System.Boolean]
        $copyPasteBlocked,

        [Parameter()]
        [System.Boolean]
        $enterpriseAppBlockTrustModification,

        [Parameter()]
        [System.Boolean]
        $storageRestrictAppInstallToSystemVolume,

        [Parameter()]
        [System.String]
        $launchUri,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowSleepButton,

        [Parameter()]
        [System.Byte[]]
        $defenderExploitProtectionXml,

        [Parameter()]
        [System.Boolean]
        $wallpaperBlockModification,

        [Parameter()]
        [System.Int32]
        $passcodeMinutesOfInactivityBeforeScreenTimeout,

        [Parameter()]
        [System.Boolean]
        $iTunesBlockExplicitContent,

        [Parameter()]
        [System.Boolean]
        $voiceRecordingBlocked,

        [Parameter()]
        [System.Object[]]
        $kioskModeApps,

        [Parameter()]
        [System.Boolean]
        $browserBlockPlugins,

        [Parameter()]
        [System.Boolean]
        $passcodeBlockFingerprintModification,

        [Parameter()]
        [System.Boolean]
        $applicationGuardForceAuditing,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSDeviceFeaturesConfiguration,

        [Parameter()]
        [System.Boolean]
        $browserRequireFirewall,

        [Parameter()]
        [System.Boolean]
        $securityRequireVerifyApps,

        [Parameter()]
        [System.Boolean]
        $enabled,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockSharedPhotoStream,

        [Parameter()]
        [System.Boolean]
        $startMenuHideRestartOptions,

        [Parameter()]
        [System.Boolean]
        $allowLocalStorage,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockAutoCorrect,

        [Parameter()]
        [System.Boolean]
        $applicationGuardEnabled,

        [Parameter()]
        [System.Boolean]
        $firewallMergeKeyingModuleSettings,

        [Parameter()]
        [System.Boolean]
        $browserBlockSendingDoNotTrackHeader,

        [Parameter()]
        [System.Boolean]
        $settingsBlockGamingPage,

        [Parameter()]
        [System.Boolean]
        $screenCaptureBlocked,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderSettings,

        [Parameter()]
        [System.Boolean]
        $siriBlocked,

        [Parameter()]
        [System.String]
        $appLockerApplicationControl,

        [Parameter()]
        [System.Boolean]
        $kioskModeBlockVolumeButtons,

        [Parameter()]
        [System.Boolean]
        $settingsBlockPrivacyPage,

        [Parameter()]
        [System.Boolean]
        $keyboardBlockSpellCheck,

        [Parameter()]
        [System.Boolean]
        $passcodeRequired,

        [Parameter()]
        [System.Boolean]
        $cameraBlocked,

        [Parameter()]
        [System.String]
        $businessReadyUpdatesOnly,

        [Parameter()]
        [System.Boolean]
        $webBrowserBlocked,

        [Parameter()]
        [System.Int32]
        $idleTimeBeforeSleepInSeconds,

        [Parameter()]
        [System.String]
        $applicationGuardBlockClipboardSharing,

        [Parameter()]
        [System.Int32]
        $featureUpdatesDeferralPeriodInDays,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Boolean]
        $startBlockUnpinningAppsFromTaskbar,

        [Parameter()]
        [System.String]
        $azureOperationalInsightsWorkspaceId,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderNetwork,

        [Parameter()]
        [System.Boolean]
        $lockScreenAllowTimeoutConfiguration,

        [Parameter()]
        [System.String[]]
        $edgeHomepageUrls,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowAssistiveTouchSettings,

        [Parameter()]
        [System.String]
        $startMenuAppListVisibility,

        [Parameter()]
        [System.Boolean]
        $cellularBlockPerAppDataModification,

        [Parameter()]
        [System.Boolean]
        $browserBlockAutofill,

        [Parameter()]
        [System.Boolean]
        $edgeBlockSendingIntranetTrafficToInternetExplorer,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordExpirationDays,

        [Parameter()]
        [System.Boolean]
        $startMenuHidePowerButton,

        [Parameter()]
        [System.Boolean]
        $settingsBlockEditDeviceName,

        [Parameter()]
        [System.Boolean]
        $startMenuHideSignOut,

        [Parameter()]
        [System.Boolean]
        $privacyAutoAcceptPairingAndConsentPrompts,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockCortana,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10GeneralConfiguration,

        [Parameter()]
        [System.Boolean]
        $settingsBlockEaseOfAccessPage,

        [Parameter()]
        [System.Boolean]
        $driversExcluded,

        [Parameter()]
        [System.Int32]
        $qualityUpdatesDeferralPeriodInDays,

        [Parameter()]
        [System.Boolean]
        $settingsBlockDevicesPage,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockCamera,

        [Parameter()]
        [System.Object]
        $firewallProfileDomain,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderDownloads,

        [Parameter()]
        [System.String]
        $passcodeRequiredType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windows10EnterpriseModernAppManagementConfiguration,

        [Parameter()]
        [System.Boolean]
        $accountBlockModification,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $sharedPCConfiguration,

        [Parameter()]
        [System.Boolean]
        $edgeDisableFirstRunPage,

        [Parameter()]
        [System.Object[]]
        $homeScreenDockIcons,

        [Parameter()]
        [System.Boolean]
        $notificationsBlockSettingsModification,

        [Parameter()]
        [System.Boolean]
        $firewallIPSecExemptionsAllowICMP,

        [Parameter()]
        [System.Int32]
        $passcodeMinimumCharacterSetCount,

        [Parameter()]
        [System.Boolean]
        $deviceBlockNameModification,

        [Parameter()]
        [System.Object]
        $firewallProfilePrivate,

        [Parameter()]
        [System.String[]]
        $emailInDomainSuffixes,

        [Parameter()]
        [System.Boolean]
        $appleWatchBlockPairing,

        [Parameter()]
        [System.String]
        $diagnosticsDataSubmissionMode,

        [Parameter()]
        [System.Boolean]
        $smartScreenEnableAppInstallControl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsPhone81CustomConfiguration,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintResourceIdentifier,

        [Parameter()]
        [System.Boolean]
        $startMenuHideHibernate,

        [Parameter()]
        [System.String[]]
        $scheduledInstallDays,

        [Parameter()]
        [System.String]
        $edgeCookiePolicy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosCustomConfiguration,

        [Parameter()]
        [System.TimeSpan]
        $defenderScheduledQuickScanTime,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireVoiceOver,

        [Parameter()]
        [System.Boolean]
        $appsBlockWindowsStoreOriginatedApps,

        [Parameter()]
        [System.Int32]
        $passwordMinimumCharacterSetCount,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockAddingAccounts,

        [Parameter()]
        [System.Boolean]
        $passcodeBlockFingerprintUnlock,

        [Parameter()]
        [System.Boolean]
        $defenderRequireCloudProtection,

        [Parameter()]
        [System.Boolean]
        $azureOperationalInsightsBlockTelemetry,

        [Parameter()]
        [System.String[]]
        $defenderAdditionalGuardedFolders,

        [Parameter()]
        [System.String]
        $defenderPromptForSampleSubmission,

        [Parameter()]
        [System.Boolean]
        $workProfileBlockNotificationsWhileDeviceLocked,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockManagedAppsSync,

        [Parameter()]
        [System.String]
        $targetEdition,

        [Parameter()]
        [System.Boolean]
        $configurationProfileBlockChanges,

        [Parameter()]
        [System.Boolean]
        $faceTimeBlocked,

        [Parameter()]
        [System.Boolean]
        $smartScreenBlockOverrideForFiles,

        [Parameter()]
        [System.Object[]]
        $notificationSettings,

        [Parameter()]
        [System.Boolean]
        $startMenuHideUserTile,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockPhotoStreamSync,

        [Parameter()]
        [System.String[]]
        $defenderAttackSurfaceReductionExcludedPaths,

        [Parameter()]
        [System.Int32]
        $defenderDaysBeforeDeletingQuarantinedMalware,

        [Parameter()]
        [System.Boolean]
        $wifiBlockAutomaticConnectHotspots,

        [Parameter()]
        [System.Object]
        $accountManagerPolicy,

        [Parameter()]
        [System.TimeSpan]
        $maintenanceWindowStartTime,

        [Parameter()]
        [System.String]
        $defenderSystemScanSchedule,

        [Parameter()]
        [System.Boolean]
        $browserBlockAutomaticDetectionOfIntranetSites,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPrintToXPS,

        [Parameter()]
        [System.Boolean]
        $appsBlockClipboardSharing,

        [Parameter()]
        [System.String[]]
        $safariManagedDomains,

        [Parameter()]
        [System.Boolean]
        $storageBlockRemovableStorage,

        [Parameter()]
        [System.Boolean]
        $siriBlockUserGeneratedContent,

        [Parameter()]
        [System.Boolean]
        $cellularBlockWifiTethering,

        [Parameter()]
        [System.Boolean]
        $startMenuHideLock,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSCustomConfiguration,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintOAuthAuthority,

        [Parameter()]
        [System.String]
        $edgeEnterpriseModeSiteListLocation,

        [Parameter()]
        [System.String]
        $kioskModeBuiltInAppId,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinLowerCaseCharacters,

        [Parameter()]
        [System.Boolean]
        $podcastsBlocked,

        [Parameter()]
        [System.Object[]]
        $deviceSettingStateSummaries,

        [Parameter()]
        [System.Boolean]
        $storageBlockGoogleBackup,

        [Parameter()]
        [System.Boolean]
        $settingsBlockMyMeetingsAndFiles,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockActivityContinuation,

        [Parameter()]
        [System.Boolean]
        $firewallIPSecExemptionsAllowNeighborDiscovery,

        [Parameter()]
        [System.String]
        $workProfileDefaultAppPermissionPolicy,

        [Parameter()]
        [System.Object]
        $userStatusOverview,

        [Parameter()]
        [System.Boolean]
        $iCloudBlockDocumentSync,

        [Parameter()]
        [System.Boolean]
        $safariBlockJavaScript,

        [Parameter()]
        [System.TimeSpan]
        $defenderScheduledScanTime,

        [Parameter()]
        [System.Boolean]
        $gameDvrBlocked,

        [Parameter()]
        [System.Boolean]
        $voiceAssistantBlocked,

        [Parameter()]
        [System.Boolean]
        $searchDisableIndexerBackoff,

        [Parameter()]
        [System.Object[]]
        $compliantAppsList,

        [Parameter()]
        [System.Boolean]
        $googleAccountBlockAutoSync,

        [Parameter()]
        [System.Boolean]
        $passwordBlockPicturePasswordAndPin,

        [Parameter()]
        [System.Boolean]
        $settingsBlockPersonalizationPage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosDeviceFeaturesConfiguration,

        [Parameter()]
        [System.Boolean]
        $usbBlocked,

        [Parameter()]
        [System.Boolean]
        $firewallBlockStatefulFTP,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlockTailoredExperiences,

        [Parameter()]
        [System.String[]]
        $defenderFileExtensionsToExclude,

        [Parameter()]
        [System.Boolean]
        $searchDisableIndexingEncryptedItems,

        [Parameter()]
        [System.TimeSpan]
        $activeHoursStart,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinLetterCharacters,

        [Parameter()]
        [System.Boolean]
        $webRtcBlockLocalhostIpAddress,

        [Parameter()]
        [System.Boolean]
        $browserRequireSmartScreen,

        [Parameter()]
        [System.Boolean]
        $kioskModeAllowColorInversionSettings,

        [Parameter()]
        [System.Boolean]
        $passcodeBlockSimple,

        [Parameter()]
        [System.Object]
        $mediaContentRatingFrance,

        [Parameter()]
        [System.Boolean]
        $emailBlockAddingAccounts,

        [Parameter()]
        [System.String]
        $applicationGuardBlockFileTransfer,

        [Parameter()]
        [System.String]
        $enterpriseCloudPrintDiscoveryEndPoint,

        [Parameter()]
        [System.Boolean]
        $allowPrinting,

        [Parameter()]
        [System.Boolean]
        $settingsBlockChangeRegion,

        [Parameter()]
        [System.Boolean]
        $edgeSyncFavoritesWithInternetExplorer,

        [Parameter()]
        [System.Boolean]
        $settingsBlockAccountsPage,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPrintToNetworkPrinters,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireAssistiveTouch,

        [Parameter()]
        [System.Boolean]
        $cellularBlockGlobalBackgroundFetchWhileRoaming,

        [Parameter()]
        [System.Boolean]
        $storageRequireEncryption,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderVideos,

        [Parameter()]
        [System.String]
        $browserTrustedSitesSecurityLevel,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.Boolean]
        $microsoftAccountBlocked,

        [Parameter()]
        [System.Boolean]
        $edgeBlockPasswordManager,

        [Parameter()]
        [System.String]
        $payloadName,

        [Parameter()]
        [System.Boolean]
        $windowsSpotlightBlocked,

        [Parameter()]
        [System.String]
        $workProfileDataSharingType,

        [Parameter()]
        [System.Boolean]
        $experienceBlockDeviceDiscovery,

        [Parameter()]
        [System.String]
        $browserEnterpriseModeSiteListLocation,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderHomeGroup,

        [Parameter()]
        [System.Object]
        $mediaContentRatingAustralia,

        [Parameter()]
        [System.Object]
        $installationSchedule,

        [Parameter()]
        [System.Boolean]
        $enableExpeditedTelemetryReporting,

        [Parameter()]
        [System.String]
        $browserInternetSecurityLevel,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderPersonalFolder,

        [Parameter()]
        [System.String]
        $compliantAppListType,

        [Parameter()]
        [System.Boolean]
        $smartScreenBlockPromptOverride,

        [Parameter()]
        [System.Boolean]
        $cellularBlockVpnWhenRoaming,

        [Parameter()]
        [System.Boolean]
        $startMenuHideShutDown,

        [Parameter()]
        [System.Boolean]
        $appsBlockCopyPaste,

        [Parameter()]
        [System.Int32]
        $passwordPreviousPasswordBlockCount,

        [Parameter()]
        [System.Boolean]
        $airDropForceUnmanagedDropTarget,

        [Parameter()]
        [System.Int32]
        $passcodeSignInFailureCountBeforeWipe,

        [Parameter()]
        [System.String[]]
        $bluetoothAllowedServices,

        [Parameter()]
        [System.Object[]]
        $appsInstallAllowList,

        [Parameter()]
        [System.Object]
        $deviceStatusOverview,

        [Parameter()]
        [System.Boolean]
        $browserRequireFraudWarning,

        [Parameter()]
        [System.Boolean]
        $defenderScanArchiveFiles,

        [Parameter()]
        [System.Boolean]
        $browserBlockPopups,

        [Parameter()]
        [System.Boolean]
        $startMenuHideSleep,

        [Parameter()]
        [System.String]
        $firewallPacketQueueingMethod,

        [Parameter()]
        [System.Boolean]
        $appStoreBlocked,

        [Parameter()]
        [System.Boolean]
        $siriRequireProfanityFilter,

        [Parameter()]
        [System.Object]
        $networkProxyServer,

        [Parameter()]
        [System.Object[]]
        $appsVisibilityList,

        [Parameter()]
        [System.Boolean]
        $lockScreenBlockActionCenterNotifications,

        [Parameter()]
        [System.Boolean]
        $kioskModeRequireZoom,

        [Parameter()]
        [System.String]
        $webBrowserCookieSettings,

        [Parameter()]
        [System.Boolean]
        $browserBlockEnterpriseModeAccess,

        [Parameter()]
        [System.Int32]
        $settingsSessionTimeoutInMinutes,

        [Parameter()]
        [System.String]
        $mediaContentRatingApps,

        [Parameter()]
        [System.Object]
        $mediaContentRatingUnitedKingdom,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidWorkProfileGeneralDeviceConfiguration,

        [Parameter()]
        [System.Boolean]
        $edgeRequireSmartScreen,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $maintenanceWindowBlocked,

        [Parameter()]
        [System.Boolean]
        $gameCenterBlocked,

        [Parameter()]
        [System.Int32]
        $lockScreenTimeoutInSeconds,

        [Parameter()]
        [System.Boolean]
        $cortanaBlocked,

        [Parameter()]
        [System.Boolean]
        $defenderScanDownloads,

        [Parameter()]
        [System.Boolean]
        $applicationGuardAllowPrintToPDF,

        [Parameter()]
        [System.String]
        $startMenuPinnedFolderMusic,

        [Parameter()]
        [System.Int32]
        $workProfilePasswordMinUpperCaseCharacters,

        [Parameter()]
        [System.String]
        $workProfilePasswordRequiredType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosGeneralDeviceConfiguration,

        [Parameter()]
        [System.Boolean]
        $webBrowserBlockJavaScript,

        [Parameter()]
        [System.Boolean]
        $documentsBlockUnmanagedDocumentsInManagedApps,

        [Parameter()]
        [System.Int32]
        $passcodePreviousPasscodeBlockCount,

        [Parameter()]
        [System.Boolean]
        $classroomAppBlockRemoteScreenObservation,

        [Parameter()]
        [System.Object]
        $mediaContentRatingCanada,

        [Parameter()]
        [System.String]
        $browserIntranetSecurityLevel,

        [Parameter()]
        [System.Boolean]
        $bluetoothBlockDiscoverableMode,

        [Parameter()]
        [System.String]
        $startMenuMode,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $automaticUpdateMode,

        [Parameter()]
        [System.Boolean]
        $enterpriseAppBlockTrust,

        [Parameter()]
        [System.Boolean]
        $workProfilePasswordBlockTrustAgents,

        [Parameter()]
        [System.Boolean]
        $diagnosticsBlockDataSubmission,

        [Parameter()]
        [System.Boolean]
        $cellularBlockMessaging,

        [Parameter()]
        [System.Boolean]
        $disableAccountManager,

        [Parameter()]
        [System.Boolean]
        $appStoreBlockAutomaticDownloads
    )
}
function Update-IntuneDeviceConfigurationPolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.String]
        $deviceConfigurationAssignmentId,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-IntuneDeviceConfigurationPolicyDeviceSettingStateSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $conflictDeviceCount,

        [Parameter()]
        [System.String]
        $settingName,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.Int32]
        $remediatedDeviceCount,

        [Parameter()]
        [System.String]
        $instancePath,

        [Parameter()]
        [System.Int32]
        $nonCompliantDeviceCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $settingStateDeviceSummaryId,

        [Parameter()]
        [System.Int32]
        $unknownDeviceCount,

        [Parameter()]
        [System.Int32]
        $notApplicableDeviceCount,

        [Parameter()]
        [System.Int32]
        $compliantDeviceCount,

        [Parameter()]
        [System.Int32]
        $errorDeviceCount
    )
}
function Update-IntuneDeviceConfigurationPolicyDeviceStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $deviceConfigurationDeviceStatusId,

        [Parameter()]
        [System.String]
        $deviceModel,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.String]
        $deviceDisplayName,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime
    )
}
function Update-IntuneDeviceConfigurationPolicyDeviceStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.Int32]
        $failedCount,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime
    )
}
function Update-IntuneDeviceConfigurationPolicyUserStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.String]
        $deviceConfigurationUserStatusId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $devicesCount,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.String]
        $status
    )
}
function Update-IntuneDeviceConfigurationPolicyUserStatusOverview
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.Int32]
        $failedCount,

        [Parameter()]
        [System.String]
        $deviceConfigurationId,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime
    )
}
function Update-IntuneDeviceEnrollmentConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Boolean]
        $unlockWithBiometricsEnabled,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object]
        $windowsRestriction,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceEnrollmentPlatformRestrictionsConfiguration,

        [Parameter()]
        [System.Boolean]
        $remotePassportEnabled,

        [Parameter()]
        [System.Boolean]
        $securityDeviceRequired,

        [Parameter()]
        [System.Int32]
        $pinPreviousBlockCount,

        [Parameter()]
        [System.Int32]
        $priority,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceEnrollmentLimitConfiguration,

        [Parameter()]
        [System.Object]
        $androidRestriction,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.Object]
        $windowsMobileRestriction,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.Object]
        $macOSRestriction,

        [Parameter()]
        [System.Int32]
        $pinExpirationInDays,

        [Parameter()]
        [System.Int32]
        $pinMaximumLength,

        [Parameter()]
        [System.String]
        $pinLowercaseCharactersUsage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceEnrollmentWindowsHelloForBusinessConfiguration,

        [Parameter()]
        [System.Int32]
        $pinMinimumLength,

        [Parameter()]
        [System.String]
        $deviceEnrollmentConfigurationId,

        [Parameter()]
        [System.String]
        $pinSpecialCharactersUsage,

        [Parameter()]
        [System.String]
        $pinUppercaseCharactersUsage,

        [Parameter()]
        [System.Int32]
        $limit,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $iosRestriction,

        [Parameter()]
        [System.String]
        $enhancedBiometricsState
    )
}
function Update-IntuneDeviceEnrollmentConfigurationAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $enrollmentConfigurationAssignmentId,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $deviceEnrollmentConfigurationId,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-IntuneDeviceManagement
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $deviceCategories,

        [Parameter()]
        [System.Object]
        $applePushNotificationCertificate,

        [Parameter()]
        [System.Object[]]
        $deviceManagementPartners,

        [Parameter()]
        [System.Object[]]
        $termsAndConditions,

        [Parameter()]
        [System.Object]
        $settings,

        [Parameter()]
        [System.Object[]]
        $windowsInformationProtectionNetworkLearningSummaries,

        [Parameter()]
        [System.String]
        $subscriptionState,

        [Parameter()]
        [System.Object]
        $deviceCompliancePolicyDeviceStateSummary,

        [Parameter()]
        [System.Object]
        $intuneBrand,

        [Parameter()]
        [System.Object[]]
        $troubleshootingEvents,

        [Parameter()]
        [System.Object]
        $deviceConfigurationDeviceStateSummaries,

        [Parameter()]
        [System.Object[]]
        $roleDefinitions,

        [Parameter()]
        [System.Object[]]
        $telecomExpenseManagementPartners,

        [Parameter()]
        [System.Object]
        $managedDeviceOverview,

        [Parameter()]
        [System.Object]
        $softwareUpdateStatusSummary,

        [Parameter()]
        [System.Object[]]
        $managedDevices,

        [Parameter()]
        [System.Object[]]
        $notificationMessageTemplates,

        [Parameter()]
        [System.Object[]]
        $roleAssignments,

        [Parameter()]
        [System.Object[]]
        $resourceOperations,

        [Parameter()]
        [System.Object[]]
        $deviceCompliancePolicies,

        [Parameter()]
        [System.Object[]]
        $windowsInformationProtectionAppLearningSummaries,

        [Parameter()]
        [System.Object[]]
        $remoteAssistancePartners,

        [Parameter()]
        [System.Object[]]
        $exchangeConnectors,

        [Parameter()]
        [System.Object[]]
        $iosUpdateStatuses,

        [Parameter()]
        [System.Object[]]
        $mobileThreatDefenseConnectors,

        [Parameter()]
        [System.Object]
        $conditionalAccessSettings,

        [Parameter()]
        [System.Object[]]
        $deviceConfigurations,

        [Parameter()]
        [System.Object[]]
        $detectedApps,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $deviceEnrollmentConfigurations,

        [Parameter()]
        [System.Object[]]
        $deviceCompliancePolicySettingStateSummaries
    )
}
function Update-IntuneDeviceManagementPartner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $deviceManagementPartnerId,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.DateTimeOffset]
        $whenPartnerDevicesWillBeRemovedDateTime,

        [Parameter()]
        [System.String]
        $partnerAppType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $partnerState,

        [Parameter()]
        [System.Boolean]
        $isConfigured,

        [Parameter()]
        [System.String]
        $singleTenantAppId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastHeartbeatDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $whenPartnerDevicesWillBeMarkedAsNonCompliantDateTime
    )
}
function Update-IntuneExchangeConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $exchangeAlias,

        [Parameter()]
        [System.String]
        $serverName,

        [Parameter()]
        [System.String]
        $exchangeConnectorType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $primarySmtpAddress,

        [Parameter()]
        [System.String]
        $deviceManagementExchangeConnectorId,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $exchangeOrganization,

        [Parameter()]
        [System.String]
        $connectorServerName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.String]
        $status
    )
}
function Update-IntuneIosUpdateStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $installStatus,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $deviceId,

        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.String]
        $deviceModel,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.String]
        $deviceDisplayName,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime,

        [Parameter()]
        [System.String]
        $iosUpdateDeviceStatusId
    )
}
function Update-IntuneLocalizedNotificationMessage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $notificationMessageTemplateId,

        [Parameter()]
        [System.String]
        $subject,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $localizedNotificationMessageId,

        [Parameter()]
        [System.String]
        $messageTemplate,

        [Parameter()]
        [System.String]
        $locale,

        [Parameter()]
        [System.Boolean]
        $isDefault
    )
}
function Update-IntuneManagedAppRegistration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $deviceTag,

        [Parameter()]
        [System.String]
        $managementSdkVersion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosManagedAppRegistration,

        [Parameter()]
        [System.Object[]]
        $intendedPolicies,

        [Parameter()]
        [System.String]
        $applicationVersion,

        [Parameter()]
        [System.Object[]]
        $appliedPolicies,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $platformVersion,

        [Parameter()]
        [System.String]
        $managedAppRegistrationId,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $deviceType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $operations,

        [Parameter()]
        [System.String[]]
        $flaggedReasons,

        [Parameter()]
        [System.Object]
        $appIdentifier,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidManagedAppRegistration
    )
}
function Update-IntuneManagedAppStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $managedAppStatusId,

        [Parameter()]
        [System.Object]
        $content,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedAppStatusRaw
    )
}
function Update-IntuneManagedDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object[]]
        $deviceCompliancePolicyStates,

        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime,

        [Parameter()]
        [System.String]
        $deviceCategoryDisplayName,

        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.String]
        $managementAgent,

        [Parameter()]
        [System.String]
        $complianceState,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.Boolean]
        $isEncrypted,

        [Parameter()]
        [System.String]
        $model,

        [Parameter()]
        [System.Int64]
        $freeStorageSpaceInBytes,

        [Parameter()]
        [System.String]
        $partnerReportedThreatState,

        [Parameter()]
        [System.String]
        $emailAddress,

        [Parameter()]
        [System.DateTimeOffset]
        $enrolledDateTime,

        [Parameter()]
        [System.Int64]
        $totalStorageSpaceInBytes,

        [Parameter()]
        [System.String]
        $deviceRegistrationState,

        [Parameter()]
        [System.String]
        $activationLockBypassCode,

        [Parameter()]
        [System.String]
        $exchangeAccessState,

        [Parameter()]
        [System.String]
        $exchangeAccessStateReason,

        [Parameter()]
        [System.String]
        $operatingSystem,

        [Parameter()]
        [System.String]
        $meid,

        [Parameter()]
        [System.String]
        $serialNumber,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $deviceEnrollmentType,

        [Parameter()]
        [System.Object]
        $deviceCategory,

        [Parameter()]
        [System.Boolean]
        $easActivated,

        [Parameter()]
        [System.Object]
        $deviceHealthAttestationState,

        [Parameter()]
        [System.String]
        $easDeviceId,

        [Parameter()]
        [System.Boolean]
        $isSupervised,

        [Parameter()]
        [System.Object[]]
        $deviceConfigurationStates,

        [Parameter()]
        [System.String]
        $imei,

        [Parameter()]
        [System.String]
        $managedDeviceName,

        [Parameter()]
        [System.String]
        $androidSecurityPatchLevel,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.String]
        $manufacturer,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.DateTimeOffset]
        $easActivationDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $exchangeLastSuccessfulSyncDateTime,

        [Parameter()]
        [System.String]
        $managedDeviceOwnerType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $azureADDeviceId,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.Boolean]
        $azureADRegistered,

        [Parameter()]
        [System.String]
        $phoneNumber,

        [Parameter()]
        [System.Object[]]
        $deviceActionResults,

        [Parameter()]
        [System.String]
        $remoteAssistanceSessionErrorDetails,

        [Parameter()]
        [System.Object]
        $configurationManagerClientEnabledFeatures,

        [Parameter()]
        [System.String]
        $subscriberCarrier,

        [Parameter()]
        [System.String]
        $remoteAssistanceSessionUrl,

        [Parameter()]
        [System.String]
        $wiFiMacAddress,

        [Parameter()]
        [System.String]
        $jailBroken
    )
}
function Update-IntuneManagedDeviceDeviceCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-IntuneManagedDeviceDeviceCompliancePolicyState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $settingStates,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String]
        $platformType,

        [Parameter()]
        [System.Int32]
        $settingCount,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.String]
        $deviceCompliancePolicyStateId
    )
}
function Update-IntuneManagedDeviceDeviceConfigurationState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $settingStates,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $deviceConfigurationStateId,

        [Parameter()]
        [System.String]
        $managedDeviceId,

        [Parameter()]
        [System.String]
        $platformType,

        [Parameter()]
        [System.Int32]
        $settingCount,

        [Parameter()]
        [System.String]
        $state
    )
}
function Update-IntuneManagedEBook
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.DateTimeOffset]
        $publishedDateTime,

        [Parameter()]
        [System.Int32]
        $totalLicenseCount,

        [Parameter()]
        [System.Guid]
        $vppTokenId,

        [Parameter()]
        [System.String]
        $seller,

        [Parameter()]
        [System.String]
        $vppOrganizationName,

        [Parameter()]
        [System.Object[]]
        $deviceStates,

        [Parameter()]
        [System.Object]
        $largeCover,

        [Parameter()]
        [System.String[]]
        $genres,

        [Parameter()]
        [System.Object]
        $installSummary,

        [Parameter()]
        [System.Int32]
        $usedLicenseCount,

        [Parameter()]
        [System.String]
        $privacyInformationUrl,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $appleId,

        [Parameter()]
        [System.Object[]]
        $userStateSummary,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosVppEBook,

        [Parameter()]
        [System.String]
        $managedEBookId,

        [Parameter()]
        [System.String]
        $language,

        [Parameter()]
        [System.String]
        $publisher,

        [Parameter()]
        [System.String]
        $informationUrl
    )
}
function Update-IntuneManagedEBookAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $installIntent,

        [Parameter()]
        [System.String]
        $managedEBookAssignmentId,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosVppEBookAssignment,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedEBookAssignment,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Update-IntuneManagedEBookDeviceState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $errorCode,

        [Parameter()]
        [System.String]
        $installState,

        [Parameter()]
        [System.String]
        $deviceInstallStateId,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $osDescription,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.String]
        $deviceId,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Update-IntuneManagedEBookInstallSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notInstalledDeviceCount,

        [Parameter()]
        [System.Int32]
        $failedUserCount,

        [Parameter()]
        [System.Int32]
        $installedUserCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $failedDeviceCount,

        [Parameter()]
        [System.Int32]
        $installedDeviceCount,

        [Parameter()]
        [System.Int32]
        $notInstalledUserCount,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Update-IntuneManagedEBookUserStateSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $notInstalledDeviceCount,

        [Parameter()]
        [System.Int32]
        $failedDeviceCount,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $userInstallStateSummaryId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $deviceStates,

        [Parameter()]
        [System.Int32]
        $installedDeviceCount,

        [Parameter()]
        [System.String]
        $managedEBookId
    )
}
function Update-IntuneManagedEBookUserStateSummaryDeviceState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $errorCode,

        [Parameter()]
        [System.String]
        $userInstallStateSummaryId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $managedEBookId,

        [Parameter()]
        [System.String]
        $deviceInstallStateId,

        [Parameter()]
        [System.String]
        $deviceName,

        [Parameter()]
        [System.String]
        $osDescription,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.String]
        $deviceId,

        [Parameter()]
        [System.String]
        $installState
    )
}
function Update-IntuneMdmWindowsInformationProtectionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxiedDomains,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $enterpriseProxyServersAreAuthoritative,

        [Parameter()]
        [System.Object[]]
        $smbAutoEncryptedFileExtensions,

        [Parameter()]
        [System.Boolean]
        $protectionUnderLockConfigRequired,

        [Parameter()]
        [System.String]
        $enforcementLevel,

        [Parameter()]
        [System.String]
        $enterpriseDomain,

        [Parameter()]
        [System.Object[]]
        $enterpriseInternalProxyServers,

        [Parameter()]
        [System.Boolean]
        $indexingEncryptedStoresOrItemsBlocked,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Boolean]
        $revokeOnUnenrollDisabled,

        [Parameter()]
        [System.Guid]
        $rightsManagementServicesTemplateId,

        [Parameter()]
        [System.Object[]]
        $exemptAppLockerFiles,

        [Parameter()]
        [System.Object]
        $dataRecoveryCertificate,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Object[]]
        $neutralDomainResources,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxyServers,

        [Parameter()]
        [System.Object[]]
        $exemptApps,

        [Parameter()]
        [System.Boolean]
        $azureRightsManagementServicesAllowed,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Boolean]
        $enterpriseIPRangesAreAuthoritative,

        [Parameter()]
        [System.Boolean]
        $iconsVisible,

        [Parameter()]
        [System.Object[]]
        $enterpriseProtectedDomainNames,

        [Parameter()]
        [System.Object[]]
        $protectedAppLockerFiles,

        [Parameter()]
        [System.Object[]]
        $protectedApps,

        [Parameter()]
        [System.Object[]]
        $enterpriseIPRanges,

        [Parameter()]
        [System.Object[]]
        $enterpriseNetworkDomainNames
    )
}
function Update-IntuneMdmWindowsInformationProtectionPolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.Object]
        $target
    )
}
function Update-IntuneMdmWindowsInformationProtectionPolicyExemptAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId
    )
}
function Update-IntuneMdmWindowsInformationProtectionPolicyProtectedAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $mdmWindowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId
    )
}
function Update-IntuneMobileApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $useManagedBrowser,

        [Parameter()]
        [System.String]
        $versionNumber,

        [Parameter()]
        [System.String]
        $identityPublisherHash,

        [Parameter()]
        [System.String]
        $identityVersion,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosStoreApp,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsUniversalAppX,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosVppApp,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.Int32]
        $totalLicenseCount,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedAndroidStoreApp,

        [Parameter()]
        [System.String]
        $versionName,

        [Parameter()]
        [System.String]
        $appUrl,

        [Parameter()]
        [System.Boolean]
        $isBundle,

        [Parameter()]
        [System.DateTimeOffset]
        $expirationDateTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $macOSOfficeSuiteApp,

        [Parameter()]
        [System.Int64]
        $size,

        [Parameter()]
        [System.String]
        $productKey,

        [Parameter()]
        [System.Object]
        $minimumSupportedOperatingSystem,

        [Parameter()]
        [System.Object]
        $largeIcon,

        [Parameter()]
        [System.Int32]
        $usedLicenseCount,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedAndroidLobApp,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $isFeatured,

        [Parameter()]
        [System.String]
        $fileName,

        [Parameter()]
        [System.String]
        $vppTokenAppleId,

        [Parameter()]
        [System.String]
        $owner,

        [Parameter()]
        [System.String]
        $committedContentVersion,

        [Parameter()]
        [System.Object[]]
        $categories,

        [Parameter()]
        [System.String]
        $informationUrl,

        [Parameter()]
        [System.String]
        $applicableArchitectures,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidLobApp,

        [Parameter()]
        [System.String]
        $notes,

        [Parameter()]
        [System.Boolean]
        $ignoreVersionDetection,

        [Parameter()]
        [System.String]
        $versionCode,

        [Parameter()]
        [System.String]
        $bundleId,

        [Parameter()]
        [System.String]
        $packageId,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $commandLine,

        [Parameter()]
        [System.String]
        $applicableDeviceTypes,

        [Parameter()]
        [System.String]
        $productVersion,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.Object[]]
        $contentVersions,

        [Parameter()]
        [System.DateTimeOffset]
        $releaseDateTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $androidStoreApp,

        [Parameter()]
        [System.Object]
        $licensingType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $microsoftStoreForBusinessApp,

        [Parameter()]
        [System.String]
        $publishingState,

        [Parameter()]
        [System.String]
        $packageIdentityName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedIOSLobApp,

        [Parameter()]
        [System.String]
        $identityResourceIdentifier,

        [Parameter()]
        [System.String]
        $appStoreUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosLobApp,

        [Parameter()]
        [System.String]
        $buildNumber,

        [Parameter()]
        [System.Object]
        $applicableDeviceType,

        [Parameter()]
        [System.String]
        $privacyInformationUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $managedIOSStoreApp,

        [Parameter()]
        [System.String]
        $licenseType,

        [Parameter()]
        [System.String]
        $appAvailability,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $publisher,

        [Parameter()]
        [System.String]
        $productCode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $webApp,

        [Parameter()]
        [System.String]
        $vppTokenOrganizationName,

        [Parameter()]
        [System.String]
        $identityName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $windowsMobileMSI,

        [Parameter()]
        [System.String]
        $developer,

        [Parameter()]
        [System.String]
        $vppTokenAccountType
    )
}
function Update-IntuneMobileAppAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $mobileAppAssignmentId,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String]
        $intent,

        [Parameter()]
        [System.Object]
        $settings
    )
}
function Update-IntuneMobileAppCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $mobileAppCategoryId,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-IntuneMobileAppConfigurationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Object[]]
        $settings,

        [Parameter()]
        [System.Byte[]]
        $encodedSettingXml,

        [Parameter()]
        [System.Object]
        $deviceStatusSummary,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.Object[]]
        $deviceStatuses,

        [Parameter()]
        [System.String[]]
        $targetedMobileApps,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $userStatusSummary,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $iosMobileAppConfiguration,

        [Parameter()]
        [System.Object[]]
        $userStatuses
    )
}
function Update-IntuneMobileAppConfigurationPolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationAssignmentId,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.Object]
        $target,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-IntuneMobileAppConfigurationPolicyDeviceStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $complianceGracePeriodExpirationDateTime,

        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $userName,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationDeviceStatusId,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.String]
        $status,

        [Parameter()]
        [System.String]
        $deviceDisplayName,

        [Parameter()]
        [System.String]
        $deviceModel
    )
}
function Update-IntuneMobileAppConfigurationPolicyDeviceStatusSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime,

        [Parameter()]
        [System.Int32]
        $failedCount
    )
}
function Update-IntuneMobileAppConfigurationPolicyUserStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $userPrincipalName,

        [Parameter()]
        [System.DateTimeOffset]
        $lastReportedDateTime,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $devicesCount,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationUserStatusId,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.String]
        $status
    )
}
function Update-IntuneMobileAppConfigurationPolicyUserStatusSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $pendingCount,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Int32]
        $successCount,

        [Parameter()]
        [System.Int32]
        $errorCount,

        [Parameter()]
        [System.Int32]
        $configurationVersion,

        [Parameter()]
        [System.Int32]
        $notApplicableCount,

        [Parameter()]
        [System.String]
        $managedDeviceMobileAppConfigurationId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastUpdateDateTime,

        [Parameter()]
        [System.Int32]
        $failedCount
    )
}
function Update-IntuneMobileAppContentVersion
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.String]
        $mobileAppODataType,

        [Parameter()]
        [System.String]
        $mobileAppContentId,

        [Parameter()]
        [System.Object[]]
        $files
    )
}
function Update-IntuneMobileAppContentVersionFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $mobileAppODataType,

        [Parameter()]
        [System.String]
        $name,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.Boolean]
        $isCommitted,

        [Parameter()]
        [System.DateTimeOffset]
        $azureStorageUriExpirationDateTime,

        [Parameter()]
        [System.Int64]
        $sizeEncrypted,

        [Parameter()]
        [System.Int64]
        $size,

        [Parameter()]
        [System.String]
        $mobileAppContentFileId,

        [Parameter()]
        [System.String]
        $mobileAppId,

        [Parameter()]
        [System.Byte[]]
        $manifest,

        [Parameter()]
        [System.String]
        $mobileAppContentId,

        [Parameter()]
        [System.String]
        $uploadState,

        [Parameter()]
        [System.String]
        $azureStorageUri,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-IntuneMobileThreatDefenseConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Boolean]
        $iosDeviceBlockedOnMissingPartnerData,

        [Parameter()]
        [System.DateTimeOffset]
        $lastHeartbeatDateTime,

        [Parameter()]
        [System.String]
        $partnerState,

        [Parameter()]
        [System.Boolean]
        $iosEnabled,

        [Parameter()]
        [System.Boolean]
        $androidDeviceBlockedOnMissingPartnerData,

        [Parameter()]
        [System.Boolean]
        $partnerUnsupportedOsVersionBlocked,

        [Parameter()]
        [System.Boolean]
        $androidEnabled,

        [Parameter()]
        [System.String]
        $mobileThreatDefenseConnectorId,

        [Parameter()]
        [System.Int32]
        $partnerUnresponsivenessThresholdInDays
    )
}
function Update-IntuneNotificationMessageTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $notificationMessageTemplateId,

        [Parameter()]
        [System.Object[]]
        $localizedNotificationMessages,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $defaultLocale,

        [Parameter()]
        [System.String]
        $brandingOptions
    )
}
function Update-IntuneRemoteAssistancePartner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $remoteAssistancePartnerId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastConnectionDateTime,

        [Parameter()]
        [System.String]
        $onboardingStatus,

        [Parameter()]
        [System.String]
        $onboardingUrl
    )
}
function Update-IntuneResourceOperation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $resourceName,

        [Parameter()]
        [System.String]
        $actionName,

        [Parameter()]
        [System.String]
        $resourceOperationId
    )
}
function Update-IntuneRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String[]]
        $members,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String[]]
        $resourceScopes,

        [Parameter()]
        [System.Object]
        $roleDefinition,

        [Parameter()]
        [System.String]
        $deviceAndAppManagementRoleAssignmentId
    )
}
function Update-IntuneRoleDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $roleDefinitionId,

        [Parameter()]
        [System.Object[]]
        $rolePermissions,

        [Parameter()]
        [System.Boolean]
        $isBuiltIn,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceAndAppManagementRoleDefinition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $roleDefinition,

        [Parameter()]
        [System.Object[]]
        $roleAssignments
    )
}
function Update-IntuneTelecomExpenseManagementPartner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.Boolean]
        $appAuthorized,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $telecomExpenseManagementPartnerId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastConnectionDateTime,

        [Parameter()]
        [System.String]
        $url,

        [Parameter()]
        [System.Boolean]
        $enabled
    )
}
function Update-IntuneTermsAndConditions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.String]
        $acceptanceStatement,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $termsAndConditionId,

        [Parameter()]
        [System.Int32]
        $version,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $bodyText,

        [Parameter()]
        [System.String]
        $title,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object[]]
        $acceptanceStatuses,

        [Parameter()]
        [System.Object[]]
        $assignments
    )
}
function Update-IntuneTermsAndConditionsAcceptanceStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $acceptedVersion,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $termsAndConditions,

        [Parameter()]
        [System.String]
        $userDisplayName,

        [Parameter()]
        [System.String]
        $termsAndConditionId,

        [Parameter()]
        [System.String]
        $termsAndConditionsAcceptanceStatusId,

        [Parameter()]
        [System.DateTimeOffset]
        $acceptedDateTime
    )
}
function Update-IntuneTermsAndConditionsAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $termsAndConditionsAssignmentId,

        [Parameter()]
        [System.String]
        $termsAndConditionId,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $target
    )
}
function Update-IntuneTroubleshootingEvent
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $operatingSystem,

        [Parameter()]
        [System.DateTimeOffset]
        $eventDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $enrollmentTroubleshootingEvent,

        [Parameter()]
        [System.String]
        $failureCategory,

        [Parameter()]
        [System.String]
        $deviceId,

        [Parameter()]
        [System.String]
        $enrollmentType,

        [Parameter()]
        [System.String]
        $userId,

        [Parameter()]
        [System.String]
        $osVersion,

        [Parameter()]
        [System.String]
        $failureReason,

        [Parameter()]
        [System.String]
        $correlationId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $deviceManagementTroubleshootingEvent,

        [Parameter()]
        [System.String]
        $managedDeviceIdentifier,

        [Parameter()]
        [System.String]
        $deviceManagementTroubleshootingEventId
    )
}
function Update-IntuneVppToken
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTimeOffset]
        $expirationDateTime,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $organizationName,

        [Parameter()]
        [System.String]
        $appleId,

        [Parameter()]
        [System.DateTimeOffset]
        $lastSyncDateTime,

        [Parameter()]
        [System.Boolean]
        $automaticallyUpdateApps,

        [Parameter()]
        [System.String]
        $token,

        [Parameter()]
        [System.String]
        $vppTokenId,

        [Parameter()]
        [System.String]
        $state,

        [Parameter()]
        [System.String]
        $lastSyncStatus,

        [Parameter()]
        [System.String]
        $countryOrRegion,

        [Parameter()]
        [System.String]
        $vppTokenAccountType
    )
}
function Update-IntuneWindowsInformationProtectionAppLearningSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLearningSummaryId,

        [Parameter()]
        [System.String]
        $applicationName,

        [Parameter()]
        [System.Int32]
        $deviceCount,

        [Parameter()]
        [System.String]
        $applicationType
    )
}
function Update-IntuneWindowsInformationProtectionNetworkLearningSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $deviceCount,

        [Parameter()]
        [System.String]
        $url,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionNetworkLearningSummaryId,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-IntuneWindowsInformationProtectionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $enforcementLevel,

        [Parameter()]
        [System.String]
        $description,

        [Parameter()]
        [System.DateTimeOffset]
        $lastModifiedDateTime,

        [Parameter()]
        [System.Object[]]
        $assignments,

        [Parameter()]
        [System.DateTimeOffset]
        $createdDateTime,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $pinLowercaseLetters,

        [Parameter()]
        [System.Boolean]
        $enterpriseProxyServersAreAuthoritative,

        [Parameter()]
        [System.Object[]]
        $smbAutoEncryptedFileExtensions,

        [Parameter()]
        [System.Boolean]
        $protectionUnderLockConfigRequired,

        [Parameter()]
        [System.Boolean]
        $windowsHelloForBusinessBlocked,

        [Parameter()]
        [System.String]
        $enterpriseDomain,

        [Parameter()]
        [System.Object[]]
        $enterpriseInternalProxyServers,

        [Parameter()]
        [System.Boolean]
        $indexingEncryptedStoresOrItemsBlocked,

        [Parameter()]
        [System.Int32]
        $minutesOfInactivityBeforeDeviceLock,

        [Parameter()]
        [System.Boolean]
        $enterpriseIPRangesAreAuthoritative,

        [Parameter()]
        [System.String]
        $pinUppercaseLetters,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.Boolean]
        $revokeOnUnenrollDisabled,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId,

        [Parameter()]
        [System.Guid]
        $rightsManagementServicesTemplateId,

        [Parameter()]
        [System.Int32]
        $numberOfPastPinsRemembered,

        [Parameter()]
        [System.Int32]
        $pinMinimumLength,

        [Parameter()]
        [System.Object[]]
        $exemptAppLockerFiles,

        [Parameter()]
        [System.Object]
        $dataRecoveryCertificate,

        [Parameter()]
        [System.Object[]]
        $exemptApps,

        [Parameter()]
        [System.Boolean]
        $revokeOnMdmHandoffDisabled,

        [Parameter()]
        [System.String]
        $mdmEnrollmentUrl,

        [Parameter()]
        [System.Object[]]
        $neutralDomainResources,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxyServers,

        [Parameter()]
        [System.Boolean]
        $azureRightsManagementServicesAllowed,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.String]
        $pinSpecialCharacters,

        [Parameter()]
        [System.Boolean]
        $isAssigned,

        [Parameter()]
        [System.Int32]
        $daysWithoutContactBeforeUnenroll,

        [Parameter()]
        [System.Object[]]
        $enterpriseProxiedDomains,

        [Parameter()]
        [System.Boolean]
        $iconsVisible,

        [Parameter()]
        [System.Object[]]
        $enterpriseProtectedDomainNames,

        [Parameter()]
        [System.Object[]]
        $protectedAppLockerFiles,

        [Parameter()]
        [System.Int32]
        $passwordMaximumAttemptCount,

        [Parameter()]
        [System.Object[]]
        $protectedApps,

        [Parameter()]
        [System.Int32]
        $pinExpirationDays,

        [Parameter()]
        [System.Object[]]
        $enterpriseIPRanges,

        [Parameter()]
        [System.Object[]]
        $enterpriseNetworkDomainNames
    )
}
function Update-IntuneWindowsInformationProtectionPolicyAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $targetedManagedAppPolicyAssignmentId,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.String]
        $ODataType,

        [Parameter()]
        [System.Object]
        $target
    )
}
function Update-IntuneWindowsInformationProtectionPolicyExemptAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
function Update-IntuneWindowsInformationProtectionPolicyProtectedAppLockerFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyId,

        [Parameter()]
        [System.String]
        $displayName,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionPolicyODataType,

        [Parameter()]
        [System.Byte[]]
        $file,

        [Parameter()]
        [System.String]
        $version,

        [Parameter()]
        [System.String]
        $fileHash,

        [Parameter()]
        [System.String]
        $windowsInformationProtectionAppLockerFileId,

        [Parameter()]
        [System.String]
        $ODataType
    )
}
#endregion
#region MicrosoftTeams
function Add-TeamUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $User,

        [Parameter()]
        [System.String]
        $GroupId,

        [Parameter()]
        [System.String]
        $Role
    )
}
function Connect-MicrosoftTeams
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $AccountId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Identity,

        [Parameter()]
        [System.String]
        $TenantId,

        [Parameter()]
        [System.String]
        $MsAccessToken,

        [Parameter()]
        [Microsoft.Open.Teams.CommonLibrary.LogLevel]
        $LogLevel,

        [Parameter()]
        [System.String]
        $AadAccessToken,

        [Parameter()]
        [System.String]
        $LogFilePath,

        [Parameter()]
        [System.Management.Automation.PSCredential]
        $Credential,

        [Parameter()]
        [System.String]
        $ConfigAccessToken,

        [Parameter()]
        [System.Security.SecureString]
        $ManagedServiceSecret,

        [Parameter()]
        [System.String]
        $TeamsEnvironmentName,

        [Parameter()]
        [System.String]
        $ApplicationId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.String]
        $ManagedServiceHostName,

        [Parameter()]
        [System.String]
        $CertificateThumbprint,

        [Parameter()]
        [System.Int32]
        $ManagedServicePort
    )
}
function Disconnect-MicrosoftTeams
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm
    )
}
function Get-CsOnlinePowerShellEndpoint
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Uri]
        $OverrideDiscoveryUri,

        [Parameter()]
        [Microsoft.Open.Teams.SfbOnline.Autodiscover.Fqdn]
        $TargetDomain,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.String]
        $OverrideDesiredLink
    )
}
function Get-CsPolicyPackage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Identity
    )
}
function Get-CsUserPolicyPackage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Identity
    )
}
function Get-CsUserPolicyPackageRecommendation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Identity
    )
}
function Get-Team
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.Boolean]
        $Archived,

        [Parameter()]
        [System.String]
        $User,

        [Parameter()]
        [System.String]
        $NumberOfThreads,

        [Parameter()]
        [System.String]
        $Visibility,

        [Parameter()]
        [System.String]
        $GroupId,

        [Parameter()]
        [System.String]
        $MailNickName
    )
}
function Get-TeamChannel
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $GroupId
    )
}
function Get-TeamsApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $DistributionMethod,

        [Parameter()]
        [System.String]
        $ExternalId,

        [Parameter()]
        [System.String]
        $DisplayName
    )
}
function Get-TeamUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $GroupId,

        [Parameter()]
        [System.String]
        $Role
    )
}
function Grant-CsUserPolicyPackage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $PackageName,

        [Parameter()]
        [System.String[]]
        $Identity
    )
}
function New-CsBatchPolicyPackageAssignmentOperation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $PackageName,

        [Parameter()]
        [System.String[]]
        $Identity
    )
}
function New-CsOnlineSession
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.PSCredential]
        $Credential,

        [Parameter()]
        [System.Management.Automation.Remoting.PSSessionOption]
        $SessionOption,

        [Parameter()]
        [System.String]
        $OverridePowerShellUri,

        [Parameter()]
        [System.String]
        $TeamsEnvironmentName,

        [Parameter()]
        [System.String]
        $OverrideAdminDomain
    )
}
function New-Team
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $AllowGuestDeleteChannels,

        [Parameter()]
        [System.Boolean]
        $AllowUserDeleteMessages,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $MailNickName,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.Boolean]
        $AllowCreateUpdateChannels,

        [Parameter()]
        [System.Boolean]
        $AllowDeleteChannels,

        [Parameter()]
        [System.String]
        $Classification,

        [Parameter()]
        [System.Boolean]
        $AllowCreateUpdateRemoveConnectors,

        [Parameter()]
        [System.Boolean]
        $AllowUserEditMessages,

        [Parameter()]
        [System.Boolean]
        $AllowAddRemoveApps,

        [Parameter()]
        [System.String]
        $Template,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RetainCreatedGroup,

        [Parameter()]
        [System.String]
        $GiphyContentRating,

        [Parameter()]
        [System.Boolean]
        $AllowTeamMentions,

        [Parameter()]
        [System.String]
        $GroupId,

        [Parameter()]
        [System.Boolean]
        $AllowOwnerDeleteMessages,

        [Parameter()]
        [System.Boolean]
        $AllowGuestCreateUpdateChannels,

        [Parameter()]
        [System.String]
        $Owner,

        [Parameter()]
        [System.Boolean]
        $AllowStickersAndMemes,

        [Parameter()]
        [System.Boolean]
        $ShowInTeamsSearchAndSuggestions,

        [Parameter()]
        [System.String]
        $Visibility,

        [Parameter()]
        [System.Boolean]
        $AllowCreateUpdateRemoveTabs,

        [Parameter()]
        [System.Boolean]
        $AllowGiphy,

        [Parameter()]
        [System.Boolean]
        $AllowChannelMentions,

        [Parameter()]
        [System.Boolean]
        $AllowCustomMemes
    )
}
function New-TeamChannel
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $GroupId
    )
}
function New-TeamsApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $DistributionMethod,

        [Parameter()]
        [System.String]
        $Path
    )
}
function Remove-Team
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $GroupId
    )
}
function Remove-TeamChannel
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $GroupId
    )
}
function Remove-TeamsApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id
    )
}
function Remove-TeamUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $User,

        [Parameter()]
        [System.String]
        $GroupId,

        [Parameter()]
        [System.String]
        $Role
    )
}
function Set-Team
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $AllowGuestDeleteChannels,

        [Parameter()]
        [System.Boolean]
        $AllowUserDeleteMessages,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $MailNickname,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.Boolean]
        $AllowCreateUpdateChannels,

        [Parameter()]
        [System.Boolean]
        $AllowDeleteChannels,

        [Parameter()]
        [System.String]
        $Classification,

        [Parameter()]
        [System.Boolean]
        $AllowCreateUpdateRemoveConnectors,

        [Parameter()]
        [System.Boolean]
        $AllowUserEditMessages,

        [Parameter()]
        [System.Boolean]
        $AllowAddRemoveApps,

        [Parameter()]
        [System.String]
        $GiphyContentRating,

        [Parameter()]
        [System.Boolean]
        $AllowTeamMentions,

        [Parameter()]
        [System.String]
        $GroupId,

        [Parameter()]
        [System.Boolean]
        $AllowOwnerDeleteMessages,

        [Parameter()]
        [System.Boolean]
        $AllowGuestCreateUpdateChannels,

        [Parameter()]
        [System.Boolean]
        $AllowStickersAndMemes,

        [Parameter()]
        [System.Boolean]
        $ShowInTeamsSearchAndSuggestions,

        [Parameter()]
        [System.String]
        $Visibility,

        [Parameter()]
        [System.Boolean]
        $AllowCreateUpdateRemoveTabs,

        [Parameter()]
        [System.Boolean]
        $AllowGiphy,

        [Parameter()]
        [System.Boolean]
        $AllowChannelMentions,

        [Parameter()]
        [System.Boolean]
        $AllowCustomMemes
    )
}
function Set-TeamArchivedState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $Archived,

        [Parameter()]
        [System.Boolean]
        $SetSpoSiteReadOnlyForMembers,

        [Parameter()]
        [System.String]
        $GroupId
    )
}
function Set-TeamChannel
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $GroupId,

        [Parameter()]
        [System.String]
        $CurrentDisplayName,

        [Parameter()]
        [System.String]
        $NewDisplayName
    )
}
function Set-TeamPicture
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $GroupId,

        [Parameter()]
        [System.String]
        $ImagePath
    )
}
function Set-TeamsApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.String]
        $Path
    )
}
#endregion
#region PnP
function Add-PnPAlert
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTime]
        $Time,

        [Parameter()]
        [Microsoft.SharePoint.Client.AlertDeliveryChannel]
        $DeliveryMethod,

        [Parameter()]
        [Microsoft.SharePoint.Client.AlertFrequency]
        $Frequency,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.UserPipeBind]
        $User,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.AlertFilter]
        $Filter,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [Microsoft.SharePoint.Client.AlertEventType]
        $ChangeType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web
    )
}
function Add-PnPApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Publish,

        [Parameter()]
        [System.Int32]
        $Timeout,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipFeatureDeployment,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Overwrite,

        [Parameter()]
        [OfficeDevPnP.Core.Enums.AppCatalogScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Path
    )
}
function Add-PnPApplicationCustomizer
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CustomActionScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $ClientSideComponentId,

        [Parameter()]
        [System.String]
        $ClientSideHostProperties,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.Int32]
        $Sequence,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $ClientSideComponentProperties
    )
}
function Add-PnPClientSidePage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Publish,

        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String]
        $PublishMessage,

        [Parameter()]
        [PnP.PowerShell.Commands.ClientSidePages.ClientSidePagePromoteType]
        $PromoteAs,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [OfficeDevPnP.Core.Pages.ClientSidePageHeaderLayoutType]
        $HeaderLayoutType,

        [Parameter()]
        [OfficeDevPnP.Core.Pages.ClientSidePageLayoutType]
        $LayoutType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $ContentType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CommentsEnabled
    )
}
function Add-PnPClientSidePageSection
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Page,

        [Parameter()]
        [System.Int32]
        $ZoneEmphasis,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [OfficeDevPnP.Core.Pages.CanvasSectionTemplate]
        $SectionTemplate,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Int32]
        $Order
    )
}
function Add-PnPClientSideText
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Page,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Int32]
        $Column,

        [Parameter()]
        [System.Int32]
        $Section,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Int32]
        $Order,

        [Parameter()]
        [System.String]
        $Text
    )
}
function Add-PnPClientSideWebPart
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Page,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [OfficeDevPnP.Core.Pages.DefaultClientSideWebParts]
        $DefaultWebPartType,

        [Parameter()]
        [System.Int32]
        $Column,

        [Parameter()]
        [System.Int32]
        $Section,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Int32]
        $Order,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.PropertyBagPipeBind]
        $WebPartProperties,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSideComponentPipeBind]
        $Component
    )
}
function Add-PnPContentType
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String]
        $ContentTypeId,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Group,

        [Parameter()]
        [Microsoft.SharePoint.Client.ContentType]
        $ParentContentType
    )
}
function Add-PnPContentTypeToDocumentSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.DocumentSetPipeBind]
        $DocumentSet,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind[]]
        $ContentType
    )
}
function Add-PnPContentTypeToList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $ContentType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DefaultContentType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Add-PnPCustomAction
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $ClientSideComponentId,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $Location,

        [Parameter()]
        [Microsoft.SharePoint.Client.UserCustomActionRegistrationType]
        $RegistrationType,

        [Parameter()]
        [System.String]
        $Group,

        [Parameter()]
        [System.String]
        $ImageUrl,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $CommandUIExtension,

        [Parameter()]
        [System.Int32]
        $Sequence,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CustomActionScope]
        $Scope,

        [Parameter()]
        [System.String]
        $RegistrationId,

        [Parameter()]
        [Microsoft.SharePoint.Client.PermissionKind[]]
        $Rights,

        [Parameter()]
        [System.String]
        $ClientSideComponentProperties,

        [Parameter()]
        [System.String]
        $ClientSideHostProperties
    )
}
function Add-PnPDataRowsToProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Fields,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
        $TemplateProviderExtensions,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $TokenizeUrls,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeSecurity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Query,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Add-PnPDocumentSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $ContentType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Add-PnPEventReceiver
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $SequenceNumber,

        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [Microsoft.SharePoint.Client.EventReceiverType]
        $EventReceiverType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [Microsoft.SharePoint.Client.EventReceiverSynchronization]
        $Synchronization,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Add-PnPField
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Required,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $Id,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $ClientSideComponentId,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [Microsoft.SharePoint.Client.FieldType]
        $Type,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
        $Field,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AddToDefaultView,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Group,

        [Parameter()]
        [System.String]
        $ClientSideComponentProperties,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.String]
        $InternalName
    )
}
function Add-PnPFieldFromXml
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $FieldXml,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Add-PnPFieldToContentType
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Required,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Hidden,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
        $Field,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $ContentType
    )
}
function Add-PnPFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Hashtable]
        $Values
    )
}
function Add-PnPFileToProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Source,

        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [System.String]
        $SourceUrl,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
        $TemplateProviderExtensions,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.FileLevel]
        $FileLevel,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $FileOverwrite,

        [Parameter()]
        [System.String]
        $Container,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Path
    )
}
function Add-PnPFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Add-PnPHtmlPublishingPageLayout
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $DestinationFolderHierarchy,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $AssociatedContentTypeID,

        [Parameter()]
        [System.String]
        $SourceFilePath,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Add-PnPHubSiteAssociation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $HubSite,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $Site,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Add-PnPIndexedProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $Key,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Add-PnPJavaScriptBlock
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SiteScoped,

        [Parameter()]
        [System.Int32]
        $Sequence,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CustomActionScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Script
    )
}
function Add-PnPJavaScriptLink
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SiteScoped,

        [Parameter()]
        [System.Int32]
        $Sequence,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CustomActionScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String[]]
        $Url
    )
}
function Add-PnPListFoldersToProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
        $TemplateProviderExtensions,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeSecurity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recursive,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Add-PnPListItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Hashtable]
        $Values
    )
}
function Add-PnPMasterPage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $DestinationFolderHierarchy,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $DefaultCssFile,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $SourceFilePath,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $UIVersion
    )
}
function Add-PnPMicrosoft365GroupMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveExisting,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.String[]]
        $Users,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Add-PnPMicrosoft365GroupOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveExisting,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.String[]]
        $Users,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Add-PnPMicrosoft365GroupToSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String[]]
        $Owners,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $Alias,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsPublic,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $KeepOldHomePage,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Classification,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $HubSiteId
    )
}
function Add-PnPNavigationNode
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $First,

        [Parameter()]
        [System.String]
        $Header,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $External,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Parent,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [OfficeDevPnP.Core.Enums.NavigationType]
        $Location
    )
}
function Add-PnPOrgAssetsLibrary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ThumbnailUrl,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
        $CdnType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $LibraryUrl
    )
}
function Add-PnPOrgNewsSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $OrgNewsSiteUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Add-PnPProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningTemplate]
        $SiteTemplate,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningHierarchy]
        $TenantTemplate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm
    )
}
function Add-PnPPublishingImageRendition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Int32]
        $Height,

        [Parameter()]
        [System.Int32]
        $Width
    )
}
function Add-PnPPublishingPage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Publish,

        [Parameter()]
        [System.String]
        $PageName,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $FolderPath,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $PageTemplateName
    )
}
function Add-PnPPublishingPageLayout
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $DestinationFolderHierarchy,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $AssociatedContentTypeID,

        [Parameter()]
        [System.String]
        $SourceFilePath,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Add-PnPRoleDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.RoleDefinitionPipeBind]
        $Clone,

        [Parameter()]
        [System.String]
        $RoleName,

        [Parameter()]
        [Microsoft.SharePoint.Client.PermissionKind[]]
        $Include,

        [Parameter()]
        [Microsoft.SharePoint.Client.PermissionKind[]]
        $Exclude
    )
}
function Add-PnPSiteClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Classifications,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Add-PnPSiteCollectionAdmin
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.List`1[PnP.PowerShell.Commands.Base.PipeBinds.UserPipeBind]]
        $Owners,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Add-PnPSiteCollectionAppCatalog
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $Site,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Add-PnPSiteDesign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $PreviewImageUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.SiteWebTemplate]
        $WebTemplate,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind[]]
        $SiteScriptIds,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $PreviewImageAltText,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsDefault
    )
}
function Add-PnPSiteDesignTask
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $WebUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $SiteDesignId
    )
}
function Add-PnPSiteScript
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $Content,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Add-PnPStoredCredential
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Security.SecureString]
        $Password,

        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String]
        $Username
    )
}
function Add-PnPTaxonomyField
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Required,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $Id,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $TaxonomyItemId,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [Microsoft.SharePoint.Client.AddFieldOptions]
        $FieldOptions,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AddToDefaultView,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $MultiValue,

        [Parameter()]
        [System.String]
        $TermPathDelimiter,

        [Parameter()]
        [System.String]
        $TermSetPath,

        [Parameter()]
        [System.String]
        $Group,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.String]
        $InternalName
    )
}
function Add-PnPTeamsChannel
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Private,

        [Parameter()]
        [System.String]
        $OwnerUPN,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team
    )
}
function Add-PnPTeamsTab
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $ContentUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsChannelPipeBind]
        $Channel,

        [Parameter()]
        [PnP.PowerShell.Commands.Model.Teams.TeamTabType]
        $Type,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team
    )
}
function Add-PnPTeamsTeam
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Add-PnPTeamsUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $User,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team,

        [Parameter()]
        [System.String]
        $Role
    )
}
function Add-PnPTenantCdnOrigin
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
        $CdnType,

        [Parameter()]
        [System.String]
        $OriginUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Add-PnPTenantSequence
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningHierarchy]
        $Template,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningSequence]
        $Sequence
    )
}
function Add-PnPTenantSequenceSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ProvisioningSitePipeBind]
        $Site,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningSequence]
        $Sequence
    )
}
function Add-PnPTenantSequenceSubSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.TeamNoGroupSubSite]
        $SubSite,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.SiteCollection]
        $Site
    )
}
function Add-PnPTenantTheme
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Overwrite,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ThemePipeBind]
        $Identity,

        [Parameter()]
        [System.Boolean]
        $IsInverted,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ThemePalettePipeBind]
        $Palette
    )
}
function Add-PnPUserToGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $EmailAddress,

        [Parameter()]
        [System.String]
        $LoginName,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SendEmail,

        [Parameter()]
        [System.String]
        $EmailBody,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Add-PnPView
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Aggregations,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Personal,

        [Parameter()]
        [System.String[]]
        $Fields,

        [Parameter()]
        [System.UInt32]
        $RowLimit,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SetAsDefault,

        [Parameter()]
        [System.String]
        $Query,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [Microsoft.SharePoint.Client.ViewType]
        $ViewType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Paged,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Add-PnPWebhookSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTime]
        $ExpirationDate,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $ClientState,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $NotificationUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Add-PnPWebPartToWebPartPage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Xml,

        [Parameter()]
        [System.String]
        $ServerRelativePageUrl,

        [Parameter()]
        [System.Int32]
        $ZoneIndex,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $ZoneId,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Path
    )
}
function Add-PnPWebPartToWikiPage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $Row,

        [Parameter()]
        [System.String]
        $Xml,

        [Parameter()]
        [System.String]
        $ServerRelativePageUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Int32]
        $Column,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AddSpace,

        [Parameter()]
        [System.String]
        $Path
    )
}
function Add-PnPWikiPage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [OfficeDevPnP.Core.WikiPageLayout]
        $Layout,

        [Parameter()]
        [System.String]
        $ServerRelativePageUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $Content,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Add-PnPWorkflowDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.SharePoint.Client.WorkflowServices.WorkflowDefinition]
        $Definition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DoNotPublish,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Add-PnPWorkflowSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $StartManually,

        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String]
        $HistoryListName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $StartOnChanged,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $StartOnCreated,

        [Parameter()]
        [System.String]
        $DefinitionName,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Collections.Generic.Dictionary`2[System.String,System.String]]
        $AssociationValues,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.String]
        $TaskListName
    )
}
function Apply-PnPProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ProvisionFieldsToSubWebs,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
        $TemplateProviderExtensions,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.Handlers]
        $Handlers,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ProvisionContentTypesToSubWebs,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OverwriteSystemPropertyBagValues,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreDuplicateDataRowErrors,

        [Parameter()]
        [System.String]
        $ResourceFolder,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningTemplate]
        $InputInstance,

        [Parameter()]
        [System.Collections.Hashtable]
        $Parameters,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ClearNavigation,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ExtensibilityHandler[]]
        $ExtensibilityHandlers,

        [Parameter()]
        [System.String]
        $TemplateId,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.Handlers]
        $ExcludeHandlers
    )
}
function Apply-PnPTenantTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ProvisionFieldsToSubWebs,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningHierarchy]
        $Template,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
        $TemplateProviderExtensions,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.Handlers]
        $Handlers,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ProvisionContentTypesToSubWebs,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OverwriteSystemPropertyBagValues,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreDuplicateDataRowErrors,

        [Parameter()]
        [System.String]
        $ResourceFolder,

        [Parameter()]
        [System.Collections.Hashtable]
        $Parameters,

        [Parameter()]
        [System.String]
        $SequenceId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ApplyConfigurationPipeBind]
        $Configuration,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ClearNavigation,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ExtensibilityHandler[]]
        $ExtensibilityHandlers,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.Handlers]
        $ExcludeHandlers
    )
}
function Approve-PnPTenantServicePrincipalPermissionRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $RequestId,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Clear-PnPDefaultColumnValues
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
        $Field,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Clear-PnPListItemAsRecord
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Clear-PnPMicrosoft365GroupMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Clear-PnPMicrosoft365GroupOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Clear-PnPRecycleBinItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $RowLimit,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SecondStageOnly,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.RecycleBinItemPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $All,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Clear-PnPTenantAppCatalogUrl
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Clear-PnPTenantRecycleBinItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Wait,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Connect-PnPOnline
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [OfficeDevPnP.Core.AzureEnvironment]
        $AzureEnvironment,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UseWebLogin,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LaunchBrowser,

        [Parameter()]
        [System.String]
        $TenantAdminUrl,

        [Parameter()]
        [System.String]
        $PEMCertificate,

        [Parameter()]
        [System.String]
        $AADDomain,

        [Parameter()]
        [Microsoft.SharePoint.Client.ClientAuthenticationMode]
        $AuthenticationMode,

        [Parameter()]
        [System.Security.SecureString]
        $CertificatePassword,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ClearTokenCache,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $NoTelemetry,

        [Parameter()]
        [System.Int32]
        $RequestTimeout,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreSslErrors,

        [Parameter()]
        [System.String]
        $Tenant,

        [Parameter()]
        [System.Int32]
        $RetryCount,

        [Parameter()]
        [System.Int32]
        $MinimalHealthScore,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Graph,

        [Parameter()]
        [System.Security.Cryptography.X509Certificates.X509Certificate2]
        $ClientCertificate,

        [Parameter()]
        [System.String]
        $CertificatePath,

        [Parameter()]
        [System.String]
        $AppSecret,

        [Parameter()]
        [System.String]
        $ClientId,

        [Parameter()]
        [System.Int32]
        $RetryWait,

        [Parameter()]
        [System.String]
        $PEMPrivateKey,

        [Parameter()]
        [System.String]
        $LoginProviderName,

        [Parameter()]
        [System.Security.Cryptography.X509Certificates.X509Certificate2]
        $Certificate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipTenantAdminCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CurrentCredentials,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UseAdfs,

        [Parameter()]
        [System.String]
        $DriveName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CreateDrive,

        [Parameter()]
        [System.String]
        $CertificateBase64Encoded,

        [Parameter()]
        [System.String]
        $Thumbprint,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UseAdfsCert,

        [Parameter()]
        [System.String]
        $Realm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PnPManagementShell,

        [Parameter()]
        [System.String]
        $AccessToken,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SPOManagementShell,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Kerberos,

        [Parameter()]
        [System.String]
        $RedirectUri,

        [Parameter()]
        [System.String]
        $ClientSecret,

        [Parameter()]
        [System.String[]]
        $Scopes,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.CredentialPipeBind]
        $Credentials,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReturnConnection,

        [Parameter()]
        [System.String]
        $AppId
    )
}
function Convert-PnPFolderToProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [System.String]
        $Out,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Convert-PnPProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.Xml.XMLPnPSchemaVersion]
        $ToSchema,

        [Parameter()]
        [System.String]
        $Out,

        [Parameter()]
        [System.Text.Encoding]
        $Encoding,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function ConvertTo-PnPClientSidePage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CopyPageMetadata,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $LogFolder,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipUserMapping,

        [Parameter()]
        [System.String]
        $TargetWebUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipUrlRewriting,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReplaceHomePageWithDefault,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ClearCache,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $TakeSourcePageName,

        [Parameter()]
        [System.String]
        $TargetPageName,

        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.PagePipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $PageLayoutMapping,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveEmptySectionsAndColumns,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SetAuthorInPageHeader,

        [Parameter()]
        [System.String]
        $WebPartMappingFile,

        [Parameter()]
        [System.String]
        $UrlMappingFile,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $KeepPageCreationModificationInformation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PostAsNews,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipItemLevelPermissionCopyToClientSidePage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AddPageAcceptBanner,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Overwrite,

        [Parameter()]
        [System.String]
        $Library,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AddTableListImageAsImageWebPart,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DelveKeepSubTitle,

        [Parameter()]
        [System.String]
        $LDAPConnectionString,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PublishingPage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipTermStoreMapping,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SummaryLinksToHtml,

        [Parameter()]
        [System.String]
        $TermMappingFile,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LogVerbose,

        [Parameter()]
        [System.String]
        $PublishingTargetPageName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DontPublish,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LogSkipFlush,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BlogPage,

        [Parameter()]
        [System.String]
        $TargetPageFolder,

        [Parameter()]
        [System.String]
        $UserMappingFile,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DelveBlogPage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DisablePageComments,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UseCommunityScriptEditor,

        [Parameter()]
        [PnP.PowerShell.Commands.ClientSidePages.ClientSidePageTransformatorLogType]
        $LogType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $TargetConnection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $TargetPageFolderOverridesDefaultFolder,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipDefaultUrlRewriting
    )
}
function Copy-PnPFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreVersionHistory,

        [Parameter()]
        [System.String]
        $SourceUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipSourceFolderName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $TargetUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OverwriteIfAlreadyExists,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Copy-PnPItemProxy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $LiteralPath,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.String]
        $Destination,

        [Parameter()]
        [System.Management.Automation.PSCredential]
        $Credential,

        [Parameter()]
        [System.String[]]
        $Include,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Container,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UseTransaction,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recurse,

        [Parameter()]
        [System.String[]]
        $Path,

        [Parameter()]
        [System.String[]]
        $Exclude,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Deny-PnPTenantServicePrincipalPermissionRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $RequestId,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Disable-PnPFeature
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.FeatureScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Disable-PnPInPlaceRecordsManagementForSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Disable-PnPPowerShellTelemetry
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Disable-PnPResponsiveUI
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Disable-PnPSharingForNonOwnersOfSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Disable-PnPSiteClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Disable-PnPTenantServicePrincipal
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Disconnect-PnPOnline
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Enable-PnPCommSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $DesignPackageId
    )
}
function Enable-PnPFeature
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Sandboxed,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.FeatureScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Enable-PnPInPlaceRecordsManagementForSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Enable-PnPPowerShellTelemetry
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Enable-PnPResponsiveUI
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $InfrastructureSiteUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Enable-PnPSiteClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $DefaultClassification,

        [Parameter()]
        [System.String[]]
        $Classifications,

        [Parameter()]
        [System.String]
        $UsageGuidelinesUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Enable-PnPTenantServicePrincipal
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Export-PnPClientSidePage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Out,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ExtractConfigurationPipeBind]
        $Configuration,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PersistBrandingFiles,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Export-PnPClientSidePageMapping
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BuiltInWebPartMapping,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.PagePipeBind]
        $PublishingPage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Overwrite,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AnalyzeOOBPageLayouts,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BuiltInPageLayoutMapping,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CustomPageLayoutMapping,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Logging
    )
}
function Export-PnPListToProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OutputInstance,

        [Parameter()]
        [System.String]
        $Out,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.Xml.XMLPnPSchemaVersion]
        $Schema,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String[]]
        $List,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Export-PnPTaxonomy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeID,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.Encoding]
        $Encoding,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $TermSetId,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Delimiter,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.Int32]
        $Lcid,

        [Parameter()]
        [System.String]
        $TermStoreName
    )
}
function Export-PnPTermGroupToXml
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.String]
        $Out,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $FullTemplate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TermGroupPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Text.Encoding]
        $Encoding
    )
}
function Find-PnPFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FolderPipeBind]
        $Folder,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $Match,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Get-PnPAADUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $OrderBy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Delta,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $Identity,

        [Parameter()]
        [System.String]
        $DeltaToken,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.String[]]
        $Select
    )
}
function Get-PnPAccessToken
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Decoded,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Get-PnPAlert
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.UserPipeBind]
        $User,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Get-PnPApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
        $Identity,

        [Parameter()]
        [OfficeDevPnP.Core.Enums.AppCatalogScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPAppAuthAccessToken
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPAppInstance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.AppPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPApplicationCustomizer
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $ClientSideComponentId,

        [Parameter()]
        [System.String[]]
        $Includes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ThrowExceptionIfCustomActionNotFound,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CustomActionScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm
    )
}
function Get-PnPAuditing
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPAuthenticationRealm
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Url
    )
}
function Get-PnPAvailableClientSideComponents
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Page,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSideComponentPipeBind]
        $Component
    )
}
function Get-PnPAvailableLanguage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPAzureCertificate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $CertificatePath,

        [Parameter()]
        [System.Security.SecureString]
        $CertificatePassword
    )
}
function Get-PnPClientSideComponent
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $InstanceId,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Page,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPClientSidePage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPConnection
{
    [CmdletBinding()]
    param(

    )
}
function Get-PnPContentType
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InSiteHierarchy,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Get-PnPContentTypePublishingHubUrl
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPContext
{
    [CmdletBinding()]
    param(

    )
}
function Get-PnPCustomAction
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ThrowExceptionIfCustomActionNotFound,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CustomActionScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPDefaultColumnValues
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Get-PnPDeletedMicrosoft365Group
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Get-PnPDocumentSetTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.DocumentSetPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPEventReceiver
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.EventReceiverPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String[]]
        $Includes,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Get-PnPException
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $All
    )
}
function Get-PnPFeature
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FeaturePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.FeatureScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPField
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Includes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InSiteHierarchy,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Group,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Get-PnPFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsFileObject,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsListItem,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ThrowExceptionIfFileNotFound,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsString,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.String]
        $Filename,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsFile
    )
}
function Get-PnPFileVersion
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Url
    )
}
function Get-PnPFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.String[]]
        $Includes,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Get-PnPFolderItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FolderPipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $ItemName,

        [Parameter()]
        [System.String]
        $FolderSiteRelativeUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $ItemType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recursive
    )
}
function Get-PnPFooter
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPGraphAccessToken
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Decoded,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Get-PnPGraphSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Get-PnPGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AssociatedOwnerGroup,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AssociatedMemberGroup,

        [Parameter()]
        [System.String[]]
        $Includes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AssociatedVisitorGroup,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPGroupMembers
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPGroupPermissions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPHealthScore
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url
    )
}
function Get-PnPHideDefaultThemes
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPHomePage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPHomeSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPHubSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.HubSitePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPHubSiteChild
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.HubSitePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPIndexedPropertyKeys
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Get-PnPInPlaceRecordsManagement
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPIsSiteAliasAvailable
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPJavaScriptLink
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ThrowExceptionIfJavaScriptLinkNotFound,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CustomActionScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPKnowledgeHubSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPLabel
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ValuesOnly,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Get-PnPList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ThrowExceptionIfListNotFound,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPListInformationRightsManagement
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Get-PnPListItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $Id,

        [Parameter()]
        [System.String[]]
        $Fields,

        [Parameter()]
        [System.String]
        $Query,

        [Parameter()]
        [System.Management.Automation.ScriptBlock]
        $ScriptBlock,

        [Parameter()]
        [System.Int32]
        $PageSize,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $UniqueId,

        [Parameter()]
        [System.String]
        $FolderServerRelativeUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Get-PnPListRecordDeclaration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Get-PnPManagementApiAccessToken
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $TenantId,

        [Parameter()]
        [System.String]
        $ClientId,

        [Parameter()]
        [System.String]
        $ClientSecret
    )
}
function Get-PnPMasterPage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPMicrosoft365Group
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeHasTeam,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeClassification,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ExcludeSiteUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Get-PnPMicrosoft365GroupMembers
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Get-PnPMicrosoft365GroupOwners
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Get-PnPNavigationNode
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $Id,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [OfficeDevPnP.Core.Enums.NavigationType]
        $Location,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Tree
    )
}
function Get-PnPOffice365CurrentServiceStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[PnP.PowerShell.Commands.Enums.Office365Workload]]
        $Workload,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Get-PnPOffice365HistoricalServiceStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[PnP.PowerShell.Commands.Enums.Office365Workload]]
        $Workload,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Get-PnPOffice365ServiceMessage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[PnP.PowerShell.Commands.Enums.Office365Workload]]
        $Workload,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Get-PnPOffice365Services
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Get-PnPOfficeManagementApiAccessToken
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Decoded,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Get-PnPOrgAssetsLibrary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPOrgNewsSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPPowerShellTelemetryEnabled
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.SharePoint.Client.ClientObject]
        $ClientObject,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String[]]
        $Property
    )
}
function Get-PnPPropertyBag
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $Key,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.Xml.XMLPnPSchemaVersion]
        $Schema,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PersistBrandingFiles,

        [Parameter()]
        [System.String[]]
        $ContentTypeGroups,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.Handlers]
        $Handlers,

        [Parameter()]
        [System.String]
        $TemplateImagePreviewUrl,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
        $TemplateProviderExtensions,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeAllClientSidePages,

        [Parameter()]
        [System.String[]]
        $ListsToExtract,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ExcludeContentTypesFromSyndication,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipVersionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeSiteGroups,

        [Parameter()]
        [System.Text.Encoding]
        $Encoding,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeSearchConfiguration,

        [Parameter()]
        [System.String]
        $ResourceFilePrefix,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $NoBaseTemplate,

        [Parameter()]
        [System.Collections.Hashtable]
        $TemplateProperties,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeAllTermGroups,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PersistComposedLookFiles,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ExtractConfigurationPipeBind]
        $Configuration,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OutputInstance,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ExtensibilityHandler[]]
        $ExtensibilityHandlers,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeTermGroupsSecurity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PersistMultiLanguageResources,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeHiddenLists,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeSiteCollectionTermGroup,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PersistPublishingFiles,

        [Parameter()]
        [System.String]
        $Out,

        [Parameter()]
        [System.String]
        $TemplateDisplayName,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.Handlers]
        $ExcludeHandlers,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeNativePublishingFiles
    )
}
function Get-PnPPublishingImageRendition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ImageRenditionPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPRecycleBinItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $RowLimit,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SecondStage,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String[]]
        $Includes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $FirstStage
    )
}
function Get-PnPRequestAccessEmails
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPRoleDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.RoleDefinitionPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPSearchConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.SearchConfigurationScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Search.OutputFormat]
        $OutputFormat,

        [Parameter()]
        [System.String]
        $Path
    )
}
function Get-PnPSearchCrawlLog
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $RowLimit,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.DateTime]
        $EndDate,

        [Parameter()]
        [PnP.PowerShell.Commands.Search.LogLevel]
        $LogLevel,

        [Parameter()]
        [PnP.PowerShell.Commands.Search.ContentSource]
        $ContentSource,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RawFormat,

        [Parameter()]
        [System.DateTime]
        $StartDate
    )
}
function Get-PnPSearchSettings
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPSharingForNonOwnersOfSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPSiteClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Get-PnPSiteClosure
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPSiteCollectionAdmin
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPSiteCollectionTermStore
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPSiteDesign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPSiteDesignRights
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPSiteDesignRun
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $WebUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $SiteDesignId
    )
}
function Get-PnPSiteDesignRunStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.TenantSiteDesignRun]
        $Run,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPSiteDesignTask
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignTaskPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $WebUrl
    )
}
function Get-PnPSitePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllAvailable,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPSiteScript
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
        $SiteDesign,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteScriptPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPSiteScriptFromList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Url
    )
}
function Get-PnPSiteScriptFromWeb
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Lists,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeRegionalSettings,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeTheme,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeLinksToExportedItems,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeBranding,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeAll,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeSiteExternalSharingCapability
    )
}
function Get-PnPSiteSearchQueryResults
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $MaxResults,

        [Parameter()]
        [System.String]
        $Query,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Int32]
        $StartRow,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $All
    )
}
function Get-PnPStorageEntity
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Enums.StorageEntityScope]
        $Scope,

        [Parameter()]
        [System.String]
        $Key,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPStoredCredential
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CredentialType]
        $Type
    )
}
function Get-PnPSubWebs
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String[]]
        $Includes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recurse
    )
}
function Get-PnPTaxonomyItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $TermPath
    )
}
function Get-PnPTaxonomySession
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPTeamsApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsAppPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Get-PnPTeamsChannel
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsChannelPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team
    )
}
function Get-PnPTeamsChannelMessage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeDeleted,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsChannelPipeBind]
        $Channel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team
    )
}
function Get-PnPTeamsTab
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsChannelPipeBind]
        $Channel,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTabPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team
    )
}
function Get-PnPTeamsTeam
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Get-PnPTeamsUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsChannelPipeBind]
        $Channel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team,

        [Parameter()]
        [System.String]
        $Role
    )
}
function Get-PnPTenant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPTenantAppCatalogUrl
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPTenantCdnEnabled
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
        $CdnType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPTenantCdnOrigin
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
        $CdnType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPTenantCdnPolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
        $CdnType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPTenantId
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $TenantUrl
    )
}
function Get-PnPTenantRecycleBinItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPTenantSequence
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningHierarchy]
        $Template,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ProvisioningSequencePipeBind]
        $Identity
    )
}
function Get-PnPTenantSequenceSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningSequence]
        $Sequence,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ProvisioningSitePipeBind]
        $Identity
    )
}
function Get-PnPTenantServicePrincipal
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPTenantServicePrincipalPermissionGrants
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPTenantServicePrincipalPermissionRequests
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPTenantSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Detailed,

        [Parameter()]
        [System.String]
        $WebTemplate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeOneDriveSites,

        [Parameter()]
        [System.String]
        $Template,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Get-PnPTenantSyncClientRestriction
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPTenantTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Out,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ExtractConfigurationPipeBind]
        $Configuration,

        [Parameter()]
        [System.String]
        $SiteUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsInstance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Get-PnPTenantTheme
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJson
    )
}
function Get-PnPTerm
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeChildTerms,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermStore]]
        $TermStore,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermSet]]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TermGroupPipeBind]
        $TermGroup,

        [Parameter()]
        [System.String[]]
        $Includes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recursive,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TaxonomyItemPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermSet]]
        $TermSet
    )
}
function Get-PnPTermGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermStore]]
        $TermStore,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TaxonomyItemPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermGroup]]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPTermSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermStore]]
        $TermStore,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermSet]]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TermGroupPipeBind]
        $TermGroup,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPTheme
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DetectCurrentComposedLook,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPTimeZoneId
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Match
    )
}
function Get-PnPUnifiedAuditLog
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTime]
        $StartTime,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.AuditContentType]
        $ContentType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.DateTime]
        $EndTime
    )
}
function Get-PnPUPABulkImportStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $JobId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeErrorDetails
    )
}
function Get-PnPUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WithRightsAssigned,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WithRightsAssignedDetailed,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.UserPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPUserOneDriveQuota
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Account,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPUserProfileProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Account,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPView
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ViewPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String[]]
        $Includes,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Get-PnPWeb
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPWebhookSubscriptions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Get-PnPWebPart
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ServerRelativePageUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPartPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPWebPartProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ServerRelativePageUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Key
    )
}
function Get-PnPWebPartXml
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ServerRelativePageUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPartPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPWebTemplates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Int32]
        $CompatibilityLevel,

        [Parameter()]
        [System.UInt32]
        $Lcid
    )
}
function Get-PnPWikiPageContent
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ServerRelativePageUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPWorkflowDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PublishedOnly,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Get-PnPWorkflowInstance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WorkflowSubscriptionPipeBind]
        $WorkflowSubscription,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
        $ListItem,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Get-PnPWorkflowSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Grant-PnPHubSiteRights
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Principals,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.SPOHubSiteUserRights]
        $Rights,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.HubSitePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Grant-PnPSiteDesignRights
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Principals,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.TenantSiteDesignPrincipalRights]
        $Rights,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Grant-PnPTenantServicePrincipalPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Resource
    )
}
function Import-PnPAppPackage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $Locale,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LoadOnly,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Import-PnPTaxonomy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SynchronizeDeletions,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.String[]]
        $Terms,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Delimiter,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.Int32]
        $Lcid,

        [Parameter()]
        [System.String]
        $TermStoreName
    )
}
function Import-PnPTermGroupFromXml
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Xml,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Path
    )
}
function Import-PnPTermSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Contact,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SynchronizeDeletions,

        [Parameter()]
        [System.Boolean]
        $IsOpen,

        [Parameter()]
        [System.String]
        $GroupName,

        [Parameter()]
        [System.String]
        $Owner,

        [Parameter()]
        [System.Guid]
        $TermSetId,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.String]
        $TermStoreName
    )
}
function Initialize-PnPPowerShellAuthentication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Country,

        [Parameter()]
        [System.String]
        $CertificatePath,

        [Parameter()]
        [System.String]
        $OutPath,

        [Parameter()]
        [OfficeDevPnP.Core.AzureEnvironment]
        $AzureEnvironment,

        [Parameter()]
        [System.Security.SecureString]
        $CertificatePassword,

        [Parameter()]
        [System.String]
        $ApplicationName,

        [Parameter()]
        [System.String]
        $Locality,

        [Parameter()]
        [System.Int32]
        $ValidYears,

        [Parameter()]
        [System.String[]]
        $Scopes,

        [Parameter()]
        [System.String]
        $Organization,

        [Parameter()]
        [System.String]
        $CommonName,

        [Parameter()]
        [System.String]
        $State,

        [Parameter()]
        [System.Security.Cryptography.X509Certificates.StoreLocation]
        $Store,

        [Parameter()]
        [System.String]
        $Tenant,

        [Parameter()]
        [System.String]
        $OrganizationUnit
    )
}
function Install-PnPApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
        $Identity,

        [Parameter()]
        [OfficeDevPnP.Core.Enums.AppCatalogScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Wait
    )
}
function Install-PnPSolution
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $PackageId,

        [Parameter()]
        [System.Int32]
        $MinorVersion,

        [Parameter()]
        [System.String]
        $SourceFilePath,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Int32]
        $MajorVersion
    )
}
function Invoke-PnPQuery
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $RetryWait,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Int32]
        $RetryCount
    )
}
function Invoke-PnPSiteDesign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $WebUrl
    )
}
function Invoke-PnPSPRestMethod
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ContentType,

        [Parameter()]
        [System.Object]
        $Content,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.HttpRequestMethod]
        $Method
    )
}
function Invoke-PnPWebAction
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Action`1[Microsoft.SharePoint.Client.ListItem]]
        $ListItemAction,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DisableStatisticsOutput,

        [Parameter()]
        [System.Func`2[Microsoft.SharePoint.Client.List,System.Boolean]]
        $ShouldProcessListAction,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.String[]]
        $ListItemProperties,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Action`1[Microsoft.SharePoint.Client.Web]]
        $WebAction,

        [Parameter()]
        [System.String]
        $ListName,

        [Parameter()]
        [System.Action`1[Microsoft.SharePoint.Client.List]]
        $PostListAction,

        [Parameter()]
        [System.Func`2[Microsoft.SharePoint.Client.ListItem,System.Boolean]]
        $ShouldProcessListItemAction,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipCounting,

        [Parameter()]
        [Microsoft.SharePoint.Client.Web[]]
        $Webs,

        [Parameter()]
        [System.Action`1[Microsoft.SharePoint.Client.List]]
        $ListAction,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SubWebs,

        [Parameter()]
        [System.Func`2[Microsoft.SharePoint.Client.Web,System.Boolean]]
        $ShouldProcessWebAction,

        [Parameter()]
        [System.String[]]
        $ListProperties,

        [Parameter()]
        [System.String[]]
        $WebProperties,

        [Parameter()]
        [System.Func`2[Microsoft.SharePoint.Client.List,System.Boolean]]
        $ShouldProcessPostListAction,

        [Parameter()]
        [System.Func`2[Microsoft.SharePoint.Client.Web,System.Boolean]]
        $ShouldProcessPostWebAction,

        [Parameter()]
        [System.Action`1[Microsoft.SharePoint.Client.Web]]
        $PostWebAction
    )
}
function Measure-PnPList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ItemLevel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BrokenPermissions,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Measure-PnPResponseTime
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.UInt32]
        $Timeout,

        [Parameter()]
        [System.UInt32]
        $Count,

        [Parameter()]
        [System.UInt32]
        $WarmUp,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.DiagnosticEndpointPipeBind]
        $Url,

        [Parameter()]
        [PnP.PowerShell.Commands.Diagnostic.MeasureResponseTimeMode]
        $Mode,

        [Parameter()]
        [System.UInt32]
        $Histogram
    )
}
function Measure-PnPWeb
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeHiddenList,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recursive
    )
}
function Move-PnPClientSideComponent
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $InstanceId,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Page,

        [Parameter()]
        [System.Int32]
        $Position,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Int32]
        $Column,

        [Parameter()]
        [System.Int32]
        $Section,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Move-PnPFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreVersionHistory,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowSmallerVersionLimitOnDestination,

        [Parameter()]
        [System.String]
        $TargetUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $TargetServerRelativeLibrary,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowSchemaMismatch,

        [Parameter()]
        [System.String]
        $ServerRelativeUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OverwriteIfAlreadyExists,

        [Parameter()]
        [System.String]
        $SiteRelativeUrl
    )
}
function Move-PnPFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $TargetFolder,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Move-PnPItemProxy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Exclude,

        [Parameter()]
        [System.String[]]
        $LiteralPath,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.String]
        $Destination,

        [Parameter()]
        [System.Management.Automation.PSCredential]
        $Credential,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Container,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UseTransaction,

        [Parameter()]
        [System.String[]]
        $Path,

        [Parameter()]
        [System.String[]]
        $Include,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Move-PnPListItemToRecycleBin
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Move-PnPRecycleBinItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.RecycleBinItemPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function New-PnPAzureCertificate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Country,

        [Parameter()]
        [System.String]
        $OutPfx,

        [Parameter()]
        [System.String]
        $Out,

        [Parameter()]
        [System.Security.SecureString]
        $CertificatePassword,

        [Parameter()]
        [System.String]
        $Locality,

        [Parameter()]
        [System.String]
        $OutCert,

        [Parameter()]
        [System.String]
        $Organization,

        [Parameter()]
        [System.Int32]
        $ValidYears,

        [Parameter()]
        [System.String]
        $State,

        [Parameter()]
        [System.String]
        $OrganizationUnit,

        [Parameter()]
        [System.String]
        $CommonName
    )
}
function New-PnPExtensibilityHandlerObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Type,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Disabled,

        [Parameter()]
        [System.String]
        $Configuration,

        [Parameter()]
        [System.String]
        $Assembly
    )
}
function New-PnPGraphSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTime]
        $ExpirationDateTime,

        [Parameter()]
        [System.String]
        $ClientState,

        [Parameter()]
        [OfficeDevPnP.Core.Enums.GraphSubscriptionTlsVersion]
        $LatestSupportedTlsVersion,

        [Parameter()]
        [OfficeDevPnP.Core.Enums.GraphSubscriptionChangeType]
        $ChangeType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.String]
        $NotificationUrl,

        [Parameter()]
        [System.String]
        $Resource
    )
}
function New-PnPGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.AssociatedGroupType]
        $SetAssociatedGroup,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AutoAcceptRequestToJoinLeave,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Owner,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OnlyAllowMembersViewMembership,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DisallowMembersViewMembership,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowMembersEditMembership,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $RequestToJoinEmail,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowRequestToJoinLeave
    )
}
function New-PnPList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $EnableVersioning,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Hidden,

        [Parameter()]
        [Microsoft.SharePoint.Client.ListTemplateType]
        $Template,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $EnableContentTypes,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OnQuickLaunch,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [Microsoft.SharePoint.Client.QuickLaunchOptions]
        $QuickLaunchOptions
    )
}
function New-PnPMicrosoft365Group
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String[]]
        $Owners,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $GroupLogoPath,

        [Parameter()]
        [System.String[]]
        $Members,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsPrivate,

        [Parameter()]
        [System.String]
        $MailNickname,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CreateTeam,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function New-PnPPersonalSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String[]]
        $Email
    )
}
function New-PnPProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm
    )
}
function New-PnPProvisioningTemplateFromFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $Out,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.Xml.XMLPnPSchemaVersion]
        $Schema,

        [Parameter()]
        [System.String]
        $Match,

        [Parameter()]
        [System.Collections.Hashtable]
        $Properties,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsIncludeFile,

        [Parameter()]
        [System.String]
        $TargetFolder,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $ContentType,

        [Parameter()]
        [System.Text.Encoding]
        $Encoding
    )
}
function New-PnPSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Enums.SiteType]
        $Type,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Wait,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $HubSiteId
    )
}
function New-PnPTeamsApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.String]
        $Path
    )
}
function New-PnPTeamsTeam
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $AllowGuestDeleteChannels,

        [Parameter()]
        [System.Boolean]
        $AllowUserDeleteMessages,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $MailNickName,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.Boolean]
        $AllowCreateUpdateChannels,

        [Parameter()]
        [System.Boolean]
        $AllowDeleteChannels,

        [Parameter()]
        [System.String]
        $Classification,

        [Parameter()]
        [System.Boolean]
        $AllowCreateUpdateRemoveConnectors,

        [Parameter()]
        [System.Boolean]
        $AllowUserEditMessages,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Boolean]
        $AllowAddRemoveApps,

        [Parameter()]
        [PnP.PowerShell.Commands.Model.Teams.TeamGiphyContentRating]
        $GiphyContentRating,

        [Parameter()]
        [System.Boolean]
        $AllowTeamMentions,

        [Parameter()]
        [System.String]
        $GroupId,

        [Parameter()]
        [System.Boolean]
        $AllowOwnerDeleteMessages,

        [Parameter()]
        [System.Boolean]
        $AllowGuestCreateUpdateChannels,

        [Parameter()]
        [System.String]
        $Owner,

        [Parameter()]
        [System.Boolean]
        $AllowStickersAndMemes,

        [Parameter()]
        [System.Boolean]
        $ShowInTeamsSearchAndSuggestions,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.Teams.TeamVisibility]
        $Visibility,

        [Parameter()]
        [System.Boolean]
        $AllowCreateUpdateRemoveTabs,

        [Parameter()]
        [System.Boolean]
        $AllowGiphy,

        [Parameter()]
        [System.Boolean]
        $AllowChannelMentions,

        [Parameter()]
        [System.Boolean]
        $AllowCustomMemes
    )
}
function New-PnPTenantSequence
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm
    )
}
function New-PnPTenantSequenceCommunicationSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $HubSite,

        [Parameter()]
        [System.String[]]
        $TemplateIds,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.String]
        $SiteDesignId,

        [Parameter()]
        [System.String]
        $Owner,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Classification,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowFileSharingForGuestUsers,

        [Parameter()]
        [System.UInt32]
        $Language
    )
}
function New-PnPTenantSequenceTeamNoGroupSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $HubSite,

        [Parameter()]
        [System.String[]]
        $TemplateIds,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Owner,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.UInt32]
        $Language,

        [Parameter()]
        [System.UInt32]
        $TimeZoneId
    )
}
function New-PnPTenantSequenceTeamNoGroupSubSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String[]]
        $TemplateIds,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $QuickLaunchDisabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UseDifferentPermissionsFromParentSite,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.UInt32]
        $Language,

        [Parameter()]
        [System.UInt32]
        $TimeZoneId
    )
}
function New-PnPTenantSequenceTeamSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $HubSite,

        [Parameter()]
        [System.String[]]
        $TemplateIds,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Alias,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Public,

        [Parameter()]
        [System.String]
        $Classification
    )
}
function New-PnPTenantSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Template,

        [Parameter()]
        [System.Int64]
        $StorageQuota,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveDeletedSite,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Owner,

        [Parameter()]
        [System.Int32]
        $TimeZone,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.Double]
        $ResourceQuota,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Wait,

        [Parameter()]
        [System.UInt32]
        $Lcid,

        [Parameter()]
        [System.Double]
        $ResourceQuotaWarningLevel,

        [Parameter()]
        [System.Int64]
        $StorageQuotaWarningLevel
    )
}
function New-PnPTenantTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $Author,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.String]
        $Generator
    )
}
function New-PnPTerm
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermStore]]
        $TermStore,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Collections.Hashtable]
        $CustomProperties,

        [Parameter()]
        [System.Collections.Hashtable]
        $LocalCustomProperties,

        [Parameter()]
        [System.Guid]
        $Id,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TermGroupPipeBind]
        $TermGroup,

        [Parameter()]
        [System.Int32]
        $Lcid,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TaxonomyItemPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermSet]]
        $TermSet
    )
}
function New-PnPTermGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermStore]]
        $TermStore,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Guid]
        $Id
    )
}
function New-PnPTermLabel
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TaxonomyItemPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.Term]]
        $Term,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Int32]
        $Lcid,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsDefault
    )
}
function New-PnPTermSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsOpenForTermCreation,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String]
        $Contact,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermStore]]
        $TermStore,

        [Parameter()]
        [System.String]
        $Owner,

        [Parameter()]
        [System.Collections.Hashtable]
        $CustomProperties,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsNotAvailableForTagging,

        [Parameter()]
        [System.Guid]
        $Id,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TermGroupPipeBind]
        $TermGroup,

        [Parameter()]
        [System.String[]]
        $StakeHolders,

        [Parameter()]
        [System.Int32]
        $Lcid
    )
}
function New-PnPUPABulkImportJob
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantManagement.ImportProfilePropertiesUserIdType]
        $IdType,

        [Parameter()]
        [System.Collections.Hashtable]
        $UserProfilePropertyMapping,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $IdProperty,

        [Parameter()]
        [System.String]
        $Path
    )
}
function New-PnPUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $LoginName,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function New-PnPWeb
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BreakInheritance,

        [Parameter()]
        [System.Int32]
        $Locale,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InheritNavigation,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.String]
        $Template
    )
}
function Publish-PnPApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipFeatureDeployment,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
        $Identity,

        [Parameter()]
        [OfficeDevPnP.Core.Enums.AppCatalogScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Read-PnPProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Xml,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
        $TemplateProviderExtensions,

        [Parameter()]
        [System.String]
        $Path
    )
}
function Read-PnPTenantTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
        $TemplateProviderExtensions,

        [Parameter()]
        [System.String]
        $Path
    )
}
function Register-PnPAppCatalogSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $TimeZoneId,

        [Parameter()]
        [System.String]
        $Owner,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Register-PnPHubSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $Site,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Register-PnPManagementShellAccess
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $SiteUrl,

        [Parameter()]
        [OfficeDevPnP.Core.AzureEnvironment]
        $AzureEnvironment
    )
}
function Remove-PnPAlert
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.UserPipeBind]
        $User,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.AlertPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
        $Identity,

        [Parameter()]
        [OfficeDevPnP.Core.Enums.AppCatalogScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Remove-PnPApplicationCustomizer
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $ClientSideComponentId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.UserCustomActionPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CustomActionScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPClientSideComponent
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $InstanceId,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Page,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPClientSidePage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPContentType
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPContentTypeFromDocumentSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.DocumentSetPipeBind]
        $DocumentSet,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $ContentType
    )
}
function Remove-PnPContentTypeFromList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $ContentType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Remove-PnPCustomAction
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.UserCustomActionPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CustomActionScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPDeletedMicrosoft365Group
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Remove-PnPEventReceiver
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.EventReceiverPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPField
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPFieldFromContentType
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
        $Field,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DoNotUpdateChildren,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $ContentType
    )
}
function Remove-PnPFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $SiteRelativeUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recycle,

        [Parameter()]
        [System.String]
        $ServerRelativeUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPFileFromProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
        $TemplateProviderExtensions,

        [Parameter()]
        [System.String]
        $FilePath,

        [Parameter()]
        [System.String]
        $Path
    )
}
function Remove-PnPFileVersion
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FileVersionPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $All,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recycle,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recycle,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPGraphSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GraphSubscriptionPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Remove-PnPGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPHomeSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPHubSiteAssociation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $Site,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Remove-PnPIndexedProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $Key,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Remove-PnPJavaScriptLink
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.UserCustomActionPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CustomActionScope]
        $Scope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $FromSite,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPKnowledgeHubSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Remove-PnPList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recycle,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPListItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recycle,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPMicrosoft365Group
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Remove-PnPMicrosoft365GroupMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.String[]]
        $Users,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Remove-PnPMicrosoft365GroupOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.String[]]
        $Users,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Remove-PnPNavigationNode
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Header,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [OfficeDevPnP.Core.Enums.NavigationType]
        $Location,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.NavigationNodePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $All,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPOrgAssetsLibrary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
        $CdnType,

        [Parameter()]
        [System.String]
        $LibraryUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Boolean]
        $ShouldRemoveFromCdn
    )
}
function Remove-PnPOrgNewsSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $OrgNewsSiteUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Remove-PnPPropertyBagValue
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.String]
        $Key
    )
}
function Remove-PnPPublishingImageRendition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ImageRenditionPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPRoleDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.RoleDefinitionPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPSearchConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Configuration,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.SearchConfigurationScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Path
    )
}
function Remove-PnPSiteClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Classifications,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Remove-PnPSiteCollectionAdmin
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.List`1[PnP.PowerShell.Commands.Base.PipeBinds.UserPipeBind]]
        $Owners,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Remove-PnPSiteCollectionAppCatalog
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $Site,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Remove-PnPSiteDesign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPSiteDesignTask
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignTaskPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPSiteScript
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteScriptPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPStorageEntity
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.StorageEntityScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Key
    )
}
function Remove-PnPStoredCredential
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPTaxonomyItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $TermPath,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPTeamsApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsAppPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPTeamsChannel
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsChannelPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPTeamsTab
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsChannelPipeBind]
        $Channel,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTabPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPTeamsTeam
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPTeamsUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $User,

        [Parameter()]
        [System.String]
        $Role,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPTenantCdnOrigin
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
        $CdnType,

        [Parameter()]
        [System.String]
        $OriginUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Remove-PnPTenantSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $FromRecycleBin,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipRecycleBin,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Wait,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPTenantTheme
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ThemePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Remove-PnPTermGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $GroupName,

        [Parameter()]
        [System.String]
        $TermStoreName,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.UserPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPUserFromGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $LoginName,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Remove-PnPView
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ViewPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPWeb
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPWebhookSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebhookSubscriptionPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPWebPart
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $ServerRelativePageUrl,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Remove-PnPWikiPage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $SiteRelativePageUrl,

        [Parameter()]
        [System.String]
        $ServerRelativePageUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Remove-PnPWorkflowDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WorkflowDefinitionPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Remove-PnPWorkflowSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WorkflowSubscriptionPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Rename-PnPFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.String]
        $TargetFileName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $ServerRelativeUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OverwriteIfAlreadyExists,

        [Parameter()]
        [System.String]
        $SiteRelativeUrl
    )
}
function Rename-PnPFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [System.String]
        $TargetFolderName,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Request-PnPAccessToken
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.PSCredential]
        $Credentials,

        [Parameter()]
        [System.String]
        $ClientId,

        [Parameter()]
        [System.String[]]
        $Scopes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Decoded,

        [Parameter()]
        [System.String]
        $TenantUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SetAsCurrent,

        [Parameter()]
        [System.String]
        $Resource
    )
}
function Request-PnPReIndexList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Request-PnPReIndexWeb
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Reset-PnPFileVersion
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $CheckInComment,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $ServerRelativeUrl,

        [Parameter()]
        [Microsoft.SharePoint.Client.CheckinType]
        $CheckinType
    )
}
function Reset-PnPLabel
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.Boolean]
        $SyncToItems
    )
}
function Reset-PnPMicrosoft365GroupExpiration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Reset-PnPUserOneDriveQuotaToDefault
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Account,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Resolve-PnPFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $SiteRelativePath,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Restore-PnPDeletedMicrosoft365Group
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Restore-PnPFileVersion
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FileVersionPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Restore-PnPRecycleBinItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $RowLimit,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.RecycleBinItemPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $All,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Restore-PnPTenantRecycleBinItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Wait,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Resume-PnPWorkflowInstance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WorkflowInstancePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Revoke-PnPHubSiteRights
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Principals,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.HubSitePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Revoke-PnPSiteDesignRights
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Principals,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Revoke-PnPTenantServicePrincipalPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Save-PnPClientSidePageConversionLog
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Save-PnPProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
        $TemplateProviderExtensions,

        [Parameter()]
        [System.String]
        $Out,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.Xml.XMLPnPSchemaVersion]
        $Schema,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ProvisioningTemplatePipeBind]
        $Template,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Save-PnPTenantTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Out,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.Xml.XMLPnPSchemaVersion]
        $Schema,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ProvisioningHierarchyPipeBind]
        $Template,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Send-PnPMail
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $To,

        [Parameter()]
        [System.String]
        $Body,

        [Parameter()]
        [System.String]
        $Subject,

        [Parameter()]
        [System.String]
        $Password,

        [Parameter()]
        [System.String[]]
        $Cc,

        [Parameter()]
        [System.String]
        $Server,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $From
    )
}
function Set-PnPApplicationCustomizer
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $ClientSideComponentId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Sequence,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CustomActionScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.UserCustomActionPipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $ClientSideComponentProperties
    )
}
function Set-PnPAppSideLoading
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Off,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $On
    )
}
function Set-PnPAuditing
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CheckOutCheckInItems,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $TrimAuditLog,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DisableAll,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SearchContent,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $EditItems,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $EditContentTypesColumns,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DeleteRestoreItems,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $EditUsersPermissions,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $EnableAll,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $MoveCopyItems,

        [Parameter()]
        [System.Int32]
        $RetentionTime
    )
}
function Set-PnPAvailablePageLayouts
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String[]]
        $PageLayouts,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InheritPageLayouts,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowAllPageLayouts
    )
}
function Set-PnPClientSidePage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ThumbnailUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Publish,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $PublishMessage,

        [Parameter()]
        [PnP.PowerShell.Commands.ClientSidePages.ClientSidePagePromoteType]
        $PromoteAs,

        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [OfficeDevPnP.Core.Pages.ClientSidePageLayoutType]
        $LayoutType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $ContentType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CommentsEnabled,

        [Parameter()]
        [OfficeDevPnP.Core.Pages.ClientSidePageHeaderType]
        $HeaderType
    )
}
function Set-PnPClientSideText
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $InstanceId,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Page,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Text
    )
}
function Set-PnPClientSideWebPart
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Page,

        [Parameter()]
        [System.String]
        $PropertiesJson,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSideWebPartPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Set-PnPContext
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.SharePoint.Client.ClientContext]
        $Context
    )
}
function Set-PnPDefaultColumnValues
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [System.String[]]
        $Value,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
        $Field,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Set-PnPDefaultContentTypeToList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $ContentType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Set-PnPDefaultPageLayout
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InheritFromParentSite,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Set-PnPDocumentSetField
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SetSharedField,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.DocumentSetPipeBind]
        $DocumentSet,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveSharedField,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
        $Field,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveWelcomePageField,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SetWelcomePageField
    )
}
function Set-PnPField
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Hashtable]
        $Values
    )
}
function Set-PnPFileCheckedIn
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Approve,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $Comment,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [Microsoft.SharePoint.Client.CheckinType]
        $CheckinType
    )
}
function Set-PnPFileCheckedOut
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Url
    )
}
function Set-PnPFolderPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ClearExisting,

        [Parameter()]
        [System.String]
        $AddRole,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $User,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SystemUpdate,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FolderPipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $RemoveRole,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Group,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InheritPermissions,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Set-PnPFooter
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $LogoUrl,

        [Parameter()]
        [Microsoft.SharePoint.Client.FooterLayoutType]
        $Layout,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [Microsoft.SharePoint.Client.FooterVariantThemeType]
        $BackgroundTheme,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Enabled
    )
}
function Set-PnPGraphSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTime]
        $ExpirationDate,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GraphSubscriptionPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Set-PnPGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $AddRole,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Owner,

        [Parameter()]
        [System.Boolean]
        $OnlyAllowMembersViewMembership,

        [Parameter()]
        [System.String]
        $RemoveRole,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Boolean]
        $AllowMembersEditMembership,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Boolean]
        $AutoAcceptRequestToJoinLeave,

        [Parameter()]
        [System.String]
        $RequestToJoinEmail,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.AssociatedGroupType]
        $SetAssociatedGroup,

        [Parameter()]
        [System.Boolean]
        $AllowRequestToJoinLeave
    )
}
function Set-PnPGroupPermissions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $AddRole,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.String[]]
        $RemoveRole,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Set-PnPHideDefaultThemes
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $HideDefaultThemes,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Set-PnPHomePage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $RootFolderRelativeUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Set-PnPHomeSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Url
    )
}
function Set-PnPHubSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RequiresJoinApproval,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $HideNameInNavigation,

        [Parameter()]
        [System.String]
        $LogoUrl,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.HubSitePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $SiteDesignId
    )
}
function Set-PnPIndexedProperties
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String[]]
        $Keys
    )
}
function Set-PnPInPlaceRecordsManagement
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Off,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $On,

        [Parameter()]
        [System.Boolean]
        $Enabled
    )
}
function Set-PnPKnowledgeHubSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $KnowledgeHubSiteUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Set-PnPLabel
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $BlockDeletion,

        [Parameter()]
        [System.String]
        $Label,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Boolean]
        $BlockEdit,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.Boolean]
        $SyncToItems
    )
}
function Set-PnPList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Boolean]
        $EnableMinorVersions,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $Identity,

        [Parameter()]
        [Microsoft.SharePoint.Client.ListExperience]
        $ListExperience,

        [Parameter()]
        [System.Boolean]
        $EnableFolderCreation,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Boolean]
        $EnableAttachments,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CopyRoleAssignments,

        [Parameter()]
        [System.Boolean]
        $EnableModeration,

        [Parameter()]
        [System.Boolean]
        $EnableContentTypes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ClearSubscopes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ResetRoleInheritance,

        [Parameter()]
        [System.UInt32]
        $MajorVersions,

        [Parameter()]
        [System.Boolean]
        $ForceCheckout,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.Boolean]
        $Hidden,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BreakRoleInheritance,

        [Parameter()]
        [System.UInt32]
        $MinorVersions,

        [Parameter()]
        [System.Boolean]
        $EnableVersioning
    )
}
function Set-PnPListInformationRightsManagement
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.String]
        $PolicyDescription,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $LicenseCacheExpireDays,

        [Parameter()]
        [System.Nullable`1[System.DateTime]]
        $DocumentLibraryProtectionExpireDate,

        [Parameter()]
        [System.String]
        $GroupName,

        [Parameter()]
        [System.Boolean]
        $EnableLicenseCacheExpire,

        [Parameter()]
        [System.Boolean]
        $EnableGroupProtection,

        [Parameter()]
        [System.Boolean]
        $AllowScript,

        [Parameter()]
        [System.Boolean]
        $Enable,

        [Parameter()]
        [System.Boolean]
        $AllowWriteCopy,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Boolean]
        $EnableDocumentAccessExpire,

        [Parameter()]
        [System.Boolean]
        $EnableDocumentBrowserPublishingView,

        [Parameter()]
        [System.Boolean]
        $EnableRejection,

        [Parameter()]
        [System.Boolean]
        $DisableDocumentBrowserView,

        [Parameter()]
        [System.String]
        $PolicyTitle,

        [Parameter()]
        [System.Boolean]
        $EnableExpiration,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $DocumentAccessExpireDays,

        [Parameter()]
        [System.String]
        $TemplateId,

        [Parameter()]
        [System.Boolean]
        $AllowPrint
    )
}
function Set-PnPListItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Hashtable]
        $Values
    )
}
function Set-PnPListItemAsRecord
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.DateTime]
        $DeclarationDate,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Set-PnPListItemPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ClearExisting,

        [Parameter()]
        [System.String]
        $AddRole,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $User,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SystemUpdate,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $RemoveRole,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Group,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InheritPermissions,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Set-PnPListPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $AddRole,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $User,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $RemoveRole,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Group
    )
}
function Set-PnPListRecordDeclaration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $AutoRecordDeclaration,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Nullable`1[OfficeDevPnP.Core.EcmListManualRecordDeclaration]]
        $ManualRecordDeclaration,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Set-PnPMasterPage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $MasterPageSiteRelativeUrl,

        [Parameter()]
        [System.String]
        $CustomMasterPageSiteRelativeUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $MasterPageServerRelativeUrl,

        [Parameter()]
        [System.String]
        $CustomMasterPageServerRelativeUrl
    )
}
function Set-PnPMicrosoft365Group
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String[]]
        $Owners,

        [Parameter()]
        [System.Boolean]
        $HideFromOutlookClients,

        [Parameter()]
        [System.String]
        $GroupLogoPath,

        [Parameter()]
        [System.Boolean]
        $HideFromAddressLists,

        [Parameter()]
        [System.String[]]
        $Members,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsPrivate,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CreateTeam
    )
}
function Set-PnPMinimalDownloadStrategy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Off,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $On,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Set-PnPPropertyBagValue
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [System.String]
        $Value,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Indexed,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Key
    )
}
function Set-PnPProvisioningTemplateMetadata
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
        $TemplateProviderExtensions,

        [Parameter()]
        [System.Collections.Hashtable]
        $TemplateProperties,

        [Parameter()]
        [System.String]
        $TemplateDisplayName,

        [Parameter()]
        [System.String]
        $TemplateImagePreviewUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Path
    )
}
function Set-PnPRequestAccessEmails
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Disabled,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String[]]
        $Emails,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Set-PnPSearchConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Configuration,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.SearchConfigurationScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Path
    )
}
function Set-PnPSearchSettings
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $SearchPageUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.SearchSettingsScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $SearchBoxPlaceholderText,

        [Parameter()]
        [System.Nullable`1[Microsoft.SharePoint.Client.SearchScopeType]]
        $SearchScope,

        [Parameter()]
        [System.Nullable`1[Microsoft.SharePoint.Client.SearchBoxInNavBarType]]
        $SearchBoxInNavBar,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Set-PnPSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Nullable`1[System.Management.Automation.SwitchParameter]]
        $DisableFlows,

        [Parameter()]
        [System.String]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DisableSharingForNonOwners,

        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantManagement.SharingCapabilities]]
        $Sharing,

        [Parameter()]
        [System.Nullable`1[System.Double]]
        $UserCodeMaximumLevel,

        [Parameter()]
        [System.Nullable`1[System.Management.Automation.SwitchParameter]]
        $NoScriptSite,

        [Parameter()]
        [System.String]
        $Classification,

        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantManagement.SharingPermissionType]]
        $DefaultLinkPermission,

        [Parameter()]
        [System.String]
        $LogoFilePath,

        [Parameter()]
        [System.Nullable`1[System.Int64]]
        $StorageWarningLevel,

        [Parameter()]
        [System.Nullable`1[System.Management.Automation.SwitchParameter]]
        $CommentsOnSitePagesDisabled,

        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantAdministration.RestrictedToRegion]]
        $RestrictedToGeo,

        [Parameter()]
        [System.Nullable`1[OfficeDevPnP.Core.SiteLockState]]
        $LockState,

        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantAdministration.AppViewsPolicy]]
        $DisableAppViews,

        [Parameter()]
        [System.Nullable`1[System.Management.Automation.SwitchParameter]]
        $SocialBarOnSitePagesDisabled,

        [Parameter()]
        [System.String[]]
        $Owners,

        [Parameter()]
        [System.Nullable`1[System.Double]]
        $UserCodeWarningLevel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Wait,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $AnonymousLinkExpirationInDays,

        [Parameter()]
        [System.String]
        $NewUrl,

        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantAdministration.CompanyWideSharingLinksPolicy]]
        $DisableCompanyWideSharingLinks,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OverrideTenantAnonymousLinkExpirationPolicy,

        [Parameter()]
        [System.Nullable`1[System.Management.Automation.SwitchParameter]]
        $AllowSelfServiceUpgrade,

        [Parameter()]
        [System.Nullable`1[System.Int64]]
        $StorageMaximumLevel,

        [Parameter()]
        [System.Nullable`1[System.UInt32]]
        $LocaleId,

        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantManagement.SharingLinkType]]
        $DefaultSharingLinkType
    )
}
function Set-PnPSiteClosure
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.InformationManagement.ClosureState]
        $State
    )
}
function Set-PnPSiteDesign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $PreviewImageUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.SiteWebTemplate]
        $WebTemplate,

        [Parameter()]
        [System.Int32]
        $Version,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind[]]
        $SiteScriptIds,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $PreviewImageAltText,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsDefault
    )
}
function Set-PnPSitePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Set-PnPSiteScript
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.Int32]
        $Version,

        [Parameter()]
        [System.String]
        $Content,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteScriptPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Set-PnPStorageEntity
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $Value,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.String]
        $Comment,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.StorageEntityScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Key
    )
}
function Set-PnPTaxonomyFieldValue
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Label,

        [Parameter()]
        [Microsoft.SharePoint.Client.ListItem]
        $ListItem,

        [Parameter()]
        [System.Collections.Hashtable]
        $Terms,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $TermId,

        [Parameter()]
        [System.String]
        $InternalFieldName,

        [Parameter()]
        [System.String]
        $TermPath
    )
}
function Set-PnPTeamifyPromptHidden
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Set-PnPTeamsChannel
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsChannelPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team
    )
}
function Set-PnPTeamsTab
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsChannelPipeBind]
        $Channel,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTabPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team
    )
}
function Set-PnPTeamsTeam
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $AllowGuestDeleteChannels,

        [Parameter()]
        [System.Boolean]
        $AllowUserDeleteMessages,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Identity,

        [Parameter()]
        [System.Boolean]
        $AllowCreateUpdateChannels,

        [Parameter()]
        [System.Boolean]
        $AllowDeleteChannels,

        [Parameter()]
        [System.String]
        $Classification,

        [Parameter()]
        [System.Boolean]
        $AllowCreateUpdateRemoveConnectors,

        [Parameter()]
        [System.Boolean]
        $AllowUserEditMessages,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Boolean]
        $AllowAddRemoveApps,

        [Parameter()]
        [PnP.PowerShell.Commands.Model.Teams.TeamGiphyContentRating]
        $GiphyContentRating,

        [Parameter()]
        [System.Boolean]
        $AllowTeamMentions,

        [Parameter()]
        [System.Boolean]
        $AllowOwnerDeleteMessages,

        [Parameter()]
        [System.Boolean]
        $AllowGuestCreateUpdateChannels,

        [Parameter()]
        [System.Boolean]
        $AllowStickersAndMemes,

        [Parameter()]
        [System.Boolean]
        $ShowInTeamsSearchAndSuggestions,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.Teams.TeamVisibility]
        $Visibility,

        [Parameter()]
        [System.Boolean]
        $AllowCreateUpdateRemoveTabs,

        [Parameter()]
        [System.Boolean]
        $AllowGiphy,

        [Parameter()]
        [System.Boolean]
        $AllowChannelMentions,

        [Parameter()]
        [System.Boolean]
        $AllowCustomMemes
    )
}
function Set-PnPTeamsTeamArchivedState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $Archived,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Identity,

        [Parameter()]
        [System.Boolean]
        $SetSiteReadOnlyForMembers,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Set-PnPTeamsTeamPicture
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team
    )
}
function Set-PnPTenant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $ExternalServicesEnabled,

        [Parameter()]
        [System.Boolean]
        $UsePersistentCookiesForExplorerView,

        [Parameter()]
        [System.Nullable`1[Microsoft.SharePoint.Client.AnonymousLinkType]]
        $FileAnonymousLinkType,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $RequireAnonymousLinksExpireInDays,

        [Parameter()]
        [System.Nullable`1[Microsoft.SharePoint.Client.AnonymousLinkType]]
        $FolderAnonymousLinkType,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $OrphanedPersonalSitesRetentionPeriod,

        [Parameter()]
        [System.Boolean]
        $DisallowInfectedFileDownload,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Boolean]
        $OwnerAnonymousNotification,

        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantManagement.SPOConditionalAccessPolicyType]]
        $ConditionalAccessPolicy,

        [Parameter()]
        [System.Boolean]
        $NotificationsInSharePointEnabled,

        [Parameter()]
        [System.Boolean]
        $ShowAllUsersClaim,

        [Parameter()]
        [System.Boolean]
        $RequireAcceptingAccountMatchInvitedAccount,

        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantManagement.SharingPermissionType]]
        $DefaultLinkPermission,

        [Parameter()]
        [System.Boolean]
        $DisableCustomAppAuthentication,

        [Parameter()]
        [System.Guid[]]
        $DisabledWebPartIds,

        [Parameter()]
        [System.Boolean]
        $NotificationsInOneDriveForBusinessEnabled,

        [Parameter()]
        [System.Boolean]
        $EnableAutoNewsDigest,

        [Parameter()]
        [System.Boolean]
        $NotifyOwnersWhenItemsReshared,

        [Parameter()]
        [System.Boolean]
        $EnableGuestSignInAcceleration,

        [Parameter()]
        [System.Boolean]
        $SearchResolveExactEmailOrUPN,

        [Parameter()]
        [System.Boolean]
        $EnableAIPIntegration,

        [Parameter()]
        [System.Boolean]
        $FilePickerExternalImageSearchEnabled,

        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantManagement.SpecialCharactersState]]
        $SpecialCharactersStateInFileFolderNames,

        [Parameter()]
        [System.Nullable`1[Microsoft.SharePoint.Client.SharingState]]
        $ODBAccessRequests,

        [Parameter()]
        [System.String]
        $NoAccessRedirectUrl,

        [Parameter()]
        [System.Boolean]
        $SocialBarOnSitePagesDisabled,

        [Parameter()]
        [System.Boolean]
        $PublicCdnEnabled,

        [Parameter()]
        [System.String]
        $SharingBlockedDomainList,

        [Parameter()]
        [System.String]
        $SharingAllowedDomainList,

        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantManagement.SharingLinkType]]
        $DefaultSharingLinkType,

        [Parameter()]
        [System.String]
        $BccExternalSharingInvitationsList,

        [Parameter()]
        [System.Int32]
        $MinCompatibilityLevel,

        [Parameter()]
        [System.String]
        $SignInAccelerationDomain,

        [Parameter()]
        [System.Boolean]
        $ProvisionSharedWithEveryoneFolder,

        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantManagement.SharingDomainRestrictionModes]]
        $SharingDomainRestrictionMode,

        [Parameter()]
        [System.Boolean]
        $ShowEveryoneExceptExternalUsersClaim,

        [Parameter()]
        [System.Boolean]
        $OneDriveForGuestsEnabled,

        [Parameter()]
        [System.String]
        $StartASiteFormUrl,

        [Parameter()]
        [System.Boolean]
        $EmailAttestationRequired,

        [Parameter()]
        [System.Boolean]
        $AllowDownloadingNonWebViewableFiles,

        [Parameter()]
        [System.Boolean]
        $UseFindPeopleInPeoplePicker,

        [Parameter()]
        [System.Boolean]
        $ShowEveryoneClaim,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $IPAddressWACTokenLifetime,

        [Parameter()]
        [System.Boolean]
        $HideDefaultThemes,

        [Parameter()]
        [System.Boolean]
        $ApplyAppEnforcedRestrictionsToAdHocRecipients,

        [Parameter()]
        [System.Boolean]
        $OfficeClientADALDisabled,

        [Parameter()]
        [System.Boolean]
        $BccExternalSharingInvitations,

        [Parameter()]
        [System.Boolean]
        $IPAddressEnforcement,

        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantManagement.SharingCapabilities]]
        $SharingCapability,

        [Parameter()]
        [System.Boolean]
        $NotifyOwnersWhenInvitationsAccepted,

        [Parameter()]
        [System.String]
        $IPAddressAllowList,

        [Parameter()]
        [System.Boolean]
        $ShowPeoplePickerSuggestionsForGuestUsers,

        [Parameter()]
        [System.Boolean]
        $AllowEditing,

        [Parameter()]
        [System.Boolean]
        $PreventExternalUsersFromResharing,

        [Parameter()]
        [System.Boolean]
        $LegacyAuthProtocolsEnabled,

        [Parameter()]
        [System.String]
        $PublicCdnAllowedFileTypes,

        [Parameter()]
        [System.Boolean]
        $CommentsOnSitePagesDisabled,

        [Parameter()]
        [System.Boolean]
        $UserVoiceForFeedbackEnabled,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $EmailAttestationReAuthDays,

        [Parameter()]
        [System.Nullable`1[System.Int64]]
        $OneDriveStorageQuota,

        [Parameter()]
        [System.Int32]
        $MaxCompatibilityLevel,

        [Parameter()]
        [System.Nullable`1[Microsoft.SharePoint.Client.SharingState]]
        $ODBMembersCanShare,

        [Parameter()]
        [System.Boolean]
        $DisplayStartASiteOption
    )
}
function Set-PnPTenantAppCatalogUrl
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Url
    )
}
function Set-PnPTenantCdnEnabled
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $NoDefaultOrigins,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CdnType]
        $CdnType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Boolean]
        $Enable
    )
}
function Set-PnPTenantCdnPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
        $CdnType,

        [Parameter()]
        [System.String]
        $PolicyValue,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnPolicyType]
        $PolicyType
    )
}
function Set-PnPTenantSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantManagement.SharingCapabilities]
        $SharingCapability,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.FlowsPolicy]
        $DisableFlows,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.Double]
        $UserCodeMaximumLevel,

        [Parameter()]
        [System.String]
        $SharingBlockedDomainList,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantManagement.SharingPermissionType]
        $DefaultLinkPermission,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DenyAddAndCustomizePages,

        [Parameter()]
        [System.Int64]
        $StorageWarningLevel,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BlockDownloadOfNonViewableFiles,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CommentsOnSitePagesDisabled,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantManagement.SharingDomainRestrictionModes]
        $SharingDomainRestrictionMode,

        [Parameter()]
        [System.Nullable`1[OfficeDevPnP.Core.SiteLockState]]
        $LockState,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.AppViewsPolicy]
        $DisableAppViews,

        [Parameter()]
        [System.String[]]
        $Owners,

        [Parameter()]
        [System.Double]
        $UserCodeWarningLevel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Wait,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $AnonymousLinkExpirationInDays,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.CompanyWideSharingLinksPolicy]
        $DisableCompanyWideSharingLinks,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OverrideTenantAnonymousLinkExpirationPolicy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowSelfServiceUpgrade,

        [Parameter()]
        [System.Int64]
        $StorageMaximumLevel,

        [Parameter()]
        [System.String]
        $SharingAllowedDomainList,

        [Parameter()]
        [System.UInt32]
        $LocaleId,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantManagement.SharingLinkType]
        $DefaultSharingLinkType
    )
}
function Set-PnPTenantSyncClientRestriction
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.List`1[System.Guid]]
        $DomainGuids,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DisableReportProblemDialog,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Enable,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.GrooveBlockOption]
        $GrooveBlockOption,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BlockMacSync,

        [Parameter()]
        [System.String[]]
        $ExcludedFileExtensions
    )
}
function Set-PnPTermGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermStore]]
        $TermStore,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TaxonomyItemPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermGroup]]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Set-PnPTermSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $IsAvailableForTagging,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $SetCatalogItemPageForCategories,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TermGroupPipeBind]
        $TermGroup,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveTargetPageforTerms,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermSet]]
        $Identity,

        [Parameter()]
        [System.Boolean]
        $UseForFacetedNavigation,

        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.Boolean]
        $UseForSiteNavigation,

        [Parameter()]
        [System.String]
        $Contact,

        [Parameter()]
        [System.String]
        $SetTargetPageForTerms,

        [Parameter()]
        [System.String]
        $StakeholderToDelete,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveCatalogItemPageForCategories,

        [Parameter()]
        [System.String]
        $Owner,

        [Parameter()]
        [System.String]
        $StakeholderToAdd,

        [Parameter()]
        [System.Collections.Hashtable]
        $CustomProperties,

        [Parameter()]
        [System.Boolean]
        $IsOpenForTermCreation,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermStore]]
        $TermStore
    )
}
function Set-PnPTheme
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ShareGenerated,

        [Parameter()]
        [System.String]
        $ColorPaletteUrl,

        [Parameter()]
        [System.String]
        $BackgroundImageUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UpdateRootWebOnly,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ResetSubwebsToInherit,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $FontSchemeUrl
    )
}
function Set-PnPTraceLog
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WriteToConsole,

        [Parameter()]
        [OfficeDevPnP.Core.Diagnostics.LogLevel]
        $Level,

        [Parameter()]
        [System.String]
        $LogFile,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Off,

        [Parameter()]
        [System.String]
        $Delimiter,

        [Parameter()]
        [System.Boolean]
        $AutoFlush,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $On,

        [Parameter()]
        [System.Int32]
        $IndentSize
    )
}
function Set-PnPUserOneDriveQuota
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Account,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Int64]
        $Quota,

        [Parameter()]
        [System.Int64]
        $QuotaWarning
    )
}
function Set-PnPUserProfileProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Values
    )
}
function Set-PnPView
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Hashtable]
        $Values
    )
}
function Set-PnPWeb
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $SiteLogoUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DisablePowerAutomate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $NoCrawl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CommentsOnSitePagesDisabled,

        [Parameter()]
        [Microsoft.SharePoint.Client.SPVariantThemeType]
        $HeaderEmphasis,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $AlternateCssUrl,

        [Parameter()]
        [Microsoft.SharePoint.Client.HeaderLayoutType]
        $HeaderLayout,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $NavAudienceTargetingEnabled,

        [Parameter()]
        [System.String]
        $MasterUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $MegaMenuEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $MembersCanShare,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $QuickLaunchEnabled,

        [Parameter()]
        [System.String]
        $CustomMasterUrl
    )
}
function Set-PnPWebhookSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebhookSubscriptionPipeBind]
        $Subscription,

        [Parameter()]
        [System.DateTime]
        $ExpirationDate,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $NotificationUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Set-PnPWebPartProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.PSObject]
        $Value,

        [Parameter()]
        [System.String]
        $ServerRelativePageUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Key
    )
}
function Set-PnPWebPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $AddRole,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $User,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Identity,

        [Parameter()]
        [System.String[]]
        $RemoveRole,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Group,

        [Parameter()]
        [System.String]
        $Url
    )
}
function Set-PnPWebTheme
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ThemePipeBind]
        $Theme,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $WebUrl
    )
}
function Set-PnPWikiPageContent
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ServerRelativePageUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String]
        $Content,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Path
    )
}
function Start-PnPWorkflowInstance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WorkflowSubscriptionPipeBind]
        $Subscription,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
        $ListItem,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Stop-PnPWorkflowInstance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WorkflowInstancePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Submit-PnPSearchQuery
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $TimeZoneId,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $HiddenConstraints,

        [Parameter()]
        [System.String]
        $Query,

        [Parameter()]
        [System.Collections.Hashtable]
        $SortList,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String[]]
        $RefinementFilters,

        [Parameter()]
        [System.Boolean]
        $EnablePhonetic,

        [Parameter()]
        [System.Boolean]
        $EnableStemming,

        [Parameter()]
        [System.Boolean]
        $EnableQueryRules,

        [Parameter()]
        [System.String]
        $RankingModelId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RelevantResults,

        [Parameter()]
        [System.Boolean]
        $ProcessPersonalFavorites,

        [Parameter()]
        [System.Collections.Hashtable]
        $Properties,

        [Parameter()]
        [System.Guid]
        $SourceId,

        [Parameter()]
        [System.String]
        $CollapseSpecification,

        [Parameter()]
        [System.Int32]
        $StartRow,

        [Parameter()]
        [System.Int32]
        $MaxResults,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $All,

        [Parameter()]
        [System.Int32]
        $Culture,

        [Parameter()]
        [System.String]
        $ClientType,

        [Parameter()]
        [System.String[]]
        $SelectProperties,

        [Parameter()]
        [System.Boolean]
        $ProcessBestBets,

        [Parameter()]
        [System.String]
        $Refiners,

        [Parameter()]
        [System.String]
        $QueryTemplate,

        [Parameter()]
        [System.Boolean]
        $TrimDuplicates
    )
}
function Submit-PnPTeamsChannelMessage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsChannelPipeBind]
        $Channel,

        [Parameter()]
        [System.String]
        $Message,

        [Parameter()]
        [PnP.PowerShell.Commands.Model.Teams.TeamChannelMessageContentType]
        $ContentType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Important
    )
}
function Sync-PnPAppToTeams
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Test-PnPListItemIsRecord
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List
    )
}
function Test-PnPOffice365GroupAliasIsUsed
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Alias,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Test-PnPTenantTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningHierarchy]
        $Template,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Uninstall-PnPApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
        $Identity,

        [Parameter()]
        [OfficeDevPnP.Core.Enums.AppCatalogScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Uninstall-PnPAppInstance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.AppPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Uninstall-PnPSolution
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $PackageId,

        [Parameter()]
        [System.Int32]
        $MinorVersion,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Int32]
        $MajorVersion,

        [Parameter()]
        [System.String]
        $PackageName
    )
}
function Unpublish-PnPApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
        $Identity,

        [Parameter()]
        [OfficeDevPnP.Core.Enums.AppCatalogScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Unregister-PnPHubSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $Site,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Update-PnPApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
        $Identity,

        [Parameter()]
        [OfficeDevPnP.Core.Enums.AppCatalogScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Update-PnPSiteClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $DefaultClassification,

        [Parameter()]
        [System.String[]]
        $Classifications,

        [Parameter()]
        [System.String]
        $UsageGuidelinesUrl,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Graph.Model.SiteClassificationsSettings]
        $Settings,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Update-PnPTeamsApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsAppPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.String]
        $Path
    )
}
function Add-PnPOffice365GroupToSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String[]]
        $Owners,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $Alias,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsPublic,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $KeepOldHomePage,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $Classification,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $HubSiteId
    )
}
function Add-PnPUnifiedGroupMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveExisting,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.String[]]
        $Users,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Add-PnPUnifiedGroupOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveExisting,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.String[]]
        $Users,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Clear-PnPUnifiedGroupOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Connect-PnPHubSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $HubSite,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $Site,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Disconnect-PnPHubSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $Site,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Ensure-PnPFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $SiteRelativePath,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection
    )
}
function Execute-PnPQuery
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $RetryWait,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Int32]
        $RetryCount
    )
}
function Get-PnPDeletedUnifiedGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Get-PnPUnifiedGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeHasTeam,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeClassification,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ExcludeSiteUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Get-PnPUnifiedGroupMembers
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Get-PnPUnifiedGroupOwners
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Invoke-PnPSearchQuery
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $TimeZoneId,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.String]
        $HiddenConstraints,

        [Parameter()]
        [System.String]
        $Query,

        [Parameter()]
        [System.Collections.Hashtable]
        $SortList,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [System.String[]]
        $RefinementFilters,

        [Parameter()]
        [System.Boolean]
        $EnablePhonetic,

        [Parameter()]
        [System.Boolean]
        $EnableStemming,

        [Parameter()]
        [System.Boolean]
        $EnableQueryRules,

        [Parameter()]
        [System.String]
        $RankingModelId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RelevantResults,

        [Parameter()]
        [System.Boolean]
        $ProcessPersonalFavorites,

        [Parameter()]
        [System.Collections.Hashtable]
        $Properties,

        [Parameter()]
        [System.Guid]
        $SourceId,

        [Parameter()]
        [System.String]
        $CollapseSpecification,

        [Parameter()]
        [System.Int32]
        $StartRow,

        [Parameter()]
        [System.Int32]
        $MaxResults,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $All,

        [Parameter()]
        [System.Int32]
        $Culture,

        [Parameter()]
        [System.String]
        $ClientType,

        [Parameter()]
        [System.String[]]
        $SelectProperties,

        [Parameter()]
        [System.Boolean]
        $ProcessBestBets,

        [Parameter()]
        [System.String]
        $Refiners,

        [Parameter()]
        [System.String]
        $QueryTemplate,

        [Parameter()]
        [System.Boolean]
        $TrimDuplicates
    )
}
function Load-PnPProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Xml,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
        $TemplateProviderExtensions,

        [Parameter()]
        [System.String]
        $Path
    )
}
function New-PnPUnifiedGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String[]]
        $Owners,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $GroupLogoPath,

        [Parameter()]
        [System.String[]]
        $Members,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsPrivate,

        [Parameter()]
        [System.String]
        $MailNickname,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CreateTeam,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force
    )
}
function Remove-PnPDeletedUnifiedGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Remove-PnPUnifiedGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Remove-PnPUnifiedGroupMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.String[]]
        $Users,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Remove-PnPUnifiedGroupOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.String[]]
        $Users,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Reset-PnPUnifiedGroupExpiration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Restore-PnPDeletedUnifiedGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck
    )
}
function Set-PnPUnifiedGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String[]]
        $Owners,

        [Parameter()]
        [System.Boolean]
        $HideFromOutlookClients,

        [Parameter()]
        [System.String]
        $GroupLogoPath,

        [Parameter()]
        [System.Boolean]
        $HideFromAddressLists,

        [Parameter()]
        [System.String[]]
        $Members,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsPrivate,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CreateTeam
    )
}
#endregion
#region PowerPlatforms
function Add-AdminPowerAppsSyncUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $PrincipalObjectId
    )
}
function Add-AllowedConsentPlans
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String[]]
        $Types
    )
}
function Add-ConnectorToBusinessDataGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $PolicyName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $ConnectorName,

        [Parameter()]
        [System.String]
        $EnvironmentName
    )
}
function Add-CustomConnectorToPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $ConnectorType,

        [Parameter()]
        [System.String]
        $GroupName,

        [Parameter()]
        [System.String]
        $ConnectorName,

        [Parameter()]
        [System.String]
        $PolicyName,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $ConnectorId
    )
}
function Add-PowerAppsAccount
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $TenantID,

        [Parameter()]
        [System.Security.SecureString]
        $Password,

        [Parameter()]
        [System.Security.SecureString]
        $SecureClientSecret,

        [Parameter()]
        [System.String]
        $Username,

        [Parameter()]
        [System.String]
        $Endpoint,

        [Parameter()]
        [System.String]
        $CertificateThumbprint,

        [Parameter()]
        [System.String]
        $ClientSecret,

        [Parameter()]
        [System.String]
        $Audience,

        [Parameter()]
        [System.String]
        $ApplicationId
    )
}
function Backup-PowerAppEnvironment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.Object]
        $BackupRequestDefinition
    )
}
function Clear-AdminPowerAppApisToBypassConsent
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.Boolean]
        $ForceLease,

        [Parameter()]
        [System.String]
        $AppName
    )
}
function Clear-AdminPowerAppAsFeatured
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.Boolean]
        $ForceLease,

        [Parameter()]
        [System.String]
        $AppName
    )
}
function Clear-AdminPowerAppAsHero
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.Boolean]
        $ForceLease,

        [Parameter()]
        [System.String]
        $AppName
    )
}
function Copy-PowerAppEnvironment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $WaitUntilFinished,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.Object]
        $CopyToRequestDefinition,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.Int32]
        $TimeoutInMinutes
    )
}
function Disable-AdminFlow
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $FlowName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $EnvironmentName
    )
}
function Enable-AdminFlow
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $FlowName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $EnvironmentName
    )
}
function Get-AdminDeletedPowerAppsList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Get-AdminDlpPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $CreatedBy
    )
}
function Get-AdminFlow
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $FlowName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String[]]
        $Filter,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $CreatedBy
    )
}
function Get-AdminFlowOwnerRole
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $FlowName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $Owner,

        [Parameter()]
        [System.String]
        $EnvironmentName
    )
}
function Get-AdminFlowUserDetails
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $UserId
    )
}
function Get-AdminPowerApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $Owner,

        [Parameter()]
        [System.String[]]
        $Filter,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $AppName
    )
}
function Get-AdminPowerAppCdsAdditionalNotificationEmails
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Get-AdminPowerAppCdsDatabaseCurrencies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $LocationName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String[]]
        $Filter
    )
}
function Get-AdminPowerAppCdsDatabaseLanguages
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $LocationName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String[]]
        $Filter
    )
}
function Get-AdminPowerAppCdsDatabaseTemplates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $LocationName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String[]]
        $Filter
    )
}
function Get-AdminPowerAppConnection
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $ConnectorName,

        [Parameter()]
        [System.String[]]
        $Filter,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $CreatedBy
    )
}
function Get-AdminPowerAppConnectionReferences
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $AppName
    )
}
function Get-AdminPowerAppConnectionRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ConnectionName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $ConnectorName,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $PrincipalObjectId
    )
}
function Get-AdminPowerAppConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $ConnectorName,

        [Parameter()]
        [System.String[]]
        $Filter,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $CreatedBy
    )
}
function Get-AdminPowerAppConnectorAction
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $ConnectorName,

        [Parameter()]
        [System.String]
        $EnvironmentName
    )
}
function Get-AdminPowerAppConnectorRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $ConnectorName,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $PrincipalObjectId
    )
}
function Get-AdminPowerAppEnvironment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $InstanceId,

        [Parameter()]
        [System.Boolean]
        $ReturnCdsDatabaseType,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Default,

        [Parameter()]
        [System.String[]]
        $Filter,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GetProtectedEnvironment,

        [Parameter()]
        [System.String]
        $CreatedBy
    )
}
function Get-AdminPowerAppEnvironmentLocations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String[]]
        $Filter
    )
}
function Get-AdminPowerAppEnvironmentRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $UserId,

        [Parameter()]
        [System.String]
        $EnvironmentName
    )
}
function Get-AdminPowerAppLicenses
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $OutputFilePath,

        [Parameter()]
        [System.Int32]
        $TimeoutInMinutes
    )
}
function Get-AdminPowerAppOperationStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $OperationStatusUrl,

        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Get-AdminPowerAppRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $UserId,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $AppName
    )
}
function Get-AdminPowerAppSharepointFormEnvironment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Get-AdminPowerAppSoftDeletedEnvironment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String[]]
        $Filter
    )
}
function Get-AdminPowerAppsUserDetails
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $UserPrincipalName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $OutputFilePath
    )
}
function Get-AdminPowerAppTenantConsumedQuota
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Get-AdminRecoverDeletedPowerApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $AppName
    )
}
function Get-AllowedConsentPlans
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Get-DlpPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $PolicyName,

        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Get-JwtToken
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Audience
    )
}
function Get-PowerAppDlpPolicyConnectorConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $TenantId,

        [Parameter()]
        [System.String]
        $PolicyName,

        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Get-PowerAppEnvironmentBackups
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Get-PowerAppGenerateProtectionKey
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $LocationName,

        [Parameter()]
        [System.String]
        $KeyName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $KeyPassword
    )
}
function Get-PowerAppManagementApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $ApplicationId
    )
}
function Get-PowerAppManagementApps
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Get-PowerAppPolicyUrlPatterns
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $TenantId,

        [Parameter()]
        [System.String]
        $PolicyName,

        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Get-PowerAppRetrieveAvailableTenantProtectionKeys
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $LocationName,

        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Get-PowerAppRetrieveTenantProtectionKey
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $LocationName,

        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Get-PowerAppTenantIsolationOperationStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $TenantId,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $OperationId
    )
}
function Get-PowerAppTenantIsolationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $TenantId,

        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Get-PowerAppTenantUrlPatterns
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Get-TenantDetailsFromGraph
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $GraphApiVersion
    )
}
function Get-TenantSettings
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Get-UsersOrGroupsFromGraph
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $SearchString,

        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.String]
        $GraphApiVersion
    )
}
function InvokeApi
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Body,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ThrowOnFailure,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $Route,

        [Parameter()]
        [System.String]
        $Method
    )
}
function InvokeApiNoParseContent
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Body,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ThrowOnFailure,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $Route,

        [Parameter()]
        [System.String]
        $Method
    )
}
function New-AdminDlpPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.Boolean]
        $BlockNonBusinessDataGroup,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $SchemaVersion
    )
}
function New-AdminPowerAppCdsDatabase
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $LanguageName,

        [Parameter()]
        [System.Boolean]
        $WaitUntilFinished,

        [Parameter()]
        [System.String]
        $CurrencyName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String[]]
        $Templates,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $SecurityGroupId,

        [Parameter()]
        [System.String]
        $DomainName
    )
}
function New-AdminPowerAppEnvironment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $TimeoutInMinutes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ProvisionDatabase,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $LanguageName,

        [Parameter()]
        [System.String]
        $LocationName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String[]]
        $Templates,

        [Parameter()]
        [System.String]
        $SecurityGroupId,

        [Parameter()]
        [System.String]
        $EnvironmentSku,

        [Parameter()]
        [System.Boolean]
        $WaitUntilFinished,

        [Parameter()]
        [System.String]
        $DomainName,

        [Parameter()]
        [System.String]
        $CurrencyName
    )
}
function New-DlpPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $DefaultConnectorClassification,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $NewPolicy,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $EnvironmentType,

        [Parameter()]
        [System.Object]
        $Environments
    )
}
function New-PowerAppDlpPolicyConnectorConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $TenantId,

        [Parameter()]
        [System.String]
        $PolicyName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.Object]
        $NewDlpPolicyConnectorConfigurations
    )
}
function New-PowerAppImportProtectionKey
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $LocationName,

        [Parameter()]
        [System.String]
        $KeyName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.Byte[]]
        $Key,

        [Parameter()]
        [System.Int32]
        $KeyType,

        [Parameter()]
        [System.String]
        $KeyPassword
    )
}
function New-PowerAppManagementApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $ApplicationId
    )
}
function New-PowerAppPolicyUrlPatterns
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $TenantId,

        [Parameter()]
        [System.String]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $NewUrlPatterns,

        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function New-PowerAppTenantUrlPatterns
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $NewUrlPatterns,

        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Recover-AdminPowerAppEnvironment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $WaitUntilFinished,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $EnvironmentName
    )
}
function Remove-AdminDlpPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $PolicyName,

        [Parameter()]
        [System.String]
        $EnvironmentName
    )
}
function Remove-AdminFlow
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $FlowName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $EnvironmentName
    )
}
function Remove-AdminFlowApprovals
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Remove-AdminFlowOwnerRole
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $FlowName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $RoleId
    )
}
function Remove-AdminFlowUserDetails
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $UserId
    )
}
function Remove-AdminPowerApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $AppName
    )
}
function Remove-AdminPowerAppConnection
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ConnectionName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $ConnectorName,

        [Parameter()]
        [System.String]
        $EnvironmentName
    )
}
function Remove-AdminPowerAppConnectionRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ConnectionName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $ConnectorName,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $RoleId
    )
}
function Remove-AdminPowerAppConnector
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $ConnectorName,

        [Parameter()]
        [System.String]
        $EnvironmentName
    )
}
function Remove-AdminPowerAppConnectorRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $ConnectorName,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $RoleId
    )
}
function Remove-AdminPowerAppEnvironment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Remove-AdminPowerAppEnvironmentRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $RoleId
    )
}
function Remove-AdminPowerAppRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $AppName,

        [Parameter()]
        [System.String]
        $RoleId
    )
}
function Remove-AllowedConsentPlans
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $Prompt,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String[]]
        $Types
    )
}
function Remove-ConnectorFromBusinessDataGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $PolicyName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $ConnectorName,

        [Parameter()]
        [System.String]
        $EnvironmentName
    )
}
function Remove-CustomConnectorFromPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $PolicyName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $ConnectorName,

        [Parameter()]
        [System.String]
        $EnvironmentName
    )
}
function Remove-DlpPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Remove-LegacyCDSDatabase
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $DatabaseId,

        [Parameter()]
        [System.String]
        $EnvironmentName
    )
}
function Remove-PowerAppDlpPolicyConnectorConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $TenantId,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Remove-PowerAppEnvironmentBackup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $BackupId,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $EnvironmentName
    )
}
function Remove-PowerAppManagementApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $ApplicationId
    )
}
function Remove-PowerAppPolicyUrlPatterns
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $TenantId,

        [Parameter()]
        [System.String]
        $PolicyName,

        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Remove-PowerAppsAccount
{
    [CmdletBinding()]
    param(

    )
}
function Remove-PowerAppTenantUrlPatterns
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function ReplaceMacro
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Value,

        [Parameter()]
        [System.String]
        $Input,

        [Parameter()]
        [System.String]
        $Macro
    )
}
function Reset-AdminPowerAppSharepointFormEnvironment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Reset-PowerAppEnvironment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $WaitUntilFinished,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.Object]
        $ResetRequestDefinition,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.Int32]
        $TimeoutInMinutes
    )
}
function Restore-PowerAppEnvironment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $WaitUntilFinished,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.Int32]
        $TimeoutInMinutes,

        [Parameter()]
        [System.Object]
        $RestoreToRequestDefinition
    )
}
function Select-CurrentEnvironment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Default
    )
}
function Set-AdminDlpPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $SchemaVersion,

        [Parameter()]
        [System.String]
        $FilterType,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $SetNonBusinessDataGroupState,

        [Parameter()]
        [System.String]
        $DefaultGroup,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $PolicyName,

        [Parameter()]
        [System.String]
        $Environments
    )
}
function Set-AdminFlowOwnerRole
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $FlowName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $PrincipalType,

        [Parameter()]
        [System.String]
        $RoleName,

        [Parameter()]
        [System.String]
        $PrincipalObjectId
    )
}
function Set-AdminPowerAppApisToBypassConsent
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.Boolean]
        $ForceLease,

        [Parameter()]
        [System.String]
        $AppName
    )
}
function Set-AdminPowerAppAsFeatured
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.Boolean]
        $ForceLease,

        [Parameter()]
        [System.String]
        $AppName
    )
}
function Set-AdminPowerAppAsHero
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.Boolean]
        $ForceLease,

        [Parameter()]
        [System.String]
        $AppName
    )
}
function Set-AdminPowerAppCdsAdditionalNotificationEmails
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $AdditionalNotificationEmails,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $EnvironmentName
    )
}
function Set-AdminPowerAppConnectionRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ConnectionName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $ConnectorName,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $PrincipalType,

        [Parameter()]
        [System.String]
        $RoleName,

        [Parameter()]
        [System.String]
        $PrincipalObjectId
    )
}
function Set-AdminPowerAppConnectorRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $ConnectorName,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $PrincipalType,

        [Parameter()]
        [System.String]
        $RoleName,

        [Parameter()]
        [System.String]
        $PrincipalObjectId
    )
}
function Set-AdminPowerAppEnvironmentDisplayName
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $NewDisplayName
    )
}
function Set-AdminPowerAppEnvironmentRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $PrincipalType,

        [Parameter()]
        [System.String]
        $RoleName,

        [Parameter()]
        [System.String]
        $PrincipalObjectId
    )
}
function Set-AdminPowerAppEnvironmentRuntimeState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $WaitUntilFinished,

        [Parameter()]
        [System.String]
        $RuntimeState,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.Int32]
        $TimeoutInMinutes
    )
}
function Set-AdminPowerAppOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $AppOwner,

        [Parameter()]
        [System.String]
        $AppName
    )
}
function Set-AdminPowerAppRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $RoleName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $Notify,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $PrincipalType,

        [Parameter()]
        [System.String]
        $AppName,

        [Parameter()]
        [System.String]
        $PrincipalObjectId
    )
}
function Set-AdminPowerAppSharepointFormEnvironment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Set-DlpPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $PolicyName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.Object]
        $UpdatedPolicy
    )
}
function Set-PowerAppDlpPolicyConnectorConfigurations
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $TenantId,

        [Parameter()]
        [System.String]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $UpdatedConnectorConfigurations,

        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Set-PowerAppLockAllEnvironments
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $LocationName,

        [Parameter()]
        [System.String]
        $KeyName,

        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Set-PowerAppProtectionStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $WaitUntilFinished,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.Int32]
        $TimeoutInMinutes,

        [Parameter()]
        [System.String]
        $ProtectionKeyManagedBy
    )
}
function Set-PowerAppTenantIsolationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $TenantId,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.Object]
        $TenantIsolationPolicy
    )
}
function Set-PowerAppTenantProtectionKey
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $LocationName,

        [Parameter()]
        [System.Boolean]
        $WaitUntilFinished,

        [Parameter()]
        [System.String]
        $KeyName,

        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.Int32]
        $TimeoutInMinutes
    )
}
function Set-PowerAppUnlockEnvironment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $EnvironmentName,

        [Parameter()]
        [System.String]
        $ApiVersion
    )
}
function Set-TenantSettings
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApiVersion,

        [Parameter()]
        [System.Object]
        $RequestBody
    )
}
function Test-PowerAppsAccount
{
    [CmdletBinding()]
    param(

    )
}
#endregion
#region SecurityComplianceCenter
function Add-ComplianceCaseMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Case,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Member,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Add-eDiscoveryCaseAdmin
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $User,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Add-RoleGroupMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Member,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Delete-QuarantineMessage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Identities,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-ComplianceTagStorage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Execute-AzureAdLabelSync
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Execute-UnifiedPolicyCmdletBatch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $CmdletData,

        [Parameter()]
        [System.Object]
        $ExecutionId,

        [Parameter()]
        [System.Object]
        $MigrationId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Export-FilePlanProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Export-QuarantineMessage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Identities,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ActivityAlert
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AdminAuditLogConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AuditConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AuditConfigurationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AuditConfigurationRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AutoSensitivityLabelPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $IncludeTestModeResults,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DistributionDetail,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-AutoSensitivityLabelRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $IncludeExecutionRuleInformation,

        [Parameter()]
        [System.Object]
        $Policy,

        [Parameter()]
        [System.Object]
        $IncludeExecutionRuleGuids,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CaseHoldPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Case,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeBindings,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DistributionDetail,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CaseHoldRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Policy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ComplianceCase
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $CaseType,

        [Parameter()]
        [System.Object]
        $RoleGroup,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RecentOnly,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ComplianceCaseMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Case,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ShowCaseAdmin,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ComplianceCaseStatistics
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $CaseType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ComplianceRetentionEvent
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $BeginDateTime,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PreviewOnly,

        [Parameter()]
        [System.Object]
        $EndDateTime,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ComplianceRetentionEventType
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LoadTag,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ComplianceSearch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Case,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ComplianceSearchAction
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Case,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Purge,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeCredential,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Details,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Export,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Preview,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ComplianceSecurityFilter
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $User,

        [Parameter()]
        [System.Object]
        $FilterName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ComplianceTag
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludingLabelState,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ComplianceTagStorage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DataRetentionReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceComplianceDetailsReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Expression,

        [Parameter()]
        [System.Object]
        $DeviceUserName,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $DeviceComplianceStatus,

        [Parameter()]
        [System.Object]
        $DevicePlatform,

        [Parameter()]
        [System.Object]
        $DeviceCompliancePolicy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceComplianceDetailsReportFilter
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceCompliancePolicyInventory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $Expression,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceComplianceReportDate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Expression,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceComplianceSummaryReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Expression,

        [Parameter()]
        [System.Object]
        $DeviceUserName,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $DeviceComplianceStatus,

        [Parameter()]
        [System.Object]
        $DevicePlatform,

        [Parameter()]
        [System.Object]
        $DeviceCompliancePolicy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceComplianceUserInventory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $Expression,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceComplianceUserReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Expression,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $DeviceId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceConditionalAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceConditionalAccessRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CompareToWorkload,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceConfigurationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceConfigurationRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CompareToWorkload,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DevicePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceTenantPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DeviceTenantRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DlpCompliancePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DistributionDetail,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DlpComplianceRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Policy,

        [Parameter()]
        [System.Object]
        $IncludeExecutionRuleGuids,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DlpDetectionsReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Source,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $DlpCompliancePolicy,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $AggregateBy,

        [Parameter()]
        [System.Object]
        $Expression,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $DlpComplianceRule,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Object]
        $SummarizeBy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DlpEdmSchema
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DlpKeywordDictionary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DlpSensitiveInformationType
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $IncludeElements,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeDetails,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DlpSensitiveInformationTypeConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DlpSensitiveInformationTypeRulePackage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-DlpSiDetectionsReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $SensitiveType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-eDiscoveryCaseAdmin
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-FfoUserPermissions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TenantId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeRoleEntries,

        [Parameter()]
        [System.Object]
        $UserId,

        [Parameter()]
        [System.Object]
        $ServiceType,

        [Parameter()]
        [System.Object]
        $RoleEntryTypes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-FilePlanPropertyAuthority
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-FilePlanPropertyCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-FilePlanPropertyCitation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-FilePlanPropertyDepartment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-FilePlanPropertyReferenceId
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-FilePlanPropertyStructure
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeAdditionalInfo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-FilePlanPropertySubCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-Group
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $RecipientTypeDetails,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-HoldCompliancePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DistributionDetail,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-HoldComplianceRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Policy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-InformationBarrierPoliciesApplicationStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $All,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-InformationBarrierPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ExoPolicyId,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-InformationBarrierRecipientStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity2,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-InformationBarrierReportDetails
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Source,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $AggregateBy,

        [Parameter()]
        [System.Object]
        $TargetUsers,

        [Parameter()]
        [System.Object]
        $InformationBarrierPolicy,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $InitiatingUser,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-InformationBarrierReportSummary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Source,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $AggregateBy,

        [Parameter()]
        [System.Object]
        $TargetUsers,

        [Parameter()]
        [System.Object]
        $InformationBarrierPolicy,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $InitiatingUser,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-InsiderRiskEntityList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeDeleted,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeEntities,

        [Parameter()]
        [System.Object]
        $Type,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-InsiderRiskPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DistributionDetail,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-Label
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $IncludeDetailedLabelActions,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-LabelPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-LabelPolicyRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Policy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-LongTermAuditItems
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Workload,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $LtaAddress,

        [Parameter()]
        [System.Object]
        $PageOffset,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Object]
        $LabelId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-LongTermAuditStats
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $LtaAddress,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-MailFilterListReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ProbeTag,

        [Parameter()]
        [System.Object]
        $Expression,

        [Parameter()]
        [System.Object]
        $SelectionTarget,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ManagementRole
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RoleType,

        [Parameter()]
        [System.Object]
        $CmdletParameters,

        [Parameter()]
        [System.Object]
        $ScriptParameters,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Cmdlet,

        [Parameter()]
        [System.Object]
        $Script,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GetChildren,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recurse,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-OrganizationSegment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-PolicyConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-ProtectionAlert
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-QuarantineMessage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $MessageId,

        [Parameter()]
        [System.Object]
        $PolicyTypes,

        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Reported,

        [Parameter()]
        [System.Object]
        $Direction,

        [Parameter()]
        [System.Object]
        $QuarantineTypes,

        [Parameter()]
        [System.Object]
        $EndReceivedDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $RecipientAddress,

        [Parameter()]
        [System.Object]
        $StartExpiresDate,

        [Parameter()]
        [System.Object]
        $SenderAddress,

        [Parameter()]
        [System.Object]
        $Subject,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $StartReceivedDate,

        [Parameter()]
        [System.Object]
        $Type,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $MyItems,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $EndExpiresDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-QuarantineMessageHeader
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-Recipient
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PropertySet,

        [Parameter()]
        [System.Object]
        $Properties,

        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Object]
        $BookmarkDisplayName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $AuthenticationType,

        [Parameter()]
        [System.Object]
        $RecipientType,

        [Parameter()]
        [System.Object]
        $RecipientPreviewFilter,

        [Parameter()]
        [System.Object]
        $RecipientTypeDetails,

        [Parameter()]
        [System.Object]
        $IncludeBookmarkObject,

        [Parameter()]
        [System.Object]
        $Capabilities,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $Anr,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-RegulatoryComplianceUI
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-RetentionCompliancePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $TeamsPolicyOnly,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ExcludeTeamsPolicy,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DistributionDetail,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RetentionRuleTypes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-RetentionComplianceRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Policy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-RoleGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ShowPartnerLinked,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-RoleGroupMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SCInsights
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SecurityPrincipal
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $OrganizationalUnit,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $Types,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RoleGroupAssignable,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SupervisoryReviewActivity
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PolicyId,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SupervisoryReviewOverallProgressReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SupervisoryReviewPolicyReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $Policies,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SupervisoryReviewPolicyV2
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SupervisoryReviewReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $Policies,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $Reviewers,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SupervisoryReviewRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Policy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-SupervisoryReviewTopCasesReport
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Page,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $PageSize,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-TeamsRetentionCompliancePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DistributionDetail,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-TeamsRetentionComplianceRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Policy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-UnifiedAuditLogRetentionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RetentionDuration,

        [Parameter()]
        [System.Object]
        $Operation,

        [Parameter()]
        [System.Object]
        $UserId,

        [Parameter()]
        [System.Object]
        $RecordType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-User
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PublicFolder,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $RecipientTypeDetails,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Import-DlpComplianceRuleCollection
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ImportErrorAction,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $FileData,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Import-FilePlanProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ValidateOnly,

        [Parameter()]
        [System.Object]
        $RawCsv,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Install-UnifiedCompliancePrerequisite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LoadOnly,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceInitialize,

        [Parameter()]
        [System.Object]
        $PolicyCenterSiteOwner,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Migrate-DlpFingerprint
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ActivityAlert
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Threshold,

        [Parameter()]
        [System.Object]
        $Disabled,

        [Parameter()]
        [System.Object]
        $UserId,

        [Parameter()]
        [System.Object]
        $Operation,

        [Parameter()]
        [System.Object]
        $NotifyUser,

        [Parameter()]
        [System.Object]
        $RecordType,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $EmailCulture,

        [Parameter()]
        [System.Object]
        $Severity,

        [Parameter()]
        [System.Object]
        $TimeWindow,

        [Parameter()]
        [System.Object]
        $ScopeLevel,

        [Parameter()]
        [System.Object]
        $Category,

        [Parameter()]
        [System.Object]
        $Condition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Type,

        [Parameter()]
        [System.Object]
        $Multiplier,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-AdminAuditLogSearch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ObjectIds,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExternalAccess,

        [Parameter()]
        [System.Object]
        $StatusMailRecipients,

        [Parameter()]
        [System.Object]
        $Parameters,

        [Parameter()]
        [System.Object]
        $Cmdlets,

        [Parameter()]
        [System.Object]
        $UserIds,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-AuditConfigurationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Workload,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-AuditConfigurationRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Workload,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AuditOperation,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-AutoSensitivityLabelPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $SharePointLocation,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $ExchangeSenderException,

        [Parameter()]
        [System.Object]
        $SharePointLocationException,

        [Parameter()]
        [System.Object]
        $ExchangeLocation,

        [Parameter()]
        [System.Object]
        $OneDriveLocationException,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $ApplySensitivityLabel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExchangeSender,

        [Parameter()]
        [System.Object]
        $OneDriveLocation,

        [Parameter()]
        [System.Object]
        $ExchangeSenderMemberOf,

        [Parameter()]
        [System.Object]
        $ExchangeSenderMemberOfException,

        [Parameter()]
        [System.Object]
        $Mode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-AutoSensitivityLabelRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RecipientDomainIs,

        [Parameter()]
        [System.Object]
        $ExceptIfFrom,

        [Parameter()]
        [System.Object]
        $ExceptIfProcessingLimitExceeded,

        [Parameter()]
        [System.Object]
        $ExpiryDate,

        [Parameter()]
        [System.Object]
        $ExceptIfContentContainsSensitiveInformation,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $ProcessingLimitExceeded,

        [Parameter()]
        [System.Object]
        $ExceptIfAccessScope,

        [Parameter()]
        [System.Object]
        $ExceptIfDocumentIsUnsupported,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Policy,

        [Parameter()]
        [System.Object]
        $ExceptIfContentExtensionMatchesWords,

        [Parameter()]
        [System.Object]
        $ImmutableId,

        [Parameter()]
        [System.Object]
        $ExceptIfSentTo,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientDomainIs,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $SenderIPRanges,

        [Parameter()]
        [System.Object]
        $From,

        [Parameter()]
        [System.Object]
        $ContentExtensionMatchesWords,

        [Parameter()]
        [System.Object]
        $Workload,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $ActivationDate,

        [Parameter()]
        [System.Object]
        $DocumentIsUnsupported,

        [Parameter()]
        [System.Object]
        $Disabled,

        [Parameter()]
        [System.Object]
        $RuleErrorAction,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $FromMemberOf,

        [Parameter()]
        [System.Object]
        $AccessScope,

        [Parameter()]
        [System.Object]
        $ExceptIfSenderIPRanges,

        [Parameter()]
        [System.Object]
        $ContentContainsSensitiveInformation,

        [Parameter()]
        [System.Object]
        $DocumentIsPasswordProtected,

        [Parameter()]
        [System.Object]
        $ReportSeverityLevel,

        [Parameter()]
        [System.Object]
        $ExceptIfFromMemberOf,

        [Parameter()]
        [System.Object]
        $ExceptIfDocumentIsPasswordProtected,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CaseHoldPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $PublicFolderLocation,

        [Parameter()]
        [System.Object]
        $Case,

        [Parameter()]
        [System.Object]
        $ExchangeLocation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $SharePointLocation,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CaseHoldRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Disabled,

        [Parameter()]
        [System.Object]
        $ContentMatchQuery,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Policy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ComplianceCase
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $CaseType,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $SourceCaseType,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $ExternalId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $SecondaryCaseType,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ComplianceRetentionEvent
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SharePointAssetIdQuery,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $EventDateTime,

        [Parameter()]
        [System.Object]
        $AssetId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PreviewOnly,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $EventTags,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $ExchangeAssetIdQuery,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ComplianceRetentionEventType
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ComplianceSearch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RefinerNames,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $IncludeUserAppContent,

        [Parameter()]
        [System.Object]
        $SharePointLocationExclusion,

        [Parameter()]
        [System.Object]
        $AllowNotFoundExchangeLocationsEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $SharePointLocation,

        [Parameter()]
        [System.Object]
        $ExchangeLocation,

        [Parameter()]
        [System.Object]
        $Case,

        [Parameter()]
        [System.Object]
        $PublicFolderLocation,

        [Parameter()]
        [System.Object]
        $IncludeOrgContent,

        [Parameter()]
        [System.Object]
        $HoldNames,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExchangeLocationExclusion,

        [Parameter()]
        [System.Object]
        $Language,

        [Parameter()]
        [System.Object]
        $ContentMatchQuery,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ComplianceSearchAction
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SearchName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeCredential,

        [Parameter()]
        [System.Object]
        $IncludeSharePointDocumentVersions,

        [Parameter()]
        [System.Object]
        $ReferenceActionName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $FileTypeExclusionsForUnindexedItems,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RetryOnError,

        [Parameter()]
        [System.Object]
        $Version,

        [Parameter()]
        [System.Object]
        $JobOptions,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RetentionReport,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Purge,

        [Parameter()]
        [System.Object]
        $PurgeType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Report,

        [Parameter()]
        [System.Object]
        $Region,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $EnableDedupe,

        [Parameter()]
        [System.Object]
        $Scope,

        [Parameter()]
        [System.Object]
        $SearchNames,

        [Parameter()]
        [System.Object]
        $ActionName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ComplianceSecurityFilter
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Filters,

        [Parameter()]
        [System.Object]
        $Users,

        [Parameter()]
        [System.Object]
        $FilterName,

        [Parameter()]
        [System.Object]
        $Region,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ComplianceTag
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $FilePlanProperty,

        [Parameter()]
        [System.Object]
        $RetentionDuration,

        [Parameter()]
        [System.Object]
        $IsRecordLabel,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Notes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $RetentionType,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $ReviewerEmail,

        [Parameter()]
        [System.Object]
        $Regulatory,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $RetentionAction,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-DeviceConditionalAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-DeviceConditionalAccessRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $CameraEnabled,

        [Parameter()]
        [System.Object]
        $AllowVideoConferencing,

        [Parameter()]
        [System.Object]
        $AntiVirusSignatureStatus,

        [Parameter()]
        [System.Object]
        $FirewallStatus,

        [Parameter()]
        [System.Object]
        $AllowAppStore,

        [Parameter()]
        [System.Object]
        $AllowAssistantWhileLocked,

        [Parameter()]
        [System.Object]
        $AppsRating,

        [Parameter()]
        [System.Object]
        $PasswordHistoryCount,

        [Parameter()]
        [System.Object]
        $PasswordQuality,

        [Parameter()]
        [System.Object]
        $PhoneMemoryEncrypted,

        [Parameter()]
        [System.Object]
        $EmailAddress,

        [Parameter()]
        [System.Object]
        $BluetoothEnabled,

        [Parameter()]
        [System.Object]
        $AllowConvenienceLogon,

        [Parameter()]
        [System.Object]
        $MaxPasswordGracePeriod,

        [Parameter()]
        [System.Object]
        $AllowVoiceAssistant,

        [Parameter()]
        [System.Object]
        $AllowiCloudDocSync,

        [Parameter()]
        [System.Object]
        $AntiVirusStatus,

        [Parameter()]
        [System.Object]
        $Policy,

        [Parameter()]
        [System.Object]
        $TVShowsRating,

        [Parameter()]
        [System.Object]
        $AllowJailbroken,

        [Parameter()]
        [System.Object]
        $ForceAppStorePassword,

        [Parameter()]
        [System.Object]
        $AllowDiagnosticSubmission,

        [Parameter()]
        [System.Object]
        $AutoUpdateStatus,

        [Parameter()]
        [System.Object]
        $WLANEnabled,

        [Parameter()]
        [System.Object]
        $AllowVoiceDialing,

        [Parameter()]
        [System.Object]
        $AccountName,

        [Parameter()]
        [System.Object]
        $PasswordComplexity,

        [Parameter()]
        [System.Object]
        $PasswordTimeout,

        [Parameter()]
        [System.Object]
        $SmartScreenEnabled,

        [Parameter()]
        [System.Object]
        $AllowiCloudPhotoSync,

        [Parameter()]
        [System.Object]
        $AllowSimplePassword,

        [Parameter()]
        [System.Object]
        $AllowPassbookWhileLocked,

        [Parameter()]
        [System.Object]
        $PasswordMinimumLength,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $PasswordRequired,

        [Parameter()]
        [System.Object]
        $MaxPasswordAttemptsBeforeWipe,

        [Parameter()]
        [System.Object]
        $MoviesRating,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $WorkFoldersSyncUrl,

        [Parameter()]
        [System.Object]
        $PasswordExpirationDays,

        [Parameter()]
        [System.Object]
        $UserAccountControlStatus,

        [Parameter()]
        [System.Object]
        $RequireEmailProfile,

        [Parameter()]
        [System.Object]
        $ForceEncryptedBackup,

        [Parameter()]
        [System.Object]
        $AccountUserName,

        [Parameter()]
        [System.Object]
        $AllowScreenshot,

        [Parameter()]
        [System.Object]
        $AllowiCloudBackup,

        [Parameter()]
        [System.Object]
        $TargetGroups,

        [Parameter()]
        [System.Object]
        $ExchangeActiveSyncHost,

        [Parameter()]
        [System.Object]
        $PasswordMinComplexChars,

        [Parameter()]
        [System.Object]
        $SystemSecurityTLS,

        [Parameter()]
        [System.Object]
        $RegionRatings,

        [Parameter()]
        [System.Object]
        $EnableRemovableStorage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-DeviceConfigurationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-DeviceConfigurationRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $CameraEnabled,

        [Parameter()]
        [System.Object]
        $AllowVideoConferencing,

        [Parameter()]
        [System.Object]
        $AntiVirusSignatureStatus,

        [Parameter()]
        [System.Object]
        $FirewallStatus,

        [Parameter()]
        [System.Object]
        $AllowAppStore,

        [Parameter()]
        [System.Object]
        $AllowAssistantWhileLocked,

        [Parameter()]
        [System.Object]
        $AppsRating,

        [Parameter()]
        [System.Object]
        $PasswordHistoryCount,

        [Parameter()]
        [System.Object]
        $PasswordQuality,

        [Parameter()]
        [System.Object]
        $PhoneMemoryEncrypted,

        [Parameter()]
        [System.Object]
        $EmailAddress,

        [Parameter()]
        [System.Object]
        $BluetoothEnabled,

        [Parameter()]
        [System.Object]
        $AllowConvenienceLogon,

        [Parameter()]
        [System.Object]
        $MaxPasswordGracePeriod,

        [Parameter()]
        [System.Object]
        $AllowVoiceAssistant,

        [Parameter()]
        [System.Object]
        $AllowiCloudDocSync,

        [Parameter()]
        [System.Object]
        $AntiVirusStatus,

        [Parameter()]
        [System.Object]
        $Policy,

        [Parameter()]
        [System.Object]
        $TVShowsRating,

        [Parameter()]
        [System.Object]
        $ForceAppStorePassword,

        [Parameter()]
        [System.Object]
        $AllowDiagnosticSubmission,

        [Parameter()]
        [System.Object]
        $AutoUpdateStatus,

        [Parameter()]
        [System.Object]
        $WLANEnabled,

        [Parameter()]
        [System.Object]
        $AllowVoiceDialing,

        [Parameter()]
        [System.Object]
        $AccountName,

        [Parameter()]
        [System.Object]
        $PasswordComplexity,

        [Parameter()]
        [System.Object]
        $PasswordTimeout,

        [Parameter()]
        [System.Object]
        $SmartScreenEnabled,

        [Parameter()]
        [System.Object]
        $AllowiCloudPhotoSync,

        [Parameter()]
        [System.Object]
        $AllowSimplePassword,

        [Parameter()]
        [System.Object]
        $AllowPassbookWhileLocked,

        [Parameter()]
        [System.Object]
        $PasswordMinimumLength,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $PasswordRequired,

        [Parameter()]
        [System.Object]
        $MaxPasswordAttemptsBeforeWipe,

        [Parameter()]
        [System.Object]
        $MoviesRating,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $WorkFoldersSyncUrl,

        [Parameter()]
        [System.Object]
        $PasswordExpirationDays,

        [Parameter()]
        [System.Object]
        $UserAccountControlStatus,

        [Parameter()]
        [System.Object]
        $RequireEmailProfile,

        [Parameter()]
        [System.Object]
        $ForceEncryptedBackup,

        [Parameter()]
        [System.Object]
        $AccountUserName,

        [Parameter()]
        [System.Object]
        $AllowScreenshot,

        [Parameter()]
        [System.Object]
        $AllowiCloudBackup,

        [Parameter()]
        [System.Object]
        $TargetGroups,

        [Parameter()]
        [System.Object]
        $ExchangeActiveSyncHost,

        [Parameter()]
        [System.Object]
        $PasswordMinComplexChars,

        [Parameter()]
        [System.Object]
        $SystemSecurityTLS,

        [Parameter()]
        [System.Object]
        $RegionRatings,

        [Parameter()]
        [System.Object]
        $EnableRemovableStorage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-DeviceTenantPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-DeviceTenantRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $BlockUnsupportedDevices,

        [Parameter()]
        [System.Object]
        $ApplyPolicyTo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExclusionList,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-DlpCompliancePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $SharePointLocation,

        [Parameter()]
        [System.Object]
        $ExceptIfOneDriveSharedBy,

        [Parameter()]
        [System.Object]
        $ThirdPartyAppDlpLocationException,

        [Parameter()]
        [System.Object]
        $SharePointLocationException,

        [Parameter()]
        [System.Object]
        $ExchangeLocation,

        [Parameter()]
        [System.Object]
        $OneDriveLocationException,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $TeamsLocationException,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ThirdPartyAppDlpLocation,

        [Parameter()]
        [System.Object]
        $OneDriveLocation,

        [Parameter()]
        [System.Object]
        $ExchangeSenderMemberOf,

        [Parameter()]
        [System.Object]
        $ExchangeSenderMemberOfException,

        [Parameter()]
        [System.Object]
        $Mode,

        [Parameter()]
        [System.Object]
        $TeamsLocation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-DlpComplianceRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $DocumentNameMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientDomainIs,

        [Parameter()]
        [System.Object]
        $ExceptIfContentContainsSensitiveInformation,

        [Parameter()]
        [System.Object]
        $ExceptIfDocumentNameMatchesWords,

        [Parameter()]
        [System.Object]
        $ExceptIfFromAddressContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfProcessingLimitExceeded,

        [Parameter()]
        [System.Object]
        $AnyOfRecipientAddressMatchesPatterns,

        [Parameter()]
        [System.Object]
        $UnscannableDocumentExtensionIs,

        [Parameter()]
        [System.Object]
        $RedirectMessageTo,

        [Parameter()]
        [System.Object]
        $DocumentNameMatchesWords,

        [Parameter()]
        [System.Object]
        $NotifyAllowOverride,

        [Parameter()]
        [System.Object]
        $NotifyUser,

        [Parameter()]
        [System.Object]
        $ProcessingLimitExceeded,

        [Parameter()]
        [System.Object]
        $ExceptIfAnyOfRecipientAddressContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfSenderIPRanges,

        [Parameter()]
        [System.Object]
        $FromAddressMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfFrom,

        [Parameter()]
        [System.Object]
        $DocumentIsPasswordProtected,

        [Parameter()]
        [System.Object]
        $SubjectContainsWords,

        [Parameter()]
        [System.Object]
        $GenerateAlert,

        [Parameter()]
        [System.Object]
        $ExceptIfSubjectMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ContentExtensionMatchesWords,

        [Parameter()]
        [System.Object]
        $ThirdPartyAppDlpRestrictions,

        [Parameter()]
        [System.Object]
        $HeaderContainsWords,

        [Parameter()]
        [System.Object]
        $ImmutableId,

        [Parameter()]
        [System.Object]
        $BlockAccessScope,

        [Parameter()]
        [System.Object]
        $AnyOfRecipientAddressContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfMessageTypeMatches,

        [Parameter()]
        [System.Object]
        $ExceptIfFromMemberOf,

        [Parameter()]
        [System.Object]
        $ExceptIfFromAddressMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfAccessScope,

        [Parameter()]
        [System.Object]
        $ExceptIfHeaderMatchesPatterns,

        [Parameter()]
        [System.Object]
        $RecipientDomainIs,

        [Parameter()]
        [System.Object]
        $NotifyEmailCustomSubject,

        [Parameter()]
        [System.Object]
        $IncidentReportContent,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $NotifyPolicyTipCustomTextTranslations,

        [Parameter()]
        [System.Object]
        $GenerateIncidentReport,

        [Parameter()]
        [System.Object]
        $ExceptIfUnscannableDocumentExtensionIs,

        [Parameter()]
        [System.Object]
        $From,

        [Parameter()]
        [System.Object]
        $AccessScope,

        [Parameter()]
        [System.Object]
        $RemoveHeader,

        [Parameter()]
        [System.Object]
        $ActivationDate,

        [Parameter()]
        [System.Object]
        $ExceptIfContentPropertyContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfDocumentNameMatchesPatterns,

        [Parameter()]
        [System.Object]
        $Policy,

        [Parameter()]
        [System.Object]
        $ExceptIfDocumentIsPasswordProtected,

        [Parameter()]
        [System.Object]
        $ExceptIfSentToMemberOf,

        [Parameter()]
        [System.Object]
        $NotifyEmailCustomText,

        [Parameter()]
        [System.Object]
        $ExceptIfDocumentSizeOver,

        [Parameter()]
        [System.Object]
        $ExceptIfSubjectContainsWords,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $ExceptIfHeaderContainsWords,

        [Parameter()]
        [System.Object]
        $SenderIPRanges,

        [Parameter()]
        [System.Object]
        $SenderDomainIs,

        [Parameter()]
        [System.Object]
        $ContentContainsSensitiveInformation,

        [Parameter()]
        [System.Object]
        $Moderate,

        [Parameter()]
        [System.Object]
        $FromMemberOf,

        [Parameter()]
        [System.Object]
        $BlockAccess,

        [Parameter()]
        [System.Object]
        $SentToMemberOf,

        [Parameter()]
        [System.Object]
        $StopPolicyProcessing,

        [Parameter()]
        [System.Object]
        $Disabled,

        [Parameter()]
        [System.Object]
        $ReportSeverityLevel,

        [Parameter()]
        [System.Object]
        $ExceptIfDocumentIsUnsupported,

        [Parameter()]
        [System.Object]
        $MessageTypeMatches,

        [Parameter()]
        [System.Object]
        $RuleErrorAction,

        [Parameter()]
        [System.Object]
        $NotifyPolicyTipCustomText,

        [Parameter()]
        [System.Object]
        $ContentPropertyContainsWords,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $DocumentIsUnsupported,

        [Parameter()]
        [System.Object]
        $SetHeader,

        [Parameter()]
        [System.Object]
        $SubjectMatchesPatterns,

        [Parameter()]
        [System.Object]
        $HeaderMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfSentTo,

        [Parameter()]
        [System.Object]
        $ExpiryDate,

        [Parameter()]
        [System.Object]
        $ExceptIfContentExtensionMatchesWords,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $FromAddressContainsWords,

        [Parameter()]
        [System.Object]
        $AlertProperties,

        [Parameter()]
        [System.Object]
        $DocumentSizeOver,

        [Parameter()]
        [System.Object]
        $ExceptIfSenderDomainIs,

        [Parameter()]
        [System.Object]
        $EncryptRMSTemplate,

        [Parameter()]
        [System.Object]
        $ExceptIfAnyOfRecipientAddressMatchesPatterns,

        [Parameter()]
        [System.Object]
        $AddRecipients,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-DlpEdmSchema
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $FileData,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-DlpFingerprint
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $FileData,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-DlpKeywordDictionary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $FileData,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-DlpSensitiveInformationType
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Locale,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Fingerprints,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-DlpSensitiveInformationTypeRulePackage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $FileData,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $MigrationId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-FilePlanPropertyAuthority
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-FilePlanPropertyCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-FilePlanPropertyCitation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $CitationUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $CitationJurisdiction,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-FilePlanPropertyDepartment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-FilePlanPropertyReferenceId
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-FilePlanPropertySubCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ParentId,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-HoldCompliancePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $PublicFolderLocation,

        [Parameter()]
        [System.Object]
        $ExchangeLocation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $SharePointLocation,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-HoldComplianceRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ContentDateFrom,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $HoldContent,

        [Parameter()]
        [System.Object]
        $Disabled,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $ContentMatchQuery,

        [Parameter()]
        [System.Object]
        $Policy,

        [Parameter()]
        [System.Object]
        $ContentDateTo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $HoldDurationDisplayHint,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-InformationBarrierPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $SegmentsAllowed,

        [Parameter()]
        [System.Object]
        $AssignedSegment,

        [Parameter()]
        [System.Object]
        $SegmentAllowedFilter,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $State,

        [Parameter()]
        [System.Object]
        $SegmentsBlocked,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-InsiderRiskEntityList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Type,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsSystem,

        [Parameter()]
        [System.Object]
        $Entities,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-InsiderRiskPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $HistoricTimeSpan,

        [Parameter()]
        [System.Object]
        $SensitivityLabels,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $ExchangeLocation,

        [Parameter()]
        [System.Object]
        $PostTerminationActivity,

        [Parameter()]
        [System.Object]
        $Triggers,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $TeamsSites,

        [Parameter()]
        [System.Object]
        $InsiderRiskScenario,

        [Parameter()]
        [System.Object]
        $DlpPolicy,

        [Parameter()]
        [System.Object]
        $FutureTerminationWindow,

        [Parameter()]
        [System.Object]
        $IsCustom,

        [Parameter()]
        [System.Object]
        $Indicators,

        [Parameter()]
        [System.Object]
        $SharepointSites,

        [Parameter()]
        [System.Object]
        $CustomTags,

        [Parameter()]
        [System.Object]
        $TenantSetting,

        [Parameter()]
        [System.Object]
        $DlpSensitiveTypes,

        [Parameter()]
        [System.Object]
        $InScopeTimeSpan,

        [Parameter()]
        [System.Object]
        $SchemaVersion,

        [Parameter()]
        [System.Object]
        $PastTerminationWindow,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-Label
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EncryptionEncryptOnly,

        [Parameter()]
        [System.Object]
        $EncryptionDoubleKeyEncryptionUrl,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingHeaderText,

        [Parameter()]
        [System.Object]
        $ContentType,

        [Parameter()]
        [System.Object]
        $Setting,

        [Parameter()]
        [System.Object]
        $EncryptionEnabled,

        [Parameter()]
        [System.Object]
        $SiteAndGroupProtectionEnabled,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingFooterFontSize,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingHeaderFontColor,

        [Parameter()]
        [System.Object]
        $EncryptionContentExpiredOnDateInDaysOrNever,

        [Parameter()]
        [System.Object]
        $ApplyWaterMarkingText,

        [Parameter()]
        [System.Object]
        $ApplyWaterMarkingFontName,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingFooterText,

        [Parameter()]
        [System.Object]
        $SiteAndGroupProtectionAllowEmailFromGuestUsers,

        [Parameter()]
        [System.Object]
        $SiteAndGroupProtectionAllowLimitedAccess,

        [Parameter()]
        [System.Object]
        $EncryptionDoNotForward,

        [Parameter()]
        [System.Object]
        $EncryptionAipTemplateScopes,

        [Parameter()]
        [System.Object]
        $ParentId,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingFooterEnabled,

        [Parameter()]
        [System.Object]
        $Settings,

        [Parameter()]
        [System.Object]
        $MigrationId,

        [Parameter()]
        [System.Object]
        $ApplyWaterMarkingLayout,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingFooterMargin,

        [Parameter()]
        [System.Object]
        $EncryptionRightsDefinitions,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingFooterFontColor,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingFooterFontName,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingHeaderMargin,

        [Parameter()]
        [System.Object]
        $EncryptionLinkedTemplateId,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingHeaderAlignment,

        [Parameter()]
        [System.Object]
        $LabelActions,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingHeaderFontSize,

        [Parameter()]
        [System.Object]
        $LocaleSettings,

        [Parameter()]
        [System.Object]
        $AdvancedSettings,

        [Parameter()]
        [System.Object]
        $EncryptionProtectionType,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingHeaderFontName,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingFooterAlignment,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ApplyWaterMarkingFontSize,

        [Parameter()]
        [System.Object]
        $SiteAndGroupProtectionAllowAccessToGuestUsers,

        [Parameter()]
        [System.Object]
        $SiteAndGroupProtectionPrivacy,

        [Parameter()]
        [System.Object]
        $EncryptionPromptUser,

        [Parameter()]
        [System.Object]
        $Tooltip,

        [Parameter()]
        [System.Object]
        $SiteAndGroupProtectionBlockAccess,

        [Parameter()]
        [System.Object]
        $EncryptionOfflineAccessDays,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingHeaderEnabled,

        [Parameter()]
        [System.Object]
        $EncryptionTemplateId,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $SiteAndGroupProtectionAllowFullAccess,

        [Parameter()]
        [System.Object]
        $ApplyWaterMarkingFontColor,

        [Parameter()]
        [System.Object]
        $EncryptionRightsUrl,

        [Parameter()]
        [System.Object]
        $Conditions,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ApplyWaterMarkingEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-LabelPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Labels,

        [Parameter()]
        [System.Object]
        $ModernGroupLocationException,

        [Parameter()]
        [System.Object]
        $Settings,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $AdvancedSettings,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $SharePointLocation,

        [Parameter()]
        [System.Object]
        $Setting,

        [Parameter()]
        [System.Object]
        $ExchangeLocation,

        [Parameter()]
        [System.Object]
        $OneDriveLocationException,

        [Parameter()]
        [System.Object]
        $PublicFolderLocation,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $MigrationId,

        [Parameter()]
        [System.Object]
        $ModernGroupLocation,

        [Parameter()]
        [System.Object]
        $ExchangeLocationException,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $OneDriveLocation,

        [Parameter()]
        [System.Object]
        $SkypeLocation,

        [Parameter()]
        [System.Object]
        $SkypeLocationException,

        [Parameter()]
        [System.Object]
        $SharePointLocationException,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-OrganizationSegment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $UserGroupFilter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-ProtectionAlert
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $NotificationEnabled,

        [Parameter()]
        [System.Object]
        $NotifyUserThrottleWindow,

        [Parameter()]
        [System.Object]
        $Threshold,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Operation,

        [Parameter()]
        [System.Object]
        $NotifyUser,

        [Parameter()]
        [System.Object]
        $AlertBy,

        [Parameter()]
        [System.Object]
        $NotifyUserThrottleThreshold,

        [Parameter()]
        [System.Object]
        $NotificationCulture,

        [Parameter()]
        [System.Object]
        $AggregationType,

        [Parameter()]
        [System.Object]
        $Severity,

        [Parameter()]
        [System.Object]
        $VolumeThreshold,

        [Parameter()]
        [System.Object]
        $TimeWindow,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Category,

        [Parameter()]
        [System.Object]
        $AlertFor,

        [Parameter()]
        [System.Object]
        $LogicalOperationName,

        [Parameter()]
        [System.Object]
        $NotifyUserSuppressionExpiryDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $NotifyUserOnFilterMatch,

        [Parameter()]
        [System.Object]
        $ThreatType,

        [Parameter()]
        [System.Object]
        $Disabled,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-RetentionCompliancePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TeamsChannelLocation,

        [Parameter()]
        [System.Object]
        $ModernGroupLocationException,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $SharePointLocation,

        [Parameter()]
        [System.Object]
        $ExchangeLocation,

        [Parameter()]
        [System.Object]
        $OneDriveLocationException,

        [Parameter()]
        [System.Object]
        $PublicFolderLocation,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $ModernGroupLocation,

        [Parameter()]
        [System.Object]
        $ExchangeLocationException,

        [Parameter()]
        [System.Object]
        $TeamsChatLocationException,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $TeamsChatLocation,

        [Parameter()]
        [System.Object]
        $OneDriveLocation,

        [Parameter()]
        [System.Object]
        $SkypeLocation,

        [Parameter()]
        [System.Object]
        $TeamsChannelLocationException,

        [Parameter()]
        [System.Object]
        $SkypeLocationException,

        [Parameter()]
        [System.Object]
        $SharePointLocationException,

        [Parameter()]
        [System.Object]
        $RestrictiveRetention,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-RetentionComplianceRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RetentionDuration,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $PublishComplianceTag,

        [Parameter()]
        [System.Object]
        $RetentionComplianceAction,

        [Parameter()]
        [System.Object]
        $ContentMatchQuery,

        [Parameter()]
        [System.Object]
        $ApplyComplianceTag,

        [Parameter()]
        [System.Object]
        $ExpirationDateOption,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $MachineLearningModelIDs,

        [Parameter()]
        [System.Object]
        $ExcludedItemClasses,

        [Parameter()]
        [System.Object]
        $ContentContainsSensitiveInformation,

        [Parameter()]
        [System.Object]
        $Policy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $RetentionDurationDisplayHint,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-RoleGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $Members,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Id,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Roles,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-SupervisoryReviewPolicyV2
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $Reviewers,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-SupervisoryReviewRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ContentSources,

        [Parameter()]
        [System.Object]
        $ContentContainsSensitiveInformation,

        [Parameter()]
        [System.Object]
        $Condition,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $ContentMatchesDataModel,

        [Parameter()]
        [System.Object]
        $Policy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $CcsiDataModelOperator,

        [Parameter()]
        [System.Object]
        $SamplingRate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-TeamsRetentionCompliancePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TeamsChatLocationException,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $TeamsChannelLocationException,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $TeamsChatLocation,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $RestrictiveRetention,

        [Parameter()]
        [System.Object]
        $TeamsChannelLocation,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-TeamsRetentionComplianceRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RetentionDuration,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $RetentionComplianceAction,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Policy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-UnifiedAuditLogRetentionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RetentionDuration,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Operations,

        [Parameter()]
        [System.Object]
        $UserIds,

        [Parameter()]
        [System.Object]
        $RecordTypes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Preview-QuarantineMessage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Release-QuarantineMessage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReportFalsePositive,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowSender,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $User,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReleaseToAll,

        [Parameter()]
        [System.Object]
        $Identities,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ActivityAlert
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceDeletion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-AuditConfigurationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-AuditConfigurationRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-AutoSensitivityLabelPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-AutoSensitivityLabelRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CaseHoldPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceDeletion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CaseHoldRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceDeletion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ComplianceCase
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ComplianceCaseMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Case,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Member,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ComplianceRetentionEvent
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PreviewOnly,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceDeletion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ComplianceRetentionEventType
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceDeletion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ComplianceSearch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ComplianceSearchAction
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ComplianceSecurityFilter
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $FilterName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ComplianceTag
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceDeletion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-DeviceConditionalAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-DeviceConditionalAccessRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-DeviceConfigurationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-DeviceConfigurationRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-DeviceTenantPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-DeviceTenantRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-DlpCompliancePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-DlpComplianceRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-DlpEdmSchema
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-DlpKeywordDictionary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-DlpSensitiveInformationType
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-DlpSensitiveInformationTypeRulePackage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-eDiscoveryCaseAdmin
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $User,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-FilePlanPropertyAuthority
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceDeletion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-FilePlanPropertyCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceDeletion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-FilePlanPropertyCitation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceDeletion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-FilePlanPropertyDepartment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceDeletion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-FilePlanPropertyReferenceId
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceDeletion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-FilePlanPropertySubCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceDeletion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-HoldCompliancePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceDeletion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-HoldComplianceRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceDeletion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-InformationBarrierPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-InsiderRiskEntityList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsSystem,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceDeletion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-InsiderRiskPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceDeletion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-Label
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-LabelPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-OrganizationSegment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-ProtectionAlert
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceDeletion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-RecordLabel
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $LabelName,

        [Parameter()]
        [System.Object]
        $ItemUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-RetentionCompliancePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceDeletion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-RetentionComplianceRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceDeletion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-RoleGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-RoleGroupMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Member,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-SupervisoryReviewPolicyV2
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceDeletion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-TeamsRetentionCompliancePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceDeletion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-TeamsRetentionComplianceRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceDeletion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-UnifiedAuditLogRetentionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceDeletion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Search-AdminAuditLog
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EndDate,

        [Parameter()]
        [System.Object]
        $ObjectIds,

        [Parameter()]
        [System.Object]
        $StartIndex,

        [Parameter()]
        [System.Object]
        $ExternalAccess,

        [Parameter()]
        [System.Object]
        $Parameters,

        [Parameter()]
        [System.Object]
        $Cmdlets,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $UserIds,

        [Parameter()]
        [System.Object]
        $IsSuccess,

        [Parameter()]
        [System.Object]
        $StartDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ActivityAlert
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Threshold,

        [Parameter()]
        [System.Object]
        $UserId,

        [Parameter()]
        [System.Object]
        $Operation,

        [Parameter()]
        [System.Object]
        $NotifyUser,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $RecordType,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $EmailCulture,

        [Parameter()]
        [System.Object]
        $Severity,

        [Parameter()]
        [System.Object]
        $TimeWindow,

        [Parameter()]
        [System.Object]
        $ScopeLevel,

        [Parameter()]
        [System.Object]
        $Category,

        [Parameter()]
        [System.Object]
        $Condition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Disabled,

        [Parameter()]
        [System.Object]
        $Multiplier,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-AuditConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Workload,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Organization,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-AuditConfigurationRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AuditOperation,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-AutoSensitivityLabelPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $RemoveOneDriveLocationException,

        [Parameter()]
        [System.Object]
        $AddSharePointLocation,

        [Parameter()]
        [System.Object]
        $ExchangeSenderException,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $RemoveSharePointLocation,

        [Parameter()]
        [System.Object]
        $AddOneDriveLocationException,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RetryDistribution,

        [Parameter()]
        [System.Object]
        $ExchangeSender,

        [Parameter()]
        [System.Object]
        $AddExchangeLocation,

        [Parameter()]
        [System.Object]
        $AddSharePointLocationException,

        [Parameter()]
        [System.Object]
        $ApplySensitivityLabel,

        [Parameter()]
        [System.Object]
        $RemoveSharePointLocationException,

        [Parameter()]
        [System.Object]
        $RemoveExchangeLocation,

        [Parameter()]
        [System.Object]
        $ExchangeSenderMemberOf,

        [Parameter()]
        [System.Object]
        $ExchangeSenderMemberOfException,

        [Parameter()]
        [System.Object]
        $RemoveOneDriveLocation,

        [Parameter()]
        [System.Object]
        $AddOneDriveLocation,

        [Parameter()]
        [System.Object]
        $Mode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-AutoSensitivityLabelRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RecipientDomainIs,

        [Parameter()]
        [System.Object]
        $ExceptIfFrom,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ExceptIfProcessingLimitExceeded,

        [Parameter()]
        [System.Object]
        $ExpiryDate,

        [Parameter()]
        [System.Object]
        $ExceptIfContentContainsSensitiveInformation,

        [Parameter()]
        [System.Object]
        $ProcessingLimitExceeded,

        [Parameter()]
        [System.Object]
        $ExceptIfAccessScope,

        [Parameter()]
        [System.Object]
        $ExceptIfDocumentIsUnsupported,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $ExceptIfContentExtensionMatchesWords,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $ExceptIfSentTo,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientDomainIs,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $SenderIPRanges,

        [Parameter()]
        [System.Object]
        $From,

        [Parameter()]
        [System.Object]
        $ContentExtensionMatchesWords,

        [Parameter()]
        [System.Object]
        $Workload,

        [Parameter()]
        [System.Object]
        $ActivationDate,

        [Parameter()]
        [System.Object]
        $DocumentIsUnsupported,

        [Parameter()]
        [System.Object]
        $Disabled,

        [Parameter()]
        [System.Object]
        $RuleErrorAction,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $FromMemberOf,

        [Parameter()]
        [System.Object]
        $AccessScope,

        [Parameter()]
        [System.Object]
        $ExceptIfSenderIPRanges,

        [Parameter()]
        [System.Object]
        $ContentContainsSensitiveInformation,

        [Parameter()]
        [System.Object]
        $DocumentIsPasswordProtected,

        [Parameter()]
        [System.Object]
        $ReportSeverityLevel,

        [Parameter()]
        [System.Object]
        $ExceptIfFromMemberOf,

        [Parameter()]
        [System.Object]
        $ExceptIfDocumentIsPasswordProtected,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CaseHoldPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RemoveExchangeLocation,

        [Parameter()]
        [System.Object]
        $RemoveSharePointLocation,

        [Parameter()]
        [System.Object]
        $AddExchangeLocation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UpdateStatistics,

        [Parameter()]
        [System.Object]
        $AddSharePointLocation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RetryDistribution,

        [Parameter()]
        [System.Object]
        $RemovePublicFolderLocation,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $AddPublicFolderLocation,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CaseHoldRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Disabled,

        [Parameter()]
        [System.Object]
        $ContentMatchQuery,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ComplianceCase
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $CaseType,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $ExternalId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Reopen,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Close,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ComplianceRetentionEvent
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $SharePointAssetIdQuery,

        [Parameter()]
        [System.Object]
        $AssetId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $EventTags,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $ExchangeAssetIdQuery,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ComplianceRetentionEventType
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ComplianceSearch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RefinerNames,

        [Parameter()]
        [System.Object]
        $ContentMatchQuery,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $SharePointLocation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AddSharePointLocation,

        [Parameter()]
        [System.Object]
        $AddExchangeLocationExclusion,

        [Parameter()]
        [System.Object]
        $IncludeUserAppContent,

        [Parameter()]
        [System.Object]
        $SharePointLocationExclusion,

        [Parameter()]
        [System.Object]
        $AllowNotFoundExchangeLocationsEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $ExchangeLocationExclusion,

        [Parameter()]
        [System.Object]
        $AddSharePointLocationExclusion,

        [Parameter()]
        [System.Object]
        $RemovePublicFolderLocation,

        [Parameter()]
        [System.Object]
        $RemoveSharePointLocation,

        [Parameter()]
        [System.Object]
        $ExchangeLocation,

        [Parameter()]
        [System.Object]
        $PublicFolderLocation,

        [Parameter()]
        [System.Object]
        $RemoveSharePointLocationExclusion,

        [Parameter()]
        [System.Object]
        $IncludeOrgContent,

        [Parameter()]
        [System.Object]
        $RemoveExchangeLocationExclusion,

        [Parameter()]
        [System.Object]
        $HoldNames,

        [Parameter()]
        [System.Object]
        $RemoveExchangeLocation,

        [Parameter()]
        [System.Object]
        $AddExchangeLocation,

        [Parameter()]
        [System.Object]
        $Language,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ComplianceSearchAction
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ChangeExportKey,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ComplianceSecurityFilter
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Filters,

        [Parameter()]
        [System.Object]
        $Users,

        [Parameter()]
        [System.Object]
        $FilterName,

        [Parameter()]
        [System.Object]
        $Region,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ComplianceTag
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RetentionDuration,

        [Parameter()]
        [System.Object]
        $FilePlanProperty,

        [Parameter()]
        [System.Object]
        $Notes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $EventType,

        [Parameter()]
        [System.Object]
        $ReviewerEmail,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-DeviceConditionalAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RetryDistribution,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-DeviceConditionalAccessRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $CameraEnabled,

        [Parameter()]
        [System.Object]
        $AllowVideoConferencing,

        [Parameter()]
        [System.Object]
        $AntiVirusSignatureStatus,

        [Parameter()]
        [System.Object]
        $FirewallStatus,

        [Parameter()]
        [System.Object]
        $AllowAppStore,

        [Parameter()]
        [System.Object]
        $AllowAssistantWhileLocked,

        [Parameter()]
        [System.Object]
        $AppsRating,

        [Parameter()]
        [System.Object]
        $PasswordHistoryCount,

        [Parameter()]
        [System.Object]
        $PasswordQuality,

        [Parameter()]
        [System.Object]
        $PhoneMemoryEncrypted,

        [Parameter()]
        [System.Object]
        $EmailAddress,

        [Parameter()]
        [System.Object]
        $BluetoothEnabled,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $AllowConvenienceLogon,

        [Parameter()]
        [System.Object]
        $MaxPasswordGracePeriod,

        [Parameter()]
        [System.Object]
        $AllowVoiceAssistant,

        [Parameter()]
        [System.Object]
        $AllowiCloudDocSync,

        [Parameter()]
        [System.Object]
        $AntiVirusStatus,

        [Parameter()]
        [System.Object]
        $TVShowsRating,

        [Parameter()]
        [System.Object]
        $AllowJailbroken,

        [Parameter()]
        [System.Object]
        $ForceAppStorePassword,

        [Parameter()]
        [System.Object]
        $AllowDiagnosticSubmission,

        [Parameter()]
        [System.Object]
        $AutoUpdateStatus,

        [Parameter()]
        [System.Object]
        $WLANEnabled,

        [Parameter()]
        [System.Object]
        $AllowVoiceDialing,

        [Parameter()]
        [System.Object]
        $AccountName,

        [Parameter()]
        [System.Object]
        $PasswordComplexity,

        [Parameter()]
        [System.Object]
        $PasswordTimeout,

        [Parameter()]
        [System.Object]
        $SmartScreenEnabled,

        [Parameter()]
        [System.Object]
        $AllowiCloudPhotoSync,

        [Parameter()]
        [System.Object]
        $AllowSimplePassword,

        [Parameter()]
        [System.Object]
        $AllowPassbookWhileLocked,

        [Parameter()]
        [System.Object]
        $PasswordMinimumLength,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $PasswordRequired,

        [Parameter()]
        [System.Object]
        $MaxPasswordAttemptsBeforeWipe,

        [Parameter()]
        [System.Object]
        $MoviesRating,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $WorkFoldersSyncUrl,

        [Parameter()]
        [System.Object]
        $PasswordExpirationDays,

        [Parameter()]
        [System.Object]
        $UserAccountControlStatus,

        [Parameter()]
        [System.Object]
        $RequireEmailProfile,

        [Parameter()]
        [System.Object]
        $ForceEncryptedBackup,

        [Parameter()]
        [System.Object]
        $AccountUserName,

        [Parameter()]
        [System.Object]
        $AllowScreenshot,

        [Parameter()]
        [System.Object]
        $AllowiCloudBackup,

        [Parameter()]
        [System.Object]
        $TargetGroups,

        [Parameter()]
        [System.Object]
        $ExchangeActiveSyncHost,

        [Parameter()]
        [System.Object]
        $PasswordMinComplexChars,

        [Parameter()]
        [System.Object]
        $SystemSecurityTLS,

        [Parameter()]
        [System.Object]
        $RegionRatings,

        [Parameter()]
        [System.Object]
        $EnableRemovableStorage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-DeviceConfigurationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RetryDistribution,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-DeviceConfigurationRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $CameraEnabled,

        [Parameter()]
        [System.Object]
        $AllowVideoConferencing,

        [Parameter()]
        [System.Object]
        $AntiVirusSignatureStatus,

        [Parameter()]
        [System.Object]
        $FirewallStatus,

        [Parameter()]
        [System.Object]
        $AllowAppStore,

        [Parameter()]
        [System.Object]
        $AllowAssistantWhileLocked,

        [Parameter()]
        [System.Object]
        $AppsRating,

        [Parameter()]
        [System.Object]
        $PasswordHistoryCount,

        [Parameter()]
        [System.Object]
        $PasswordQuality,

        [Parameter()]
        [System.Object]
        $PhoneMemoryEncrypted,

        [Parameter()]
        [System.Object]
        $EmailAddress,

        [Parameter()]
        [System.Object]
        $BluetoothEnabled,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $AllowConvenienceLogon,

        [Parameter()]
        [System.Object]
        $MaxPasswordGracePeriod,

        [Parameter()]
        [System.Object]
        $AllowVoiceAssistant,

        [Parameter()]
        [System.Object]
        $AllowiCloudDocSync,

        [Parameter()]
        [System.Object]
        $AntiVirusStatus,

        [Parameter()]
        [System.Object]
        $TVShowsRating,

        [Parameter()]
        [System.Object]
        $ForceAppStorePassword,

        [Parameter()]
        [System.Object]
        $AllowDiagnosticSubmission,

        [Parameter()]
        [System.Object]
        $AutoUpdateStatus,

        [Parameter()]
        [System.Object]
        $WLANEnabled,

        [Parameter()]
        [System.Object]
        $AllowVoiceDialing,

        [Parameter()]
        [System.Object]
        $AccountName,

        [Parameter()]
        [System.Object]
        $PasswordComplexity,

        [Parameter()]
        [System.Object]
        $PasswordTimeout,

        [Parameter()]
        [System.Object]
        $SmartScreenEnabled,

        [Parameter()]
        [System.Object]
        $AllowiCloudPhotoSync,

        [Parameter()]
        [System.Object]
        $AllowSimplePassword,

        [Parameter()]
        [System.Object]
        $AllowPassbookWhileLocked,

        [Parameter()]
        [System.Object]
        $PasswordMinimumLength,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $PasswordRequired,

        [Parameter()]
        [System.Object]
        $MaxPasswordAttemptsBeforeWipe,

        [Parameter()]
        [System.Object]
        $MoviesRating,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $WorkFoldersSyncUrl,

        [Parameter()]
        [System.Object]
        $PasswordExpirationDays,

        [Parameter()]
        [System.Object]
        $UserAccountControlStatus,

        [Parameter()]
        [System.Object]
        $RequireEmailProfile,

        [Parameter()]
        [System.Object]
        $ForceEncryptedBackup,

        [Parameter()]
        [System.Object]
        $AccountUserName,

        [Parameter()]
        [System.Object]
        $AllowScreenshot,

        [Parameter()]
        [System.Object]
        $AllowiCloudBackup,

        [Parameter()]
        [System.Object]
        $TargetGroups,

        [Parameter()]
        [System.Object]
        $ExchangeActiveSyncHost,

        [Parameter()]
        [System.Object]
        $PasswordMinComplexChars,

        [Parameter()]
        [System.Object]
        $SystemSecurityTLS,

        [Parameter()]
        [System.Object]
        $RegionRatings,

        [Parameter()]
        [System.Object]
        $EnableRemovableStorage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-DeviceTenantPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RetryDistribution,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-DeviceTenantRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $BlockUnsupportedDevices,

        [Parameter()]
        [System.Object]
        $ApplyPolicyTo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExclusionList,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-DlpCompliancePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RemoveThirdPartyAppDlpLocationException,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $RemoveOneDriveLocationException,

        [Parameter()]
        [System.Object]
        $AddThirdPartyAppDlpLocation,

        [Parameter()]
        [System.Object]
        $AddExchangeLocation,

        [Parameter()]
        [System.Object]
        $AddTeamsLocation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $RemoveSharePointLocation,

        [Parameter()]
        [System.Object]
        $ExceptIfOneDriveSharedBy,

        [Parameter()]
        [System.Object]
        $AddOneDriveLocationException,

        [Parameter()]
        [System.Object]
        $ExchangeSenderMemberOfException,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RetryDistribution,

        [Parameter()]
        [System.Object]
        $AddSharePointLocation,

        [Parameter()]
        [System.Object]
        $AddSharePointLocationException,

        [Parameter()]
        [System.Object]
        $AddTeamsLocationException,

        [Parameter()]
        [System.Object]
        $AddThirdPartyAppDlpLocationException,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $RemoveThirdPartyAppDlpLocation,

        [Parameter()]
        [System.Object]
        $RemoveSharePointLocationException,

        [Parameter()]
        [System.Object]
        $RemoveTeamsLocationException,

        [Parameter()]
        [System.Object]
        $ExchangeSenderMemberOf,

        [Parameter()]
        [System.Object]
        $RemoveTeamsLocation,

        [Parameter()]
        [System.Object]
        $RemoveOneDriveLocation,

        [Parameter()]
        [System.Object]
        $AddOneDriveLocation,

        [Parameter()]
        [System.Object]
        $RemoveExchangeLocation,

        [Parameter()]
        [System.Object]
        $Mode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-DlpComplianceRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $DocumentNameMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfRecipientDomainIs,

        [Parameter()]
        [System.Object]
        $ExceptIfContentContainsSensitiveInformation,

        [Parameter()]
        [System.Object]
        $ExceptIfDocumentNameMatchesWords,

        [Parameter()]
        [System.Object]
        $ExceptIfFromAddressContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfProcessingLimitExceeded,

        [Parameter()]
        [System.Object]
        $AnyOfRecipientAddressMatchesPatterns,

        [Parameter()]
        [System.Object]
        $UnscannableDocumentExtensionIs,

        [Parameter()]
        [System.Object]
        $RedirectMessageTo,

        [Parameter()]
        [System.Object]
        $NotifyPolicyTipCustomText,

        [Parameter()]
        [System.Object]
        $DocumentNameMatchesWords,

        [Parameter()]
        [System.Object]
        $NotifyAllowOverride,

        [Parameter()]
        [System.Object]
        $NotifyUser,

        [Parameter()]
        [System.Object]
        $ProcessingLimitExceeded,

        [Parameter()]
        [System.Object]
        $ExceptIfAnyOfRecipientAddressContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfSenderIPRanges,

        [Parameter()]
        [System.Object]
        $FromAddressMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfFrom,

        [Parameter()]
        [System.Object]
        $DocumentIsPasswordProtected,

        [Parameter()]
        [System.Object]
        $SubjectContainsWords,

        [Parameter()]
        [System.Object]
        $GenerateAlert,

        [Parameter()]
        [System.Object]
        $ExceptIfSubjectMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ContentExtensionMatchesWords,

        [Parameter()]
        [System.Object]
        $ThirdPartyAppDlpRestrictions,

        [Parameter()]
        [System.Object]
        $HeaderContainsWords,

        [Parameter()]
        [System.Object]
        $BlockAccessScope,

        [Parameter()]
        [System.Object]
        $AnyOfRecipientAddressContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfMessageTypeMatches,

        [Parameter()]
        [System.Object]
        $ExceptIfFromMemberOf,

        [Parameter()]
        [System.Object]
        $ExceptIfFromAddressMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfAccessScope,

        [Parameter()]
        [System.Object]
        $ExceptIfHeaderMatchesPatterns,

        [Parameter()]
        [System.Object]
        $RecipientDomainIs,

        [Parameter()]
        [System.Object]
        $NotifyEmailCustomSubject,

        [Parameter()]
        [System.Object]
        $IncidentReportContent,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $NotifyPolicyTipCustomTextTranslations,

        [Parameter()]
        [System.Object]
        $GenerateIncidentReport,

        [Parameter()]
        [System.Object]
        $ExceptIfUnscannableDocumentExtensionIs,

        [Parameter()]
        [System.Object]
        $From,

        [Parameter()]
        [System.Object]
        $AccessScope,

        [Parameter()]
        [System.Object]
        $RemoveHeader,

        [Parameter()]
        [System.Object]
        $ActivationDate,

        [Parameter()]
        [System.Object]
        $ExceptIfContentPropertyContainsWords,

        [Parameter()]
        [System.Object]
        $ExceptIfDocumentNameMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfDocumentIsPasswordProtected,

        [Parameter()]
        [System.Object]
        $ExceptIfSentToMemberOf,

        [Parameter()]
        [System.Object]
        $NotifyEmailCustomText,

        [Parameter()]
        [System.Object]
        $ExceptIfDocumentSizeOver,

        [Parameter()]
        [System.Object]
        $ExceptIfSubjectContainsWords,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $ExceptIfHeaderContainsWords,

        [Parameter()]
        [System.Object]
        $SenderIPRanges,

        [Parameter()]
        [System.Object]
        $SenderDomainIs,

        [Parameter()]
        [System.Object]
        $ContentContainsSensitiveInformation,

        [Parameter()]
        [System.Object]
        $Moderate,

        [Parameter()]
        [System.Object]
        $FromMemberOf,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $BlockAccess,

        [Parameter()]
        [System.Object]
        $SentToMemberOf,

        [Parameter()]
        [System.Object]
        $StopPolicyProcessing,

        [Parameter()]
        [System.Object]
        $Disabled,

        [Parameter()]
        [System.Object]
        $ReportSeverityLevel,

        [Parameter()]
        [System.Object]
        $ExceptIfDocumentIsUnsupported,

        [Parameter()]
        [System.Object]
        $MessageTypeMatches,

        [Parameter()]
        [System.Object]
        $RuleErrorAction,

        [Parameter()]
        [System.Object]
        $ContentPropertyContainsWords,

        [Parameter()]
        [System.Object]
        $SentTo,

        [Parameter()]
        [System.Object]
        $DocumentIsUnsupported,

        [Parameter()]
        [System.Object]
        $SetHeader,

        [Parameter()]
        [System.Object]
        $SubjectMatchesPatterns,

        [Parameter()]
        [System.Object]
        $HeaderMatchesPatterns,

        [Parameter()]
        [System.Object]
        $ExceptIfSentTo,

        [Parameter()]
        [System.Object]
        $ExpiryDate,

        [Parameter()]
        [System.Object]
        $ExceptIfContentExtensionMatchesWords,

        [Parameter()]
        [System.Object]
        $FromAddressContainsWords,

        [Parameter()]
        [System.Object]
        $AlertProperties,

        [Parameter()]
        [System.Object]
        $DocumentSizeOver,

        [Parameter()]
        [System.Object]
        $ExceptIfSenderDomainIs,

        [Parameter()]
        [System.Object]
        $EncryptRMSTemplate,

        [Parameter()]
        [System.Object]
        $ExceptIfAnyOfRecipientAddressMatchesPatterns,

        [Parameter()]
        [System.Object]
        $AddRecipients,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-DlpEdmSchema
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $FileData,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-DlpKeywordDictionary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $FileData,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-DlpSensitiveInformationType
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Locale,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Fingerprints,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-DlpSensitiveInformationTypeConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RegexGrammarLimit,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $FingerprintThreshold,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-DlpSensitiveInformationTypeRulePackage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $FileData,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-FilePlanPropertyAuthority
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-FilePlanPropertyCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-FilePlanPropertyCitation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $CitationUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $CitationJurisdiction,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-FilePlanPropertyDepartment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-FilePlanPropertyReferenceId
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-FilePlanPropertySubCategory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-HoldCompliancePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RemoveExchangeLocation,

        [Parameter()]
        [System.Object]
        $RemoveSharePointLocation,

        [Parameter()]
        [System.Object]
        $AddExchangeLocation,

        [Parameter()]
        [System.Object]
        $AddSharePointLocation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RetryDistribution,

        [Parameter()]
        [System.Object]
        $RemovePublicFolderLocation,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $AddPublicFolderLocation,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-HoldComplianceRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ContentDateFrom,

        [Parameter()]
        [System.Object]
        $HoldContent,

        [Parameter()]
        [System.Object]
        $Disabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $ContentMatchQuery,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ContentDateTo,

        [Parameter()]
        [System.Object]
        $HoldDurationDisplayHint,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-InformationBarrierPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SegmentsAllowed,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $SegmentAllowedFilter,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $State,

        [Parameter()]
        [System.Object]
        $SegmentsBlocked,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-InsiderRiskEntityList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $AddEntities,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $RemoveEntities,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-InsiderRiskPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $HistoricTimeSpan,

        [Parameter()]
        [System.Object]
        $SensitivityLabels,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $AddExchangeLocation,

        [Parameter()]
        [System.Object]
        $PostTerminationActivity,

        [Parameter()]
        [System.Object]
        $Triggers,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $TeamsSites,

        [Parameter()]
        [System.Object]
        $DlpPolicy,

        [Parameter()]
        [System.Object]
        $FutureTerminationWindow,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $IsCustom,

        [Parameter()]
        [System.Object]
        $RemoveExchangeLocation,

        [Parameter()]
        [System.Object]
        $Indicators,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RetryDistribution,

        [Parameter()]
        [System.Object]
        $SharepointSites,

        [Parameter()]
        [System.Object]
        $CustomTags,

        [Parameter()]
        [System.Object]
        $TenantSetting,

        [Parameter()]
        [System.Object]
        $DlpSensitiveTypes,

        [Parameter()]
        [System.Object]
        $InScopeTimeSpan,

        [Parameter()]
        [System.Object]
        $SchemaVersion,

        [Parameter()]
        [System.Object]
        $PastTerminationWindow,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-Label
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EncryptionEncryptOnly,

        [Parameter()]
        [System.Object]
        $EncryptionDoubleKeyEncryptionUrl,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingHeaderText,

        [Parameter()]
        [System.Object]
        $ContentType,

        [Parameter()]
        [System.Object]
        $Setting,

        [Parameter()]
        [System.Object]
        $EncryptionEnabled,

        [Parameter()]
        [System.Object]
        $SiteAndGroupProtectionEnabled,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingFooterFontSize,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingHeaderFontColor,

        [Parameter()]
        [System.Object]
        $Conditions,

        [Parameter()]
        [System.Object]
        $EncryptionContentExpiredOnDateInDaysOrNever,

        [Parameter()]
        [System.Object]
        $ApplyWaterMarkingText,

        [Parameter()]
        [System.Object]
        $ApplyWaterMarkingFontName,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingFooterText,

        [Parameter()]
        [System.Object]
        $SiteAndGroupProtectionAllowEmailFromGuestUsers,

        [Parameter()]
        [System.Object]
        $SiteAndGroupProtectionAllowLimitedAccess,

        [Parameter()]
        [System.Object]
        $EncryptionDoNotForward,

        [Parameter()]
        [System.Object]
        $ParentId,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingFooterEnabled,

        [Parameter()]
        [System.Object]
        $Settings,

        [Parameter()]
        [System.Object]
        $MigrationId,

        [Parameter()]
        [System.Object]
        $ApplyWaterMarkingLayout,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingFooterMargin,

        [Parameter()]
        [System.Object]
        $EncryptionRightsDefinitions,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingFooterFontColor,

        [Parameter()]
        [System.Object]
        $PreviousLabel,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingFooterFontName,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingHeaderMargin,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingHeaderAlignment,

        [Parameter()]
        [System.Object]
        $LabelActions,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingHeaderFontSize,

        [Parameter()]
        [System.Object]
        $LocaleSettings,

        [Parameter()]
        [System.Object]
        $AdvancedSettings,

        [Parameter()]
        [System.Object]
        $EncryptionProtectionType,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingHeaderFontName,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingFooterAlignment,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ApplyWaterMarkingFontSize,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $SiteAndGroupProtectionAllowAccessToGuestUsers,

        [Parameter()]
        [System.Object]
        $SiteAndGroupProtectionPrivacy,

        [Parameter()]
        [System.Object]
        $EncryptionPromptUser,

        [Parameter()]
        [System.Object]
        $Tooltip,

        [Parameter()]
        [System.Object]
        $SiteAndGroupProtectionBlockAccess,

        [Parameter()]
        [System.Object]
        $EncryptionOfflineAccessDays,

        [Parameter()]
        [System.Object]
        $ApplyContentMarkingHeaderEnabled,

        [Parameter()]
        [System.Object]
        $SiteAndGroupProtectionAllowFullAccess,

        [Parameter()]
        [System.Object]
        $ApplyWaterMarkingFontColor,

        [Parameter()]
        [System.Object]
        $EncryptionRightsUrl,

        [Parameter()]
        [System.Object]
        $NextLabel,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ApplyWaterMarkingEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-LabelPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Settings,

        [Parameter()]
        [System.Object]
        $AddExchangeLocation,

        [Parameter()]
        [System.Object]
        $PreviousLabelPolicy,

        [Parameter()]
        [System.Object]
        $AddExchangeLocationException,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $RemoveExchangeLocationException,

        [Parameter()]
        [System.Object]
        $Setting,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $RemoveOneDriveLocationException,

        [Parameter()]
        [System.Object]
        $AddSharePointLocation,

        [Parameter()]
        [System.Object]
        $AdvancedSettings,

        [Parameter()]
        [System.Object]
        $RemoveModernGroupLocation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $AddLabels,

        [Parameter()]
        [System.Object]
        $RemovePublicFolderLocation,

        [Parameter()]
        [System.Object]
        $RemoveModernGroupLocationException,

        [Parameter()]
        [System.Object]
        $AddModernGroupLocationException,

        [Parameter()]
        [System.Object]
        $RemoveSharePointLocation,

        [Parameter()]
        [System.Object]
        $AddOneDriveLocationException,

        [Parameter()]
        [System.Object]
        $AddModernGroupLocation,

        [Parameter()]
        [System.Object]
        $AddSkypeLocation,

        [Parameter()]
        [System.Object]
        $AddPublicFolderLocation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RetryDistribution,

        [Parameter()]
        [System.Object]
        $MigrationId,

        [Parameter()]
        [System.Object]
        $AddSharePointLocationException,

        [Parameter()]
        [System.Object]
        $RemoveSkypeLocationException,

        [Parameter()]
        [System.Object]
        $RemoveSharePointLocationException,

        [Parameter()]
        [System.Object]
        $NextLabelPolicy,

        [Parameter()]
        [System.Object]
        $RemoveExchangeLocation,

        [Parameter()]
        [System.Object]
        $RemoveSkypeLocation,

        [Parameter()]
        [System.Object]
        $RemoveOneDriveLocation,

        [Parameter()]
        [System.Object]
        $AddOneDriveLocation,

        [Parameter()]
        [System.Object]
        $AddSkypeLocationException,

        [Parameter()]
        [System.Object]
        $RemoveLabels,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-OrganizationSegment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $UserGroupFilter,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-PolicyConfig
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ClassificationScheme,

        [Parameter()]
        [System.Object]
        $ProcessingLimitExceededSeverity,

        [Parameter()]
        [System.Object]
        $EnableSpoAipMigration,

        [Parameter()]
        [System.Object]
        $ComplianceUrl,

        [Parameter()]
        [System.Object]
        $EnableLabelCoauth,

        [Parameter()]
        [System.Object]
        $EndpointDlpGlobalSettingsPsws,

        [Parameter()]
        [System.Object]
        $RetentionForwardCrawl,

        [Parameter()]
        [System.Object]
        $OnPremisesWorkload,

        [Parameter()]
        [System.Object]
        $DocumentIsUnsupportedSeverity,

        [Parameter()]
        [System.Object]
        $EndpointDlpGlobalSettings,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $SenderAddressLocation,

        [Parameter()]
        [System.Object]
        $RuleErrorAction,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-ProtectionAlert
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $NotificationEnabled,

        [Parameter()]
        [System.Object]
        $NotifyUserThrottleWindow,

        [Parameter()]
        [System.Object]
        $Threshold,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Operation,

        [Parameter()]
        [System.Object]
        $NotifyUser,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $AlertBy,

        [Parameter()]
        [System.Object]
        $AggregationType,

        [Parameter()]
        [System.Object]
        $Severity,

        [Parameter()]
        [System.Object]
        $VolumeThreshold,

        [Parameter()]
        [System.Object]
        $TimeWindow,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Category,

        [Parameter()]
        [System.Object]
        $AlertFor,

        [Parameter()]
        [System.Object]
        $Disabled,

        [Parameter()]
        [System.Object]
        $NotifyUserSuppressionExpiryDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $NotifyUserOnFilterMatch,

        [Parameter()]
        [System.Object]
        $NotifyUserThrottleThreshold,

        [Parameter()]
        [System.Object]
        $NotificationCulture,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-RegulatoryComplianceUI
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-RetentionCompliancePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AddExchangeLocation,

        [Parameter()]
        [System.Object]
        $AddExchangeLocationException,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $RemoveTeamsChatLocation,

        [Parameter()]
        [System.Object]
        $RemoveExchangeLocationException,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $RemoveOneDriveLocationException,

        [Parameter()]
        [System.Object]
        $AddSharePointLocation,

        [Parameter()]
        [System.Object]
        $AddTeamsChatLocationException,

        [Parameter()]
        [System.Object]
        $AddSkypeLocation,

        [Parameter()]
        [System.Object]
        $RemoveModernGroupLocation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $RemovePublicFolderLocation,

        [Parameter()]
        [System.Object]
        $RemoveModernGroupLocationException,

        [Parameter()]
        [System.Object]
        $AddModernGroupLocationException,

        [Parameter()]
        [System.Object]
        $AddTeamsChatLocation,

        [Parameter()]
        [System.Object]
        $RemoveSharePointLocation,

        [Parameter()]
        [System.Object]
        $AddOneDriveLocationException,

        [Parameter()]
        [System.Object]
        $AddModernGroupLocation,

        [Parameter()]
        [System.Object]
        $AddTeamsChannelLocationException,

        [Parameter()]
        [System.Object]
        $AddPublicFolderLocation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RetryDistribution,

        [Parameter()]
        [System.Object]
        $RemoveTeamsChatLocationException,

        [Parameter()]
        [System.Object]
        $RemoveTeamsChannelLocationException,

        [Parameter()]
        [System.Object]
        $RemoveTeamsChannelLocation,

        [Parameter()]
        [System.Object]
        $AddSharePointLocationException,

        [Parameter()]
        [System.Object]
        $AddTeamsChannelLocation,

        [Parameter()]
        [System.Object]
        $RemoveSkypeLocationException,

        [Parameter()]
        [System.Object]
        $RemoveSharePointLocationException,

        [Parameter()]
        [System.Object]
        $RemoveExchangeLocation,

        [Parameter()]
        [System.Object]
        $RemoveSkypeLocation,

        [Parameter()]
        [System.Object]
        $RemoveOneDriveLocation,

        [Parameter()]
        [System.Object]
        $AddOneDriveLocation,

        [Parameter()]
        [System.Object]
        $AddSkypeLocationException,

        [Parameter()]
        [System.Object]
        $RestrictiveRetention,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-RetentionComplianceRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ContentDateFrom,

        [Parameter()]
        [System.Object]
        $RetentionDuration,

        [Parameter()]
        [System.Object]
        $ExcludedItemClasses,

        [Parameter()]
        [System.Object]
        $RetentionComplianceAction,

        [Parameter()]
        [System.Object]
        $ContentMatchQuery,

        [Parameter()]
        [System.Object]
        $ApplyComplianceTag,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ExpirationDateOption,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ContentContainsSensitiveInformation,

        [Parameter()]
        [System.Object]
        $ContentDateTo,

        [Parameter()]
        [System.Object]
        $RetentionDurationDisplayHint,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-RoleGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-SupervisoryReviewPolicyV2
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $AddReviewers,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $Reviewers,

        [Parameter()]
        [System.Object]
        $RetentionPeriodInDays,

        [Parameter()]
        [System.Object]
        $RemoveReviewers,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-SupervisoryReviewRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ContentSources,

        [Parameter()]
        [System.Object]
        $ContentContainsSensitiveInformation,

        [Parameter()]
        [System.Object]
        $Condition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ContentMatchesDataModel,

        [Parameter()]
        [System.Object]
        $CcsiDataModelOperator,

        [Parameter()]
        [System.Object]
        $SamplingRate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-TeamsRetentionCompliancePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RemoveTeamsChannelLocation,

        [Parameter()]
        [System.Object]
        $RemoveTeamsChatLocation,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $AddTeamsChatLocationException,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $AddTeamsChatLocation,

        [Parameter()]
        [System.Object]
        $AddTeamsChannelLocationException,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $RemoveTeamsChannelLocationException,

        [Parameter()]
        [System.Object]
        $RemoveTeamsChatLocationException,

        [Parameter()]
        [System.Object]
        $AddTeamsChannelLocation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RetryDistribution,

        [Parameter()]
        [System.Object]
        $RestrictiveRetention,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-TeamsRetentionComplianceRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RetentionDuration,

        [Parameter()]
        [System.Object]
        $RetentionComplianceAction,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Comment,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-UnifiedAuditLogRetentionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RetentionDuration,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Operations,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $UserIds,

        [Parameter()]
        [System.Object]
        $RecordTypes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Start-ComplianceSearch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RetryOnError,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Start-InformationBarrierPoliciesApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Stop-ComplianceSearch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Stop-InformationBarrierPoliciesApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Test-DataClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TestTextExtractionResults,

        [Parameter()]
        [System.Object]
        $TextToClassify,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $ClassificationNames,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Test-InformationBarrierPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Update-ComplianceCaseMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Members,

        [Parameter()]
        [System.Object]
        $Case,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Update-eDiscoveryCaseAdmin
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Users,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Update-RoleGroupMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Members,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Validate-RetentionRuleQuery
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $KqlQueryString,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
#endregion
#region SkypeForBusiness
function Clear-CsOnlineTelephoneNumberReservation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ReservationId,

        [Parameter()]
        [System.Object]
        $InventoryType,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function ConvertTo-JsonForPSWS
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $InputObject,

        [Parameter()]
        [System.Object]
        $Depth,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Compress,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-CsMeetingRoom
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-CsOnlineDialInConferencingUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SendEmailFromDisplayName,

        [Parameter()]
        [System.Object]
        $TenantDomain,

        [Parameter()]
        [System.Object]
        $SendEmailToAddress,

        [Parameter()]
        [System.Object]
        $SendEmailFromAddress,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SendEmail,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Disable-CsOnlineSipDomain
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-CsMeetingRoom
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $OriginatorSid,

        [Parameter()]
        [System.Object]
        $SipAddressType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Object]
        $SipDomain,

        [Parameter()]
        [System.Object]
        $HostingProviderProxyFqdn,

        [Parameter()]
        [System.Object]
        $SipAddress,

        [Parameter()]
        [System.Object]
        $RegistrarPool,

        [Parameter()]
        [System.Object]
        $ProxyPool,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-CsOnlineDialInConferencingUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AllowPstnOnlyMeetings,

        [Parameter()]
        [System.Object]
        $ServiceNumber,

        [Parameter()]
        [System.Object]
        $SendEmailFromDisplayName,

        [Parameter()]
        [System.Object]
        $ConferenceId,

        [Parameter()]
        [System.Object]
        $TenantDomain,

        [Parameter()]
        [System.Object]
        $TollFreeServiceNumber,

        [Parameter()]
        [System.Object]
        $SendEmailToAddress,

        [Parameter()]
        [System.Object]
        $SendEmailFromAddress,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SendEmail,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $AllowTollFreeDialIn,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReplaceProvider,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Enable-CsOnlineSipDomain
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Export-CsAutoAttendantHolidays
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Find-CsGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $MaxResults,

        [Parameter()]
        [System.Object]
        $SearchQuery,

        [Parameter()]
        [System.Object]
        $MailEnabledOnly,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $ExactMatchOnly,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Find-CsOnlineApplicationInstance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $MaxResults,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UnAssociatedOnly,

        [Parameter()]
        [System.Object]
        $SearchQuery,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ExactMatchOnly,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AssociatedOnly,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsApplicationAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsApplicationMeetingConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsAudioConferencingProvider
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsAutoAttendant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $NameFilter,

        [Parameter()]
        [System.Object]
        $Skip,

        [Parameter()]
        [System.Object]
        $SortBy,

        [Parameter()]
        [System.Object]
        $First,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ExcludeContent,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Descending,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeStatus,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsAutoAttendantHolidays
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Years,

        [Parameter()]
        [System.Object]
        $Names,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsAutoAttendantStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $IncludeResources,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsAutoAttendantSupportedLanguage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsAutoAttendantSupportedTimeZone
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsAutoAttendantTenantInformation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsBroadcastMeetingConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ExposeSDNConfigurationJsonBlob,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsBroadcastMeetingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsCallingLineIdentity
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsCallQueue
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $NameFilter,

        [Parameter()]
        [System.Object]
        $Skip,

        [Parameter()]
        [System.Object]
        $First,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ExcludeContent,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Descending,

        [Parameter()]
        [System.Object]
        $Expand,

        [Parameter()]
        [System.Object]
        $Sort,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsClientPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsCloudCallDataConnection
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsCloudMeetingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsConferencingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $ApplicableTo,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $Include,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsDefaultCatalogApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsDialPlan
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsEffectiveTenantDialPlan
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Credential,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $OU,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsExternalAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $ApplicableTo,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $Include,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsExternalUserCommunicationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsGlobalCatalogApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsGraphPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsHostedVoicemailPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsHostingProvider
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsHuntGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PrimaryUri,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsHuntGroupTenantInformation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsHybridMediationServer
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsHybridPSTNAppliance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $SiteName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsHybridPSTNSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsImFilterConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsInboundBlockedNumberPattern
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsIPPhonePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsMeetingConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsMeetingMigrationStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $StartTime,

        [Parameter()]
        [System.Object]
        $MigrationType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SummaryOnly,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $State,

        [Parameter()]
        [System.Object]
        $EndTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsMeetingRoom
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Credential,

        [Parameter()]
        [System.Object]
        $LdapFilter,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $OU,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsMobilityPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $ApplicableTo,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $Include,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsNetworkConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOAuthConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineApplicationEndpoint
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RunFullProvisioningFlow,

        [Parameter()]
        [System.Object]
        $IsInternalRun,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Uri,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $PhoneNumber,

        [Parameter()]
        [System.Object]
        $Ring,

        [Parameter()]
        [System.Object]
        $Audience,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineApplicationInstance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Skip,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $Identities,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineApplicationInstanceAssociation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineApplicationInstanceAssociationStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineAudioConferencingRoutingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineDialInConferencingBridge
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $TenantDomain,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineDialInConferencingLanguagesSupported
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineDialinConferencingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineDialInConferencingServiceNumber
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $BridgeName,

        [Parameter()]
        [System.Object]
        $TenantDomain,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $BridgeId,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $City,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineDialinConferencingTenantConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineDialInConferencingTenantSettings
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineDialInConferencingUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $BridgeName,

        [Parameter()]
        [System.Object]
        $ServiceNumber,

        [Parameter()]
        [System.Object]
        $TenantDomain,

        [Parameter()]
        [System.Object]
        $LdapFilter,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $BridgeId,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineDialInConferencingUserInfo
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $First,

        [Parameter()]
        [System.Object]
        $SearchQuery,

        [Parameter()]
        [System.Object]
        $Skip,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SortDescending,

        [Parameter()]
        [System.Object]
        $Select,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineDialInConferencingUserState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TenantDomain,

        [Parameter()]
        [System.Object]
        $Provider,

        [Parameter()]
        [System.Object]
        $LicenseState,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineDialOutPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineDirectoryTenant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineDirectoryTenantNumberCities
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineEnhancedEmergencyServiceDisclaimer
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Version,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $CountryOrRegion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineLisCivicAddress
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $CountryOrRegion,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $NumberOfResultsToSkip,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PopulateNumberOfVoiceUsers,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PopulateNumberOfTelephoneNumbers,

        [Parameter()]
        [System.Object]
        $CivicAddressId,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $LocationId,

        [Parameter()]
        [System.Object]
        $City,

        [Parameter()]
        [System.Object]
        $ValidationStatus,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $AssignmentStatus,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineLisLocation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $NumberOfResultsToSkip,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PopulateNumberOfVoiceUsers,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PopulateNumberOfTelephoneNumbers,

        [Parameter()]
        [System.Object]
        $CivicAddressId,

        [Parameter()]
        [System.Object]
        $Location,

        [Parameter()]
        [System.Object]
        $CountryOrRegion,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $LocationId,

        [Parameter()]
        [System.Object]
        $City,

        [Parameter()]
        [System.Object]
        $ValidationStatus,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $AssignmentStatus,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineLisPort
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PortID,

        [Parameter()]
        [System.Object]
        $TenantId,

        [Parameter()]
        [System.Object]
        $IsDebug,

        [Parameter()]
        [System.Object]
        $ChassisID,

        [Parameter()]
        [System.Object]
        $NCSApiUrl,

        [Parameter()]
        [System.Object]
        $TargetStore,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineLisSubnet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TenantId,

        [Parameter()]
        [System.Object]
        $Subnet,

        [Parameter()]
        [System.Object]
        $IsDebug,

        [Parameter()]
        [System.Object]
        $TargetStore,

        [Parameter()]
        [System.Object]
        $NCSApiUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineLisSwitch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TenantId,

        [Parameter()]
        [System.Object]
        $IsDebug,

        [Parameter()]
        [System.Object]
        $ChassisID,

        [Parameter()]
        [System.Object]
        $NCSApiUrl,

        [Parameter()]
        [System.Object]
        $TargetStore,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineLisWirelessAccessPoint
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TenantId,

        [Parameter()]
        [System.Object]
        $IsDebug,

        [Parameter()]
        [System.Object]
        $BSSID,

        [Parameter()]
        [System.Object]
        $NCSApiUrl,

        [Parameter()]
        [System.Object]
        $TargetStore,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineNumberPortInOrder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PortInOrderId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineNumberPortOutOrderPin
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlinePSTNGateway
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlinePstnUsage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineSchedule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Id,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineSipDomain
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainStatus,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineTelephoneNumber
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $CapitalOrMajorCity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ExpandLocation,

        [Parameter()]
        [System.Object]
        $NumberType,

        [Parameter()]
        [System.Object]
        $InventoryType,

        [Parameter()]
        [System.Object]
        $Assigned,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $ActivationState,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $TelephoneNumber,

        [Parameter()]
        [System.Object]
        $TelephoneNumberStartsWith,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Object]
        $Country,

        [Parameter()]
        [System.Object]
        $TelephoneNumberGreaterThan,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsNotAssigned,

        [Parameter()]
        [System.Object]
        $TelephoneNumberLessThan,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineTelephoneNumberAvailableCount
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $InventoryType,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineTelephoneNumberInventoryAreas
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $InventoryType,

        [Parameter()]
        [System.Object]
        $CountryOrRegion,

        [Parameter()]
        [System.Object]
        $RegionalGroup,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $Area,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineTelephoneNumberInventoryCities
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $CapitalOrMajorCity,

        [Parameter()]
        [System.Object]
        $InventoryType,

        [Parameter()]
        [System.Object]
        $CountryOrRegion,

        [Parameter()]
        [System.Object]
        $RegionalGroup,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $Area,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineTelephoneNumberInventoryCountries
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $InventoryType,

        [Parameter()]
        [System.Object]
        $CountryOrRegion,

        [Parameter()]
        [System.Object]
        $RegionalGroup,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineTelephoneNumberInventoryRegions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $InventoryType,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $RegionalGroup,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineTelephoneNumberInventoryTypes
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineTelephoneNumberReservationsInformation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Credential,

        [Parameter()]
        [System.Object]
        $LdapFilter,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OnModernServer,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OnOfficeCommunicationServer,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $OU,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UnassignedUser,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UsePreferredDC,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipUserPolicies,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineVoicemailPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineVoicemailUserSettings
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineVoiceRoute
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineVoiceRoutingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOnlineVoiceUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ExpandLocation,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $SearchQuery,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $NumberAssigned,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $First,

        [Parameter()]
        [System.Object]
        $Skip,

        [Parameter()]
        [System.Object]
        $PSTNConnectivity,

        [Parameter()]
        [System.Object]
        $LocationId,

        [Parameter()]
        [System.Object]
        $CivicAddressId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $NumberNotAssigned,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GetPendingUsers,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GetFromAAD,

        [Parameter()]
        [System.Object]
        $EnterpriseVoiceStatus,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOrganizationalAutoAttendant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $First,

        [Parameter()]
        [System.Object]
        $PrimaryUri,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeStatus,

        [Parameter()]
        [System.Object]
        $Skip,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $ApplicationId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOrganizationalAutoAttendantStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PrimaryUri,

        [Parameter()]
        [System.Object]
        $IncludeResources,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $ApplicationId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOrganizationalAutoAttendantSupportedLanguage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOrganizationalAutoAttendantSupportedTimeZone
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsOrganizationalAutoAttendantTenantInformation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsPresencePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsPrivacyConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsPushNotificationConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsAppPermissionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsAppPreset
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsAppSetupPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsCallingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsCallParkPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsChannelsPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsClientConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsComplianceRecordingApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsComplianceRecordingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsCortanaPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsEducationAssignmentsAppPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsEmergencyCallingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsEmergencyCallRoutingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsFeedbackPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsGuestCallingConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsGuestMeetingConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsGuestMessagingConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsIPPhonePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsMeetingBroadcastConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ExposeSDNConfigurationJsonBlob,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsMeetingBroadcastPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsMeetingConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsMeetingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsMessagingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsMigrationConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsMobilityPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsNetworkRoamingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsNotificationAndFeedsPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsPinnedApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsShiftsAppPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsTargetingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsTranslationRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsUpgradeConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsUpgradePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsUpgradeStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsVdiPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsVerticalPackagePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTeamsVideoInteropServicePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTenant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTenantBlockedCallingNumbers
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTenantBlockedNumberExceptionPattern
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTenantCatalogApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTenantDialPlan
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTenantFederationConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTenantHybridConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTenantLicensingConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTenantMigrationConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTenantNetworkConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTenantNetworkRegion
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTenantNetworkSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ExpandSubnets,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTenantNetworkSubnet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTenantPublicProvider
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTenantTrustedIPAddress
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsTenantUpdateTimeWindow
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsUCPhoneConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsUserAcp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Credential,

        [Parameter()]
        [System.Object]
        $LdapFilter,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ResultSize,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsUserLocationStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsUserPstnSettings
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsUserServicesPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsVideoInteropServiceProvider
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsVoiceNormalizationRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Get-CsVoiceRoutingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LocalStore,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Filter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsApplicationAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsBroadcastMeetingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsCallingLineIdentity
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsClientPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsCloudMeetingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsConferencingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsDialoutPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsExternalAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsExternalUserCommunicationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsGraphPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsHostedVoicemailPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsIPPhonePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsMobilityPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsOnlineAudioConferencingRoutingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsOnlineVoicemailPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsOnlineVoiceRoutingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $AdditionalParameters,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $PolicyType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsTeamsAppPermissionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsTeamsAppSetupPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsTeamsCallingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsTeamsCallParkPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsTeamsChannelsPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsTeamsComplianceRecordingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsTeamsCortanaPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsTeamsEmergencyCallingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsTeamsEmergencyCallRoutingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsTeamsFeedbackPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsTeamsIPPhonePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsTeamsMeetingBroadcastPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsTeamsMeetingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsTeamsMessagingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsTeamsMobilityPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsTeamsUpgradePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $MigrateMeetingsToTeams,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsTeamsVdiPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsTeamsVerticalPackagePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsTeamsVideoInteropServicePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsTenantDialPlan
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Grant-CsVoiceRoutingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PolicyName,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Global,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Import-CsAutoAttendantHolidays
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Input,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Import-CsOnlineAudioFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $FileName,

        [Parameter()]
        [System.Object]
        $Content,

        [Parameter()]
        [System.Object]
        $AudioFileExpiryInterval,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $ApplicationId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Invoke-CsUcsRollback
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Invoke-CsUserPreferredDataLocationSync
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DataLocation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsApplicationAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AppIds,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsAutoAttendant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $Operator,

        [Parameter()]
        [System.Object]
        $DefaultCallFlow,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $InclusionScope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $EnableVoiceResponse,

        [Parameter()]
        [System.Object]
        $CallHandlingAssociations,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $VoiceId,

        [Parameter()]
        [System.Object]
        $GreetingsSettingAuthorizedUsers,

        [Parameter()]
        [System.Object]
        $TimeZoneId,

        [Parameter()]
        [System.Object]
        $CallFlows,

        [Parameter()]
        [System.Object]
        $LanguageId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $ExclusionScope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsAutoAttendantCallableEntity
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Type,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $EnableTranscription,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsAutoAttendantCallFlow
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Greetings,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $Menu,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsAutoAttendantCallHandlingAssociation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $CallFlowId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Disable,

        [Parameter()]
        [System.Object]
        $Type,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $ScheduleId,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsAutoAttendantDialScope
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GroupScope,

        [Parameter()]
        [System.Object]
        $GroupIds,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsAutoAttendantMenu
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Prompts,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $EnableDialByName,

        [Parameter()]
        [System.Object]
        $DirectorySearchMethod,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $MenuOptions,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsAutoAttendantMenuOption
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $CallTarget,

        [Parameter()]
        [System.Object]
        $Prompt,

        [Parameter()]
        [System.Object]
        $VoiceResponses,

        [Parameter()]
        [System.Object]
        $DtmfResponse,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsAutoAttendantPrompt
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ActiveType,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $TextToSpeechPrompt,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $AudioFilePrompt,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsCallingLineIdentity
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $ServiceNumber,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $CallingIDSubstitute,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $EnableUserOverride,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $BlockIncomingPstnCallerID,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsCallQueue
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RoutingMethod,

        [Parameter()]
        [System.Object]
        $AllowOptOut,

        [Parameter()]
        [System.Object]
        $PresenceBasedRouting,

        [Parameter()]
        [System.Object]
        $AgentAlertTime,

        [Parameter()]
        [System.Object]
        $TimeoutActionTarget,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $OverflowThreshold,

        [Parameter()]
        [System.Object]
        $ChannelId,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $UseDefaultMusicOnHold,

        [Parameter()]
        [System.Object]
        $MusicOnHoldAudioFileId,

        [Parameter()]
        [System.Object]
        $OverflowActionTarget,

        [Parameter()]
        [System.Object]
        $Users,

        [Parameter()]
        [System.Object]
        $TimeoutAction,

        [Parameter()]
        [System.Object]
        $ConferenceMode,

        [Parameter()]
        [System.Object]
        $OverflowSharedVoicemailTextToSpeechPrompt,

        [Parameter()]
        [System.Object]
        $OverflowAction,

        [Parameter()]
        [System.Object]
        $DistributionLists,

        [Parameter()]
        [System.Object]
        $TimeoutSharedVoicemailTextToSpeechPrompt,

        [Parameter()]
        [System.Object]
        $EnableOverflowSharedVoicemailTranscription,

        [Parameter()]
        [System.Object]
        $WelcomeMusicAudioFileId,

        [Parameter()]
        [System.Object]
        $LanguageId,

        [Parameter()]
        [System.Object]
        $TimeoutThreshold,

        [Parameter()]
        [System.Object]
        $OverflowSharedVoicemailAudioFilePrompt,

        [Parameter()]
        [System.Object]
        $EnableTimeoutSharedVoicemailTranscription,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $ChannelUserObjectId,

        [Parameter()]
        [System.Object]
        $TimeoutSharedVoicemailAudioFilePrompt,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsClientPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DisableMeetingSubjectAndLocation,

        [Parameter()]
        [System.Object]
        $DisableEmailComparisonCheck,

        [Parameter()]
        [System.Object]
        $DisableSavingIM,

        [Parameter()]
        [System.Object]
        $TabURL,

        [Parameter()]
        [System.Object]
        $EnableIMAutoArchiving,

        [Parameter()]
        [System.Object]
        $EnableMediaRedirection,

        [Parameter()]
        [System.Object]
        $EnableSQMData,

        [Parameter()]
        [System.Object]
        $MaximumDGsAllowedInContactList,

        [Parameter()]
        [System.Object]
        $EnableAppearOffline,

        [Parameter()]
        [System.Object]
        $SPSearchCenterInternalURL,

        [Parameter()]
        [System.Object]
        $RequireContentPin,

        [Parameter()]
        [System.Object]
        $DisableHandsetOnLockedMachine,

        [Parameter()]
        [System.Object]
        $P2PAppSharingEncryption,

        [Parameter()]
        [System.Object]
        $EnableHotdesking,

        [Parameter()]
        [System.Object]
        $EnableServerConversationHistory,

        [Parameter()]
        [System.Object]
        $RateMyCallAllowCustomUserFeedback,

        [Parameter()]
        [System.Object]
        $TelemetryTier,

        [Parameter()]
        [System.Object]
        $DisableInkIM,

        [Parameter()]
        [System.Object]
        $EnableSkypeUI,

        [Parameter()]
        [System.Object]
        $CustomLinkInErrorMessages,

        [Parameter()]
        [System.Object]
        $EnableNotificationForNewSubscribers,

        [Parameter()]
        [System.Object]
        $DisableContactCardOrganizationTab,

        [Parameter()]
        [System.Object]
        $EnableHighPerformanceConferencingAppSharing,

        [Parameter()]
        [System.Object]
        $DisableHtmlIm,

        [Parameter()]
        [System.Object]
        $EnableOnlineFeedback,

        [Parameter()]
        [System.Object]
        $IMLatencySpinnerDelay,

        [Parameter()]
        [System.Object]
        $IMLatencyErrorThreshold,

        [Parameter()]
        [System.Object]
        $HotdeskingTimeout,

        [Parameter()]
        [System.Object]
        $DisablePresenceNote,

        [Parameter()]
        [System.Object]
        $ConferenceIMIdleTimeout,

        [Parameter()]
        [System.Object]
        $HelpEnvironment,

        [Parameter()]
        [System.Object]
        $BlockConversationFromFederatedContacts,

        [Parameter()]
        [System.Object]
        $ShowSharepointPhotoEditLink,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $DisablePoorNetworkWarnings,

        [Parameter()]
        [System.Object]
        $EnableUnencryptedFileTransfer,

        [Parameter()]
        [System.Object]
        $PlayAbbreviatedDialTone,

        [Parameter()]
        [System.Object]
        $EnableURL,

        [Parameter()]
        [System.Object]
        $DisablePoorDeviceWarnings,

        [Parameter()]
        [System.Object]
        $CustomizedHelpUrl,

        [Parameter()]
        [System.Object]
        $DisableFederatedPromptDisplayName,

        [Parameter()]
        [System.Object]
        $SearchPrefixFlags,

        [Parameter()]
        [System.Object]
        $MaximumNumberOfContacts,

        [Parameter()]
        [System.Object]
        $RateMyCallDisplayPercentage,

        [Parameter()]
        [System.Object]
        $DisableEmoticons,

        [Parameter()]
        [System.Object]
        $DisplayPhoto,

        [Parameter()]
        [System.Object]
        $DisableCalendarPresence,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $ExcludedContactFolders,

        [Parameter()]
        [System.Object]
        $ShowRecentContacts,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $EnableExchangeDelegateSync,

        [Parameter()]
        [System.Object]
        $EnableClientMusicOnHold,

        [Parameter()]
        [System.Object]
        $EnableMeetingEngagement,

        [Parameter()]
        [System.Object]
        $EnableTracing,

        [Parameter()]
        [System.Object]
        $IMWarning,

        [Parameter()]
        [System.Object]
        $SPSearchInternalURL,

        [Parameter()]
        [System.Object]
        $CalendarStatePublicationInterval,

        [Parameter()]
        [System.Object]
        $DisableOneNote12Integration,

        [Parameter()]
        [System.Object]
        $EnableHighPerformanceP2PAppSharing,

        [Parameter()]
        [System.Object]
        $EnableConversationWindowTabs,

        [Parameter()]
        [System.Object]
        $EnableViewBasedSubscriptionMode,

        [Parameter()]
        [System.Object]
        $MaxPhotoSizeKB,

        [Parameter()]
        [System.Object]
        $WebServicePollInterval,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $EnableOnlineFeedbackScreenshots,

        [Parameter()]
        [System.Object]
        $EnableExchangeContactSync,

        [Parameter()]
        [System.Object]
        $EnableFullScreenVideo,

        [Parameter()]
        [System.Object]
        $DisableOnlineContextualSearch,

        [Parameter()]
        [System.Object]
        $SPSearchCenterExternalURL,

        [Parameter()]
        [System.Object]
        $DisablePhonePresence,

        [Parameter()]
        [System.Object]
        $SPSearchExternalURL,

        [Parameter()]
        [System.Object]
        $CustomStateUrl,

        [Parameter()]
        [System.Object]
        $SupportModernFilePicker,

        [Parameter()]
        [System.Object]
        $EnableEnterpriseCustomizedHelp,

        [Parameter()]
        [System.Object]
        $EnableEventLogging,

        [Parameter()]
        [System.Object]
        $DisableRTFIM,

        [Parameter()]
        [System.Object]
        $DGRefreshInterval,

        [Parameter()]
        [System.Object]
        $MAPIPollInterval,

        [Parameter()]
        [System.Object]
        $TracingLevel,

        [Parameter()]
        [System.Object]
        $EnableCallLogAutoArchiving,

        [Parameter()]
        [System.Object]
        $EnableExchangeContactsFolder,

        [Parameter()]
        [System.Object]
        $DisablePICPromptDisplayName,

        [Parameter()]
        [System.Object]
        $DisableFreeBusyInfo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $AutoDiscoveryRetryInterval,

        [Parameter()]
        [System.Object]
        $PolicyEntry,

        [Parameter()]
        [System.Object]
        $AttendantSafeTransfer,

        [Parameter()]
        [System.Object]
        $MusicOnHoldAudioFile,

        [Parameter()]
        [System.Object]
        $ShowManagePrivacyRelationships,

        [Parameter()]
        [System.Object]
        $DisableFeedsTab,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $AddressBookAvailability,

        [Parameter()]
        [System.Object]
        $EnableVOIPCallDefault,

        [Parameter()]
        [System.Object]
        $EnableClientAutoPopulateWithTeam,

        [Parameter()]
        [System.Object]
        $PublicationBatchDelay,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsCloudCallDataConnection
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsConferencingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $VideoBitRateKb,

        [Parameter()]
        [System.Object]
        $AllowExternalUserControl,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $EnableReliableConferenceDeletion,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $AllowParticipantControl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $EnableFileTransfer,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AllowIPAudio,

        [Parameter()]
        [System.Object]
        $AllowSharedNotes,

        [Parameter()]
        [System.Object]
        $ApplicationSharingMode,

        [Parameter()]
        [System.Object]
        $DisablePowerPointAnnotations,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $EnableDialInConferencing,

        [Parameter()]
        [System.Object]
        $EnableAppDesktopSharing,

        [Parameter()]
        [System.Object]
        $AllowLargeMeetings,

        [Parameter()]
        [System.Object]
        $AllowExternalUsersToSaveContent,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $MaxMeetingSize,

        [Parameter()]
        [System.Object]
        $EnableOnlineMeetingPromptForLyncResources,

        [Parameter()]
        [System.Object]
        $AllowConferenceRecording,

        [Parameter()]
        [System.Object]
        $AllowAnonymousParticipantsInMeetings,

        [Parameter()]
        [System.Object]
        $TotalReceiveVideoBitRateKb,

        [Parameter()]
        [System.Object]
        $AllowNonEnterpriseVoiceUsersToDialOut,

        [Parameter()]
        [System.Object]
        $AllowAnnotations,

        [Parameter()]
        [System.Object]
        $AllowAnonymousUsersToDialOut,

        [Parameter()]
        [System.Object]
        $AppSharingBitRateKb,

        [Parameter()]
        [System.Object]
        $EnableP2PFileTransfer,

        [Parameter()]
        [System.Object]
        $AllowQandA,

        [Parameter()]
        [System.Object]
        $FileTransferBitRateKb,

        [Parameter()]
        [System.Object]
        $AllowMultiView,

        [Parameter()]
        [System.Object]
        $EnableP2PVideo,

        [Parameter()]
        [System.Object]
        $MaxVideoConferenceResolution,

        [Parameter()]
        [System.Object]
        $CloudRecordingServiceSupport,

        [Parameter()]
        [System.Object]
        $AllowExternalUsersToRecordMeeting,

        [Parameter()]
        [System.Object]
        $AllowIPVideo,

        [Parameter()]
        [System.Object]
        $EnableP2PRecording,

        [Parameter()]
        [System.Object]
        $EnableMultiViewJoin,

        [Parameter()]
        [System.Object]
        $AudioBitRateKb,

        [Parameter()]
        [System.Object]
        $AllowFederatedParticipantJoinAsSameEnterprise,

        [Parameter()]
        [System.Object]
        $EnableDataCollaboration,

        [Parameter()]
        [System.Object]
        $AllowUserToScheduleMeetingsWithAppSharing,

        [Parameter()]
        [System.Object]
        $AllowOfficeContent,

        [Parameter()]
        [System.Object]
        $AllowPolls,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsDefaultCatalogApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Id,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Parent,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsEdgeAllowAllKnownDomains
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsEdgeAllowList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AllowedDomain,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsEdgeDomainPattern
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsExternalAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $EnablePublicCloudAccess,

        [Parameter()]
        [System.Object]
        $EnableXmppAccess,

        [Parameter()]
        [System.Object]
        $EnableFederationAccess,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $EnableOutsideAccess,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $EnablePublicCloudAudioVideoAccess,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsExternalUserCommunicationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EnableFileTransfer,

        [Parameter()]
        [System.Object]
        $AllowTitleVisibility,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AllowPresenceVisibility,

        [Parameter()]
        [System.Object]
        $EnableP2PFileTransfer,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsGlobalCatalogApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Id,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Parent,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsHuntGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AgentAlertTime,

        [Parameter()]
        [System.Object]
        $MusicOnHoldFileContent,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $AllowOptOut,

        [Parameter()]
        [System.Object]
        $Ring,

        [Parameter()]
        [System.Object]
        $MusicOnHoldFileName,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $TimeoutActionTarget,

        [Parameter()]
        [System.Object]
        $ClientAudience,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $OverflowThreshold,

        [Parameter()]
        [System.Object]
        $HuntGroupServiceCallbackUri,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $UseDefaultMusicOnHold,

        [Parameter()]
        [System.Object]
        $OverflowActionTarget,

        [Parameter()]
        [System.Object]
        $RoutingMethod,

        [Parameter()]
        [System.Object]
        $TimeoutAction,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $DistributionLists,

        [Parameter()]
        [System.Object]
        $TimeoutThreshold,

        [Parameter()]
        [System.Object]
        $WelcomeMusicFileName,

        [Parameter()]
        [System.Object]
        $OverflowAction,

        [Parameter()]
        [System.Object]
        $WelcomeMusicFileContent,

        [Parameter()]
        [System.Object]
        $LineUri,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsHybridPSTNSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $OsUpdateTimeWindow,

        [Parameter()]
        [System.Object]
        $EdgeFQDN,

        [Parameter()]
        [System.Object]
        $BitsUpdateTimeWindow,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $EnableAutoUpdate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsHybridTelephoneNumber
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TelephoneNumber,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsInboundBlockedNumberPattern
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Pattern,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsMobilityPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RequireWiFiForSharing,

        [Parameter()]
        [System.Object]
        $EncryptAppData,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $AllowCustomerExperienceImprovementProgram,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $EnableMobility,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $AllowDeviceContactsSync,

        [Parameter()]
        [System.Object]
        $VoiceSettings,

        [Parameter()]
        [System.Object]
        $AllowSaveIMHistory,

        [Parameter()]
        [System.Object]
        $RequireWIFIForIPVideo,

        [Parameter()]
        [System.Object]
        $AllowSaveCallLogs,

        [Parameter()]
        [System.Object]
        $EnableOutsideVoice,

        [Parameter()]
        [System.Object]
        $AllowSaveCredentials,

        [Parameter()]
        [System.Object]
        $EnableIPAudioVideo,

        [Parameter()]
        [System.Object]
        $AllowAutomaticPstnFallback,

        [Parameter()]
        [System.Object]
        $RequireIntune,

        [Parameter()]
        [System.Object]
        $AllowExchangeConnectivity,

        [Parameter()]
        [System.Object]
        $EnablePushNotifications,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsNetworkMediaBypassConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $BypassID,

        [Parameter()]
        [System.Object]
        $ExternalBypassMode,

        [Parameter()]
        [System.Object]
        $InternalBypassMode,

        [Parameter()]
        [System.Object]
        $AlwaysBypass,

        [Parameter()]
        [System.Object]
        $EnableDefaultBypassID,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $EnabledForAudioVideoConferences,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsOnlineApplicationEndpoint
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RunFullProvisioningFlow,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $CallbackUri,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $IsInternalRun,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Uri,

        [Parameter()]
        [System.Object]
        $ApplicationId,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $PhoneNumber,

        [Parameter()]
        [System.Object]
        $Ring,

        [Parameter()]
        [System.Object]
        $Audience,

        [Parameter()]
        [System.Object]
        $Region,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsOnlineApplicationInstance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $UserPrincipalName,

        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $ApplicationId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsOnlineApplicationInstanceAssociation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ConfigurationType,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $ConfigurationId,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $Identities,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsOnlineAudioConferencingRoutingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RouteType,

        [Parameter()]
        [System.Object]
        $OnlinePstnUsages,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsOnlineAudioFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Content,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $FileName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsOnlineBulkAssignmentInput
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $TelephoneNumber,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $LocationID,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsOnlineDateTimeRange
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $End,

        [Parameter()]
        [System.Object]
        $Start,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsOnlineLisCivicAddress
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PostalCode,

        [Parameter()]
        [System.Object]
        $IsAzureMapValidationRequired,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Confidence,

        [Parameter()]
        [System.Object]
        $CountryOrRegion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $CityAlias,

        [Parameter()]
        [System.Object]
        $PostDirectional,

        [Parameter()]
        [System.Object]
        $StreetSuffix,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $StreetName,

        [Parameter()]
        [System.Object]
        $City,

        [Parameter()]
        [System.Object]
        $HouseNumber,

        [Parameter()]
        [System.Object]
        $CompanyTaxId,

        [Parameter()]
        [System.Object]
        $StateOrProvince,

        [Parameter()]
        [System.Object]
        $HouseNumberSuffix,

        [Parameter()]
        [System.Object]
        $ValidationStatus,

        [Parameter()]
        [System.Object]
        $Latitude,

        [Parameter()]
        [System.Object]
        $Longitude,

        [Parameter()]
        [System.Object]
        $CompanyName,

        [Parameter()]
        [System.Object]
        $PreDirectional,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $Elin,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsOnlineLisLocation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PostalCode,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Confidence,

        [Parameter()]
        [System.Object]
        $CountryOrRegion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $CityAlias,

        [Parameter()]
        [System.Object]
        $PostDirectional,

        [Parameter()]
        [System.Object]
        $StreetSuffix,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $StreetName,

        [Parameter()]
        [System.Object]
        $City,

        [Parameter()]
        [System.Object]
        $CivicAddressId,

        [Parameter()]
        [System.Object]
        $CompanyTaxId,

        [Parameter()]
        [System.Object]
        $StateOrProvince,

        [Parameter()]
        [System.Object]
        $HouseNumberSuffix,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $Latitude,

        [Parameter()]
        [System.Object]
        $Location,

        [Parameter()]
        [System.Object]
        $HouseNumber,

        [Parameter()]
        [System.Object]
        $Longitude,

        [Parameter()]
        [System.Object]
        $CompanyName,

        [Parameter()]
        [System.Object]
        $PreDirectional,

        [Parameter()]
        [System.Object]
        $Elin,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsOnlineNumberPortInOrder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsManual,

        [Parameter()]
        [System.Object]
        $LOABase64PayLoad,

        [Parameter()]
        [System.Object]
        $SubscriberStreetName,

        [Parameter()]
        [System.Object]
        $SubscriberCountry,

        [Parameter()]
        [System.Object]
        $InventoryType,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $LOAContentType,

        [Parameter()]
        [System.Object]
        $SubscriberCounty,

        [Parameter()]
        [System.Object]
        $TelephoneNumberRanges,

        [Parameter()]
        [System.Object]
        $SubscriberAdditionalInfo,

        [Parameter()]
        [System.Object]
        $SubscriberArea,

        [Parameter()]
        [System.Object]
        $SubscriberBusinessName,

        [Parameter()]
        [System.Object]
        $RequestedFocDateEnd,

        [Parameter()]
        [System.Object]
        $SubscriberBuildingNumberSuffix,

        [Parameter()]
        [System.Object]
        $LosingTelcoPin,

        [Parameter()]
        [System.Object]
        $SubscriberAddressLine3,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $FriendlyName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsPartialPort,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $RequestedFocDate,

        [Parameter()]
        [System.Object]
        $BillingTelephoneNumber,

        [Parameter()]
        [System.Object]
        $SubscriberCity,

        [Parameter()]
        [System.Object]
        $SubscriberPreDirectional,

        [Parameter()]
        [System.Object]
        $SubscriberZipCode,

        [Parameter()]
        [System.Object]
        $TelephoneNumbers,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $SubscriberAddressLine2,

        [Parameter()]
        [System.Object]
        $SubscriberStreetSuffix,

        [Parameter()]
        [System.Object]
        $SubscriberCompanyName,

        [Parameter()]
        [System.Object]
        $RangeHolder,

        [Parameter()]
        [System.Object]
        $SubscriberAddressLine1,

        [Parameter()]
        [System.Object]
        $SubscriberCityAlias,

        [Parameter()]
        [System.Object]
        $SubscriberLastName,

        [Parameter()]
        [System.Object]
        $LosingTelcoAccountId,

        [Parameter()]
        [System.Object]
        $SubscriberBuildingNumber,

        [Parameter()]
        [System.Object]
        $SubscriberDescription,

        [Parameter()]
        [System.Object]
        $RequestedFocDateBegin,

        [Parameter()]
        [System.Object]
        $EmailAddresses,

        [Parameter()]
        [System.Object]
        $SubscriberPostDirectional,

        [Parameter()]
        [System.Object]
        $LOAAuthorizingPerson,

        [Parameter()]
        [System.Object]
        $SubscriberFirstName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsOnlinePSTNGateway
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $GenerateRingingWhileLocatingUser,

        [Parameter()]
        [System.Object]
        $OutboundTeamsNumberTranslationRules,

        [Parameter()]
        [System.Object]
        $Fqdn,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $GatewaySiteId,

        [Parameter()]
        [System.Object]
        $FailoverTimeSeconds,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $PidfLoSupported,

        [Parameter()]
        [System.Object]
        $BypassMode,

        [Parameter()]
        [System.Object]
        $FailoverResponseCodes,

        [Parameter()]
        [System.Object]
        $SendSipOptions,

        [Parameter()]
        [System.Object]
        $ProxySbc,

        [Parameter()]
        [System.Object]
        $GatewayLbrEnabledUserOverride,

        [Parameter()]
        [System.Object]
        $InboundPstnNumberTranslationRules,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $SipSignalingPort,

        [Parameter()]
        [System.Object]
        $MediaRelayRoutingLocationOverride,

        [Parameter()]
        [System.Object]
        $OutboundPstnNumberTranslationRules,

        [Parameter()]
        [System.Object]
        $MediaBypass,

        [Parameter()]
        [System.Object]
        $GatewaySiteLbrEnabled,

        [Parameter()]
        [System.Object]
        $ForwardCallHistory,

        [Parameter()]
        [System.Object]
        $MaxConcurrentSessions,

        [Parameter()]
        [System.Object]
        $ForwardPai,

        [Parameter()]
        [System.Object]
        $InboundTeamsNumberTranslationRules,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsOnlineSchedule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $FridayHours,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WeeklyRecurrentSchedule,

        [Parameter()]
        [System.Object]
        $DateTimeRanges,

        [Parameter()]
        [System.Object]
        $MondayHours,

        [Parameter()]
        [System.Object]
        $TuesdayHours,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $FixedSchedule,

        [Parameter()]
        [System.Object]
        $WednesdayHours,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Complement,

        [Parameter()]
        [System.Object]
        $SundayHours,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $SaturdayHours,

        [Parameter()]
        [System.Object]
        $ThursdayHours,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsOnlineTimeRange
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $End,

        [Parameter()]
        [System.Object]
        $Start,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsOnlineVoicemailPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ShareData,

        [Parameter()]
        [System.Object]
        $MaximumRecordingLength,

        [Parameter()]
        [System.Object]
        $EnableTranscription,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $EnableEditingCallAnswerRulesSetting,

        [Parameter()]
        [System.Object]
        $EnableTranscriptionProfanityMasking,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $EnableTranscriptionTranslation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsOnlineVoiceRoute
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $OnlinePstnGatewayList,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $NumberPattern,

        [Parameter()]
        [System.Object]
        $OnlinePstnUsages,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsOnlineVoiceRoutingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RouteType,

        [Parameter()]
        [System.Object]
        $OnlinePstnUsages,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsOrganizationalAutoAttendantCallableEntity
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Type,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsOrganizationalAutoAttendantCallFlow
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Greetings,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $Menu,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsOrganizationalAutoAttendantCallHandlingAssociation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $CallFlowId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Disable,

        [Parameter()]
        [System.Object]
        $Type,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $ScheduleId,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsOrganizationalAutoAttendantDialScope
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $GroupScope,

        [Parameter()]
        [System.Object]
        $GroupIds,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsOrganizationalAutoAttendantMenu
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Prompts,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $EnableDialByName,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $MenuOptions,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsOrganizationalAutoAttendantMenuOption
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $CallTarget,

        [Parameter()]
        [System.Object]
        $VoiceResponses,

        [Parameter()]
        [System.Object]
        $DtmfResponse,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsOrganizationalAutoAttendantPrompt
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ActiveType,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $TextToSpeechPrompt,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $AudioFilePrompt,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTeamsAppPermissionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $GlobalCatalogAppsType,

        [Parameter()]
        [System.Object]
        $PrivateCatalogAppsType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DefaultCatalogAppsType,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $GlobalCatalogApps,

        [Parameter()]
        [System.Object]
        $DefaultCatalogApps,

        [Parameter()]
        [System.Object]
        $PrivateCatalogApps,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTeamsAppPreset
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Id,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Parent,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTeamsAppSetupPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $AppPresetList,

        [Parameter()]
        [System.Object]
        $PinnedAppBarApps,

        [Parameter()]
        [System.Object]
        $AllowUserPinning,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $AllowSideLoading,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTeamsCallingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AllowWebPSTNCalling,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $AllowCloudRecordingForCalls,

        [Parameter()]
        [System.Object]
        $LiveCaptionsEnabledTypeForCalling,

        [Parameter()]
        [System.Object]
        $AllowCallGroups,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $SafeTransferEnabled,

        [Parameter()]
        [System.Object]
        $SpamFilteringEnabledType,

        [Parameter()]
        [System.Object]
        $BusyOnBusyEnabledType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AllowVoicemail,

        [Parameter()]
        [System.Object]
        $MusicOnHoldEnabledType,

        [Parameter()]
        [System.Object]
        $PreventTollBypass,

        [Parameter()]
        [System.Object]
        $AllowCallForwardingToUser,

        [Parameter()]
        [System.Object]
        $AllowCallForwardingToPhone,

        [Parameter()]
        [System.Object]
        $AllowPrivateCalling,

        [Parameter()]
        [System.Object]
        $AllowDelegation,

        [Parameter()]
        [System.Object]
        $AutoAnswerEnabledType,

        [Parameter()]
        [System.Object]
        $AllowTranscriptionForCalling,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTeamsCallParkPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $AllowCallPark,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTeamsChannelsPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AllowPrivateChannelCreation,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $AllowChannelSharingToExternalUser,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $AllowSharedChannelCreation,

        [Parameter()]
        [System.Object]
        $AllowPrivateTeamDiscovery,

        [Parameter()]
        [System.Object]
        $AllowOrgWideTeamCreation,

        [Parameter()]
        [System.Object]
        $AllowUserToParticipateInExternalSharedChannel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTeamsComplianceRecordingApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RequiredBeforeCallEstablishment,

        [Parameter()]
        [System.Object]
        $Id,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $RequiredDuringCall,

        [Parameter()]
        [System.Object]
        $ConcurrentInvitationCount,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Parent,

        [Parameter()]
        [System.Object]
        $ComplianceRecordingPairedApplications,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $RequiredBeforeMeetingJoin,

        [Parameter()]
        [System.Object]
        $RequiredDuringMeeting,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTeamsComplianceRecordingPairedApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Id,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTeamsComplianceRecordingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $WarnUserOnRemoval,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $ComplianceRecordingApplications,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTeamsCortanaPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $AllowCortanaAmbientListening,

        [Parameter()]
        [System.Object]
        $AllowCortanaInContextSuggestions,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $CortanaVoiceInvocationMode,

        [Parameter()]
        [System.Object]
        $AllowCortanaVoiceInvocation,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTeamsEmergencyCallingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $NotificationGroup,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $NotificationDialOutNumber,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $NotificationMode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $ExternalLocationLookupMode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTeamsEmergencyCallRoutingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EmergencyNumbers,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $AllowEnhancedEmergencyServices,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTeamsEmergencyNumber
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EmergencyDialString,

        [Parameter()]
        [System.Object]
        $EmergencyDialMask,

        [Parameter()]
        [System.Object]
        $OnlinePSTNUsage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTeamsFeedbackPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $UserInitiatedMode,

        [Parameter()]
        [System.Object]
        $ReceiveSurveysMode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTeamsIPPhonePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AllowHomeScreen,

        [Parameter()]
        [System.Object]
        $HotDeskingIdleTimeoutInMinutes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AllowHotDesking,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $SignInMode,

        [Parameter()]
        [System.Object]
        $AllowBetterTogether,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $SearchOnCommonAreaPhoneMode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTeamsMeetingBroadcastPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $BroadcastRecordingMode,

        [Parameter()]
        [System.Object]
        $BroadcastAttendeeVisibilityMode,

        [Parameter()]
        [System.Object]
        $AllowBroadcastTranscription,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $AllowBroadcastScheduling,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTeamsMeetingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $IPAudioMode,

        [Parameter()]
        [System.Object]
        $AllowRecordingStorageOutsideRegion,

        [Parameter()]
        [System.Object]
        $IPVideoMode,

        [Parameter()]
        [System.Object]
        $EnrollUserOverride,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DesignatedPresenterRoleMode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $AllowMeetNow,

        [Parameter()]
        [System.Object]
        $AllowEngagementReport,

        [Parameter()]
        [System.Object]
        $AllowIPAudio,

        [Parameter()]
        [System.Object]
        $AllowSharedNotes,

        [Parameter()]
        [System.Object]
        $AllowNDIStreaming,

        [Parameter()]
        [System.Object]
        $AutoAdmittedUsers,

        [Parameter()]
        [System.Object]
        $AllowOutlookAddIn,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $LiveCaptionsEnabledType,

        [Parameter()]
        [System.Object]
        $AllowPrivateMeetingScheduling,

        [Parameter()]
        [System.Object]
        $StreamingAttendeeMode,

        [Parameter()]
        [System.Object]
        $AllowOrganizersToOverrideLobbySettings,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $AllowExternalParticipantGiveRequestControl,

        [Parameter()]
        [System.Object]
        $MediaBitRateKb,

        [Parameter()]
        [System.Object]
        $TeamsCameraFarEndPTZMode,

        [Parameter()]
        [System.Object]
        $RecordingStorageMode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AllowBreakoutRooms,

        [Parameter()]
        [System.Object]
        $AllowAnonymousUsersToStartMeeting,

        [Parameter()]
        [System.Object]
        $AllowPSTNUsersToBypassLobby,

        [Parameter()]
        [System.Object]
        $PreferredMeetingProviderForIslandsMode,

        [Parameter()]
        [System.Object]
        $AllowTranscription,

        [Parameter()]
        [System.Object]
        $AllowChannelMeetingScheduling,

        [Parameter()]
        [System.Object]
        $AllowAnonymousUsersToDialOut,

        [Parameter()]
        [System.Object]
        $VideoFiltersMode,

        [Parameter()]
        [System.Object]
        $MeetingChatEnabledType,

        [Parameter()]
        [System.Object]
        $AllowMeetingReactions,

        [Parameter()]
        [System.Object]
        $AllowPrivateMeetNow,

        [Parameter()]
        [System.Object]
        $ScreenSharingMode,

        [Parameter()]
        [System.Object]
        $AllowPowerPointSharing,

        [Parameter()]
        [System.Object]
        $AllowIPVideo,

        [Parameter()]
        [System.Object]
        $AllowUserToJoinExternalMeeting,

        [Parameter()]
        [System.Object]
        $AllowParticipantGiveRequestControl,

        [Parameter()]
        [System.Object]
        $AllowCloudRecording,

        [Parameter()]
        [System.Object]
        $RoomAttributeUserOverride,

        [Parameter()]
        [System.Object]
        $AllowWhiteboard,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTeamsMessagingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AllowOwnerDeleteMessage,

        [Parameter()]
        [System.Object]
        $AllowSmartReply,

        [Parameter()]
        [System.Object]
        $AllowUserChat,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $AllowUserDeleteMessage,

        [Parameter()]
        [System.Object]
        $ChannelsInChatListEnabledType,

        [Parameter()]
        [System.Object]
        $AllowMemes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $AllowStickers,

        [Parameter()]
        [System.Object]
        $AllowUrlPreviews,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $AllowImmersiveReader,

        [Parameter()]
        [System.Object]
        $AllowUserTranslation,

        [Parameter()]
        [System.Object]
        $AllowUserEditMessage,

        [Parameter()]
        [System.Object]
        $AudioMessageEnabledType,

        [Parameter()]
        [System.Object]
        $AllowRemoveUser,

        [Parameter()]
        [System.Object]
        $AllowPasteInternetImage,

        [Parameter()]
        [System.Object]
        $ReadReceiptsEnabledType,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $AllowGiphyDisplay,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AllowPriorityMessages,

        [Parameter()]
        [System.Object]
        $GiphyRatingType,

        [Parameter()]
        [System.Object]
        $AllowGiphy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTeamsMobilityPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $IPVideoMobileMode,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $IPAudioMobileMode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTeamsNetworkRoamingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $MediaBitRateKb,

        [Parameter()]
        [System.Object]
        $AllowIPVideo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTeamsPinnedApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Id,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Parent,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $Order,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTeamsTranslationRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Pattern,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Translation,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTeamsVdiPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DisableCallsAndMeetings,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $DisableAudioVideoInCallsAndMeetings,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTenantBlockedNumberExceptionPattern
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Pattern,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTenantCatalogApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Id,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Parent,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTenantDialPlan
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $OptimizeDeviceDialing,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $NormalizationRules,

        [Parameter()]
        [System.Object]
        $SimpleName,

        [Parameter()]
        [System.Object]
        $ExternalAccessPrefix,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTenantNetworkRegion
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $BypassID,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $CentralSite,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $NetworkRegionID,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTenantNetworkSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $EmergencyCallRoutingPolicy,

        [Parameter()]
        [System.Object]
        $EnableLocationBasedRouting,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $NetworkRegionID,

        [Parameter()]
        [System.Object]
        $SiteAddress,

        [Parameter()]
        [System.Object]
        $NetworkRoamingPolicy,

        [Parameter()]
        [System.Object]
        $EmergencyCallingPolicy,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $NetworkSiteID,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $LocationPolicy,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTenantNetworkSubnet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $SubnetID,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $MaskBits,

        [Parameter()]
        [System.Object]
        $NetworkSiteID,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTenantTrustedIPAddress
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $IPAddress,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $MaskBits,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsTenantUpdateTimeWindow
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DayOfMonth,

        [Parameter()]
        [System.Object]
        $DaysOfWeek,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Monthly,

        [Parameter()]
        [System.Object]
        $StartTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Weekly,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $Duration,

        [Parameter()]
        [System.Object]
        $WeeksOfMonth,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Daily,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsVideoInteropServiceProvider
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $TenantKey,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AadApplicationIds,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $InstructionUri,

        [Parameter()]
        [System.Object]
        $AllowAppGuestJoinsAsAuthenticated,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function New-CsVoiceNormalizationRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $Pattern,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Parent,

        [Parameter()]
        [System.Object]
        $Translation,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $IsInternalExtension,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Register-CsHybridPSTNAppliance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InMemory,

        [Parameter()]
        [System.Object]
        $MediationServerIPAddress,

        [Parameter()]
        [System.Object]
        $MediationServerFqdn,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $SiteName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Register-CsOnlineDialInConferencingServiceNumber
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $BridgeName,

        [Parameter()]
        [System.Object]
        $TenantDomain,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $BridgeId,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsApplicationAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsAutoAttendant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsCallingLineIdentity
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsCallQueue
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ChannelUserObjectId,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsClientPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsConferencingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsDefaultCatalogApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsExternalAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsExternalUserCommunicationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsGlobalCatalogApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsHuntGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PrimaryUri,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsHybridPSTNSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsHybridTelephoneNumber
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $TelephoneNumber,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsInboundBlockedNumberPattern
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsMobilityPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsOnlineApplicationEndpoint
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RunFullProvisioningFlow,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $IsInternalRun,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Uri,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $PhoneNumber,

        [Parameter()]
        [System.Object]
        $Ring,

        [Parameter()]
        [System.Object]
        $Audience,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsOnlineApplicationInstanceAssociation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $Identities,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsOnlineAudioConferencingRoutingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsOnlineDialInConferencingTenantSettings
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsOnlineLisCivicAddress
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $CivicAddressId,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsOnlineLisLocation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $LocationId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsOnlineLisPort
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PortID,

        [Parameter()]
        [System.Object]
        $TenantId,

        [Parameter()]
        [System.Object]
        $IsDebug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ChassisID,

        [Parameter()]
        [System.Object]
        $NCSApiUrl,

        [Parameter()]
        [System.Object]
        $TargetStore,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsOnlineLisSubnet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TenantId,

        [Parameter()]
        [System.Object]
        $Subnet,

        [Parameter()]
        [System.Object]
        $IsDebug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $TargetStore,

        [Parameter()]
        [System.Object]
        $NCSApiUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsOnlineLisSwitch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TenantId,

        [Parameter()]
        [System.Object]
        $IsDebug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ChassisID,

        [Parameter()]
        [System.Object]
        $NCSApiUrl,

        [Parameter()]
        [System.Object]
        $TargetStore,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsOnlineLisWirelessAccessPoint
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TenantId,

        [Parameter()]
        [System.Object]
        $IsDebug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $BSSID,

        [Parameter()]
        [System.Object]
        $NCSApiUrl,

        [Parameter()]
        [System.Object]
        $TargetStore,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsOnlineNumberPortInOrder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PortInOrderId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsOnlinePSTNGateway
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsOnlineSchedule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Id,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsOnlineTelephoneNumber
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $TelephoneNumber,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsOnlineVoicemailPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsOnlineVoiceRoute
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsOnlineVoiceRoutingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTeamsAppPermissionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTeamsAppPreset
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTeamsAppSetupPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTeamsCallingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTeamsCallParkPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTeamsChannelsPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTeamsComplianceRecordingApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTeamsComplianceRecordingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTeamsCortanaPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTeamsEmergencyCallingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTeamsEmergencyCallRoutingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTeamsFeedbackPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTeamsIPPhonePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTeamsMeetingBroadcastPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTeamsMeetingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTeamsMessagingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTeamsMobilityPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTeamsNetworkRoamingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTeamsNotificationAndFeedsPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTeamsPinnedApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTeamsTargetingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTeamsTranslationRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTeamsVdiPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTenantBlockedNumberExceptionPattern
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTenantCatalogApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTenantDialPlan
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTenantNetworkConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTenantNetworkRegion
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTenantNetworkSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTenantNetworkSubnet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTenantTrustedIPAddress
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsTenantUpdateTimeWindow
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsUserAcp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ParticipantPasscode,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $TollNumber,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsVideoInteropServiceProvider
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Remove-CsVoiceNormalizationRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Search-CsOnlineTelephoneNumberInventory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $InventoryType,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $CapitalOrMajorCity,

        [Parameter()]
        [System.Object]
        $TelephoneNumber,

        [Parameter()]
        [System.Object]
        $Quantity,

        [Parameter()]
        [System.Object]
        $CountryOrRegion,

        [Parameter()]
        [System.Object]
        $AreaCode,

        [Parameter()]
        [System.Object]
        $RegionalGroup,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $Area,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Select-CsOnlineTelephoneNumberInventory
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $ReservationId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $CapitalOrMajorCity,

        [Parameter()]
        [System.Object]
        $CountryOrRegion,

        [Parameter()]
        [System.Object]
        $RegionalGroup,

        [Parameter()]
        [System.Object]
        $LocationId,

        [Parameter()]
        [System.Object]
        $TelephoneNumbers,

        [Parameter()]
        [System.Object]
        $Area,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsApplicationAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AppIds,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsApplicationMeetingConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AllowRemoveParticipantAppIds,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsAutoAttendant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsBroadcastMeetingConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EnableSdnProviderForBroadcastMeeting,

        [Parameter()]
        [System.Object]
        $SdnAzureSubscriptionId,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Object]
        $SdnProviderName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $SdnApiTemplateUrl,

        [Parameter()]
        [System.Object]
        $EnableAnonymousBroadcastMeeting,

        [Parameter()]
        [System.Object]
        $EnableTechPreviewFeatures,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $SdnFallbackAttendeeThresholdCountForBroadcastMeeting,

        [Parameter()]
        [System.Object]
        $SdnApiToken,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $EnableBroadcastMeeting,

        [Parameter()]
        [System.Object]
        $BroadcastMeetingSupportUrl,

        [Parameter()]
        [System.Object]
        $EnableOpenBroadcastMeeting,

        [Parameter()]
        [System.Object]
        $EnableBroadcastMeetingRecording,

        [Parameter()]
        [System.Object]
        $EnforceBroadcastMeetingRecording,

        [Parameter()]
        [System.Object]
        $SdnLicenseId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsCallingLineIdentity
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $ServiceNumber,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $CallingIDSubstitute,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $EnableUserOverride,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $BlockIncomingPstnCallerID,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsCallQueue
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RoutingMethod,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $AllowOptOut,

        [Parameter()]
        [System.Object]
        $PresenceBasedRouting,

        [Parameter()]
        [System.Object]
        $AgentAlertTime,

        [Parameter()]
        [System.Object]
        $TimeoutActionTarget,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $OverflowThreshold,

        [Parameter()]
        [System.Object]
        $ChannelId,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $UseDefaultMusicOnHold,

        [Parameter()]
        [System.Object]
        $MusicOnHoldAudioFileId,

        [Parameter()]
        [System.Object]
        $OverflowActionTarget,

        [Parameter()]
        [System.Object]
        $Users,

        [Parameter()]
        [System.Object]
        $TimeoutAction,

        [Parameter()]
        [System.Object]
        $ConferenceMode,

        [Parameter()]
        [System.Object]
        $OverflowSharedVoicemailTextToSpeechPrompt,

        [Parameter()]
        [System.Object]
        $OverflowAction,

        [Parameter()]
        [System.Object]
        $DistributionLists,

        [Parameter()]
        [System.Object]
        $TimeoutSharedVoicemailTextToSpeechPrompt,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $EnableOverflowSharedVoicemailTranscription,

        [Parameter()]
        [System.Object]
        $WelcomeMusicAudioFileId,

        [Parameter()]
        [System.Object]
        $LanguageId,

        [Parameter()]
        [System.Object]
        $TimeoutThreshold,

        [Parameter()]
        [System.Object]
        $OverflowSharedVoicemailAudioFilePrompt,

        [Parameter()]
        [System.Object]
        $EnableTimeoutSharedVoicemailTranscription,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $LineUri,

        [Parameter()]
        [System.Object]
        $ChannelUserObjectId,

        [Parameter()]
        [System.Object]
        $TimeoutSharedVoicemailAudioFilePrompt,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsCceApplianceConfigurationReplicationStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsCceApplianceDeploymentStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Action,

        [Parameter()]
        [System.Object]
        $Version,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Error,

        [Parameter()]
        [System.Object]
        $Status,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsCceApplianceStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Version,

        [Parameter()]
        [System.Object]
        $ConfigurationSnapshot,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Error,

        [Parameter()]
        [System.Object]
        $Status,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsClientPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DisableMeetingSubjectAndLocation,

        [Parameter()]
        [System.Object]
        $DisableEmailComparisonCheck,

        [Parameter()]
        [System.Object]
        $DisableSavingIM,

        [Parameter()]
        [System.Object]
        $TabURL,

        [Parameter()]
        [System.Object]
        $EnableIMAutoArchiving,

        [Parameter()]
        [System.Object]
        $EnableMediaRedirection,

        [Parameter()]
        [System.Object]
        $EnableSQMData,

        [Parameter()]
        [System.Object]
        $MaximumDGsAllowedInContactList,

        [Parameter()]
        [System.Object]
        $EnableAppearOffline,

        [Parameter()]
        [System.Object]
        $SPSearchCenterInternalURL,

        [Parameter()]
        [System.Object]
        $RequireContentPin,

        [Parameter()]
        [System.Object]
        $DisableHandsetOnLockedMachine,

        [Parameter()]
        [System.Object]
        $P2PAppSharingEncryption,

        [Parameter()]
        [System.Object]
        $EnableHotdesking,

        [Parameter()]
        [System.Object]
        $EnableServerConversationHistory,

        [Parameter()]
        [System.Object]
        $RateMyCallAllowCustomUserFeedback,

        [Parameter()]
        [System.Object]
        $TelemetryTier,

        [Parameter()]
        [System.Object]
        $DisableInkIM,

        [Parameter()]
        [System.Object]
        $EnableSkypeUI,

        [Parameter()]
        [System.Object]
        $CustomLinkInErrorMessages,

        [Parameter()]
        [System.Object]
        $EnableNotificationForNewSubscribers,

        [Parameter()]
        [System.Object]
        $DisableContactCardOrganizationTab,

        [Parameter()]
        [System.Object]
        $EnableHighPerformanceConferencingAppSharing,

        [Parameter()]
        [System.Object]
        $DisableHtmlIm,

        [Parameter()]
        [System.Object]
        $EnableOnlineFeedback,

        [Parameter()]
        [System.Object]
        $IMLatencySpinnerDelay,

        [Parameter()]
        [System.Object]
        $IMLatencyErrorThreshold,

        [Parameter()]
        [System.Object]
        $HotdeskingTimeout,

        [Parameter()]
        [System.Object]
        $DisablePresenceNote,

        [Parameter()]
        [System.Object]
        $ConferenceIMIdleTimeout,

        [Parameter()]
        [System.Object]
        $HelpEnvironment,

        [Parameter()]
        [System.Object]
        $BlockConversationFromFederatedContacts,

        [Parameter()]
        [System.Object]
        $ShowSharepointPhotoEditLink,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $DisablePoorNetworkWarnings,

        [Parameter()]
        [System.Object]
        $EnableUnencryptedFileTransfer,

        [Parameter()]
        [System.Object]
        $PlayAbbreviatedDialTone,

        [Parameter()]
        [System.Object]
        $EnableURL,

        [Parameter()]
        [System.Object]
        $DisablePoorDeviceWarnings,

        [Parameter()]
        [System.Object]
        $CustomizedHelpUrl,

        [Parameter()]
        [System.Object]
        $DisableFederatedPromptDisplayName,

        [Parameter()]
        [System.Object]
        $SearchPrefixFlags,

        [Parameter()]
        [System.Object]
        $MaximumNumberOfContacts,

        [Parameter()]
        [System.Object]
        $RateMyCallDisplayPercentage,

        [Parameter()]
        [System.Object]
        $DisableEmoticons,

        [Parameter()]
        [System.Object]
        $DisplayPhoto,

        [Parameter()]
        [System.Object]
        $DisableCalendarPresence,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $ExcludedContactFolders,

        [Parameter()]
        [System.Object]
        $ShowRecentContacts,

        [Parameter()]
        [System.Object]
        $EnableExchangeDelegateSync,

        [Parameter()]
        [System.Object]
        $EnableClientMusicOnHold,

        [Parameter()]
        [System.Object]
        $EnableMeetingEngagement,

        [Parameter()]
        [System.Object]
        $EnableTracing,

        [Parameter()]
        [System.Object]
        $IMWarning,

        [Parameter()]
        [System.Object]
        $SPSearchInternalURL,

        [Parameter()]
        [System.Object]
        $CalendarStatePublicationInterval,

        [Parameter()]
        [System.Object]
        $DisableOneNote12Integration,

        [Parameter()]
        [System.Object]
        $EnableHighPerformanceP2PAppSharing,

        [Parameter()]
        [System.Object]
        $EnableConversationWindowTabs,

        [Parameter()]
        [System.Object]
        $EnableViewBasedSubscriptionMode,

        [Parameter()]
        [System.Object]
        $MaxPhotoSizeKB,

        [Parameter()]
        [System.Object]
        $WebServicePollInterval,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $EnableOnlineFeedbackScreenshots,

        [Parameter()]
        [System.Object]
        $EnableExchangeContactSync,

        [Parameter()]
        [System.Object]
        $EnableFullScreenVideo,

        [Parameter()]
        [System.Object]
        $DisableOnlineContextualSearch,

        [Parameter()]
        [System.Object]
        $SPSearchCenterExternalURL,

        [Parameter()]
        [System.Object]
        $DisablePhonePresence,

        [Parameter()]
        [System.Object]
        $SPSearchExternalURL,

        [Parameter()]
        [System.Object]
        $CustomStateUrl,

        [Parameter()]
        [System.Object]
        $SupportModernFilePicker,

        [Parameter()]
        [System.Object]
        $EnableEnterpriseCustomizedHelp,

        [Parameter()]
        [System.Object]
        $EnableEventLogging,

        [Parameter()]
        [System.Object]
        $DisableRTFIM,

        [Parameter()]
        [System.Object]
        $DGRefreshInterval,

        [Parameter()]
        [System.Object]
        $MAPIPollInterval,

        [Parameter()]
        [System.Object]
        $TracingLevel,

        [Parameter()]
        [System.Object]
        $EnableCallLogAutoArchiving,

        [Parameter()]
        [System.Object]
        $EnableExchangeContactsFolder,

        [Parameter()]
        [System.Object]
        $DisablePICPromptDisplayName,

        [Parameter()]
        [System.Object]
        $DisableFreeBusyInfo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $AutoDiscoveryRetryInterval,

        [Parameter()]
        [System.Object]
        $PolicyEntry,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Object]
        $AttendantSafeTransfer,

        [Parameter()]
        [System.Object]
        $MusicOnHoldAudioFile,

        [Parameter()]
        [System.Object]
        $ShowManagePrivacyRelationships,

        [Parameter()]
        [System.Object]
        $DisableFeedsTab,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $AddressBookAvailability,

        [Parameter()]
        [System.Object]
        $EnableVOIPCallDefault,

        [Parameter()]
        [System.Object]
        $EnableClientAutoPopulateWithTeam,

        [Parameter()]
        [System.Object]
        $PublicationBatchDelay,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsConferencingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $VideoBitRateKb,

        [Parameter()]
        [System.Object]
        $AllowExternalUserControl,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $EnableReliableConferenceDeletion,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $AllowParticipantControl,

        [Parameter()]
        [System.Object]
        $EnableFileTransfer,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Object]
        $AllowIPAudio,

        [Parameter()]
        [System.Object]
        $AllowSharedNotes,

        [Parameter()]
        [System.Object]
        $ApplicationSharingMode,

        [Parameter()]
        [System.Object]
        $DisablePowerPointAnnotations,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $EnableDialInConferencing,

        [Parameter()]
        [System.Object]
        $EnableAppDesktopSharing,

        [Parameter()]
        [System.Object]
        $AllowLargeMeetings,

        [Parameter()]
        [System.Object]
        $AllowExternalUsersToSaveContent,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $MaxMeetingSize,

        [Parameter()]
        [System.Object]
        $EnableOnlineMeetingPromptForLyncResources,

        [Parameter()]
        [System.Object]
        $AllowConferenceRecording,

        [Parameter()]
        [System.Object]
        $AllowAnonymousParticipantsInMeetings,

        [Parameter()]
        [System.Object]
        $TotalReceiveVideoBitRateKb,

        [Parameter()]
        [System.Object]
        $AllowNonEnterpriseVoiceUsersToDialOut,

        [Parameter()]
        [System.Object]
        $AllowAnnotations,

        [Parameter()]
        [System.Object]
        $AllowAnonymousUsersToDialOut,

        [Parameter()]
        [System.Object]
        $AppSharingBitRateKb,

        [Parameter()]
        [System.Object]
        $EnableP2PFileTransfer,

        [Parameter()]
        [System.Object]
        $AllowQandA,

        [Parameter()]
        [System.Object]
        $FileTransferBitRateKb,

        [Parameter()]
        [System.Object]
        $AllowMultiView,

        [Parameter()]
        [System.Object]
        $EnableP2PVideo,

        [Parameter()]
        [System.Object]
        $MaxVideoConferenceResolution,

        [Parameter()]
        [System.Object]
        $CloudRecordingServiceSupport,

        [Parameter()]
        [System.Object]
        $AllowExternalUsersToRecordMeeting,

        [Parameter()]
        [System.Object]
        $AllowIPVideo,

        [Parameter()]
        [System.Object]
        $EnableP2PRecording,

        [Parameter()]
        [System.Object]
        $EnableMultiViewJoin,

        [Parameter()]
        [System.Object]
        $AudioBitRateKb,

        [Parameter()]
        [System.Object]
        $AllowFederatedParticipantJoinAsSameEnterprise,

        [Parameter()]
        [System.Object]
        $EnableDataCollaboration,

        [Parameter()]
        [System.Object]
        $AllowUserToScheduleMeetingsWithAppSharing,

        [Parameter()]
        [System.Object]
        $AllowOfficeContent,

        [Parameter()]
        [System.Object]
        $AllowPolls,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsDefaultCatalogApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsExternalAccessPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $EnablePublicCloudAccess,

        [Parameter()]
        [System.Object]
        $EnableXmppAccess,

        [Parameter()]
        [System.Object]
        $EnableFederationAccess,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $EnableOutsideAccess,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $EnablePublicCloudAudioVideoAccess,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsExternalUserCommunicationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EnableFileTransfer,

        [Parameter()]
        [System.Object]
        $AllowTitleVisibility,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AllowPresenceVisibility,

        [Parameter()]
        [System.Object]
        $EnableP2PFileTransfer,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsGlobalCatalogApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsHuntGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AgentAlertTime,

        [Parameter()]
        [System.Object]
        $MusicOnHoldFileContent,

        [Parameter()]
        [System.Object]
        $AllowOptOut,

        [Parameter()]
        [System.Object]
        $MusicOnHoldFileName,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $TimeoutActionTarget,

        [Parameter()]
        [System.Object]
        $ClientAudience,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $OverflowThreshold,

        [Parameter()]
        [System.Object]
        $HuntGroupServiceCallbackUri,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $UseDefaultMusicOnHold,

        [Parameter()]
        [System.Object]
        $PrimaryUri,

        [Parameter()]
        [System.Object]
        $OverflowActionTarget,

        [Parameter()]
        [System.Object]
        $RoutingMethod,

        [Parameter()]
        [System.Object]
        $TimeoutAction,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $DistributionLists,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $TimeoutThreshold,

        [Parameter()]
        [System.Object]
        $WelcomeMusicFileName,

        [Parameter()]
        [System.Object]
        $OverflowAction,

        [Parameter()]
        [System.Object]
        $WelcomeMusicFileContent,

        [Parameter()]
        [System.Object]
        $LineUri,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsHybridMediationServer
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AccessProxyExternalFqdn,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Fqdn,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsHybridPSTNAppliance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $MaintenanceMode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $MediationServerGruu,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsHybridPSTNSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $OsUpdateTimeWindow,

        [Parameter()]
        [System.Object]
        $EdgeFQDN,

        [Parameter()]
        [System.Object]
        $BitsUpdateTimeWindow,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $EnableAutoUpdate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsInboundBlockedNumberPattern
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Pattern,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsIPPhonePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PowerSavePostOfficeHoursTimeoutMS,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Object]
        $EnableBetterTogetherOverEthernet,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $KeyboardLockMaxPinRetry,

        [Parameter()]
        [System.Object]
        $LocalProvisioningServerAddress,

        [Parameter()]
        [System.Object]
        $PowerSaveDuringOfficeHoursTimeoutMS,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $LocalProvisioningServerType,

        [Parameter()]
        [System.Object]
        $PrioritizedCodecsList,

        [Parameter()]
        [System.Object]
        $UserDialTimeoutMS,

        [Parameter()]
        [System.Object]
        $BetterTogetherOverEthernetPairingMode,

        [Parameter()]
        [System.Object]
        $DateTimeFormat,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $LocalProvisioningServerPassword,

        [Parameter()]
        [System.Object]
        $EnableDeviceUpdate,

        [Parameter()]
        [System.Object]
        $EnableOneTouchVoicemail,

        [Parameter()]
        [System.Object]
        $LocalProvisioningServerUser,

        [Parameter()]
        [System.Object]
        $EnableExchangeCalendaring,

        [Parameter()]
        [System.Object]
        $EnablePowerSaveMode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsMeetingConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PstnCallersBypassLobby,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $DesignateAsPresenter,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $AllowConferenceRecording,

        [Parameter()]
        [System.Object]
        $UserUriFormatForStUser,

        [Parameter()]
        [System.Object]
        $AssignedConferenceTypeByDefault,

        [Parameter()]
        [System.Object]
        $LogoURL,

        [Parameter()]
        [System.Object]
        $RequireRoomSystemsAuthorization,

        [Parameter()]
        [System.Object]
        $CustomFooterText,

        [Parameter()]
        [System.Object]
        $HelpURL,

        [Parameter()]
        [System.Object]
        $AllowCloudRecordingService,

        [Parameter()]
        [System.Object]
        $AdmitAnonymousUsersByDefault,

        [Parameter()]
        [System.Object]
        $LegalURL,

        [Parameter()]
        [System.Object]
        $EnableAssignedConferenceType,

        [Parameter()]
        [System.Object]
        $EnableMeetingReport,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsMeetingRoom
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RemoteCallControlTelephonyEnabled,

        [Parameter()]
        [System.Object]
        $SipAddress,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ExchangeArchivingPolicy,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $LineServerURI,

        [Parameter()]
        [System.Object]
        $AcpInfo,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Object]
        $AudioVideoDisabled,

        [Parameter()]
        [System.Object]
        $PrivateLine,

        [Parameter()]
        [System.Object]
        $HostedVoiceMail,

        [Parameter()]
        [System.Object]
        $EnterpriseVoiceEnabled,

        [Parameter()]
        [System.Object]
        $LineURI,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsMobilityPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RequireWiFiForSharing,

        [Parameter()]
        [System.Object]
        $EncryptAppData,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $AllowCustomerExperienceImprovementProgram,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $EnableMobility,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $AllowDeviceContactsSync,

        [Parameter()]
        [System.Object]
        $VoiceSettings,

        [Parameter()]
        [System.Object]
        $AllowSaveIMHistory,

        [Parameter()]
        [System.Object]
        $RequireWIFIForIPVideo,

        [Parameter()]
        [System.Object]
        $AllowSaveCallLogs,

        [Parameter()]
        [System.Object]
        $EnableOutsideVoice,

        [Parameter()]
        [System.Object]
        $AllowSaveCredentials,

        [Parameter()]
        [System.Object]
        $EnableIPAudioVideo,

        [Parameter()]
        [System.Object]
        $AllowAutomaticPstnFallback,

        [Parameter()]
        [System.Object]
        $RequireIntune,

        [Parameter()]
        [System.Object]
        $AllowExchangeConnectivity,

        [Parameter()]
        [System.Object]
        $EnablePushNotifications,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsNetworkConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $NetworkRegions,

        [Parameter()]
        [System.Object]
        $InterNetworkRegionRoutes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $InterNetworkSitePolicies,

        [Parameter()]
        [System.Object]
        $MediaBypassSettings,

        [Parameter()]
        [System.Object]
        $BWPolicyProfiles,

        [Parameter()]
        [System.Object]
        $EnableBandwidthPolicyCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $NetworkSites,

        [Parameter()]
        [System.Object]
        $Subnets,

        [Parameter()]
        [System.Object]
        $NetworkRegionLinks,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOAuthConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $ExchangeAutodiscoverAllowedDomains,

        [Parameter()]
        [System.Object]
        $ServiceName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AdditionalAudienceUrls,

        [Parameter()]
        [System.Object]
        $Realm,

        [Parameter()]
        [System.Object]
        $ClientAuthorizationOAuthServerIdentity,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ClientAdalAuthOverride,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $ExchangeAutodiscoverUrl,

        [Parameter()]
        [System.Object]
        $AlternateAudienceUrl,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineApplicationEndpoint
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RunFullProvisioningFlow,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $CallbackUri,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $IsInternalRun,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Uri,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $PhoneNumber,

        [Parameter()]
        [System.Object]
        $Ring,

        [Parameter()]
        [System.Object]
        $Audience,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineApplicationInstance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DisplayName,

        [Parameter()]
        [System.Object]
        $OnpremPhoneNumber,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $ApplicationId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineAudioConferencingRoutingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RouteType,

        [Parameter()]
        [System.Object]
        $OnlinePstnUsages,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineDialInConferencingBridge
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Object]
        $DefaultServiceNumber,

        [Parameter()]
        [System.Object]
        $TenantDomain,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SetDefault,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineDialInConferencingServiceNumber
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PrimaryLanguage,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $SecondaryLanguages,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RestoreDefaultLanguages,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $BotType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineDialInConferencingTenantSettings
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $IncludeTollFreeNumberInMeetingInvites,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Object]
        $EntryExitAnnouncementsType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $MigrateServiceNumbersOnCrossForestMove,

        [Parameter()]
        [System.Object]
        $AllowedDialOutExternalDomains,

        [Parameter()]
        [System.Object]
        $AutomaticallyReplaceAcpProvider,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $AllowFederatedUsersToDialOutToSelf,

        [Parameter()]
        [System.Object]
        $SendEmailFromAddress,

        [Parameter()]
        [System.Object]
        $SendEmailFromOverride,

        [Parameter()]
        [System.Object]
        $EnableNameRecording,

        [Parameter()]
        [System.Object]
        $AutomaticallyMigrateUserMeetings,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $PinLength,

        [Parameter()]
        [System.Object]
        $UseUniqueConferenceIds,

        [Parameter()]
        [System.Object]
        $AutomaticallySendEmailsToUsers,

        [Parameter()]
        [System.Object]
        $AllowPSTNOnlyMeetingsByDefault,

        [Parameter()]
        [System.Object]
        $EnableEntryExitNotifications,

        [Parameter()]
        [System.Object]
        $EnableDialOutJoinConfirmation,

        [Parameter()]
        [System.Object]
        $AllowFederatedUsersToDialOutToThirdParty,

        [Parameter()]
        [System.Object]
        $SendEmailFromDisplayName,

        [Parameter()]
        [System.Object]
        $MaskPstnNumbersType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineDialInConferencingUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TollFreeServiceNumber,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $BridgeName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SendEmail,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ServiceNumber,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ResetConferenceId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $SendEmailFromAddress,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ResetLeaderPin,

        [Parameter()]
        [System.Object]
        $ConferenceId,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $SendEmailToAddress,

        [Parameter()]
        [System.Object]
        $BridgeId,

        [Parameter()]
        [System.Object]
        $TenantDomain,

        [Parameter()]
        [System.Object]
        $AllowTollFreeDialIn,

        [Parameter()]
        [System.Object]
        $SendEmailFromDisplayName,

        [Parameter()]
        [System.Object]
        $AllowPSTNOnlyMeetings,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineDialInConferencingUserDefaultNumber
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $BridgeName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $TenantDomain,

        [Parameter()]
        [System.Object]
        $ToNumber,

        [Parameter()]
        [System.Object]
        $CapitalOrMajorCity,

        [Parameter()]
        [System.Object]
        $FromNumber,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $BridgeId,

        [Parameter()]
        [System.Object]
        $NumberType,

        [Parameter()]
        [System.Object]
        $CountryOrRegion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RescheduleMeetings,

        [Parameter()]
        [System.Object]
        $AreaOrState,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineDirectoryUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $Ring,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineEnhancedEmergencyServiceDisclaimer
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Version,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ForceAccept,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $CountryOrRegion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineLisCivicAddress
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PostalCode,

        [Parameter()]
        [System.Object]
        $IsAzureMapValidationRequired,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Confidence,

        [Parameter()]
        [System.Object]
        $CountryOrRegion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $CityAlias,

        [Parameter()]
        [System.Object]
        $PostDirectional,

        [Parameter()]
        [System.Object]
        $StreetSuffix,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $StreetName,

        [Parameter()]
        [System.Object]
        $City,

        [Parameter()]
        [System.Object]
        $CivicAddressId,

        [Parameter()]
        [System.Object]
        $CompanyTaxId,

        [Parameter()]
        [System.Object]
        $StateOrProvince,

        [Parameter()]
        [System.Object]
        $HouseNumberSuffix,

        [Parameter()]
        [System.Object]
        $ValidationStatus,

        [Parameter()]
        [System.Object]
        $Latitude,

        [Parameter()]
        [System.Object]
        $HouseNumber,

        [Parameter()]
        [System.Object]
        $Longitude,

        [Parameter()]
        [System.Object]
        $CompanyName,

        [Parameter()]
        [System.Object]
        $PreDirectional,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $Elin,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineLisLocation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PostalCode,

        [Parameter()]
        [System.Object]
        $IsAzureMapValidationRequired,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Confidence,

        [Parameter()]
        [System.Object]
        $CompanyTaxId,

        [Parameter()]
        [System.Object]
        $CountryOrRegion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $CityAlias,

        [Parameter()]
        [System.Object]
        $PostDirectional,

        [Parameter()]
        [System.Object]
        $StreetSuffix,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $StreetName,

        [Parameter()]
        [System.Object]
        $City,

        [Parameter()]
        [System.Object]
        $HouseNumber,

        [Parameter()]
        [System.Object]
        $LocationId,

        [Parameter()]
        [System.Object]
        $StateOrProvince,

        [Parameter()]
        [System.Object]
        $CivicAddressId,

        [Parameter()]
        [System.Object]
        $HouseNumberSuffix,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $Latitude,

        [Parameter()]
        [System.Object]
        $Location,

        [Parameter()]
        [System.Object]
        $Longitude,

        [Parameter()]
        [System.Object]
        $CompanyName,

        [Parameter()]
        [System.Object]
        $PreDirectional,

        [Parameter()]
        [System.Object]
        $Elin,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineLisPort
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PortID,

        [Parameter()]
        [System.Object]
        $TenantId,

        [Parameter()]
        [System.Object]
        $IsDebug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ChassisID,

        [Parameter()]
        [System.Object]
        $NCSApiUrl,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $LocationId,

        [Parameter()]
        [System.Object]
        $TargetStore,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineLisSubnet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TenantId,

        [Parameter()]
        [System.Object]
        $Subnet,

        [Parameter()]
        [System.Object]
        $IsDebug,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $TargetStore,

        [Parameter()]
        [System.Object]
        $NCSApiUrl,

        [Parameter()]
        [System.Object]
        $LocationId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineLisSwitch
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TenantId,

        [Parameter()]
        [System.Object]
        $IsDebug,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ChassisID,

        [Parameter()]
        [System.Object]
        $NCSApiUrl,

        [Parameter()]
        [System.Object]
        $LocationId,

        [Parameter()]
        [System.Object]
        $TargetStore,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineLisWirelessAccessPoint
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TenantId,

        [Parameter()]
        [System.Object]
        $IsDebug,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $BSSID,

        [Parameter()]
        [System.Object]
        $NCSApiUrl,

        [Parameter()]
        [System.Object]
        $LocationId,

        [Parameter()]
        [System.Object]
        $TargetStore,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineNumberPortInOrder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $LOABase64PayLoad,

        [Parameter()]
        [System.Object]
        $SubscriberStreetName,

        [Parameter()]
        [System.Object]
        $SubscriberCountry,

        [Parameter()]
        [System.Object]
        $LOAContentType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $SubscriberArea,

        [Parameter()]
        [System.Object]
        $SubscriberBusinessName,

        [Parameter()]
        [System.Object]
        $LosingTelcoPin,

        [Parameter()]
        [System.Object]
        $SubscriberAddressLine3,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $FriendlyName,

        [Parameter()]
        [System.Object]
        $IsPartialPort,

        [Parameter()]
        [System.Object]
        $RequestedFocDate,

        [Parameter()]
        [System.Object]
        $BillingTelephoneNumber,

        [Parameter()]
        [System.Object]
        $SubscriberCity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $SubscriberAddressLine2,

        [Parameter()]
        [System.Object]
        $PortInOrderId,

        [Parameter()]
        [System.Object]
        $SubscriberAddressLine1,

        [Parameter()]
        [System.Object]
        $SubscriberLastName,

        [Parameter()]
        [System.Object]
        $LosingTelcoAccountId,

        [Parameter()]
        [System.Object]
        $SubscriberBuildingNumber,

        [Parameter()]
        [System.Object]
        $EmailAddresses,

        [Parameter()]
        [System.Object]
        $LOAAuthorizingPerson,

        [Parameter()]
        [System.Object]
        $SubscriberFirstName,

        [Parameter()]
        [System.Object]
        $SubscriberZipCode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineNumberPortOutOrderPin
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PortOrderPin,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlinePSTNGateway
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $GenerateRingingWhileLocatingUser,

        [Parameter()]
        [System.Object]
        $OutboundTeamsNumberTranslationRules,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Object]
        $FailoverTimeSeconds,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $GatewaySiteId,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $PidfLoSupported,

        [Parameter()]
        [System.Object]
        $BypassMode,

        [Parameter()]
        [System.Object]
        $FailoverResponseCodes,

        [Parameter()]
        [System.Object]
        $SendSipOptions,

        [Parameter()]
        [System.Object]
        $ProxySbc,

        [Parameter()]
        [System.Object]
        $GatewayLbrEnabledUserOverride,

        [Parameter()]
        [System.Object]
        $InboundPstnNumberTranslationRules,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $SipSignalingPort,

        [Parameter()]
        [System.Object]
        $MediaRelayRoutingLocationOverride,

        [Parameter()]
        [System.Object]
        $OutboundPstnNumberTranslationRules,

        [Parameter()]
        [System.Object]
        $MediaBypass,

        [Parameter()]
        [System.Object]
        $GatewaySiteLbrEnabled,

        [Parameter()]
        [System.Object]
        $ForwardCallHistory,

        [Parameter()]
        [System.Object]
        $MaxConcurrentSessions,

        [Parameter()]
        [System.Object]
        $ForwardPai,

        [Parameter()]
        [System.Object]
        $InboundTeamsNumberTranslationRules,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlinePstnUsage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Usage,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineSchedule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineVoiceApplicationInstance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $TelephoneNumber,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineVoicemailPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ShareData,

        [Parameter()]
        [System.Object]
        $MaximumRecordingLength,

        [Parameter()]
        [System.Object]
        $EnableTranscription,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $EnableEditingCallAnswerRulesSetting,

        [Parameter()]
        [System.Object]
        $EnableTranscriptionProfanityMasking,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $EnableTranscriptionTranslation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineVoicemailUserSettings
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PromptLanguage,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DefaultGreetingPromptOverwrite,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $DefaultOofGreetingPromptOverwrite,

        [Parameter()]
        [System.Object]
        $OofGreetingFollowAutomaticRepliesEnabled,

        [Parameter()]
        [System.Object]
        $ShareData,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $CallAnswerRule,

        [Parameter()]
        [System.Object]
        $OofGreetingFollowCalendarEnabled,

        [Parameter()]
        [System.Object]
        $TransferTarget,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $OofGreetingEnabled,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $VoicemailEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineVoiceRoute
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $OnlinePstnGatewayList,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $NumberPattern,

        [Parameter()]
        [System.Object]
        $OnlinePstnUsages,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineVoiceRoutingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RouteType,

        [Parameter()]
        [System.Object]
        $OnlinePstnUsages,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineVoiceUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $TelephoneNumber,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $LocationID,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsOnlineVoiceUserBulk
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $NumberAssignmentDetails,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsPrivacyConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EnablePrivacyMode,

        [Parameter()]
        [System.Object]
        $PublishLocationDataDefault,

        [Parameter()]
        [System.Object]
        $AutoInitiateContacts,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DisplayPublishedPhotoDefault,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsPushNotificationConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $EnableApplePushNotificationService,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $EnableMicrosoftPushNotificationService,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsAppPermissionPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $GlobalCatalogAppsType,

        [Parameter()]
        [System.Object]
        $PrivateCatalogAppsType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DefaultCatalogAppsType,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $PrivateCatalogApps,

        [Parameter()]
        [System.Object]
        $GlobalCatalogApps,

        [Parameter()]
        [System.Object]
        $DefaultCatalogApps,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsAppPreset
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsAppSetupPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $AppPresetList,

        [Parameter()]
        [System.Object]
        $PinnedAppBarApps,

        [Parameter()]
        [System.Object]
        $AllowUserPinning,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $AllowSideLoading,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsCallingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AllowWebPSTNCalling,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $PreventTollBypass,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $AllowCloudRecordingForCalls,

        [Parameter()]
        [System.Object]
        $LiveCaptionsEnabledTypeForCalling,

        [Parameter()]
        [System.Object]
        $AllowCallGroups,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $SafeTransferEnabled,

        [Parameter()]
        [System.Object]
        $SpamFilteringEnabledType,

        [Parameter()]
        [System.Object]
        $BusyOnBusyEnabledType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AllowVoicemail,

        [Parameter()]
        [System.Object]
        $MusicOnHoldEnabledType,

        [Parameter()]
        [System.Object]
        $AllowCallForwardingToUser,

        [Parameter()]
        [System.Object]
        $AllowCallForwardingToPhone,

        [Parameter()]
        [System.Object]
        $AllowPrivateCalling,

        [Parameter()]
        [System.Object]
        $AllowDelegation,

        [Parameter()]
        [System.Object]
        $AutoAnswerEnabledType,

        [Parameter()]
        [System.Object]
        $AllowTranscriptionForCalling,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsCallParkPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $AllowCallPark,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsChannelsPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AllowPrivateChannelCreation,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $AllowChannelSharingToExternalUser,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $AllowPrivateTeamDiscovery,

        [Parameter()]
        [System.Object]
        $AllowSharedChannelCreation,

        [Parameter()]
        [System.Object]
        $AllowOrgWideTeamCreation,

        [Parameter()]
        [System.Object]
        $AllowUserToParticipateInExternalSharedChannel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsClientConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AllowEmailIntoChannel,

        [Parameter()]
        [System.Object]
        $RestrictedSenderList,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Object]
        $AllowGoogleDrive,

        [Parameter()]
        [System.Object]
        $AllowSkypeBusinessInterop,

        [Parameter()]
        [System.Object]
        $AllowScopedPeopleSearchandAccess,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $AllowShareFile,

        [Parameter()]
        [System.Object]
        $AllowGuestUser,

        [Parameter()]
        [System.Object]
        $AllowOrganizationTab,

        [Parameter()]
        [System.Object]
        $ResourceAccountContentAccess,

        [Parameter()]
        [System.Object]
        $AllowEgnyte,

        [Parameter()]
        [System.Object]
        $AllowBox,

        [Parameter()]
        [System.Object]
        $AllowResourceAccountSendMessage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ContentPin,

        [Parameter()]
        [System.Object]
        $AllowDropBox,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsComplianceRecordingApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RequiredBeforeCallEstablishment,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $RequiredDuringCall,

        [Parameter()]
        [System.Object]
        $ConcurrentInvitationCount,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ComplianceRecordingPairedApplications,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $RequiredBeforeMeetingJoin,

        [Parameter()]
        [System.Object]
        $RequiredDuringMeeting,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsComplianceRecordingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $WarnUserOnRemoval,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $ComplianceRecordingApplications,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsCortanaPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $AllowCortanaAmbientListening,

        [Parameter()]
        [System.Object]
        $AllowCortanaInContextSuggestions,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $CortanaVoiceInvocationMode,

        [Parameter()]
        [System.Object]
        $AllowCortanaVoiceInvocation,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsEducationAssignmentsAppPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TurnItInApiKey,

        [Parameter()]
        [System.Object]
        $TurnItInApiUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ParentDigestEnabledType,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $TurnItInEnabledType,

        [Parameter()]
        [System.Object]
        $MakeCodeEnabledType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsEmergencyCallingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $NotificationGroup,

        [Parameter()]
        [System.Object]
        $ExternalLocationLookupMode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $NotificationDialOutNumber,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $NotificationMode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsEmergencyCallRoutingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EmergencyNumbers,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $AllowEnhancedEmergencyServices,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsFeedbackPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $ReceiveSurveysMode,

        [Parameter()]
        [System.Object]
        $UserInitiatedMode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsGuestCallingConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $AllowPrivateCalling,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsGuestMeetingConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $LiveCaptionsEnabledType,

        [Parameter()]
        [System.Object]
        $ScreenSharingMode,

        [Parameter()]
        [System.Object]
        $AllowMeetNow,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AllowTranscription,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $AllowIPVideo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsGuestMessagingConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AllowMemes,

        [Parameter()]
        [System.Object]
        $AllowImmersiveReader,

        [Parameter()]
        [System.Object]
        $AllowGiphy,

        [Parameter()]
        [System.Object]
        $AllowStickers,

        [Parameter()]
        [System.Object]
        $AllowUserEditMessage,

        [Parameter()]
        [System.Object]
        $AllowUserDeleteMessage,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $AllowUserChat,

        [Parameter()]
        [System.Object]
        $GiphyRatingType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsIPPhonePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AllowHomeScreen,

        [Parameter()]
        [System.Object]
        $HotDeskingIdleTimeoutInMinutes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $SearchOnCommonAreaPhoneMode,

        [Parameter()]
        [System.Object]
        $AllowHotDesking,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $SignInMode,

        [Parameter()]
        [System.Object]
        $AllowBetterTogether,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsMeetingBroadcastConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $SupportURL,

        [Parameter()]
        [System.Object]
        $AllowSdnProviderForBroadcastMeeting,

        [Parameter()]
        [System.Object]
        $SdnProviderName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $SdnApiToken,

        [Parameter()]
        [System.Object]
        $SdnApiTemplateUrl,

        [Parameter()]
        [System.Object]
        $SdnLicenseId,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsMeetingBroadcastPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $BroadcastRecordingMode,

        [Parameter()]
        [System.Object]
        $BroadcastAttendeeVisibilityMode,

        [Parameter()]
        [System.Object]
        $AllowBroadcastTranscription,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $AllowBroadcastScheduling,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsMeetingConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $ClientVideoPortRange,

        [Parameter()]
        [System.Object]
        $DisableAnonymousJoin,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Object]
        $ClientAppSharingPortRange,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $EnableQoS,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DisableAppInteractionForAnonymousUsers,

        [Parameter()]
        [System.Object]
        $LogoURL,

        [Parameter()]
        [System.Object]
        $ClientAppSharingPort,

        [Parameter()]
        [System.Object]
        $ClientVideoPort,

        [Parameter()]
        [System.Object]
        $ClientAudioPortRange,

        [Parameter()]
        [System.Object]
        $ClientMediaPortRangeEnabled,

        [Parameter()]
        [System.Object]
        $ClientAudioPort,

        [Parameter()]
        [System.Object]
        $CustomFooterText,

        [Parameter()]
        [System.Object]
        $HelpURL,

        [Parameter()]
        [System.Object]
        $LegalURL,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsMeetingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $IPAudioMode,

        [Parameter()]
        [System.Object]
        $AllowRecordingStorageOutsideRegion,

        [Parameter()]
        [System.Object]
        $IPVideoMode,

        [Parameter()]
        [System.Object]
        $EnrollUserOverride,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DesignatedPresenterRoleMode,

        [Parameter()]
        [System.Object]
        $AllowMeetNow,

        [Parameter()]
        [System.Object]
        $AllowEngagementReport,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Object]
        $AllowIPAudio,

        [Parameter()]
        [System.Object]
        $AllowSharedNotes,

        [Parameter()]
        [System.Object]
        $AllowNDIStreaming,

        [Parameter()]
        [System.Object]
        $AutoAdmittedUsers,

        [Parameter()]
        [System.Object]
        $AllowOutlookAddIn,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $LiveCaptionsEnabledType,

        [Parameter()]
        [System.Object]
        $AllowPrivateMeetingScheduling,

        [Parameter()]
        [System.Object]
        $StreamingAttendeeMode,

        [Parameter()]
        [System.Object]
        $AllowOrganizersToOverrideLobbySettings,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $AllowExternalParticipantGiveRequestControl,

        [Parameter()]
        [System.Object]
        $MediaBitRateKb,

        [Parameter()]
        [System.Object]
        $TeamsCameraFarEndPTZMode,

        [Parameter()]
        [System.Object]
        $RecordingStorageMode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AllowBreakoutRooms,

        [Parameter()]
        [System.Object]
        $AllowAnonymousUsersToStartMeeting,

        [Parameter()]
        [System.Object]
        $AllowPSTNUsersToBypassLobby,

        [Parameter()]
        [System.Object]
        $PreferredMeetingProviderForIslandsMode,

        [Parameter()]
        [System.Object]
        $AllowTranscription,

        [Parameter()]
        [System.Object]
        $AllowChannelMeetingScheduling,

        [Parameter()]
        [System.Object]
        $AllowAnonymousUsersToDialOut,

        [Parameter()]
        [System.Object]
        $VideoFiltersMode,

        [Parameter()]
        [System.Object]
        $MeetingChatEnabledType,

        [Parameter()]
        [System.Object]
        $AllowMeetingReactions,

        [Parameter()]
        [System.Object]
        $AllowPrivateMeetNow,

        [Parameter()]
        [System.Object]
        $ScreenSharingMode,

        [Parameter()]
        [System.Object]
        $AllowPowerPointSharing,

        [Parameter()]
        [System.Object]
        $AllowIPVideo,

        [Parameter()]
        [System.Object]
        $AllowUserToJoinExternalMeeting,

        [Parameter()]
        [System.Object]
        $AllowParticipantGiveRequestControl,

        [Parameter()]
        [System.Object]
        $AllowCloudRecording,

        [Parameter()]
        [System.Object]
        $RoomAttributeUserOverride,

        [Parameter()]
        [System.Object]
        $AllowWhiteboard,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsMessagingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AllowOwnerDeleteMessage,

        [Parameter()]
        [System.Object]
        $AllowSmartReply,

        [Parameter()]
        [System.Object]
        $AllowUserChat,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $AllowGiphy,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Object]
        $AllowUserDeleteMessage,

        [Parameter()]
        [System.Object]
        $ChannelsInChatListEnabledType,

        [Parameter()]
        [System.Object]
        $AllowMemes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $AllowStickers,

        [Parameter()]
        [System.Object]
        $AllowUrlPreviews,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $AllowImmersiveReader,

        [Parameter()]
        [System.Object]
        $AllowUserTranslation,

        [Parameter()]
        [System.Object]
        $AllowUserEditMessage,

        [Parameter()]
        [System.Object]
        $AudioMessageEnabledType,

        [Parameter()]
        [System.Object]
        $AllowRemoveUser,

        [Parameter()]
        [System.Object]
        $AllowPasteInternetImage,

        [Parameter()]
        [System.Object]
        $ReadReceiptsEnabledType,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $AllowGiphyDisplay,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AllowPriorityMessages,

        [Parameter()]
        [System.Object]
        $GiphyRatingType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsMigrationConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $EnableLegacyClientInterop,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsMobilityPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $IPVideoMobileMode,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $IPAudioMobileMode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsNetworkRoamingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $MediaBitRateKb,

        [Parameter()]
        [System.Object]
        $AllowIPVideo,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsNotificationAndFeedsPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $SuggestedFeedsEnabledType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $TrendingFeedsEnabledType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsPinnedApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Order,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsShiftsAppPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $AllowTimeClockLocationDetection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsTargetingPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $SuggestedPresetTags,

        [Parameter()]
        [System.Object]
        $CustomTagsMode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $TeamOwnersEditWhoCanManageTagsMode,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $ManageTagsPermissionMode,

        [Parameter()]
        [System.Object]
        $ShiftBackedTagsMode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsTranslationRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Pattern,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Translation,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsUpgradeConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $SfBMeetingJoinUx,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $DownloadTeams,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsUpgradeStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Details,

        [Parameter()]
        [System.Object]
        $State,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTeamsVdiPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DisableCallsAndMeetings,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $DisableAudioVideoInCallsAndMeetings,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTenantBlockedCallingNumbers
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $InboundExemptNumberPatterns,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $InboundBlockedNumberPatterns,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTenantBlockedNumberExceptionPattern
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Pattern,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTenantCatalogApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTenantDialPlan
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $OptimizeDeviceDialing,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $NormalizationRules,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ExternalAccessPrefix,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $SimpleName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTenantFederationConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AllowedDomainsAsAList,

        [Parameter()]
        [System.Object]
        $SharedSipAddressSpace,

        [Parameter()]
        [System.Object]
        $BlockedDomains,

        [Parameter()]
        [System.Object]
        $TreatDiscoveredPartnersAsUnverified,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AllowFederatedUsers,

        [Parameter()]
        [System.Object]
        $AllowedDomains,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $AllowPublicUsers,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTenantHybridConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $HybridConfigServiceInternalUrl,

        [Parameter()]
        [System.Object]
        $UseOnPremDialPlan,

        [Parameter()]
        [System.Object]
        $HybridConfigServiceExternalUrl,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $PeerDestination,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTenantMigrationConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $MeetingMigrationEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTenantNetworkConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Subnets,

        [Parameter()]
        [System.Object]
        $NetworkSites,

        [Parameter()]
        [System.Object]
        $NetworkRegions,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTenantNetworkRegion
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $CentralSite,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $NetworkRegionID,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTenantNetworkSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $EmergencyCallRoutingPolicy,

        [Parameter()]
        [System.Object]
        $EnableLocationBasedRouting,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $NetworkRegionID,

        [Parameter()]
        [System.Object]
        $LocationPolicy,

        [Parameter()]
        [System.Object]
        $NetworkRoamingPolicy,

        [Parameter()]
        [System.Object]
        $EmergencyCallingPolicy,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTenantNetworkSubnet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $MaskBits,

        [Parameter()]
        [System.Object]
        $NetworkSiteID,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTenantPublicProvider
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Provider,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTenantTrustedIPAddress
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $MaskBits,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsTenantUpdateTimeWindow
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DayOfMonth,

        [Parameter()]
        [System.Object]
        $DaysOfWeek,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Monthly,

        [Parameter()]
        [System.Object]
        $StartTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Weekly,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $Duration,

        [Parameter()]
        [System.Object]
        $WeeksOfMonth,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Daily,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsUCPhoneConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $VoiceDiffServTag,

        [Parameter()]
        [System.Object]
        $Voice8021p,

        [Parameter()]
        [System.Object]
        $MinPhonePinLength,

        [Parameter()]
        [System.Object]
        $EnforcePhoneLock,

        [Parameter()]
        [System.Object]
        $PhoneLockTimeout,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $LoggingLevel,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $SIPSecurityMode,

        [Parameter()]
        [System.Object]
        $CalendarPollInterval,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $RemoteCallControlTelephonyEnabled,

        [Parameter()]
        [System.Object]
        $SipAddress,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $ExchangeArchivingPolicy,

        [Parameter()]
        [System.Object]
        $Enabled,

        [Parameter()]
        [System.Object]
        $LineServerURI,

        [Parameter()]
        [System.Object]
        $OnPremLineURI,

        [Parameter()]
        [System.Object]
        $AcpInfo,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Object]
        $AudioVideoDisabled,

        [Parameter()]
        [System.Object]
        $PrivateLine,

        [Parameter()]
        [System.Object]
        $HostedVoiceMail,

        [Parameter()]
        [System.Object]
        $EnterpriseVoiceEnabled,

        [Parameter()]
        [System.Object]
        $LineURI,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsUserAcp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Object]
        $TollFreeNumbers,

        [Parameter()]
        [System.Object]
        $ParticipantPasscode,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Url,

        [Parameter()]
        [System.Object]
        $TollNumber,

        [Parameter()]
        [System.Object]
        $Domain,

        [Parameter()]
        [System.Object]
        $IsDefault,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsUserPstnSettings
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $AllowInternationalCalls,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $HybridPSTNSite,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsUserServicesPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $MigrationDelayInDays,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $EnableAwaySinceIndication,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $UcsAllowed,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsVideoInteropServiceProvider
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TenantKey,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $AadApplicationIds,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $InstructionUri,

        [Parameter()]
        [System.Object]
        $AllowAppGuestJoinsAsAuthenticated,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Set-CsVoiceNormalizationRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $Priority,

        [Parameter()]
        [System.Object]
        $Pattern,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Translation,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $IsInternalExtension,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Start-CsExMeetingMigration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TargetMeetingType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CleanupSipDisabled,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $SourceMeetingType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Switch-CsOnlineApplicationEndpoint
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ObjectId,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Sync-CsOnlineApplicationInstance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $CallbackUri,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $ObjectId,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Test-CsEffectiveTenantDialPlan
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $EffectiveTenantDialPlanName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $DialedNumber,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $TenantScopeOnly,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Test-CsInboundBlockedNumberPattern
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $TenantId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $FQDN,

        [Parameter()]
        [System.Object]
        $PhoneNumber,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Test-CsOnlineCarrierPortabilityIn
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $TelephoneNumbers,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Test-CsOnlineLisCivicAddress
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $PostalCode,

        [Parameter()]
        [System.Object]
        $Description,

        [Parameter()]
        [System.Object]
        $CountryOrRegion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $PostDirectional,

        [Parameter()]
        [System.Object]
        $StreetSuffix,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $StreetName,

        [Parameter()]
        [System.Object]
        $City,

        [Parameter()]
        [System.Object]
        $CivicAddressId,

        [Parameter()]
        [System.Object]
        $CompanyTaxId,

        [Parameter()]
        [System.Object]
        $StateOrProvince,

        [Parameter()]
        [System.Object]
        $HouseNumberSuffix,

        [Parameter()]
        [System.Object]
        $HouseNumber,

        [Parameter()]
        [System.Object]
        $CompanyName,

        [Parameter()]
        [System.Object]
        $PreDirectional,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Test-CsOnlinePortabilityIn
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Object]
        $TelephoneNumberRanges,

        [Parameter()]
        [System.Object]
        $TelephoneNumbers,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Test-CsVoiceNormalizationRule
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $DialedNumber,

        [Parameter()]
        [System.Object]
        $NormalizationRule,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Unregister-CsHybridPSTNAppliance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Unregister-CsOnlineDialInConferencingServiceNumber
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $BridgeName,

        [Parameter()]
        [System.Object]
        $TenantDomain,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveDefaultServiceNumber,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $BridgeId,

        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Object]
        $Instance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Update-CsAutoAttendant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Object]
        $Identity,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Object]
        $DomainController,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
function Update-CsTenantMeetingUrl
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Object]
        $Tenant,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJob
    )
}
#endregion
