#region AzureAD
function Add-AzureADAdministrativeUnitMember
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Add-AzureADApplicationOwner
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Add-AzureADApplicationPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Add-AzureADDeviceRegisteredOwner
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Add-AzureADDeviceRegisteredUser
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Add-AzureADDirectoryRoleMember
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Add-AzureADGroupMember
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Add-AzureADGroupOwner
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Add-AzureADMSApplicationOwner
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Add-AzureADMSFeatureRolloutPolicyDirectoryObject
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Add-AzureADMSLifecyclePolicyGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Id}
    )
}
function Add-AzureADMSPrivilegedResource
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ProviderId}
    )
}
function Add-AzureADMSServicePrincipalDelegatedPermissionClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ServicePrincipalId}
    )
}
function Add-AzureADScopedRoleMembership
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.String]
        ${AdministrativeUnitObjectId},

        [Parameter()]
        [System.String]
        ${RoleObjectId},

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.RoleMemberInfo]
        ${RoleMemberInfo}
    )
}
function Add-AzureADServicePrincipalOwner
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Add-AzureADServicePrincipalPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Close-AzureADMSPrivilegedRoleAssignmentRequest
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ProviderId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Confirm-AzureADDomain
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Name},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.AzureAD.Model.CrossCloudVerificationCodeBody]
    ${CrossCloudVerificationCode})

}
function Connect-AzureAD
{
    [CmdletBinding(DefaultParameterSetName='UserCredential', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [ValidateNotNullOrEmpty()]
    [Microsoft.Open.Azure.AD.CommonLibrary.AzureEnvironment+EnvironmentName]
    ${AzureEnvironmentName},

    [Parameter(ParameterSetName='UserCredential')]
    [Parameter(ParameterSetName='ServicePrincipalCertificate', Mandatory=$true)]
    [Parameter(ParameterSetName='AccessToken')]
    [Alias('Domain','TenantDomain')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TenantId},

    [Parameter(ParameterSetName='UserCredential')]
    [pscredential]
    ${Credential},

    [Parameter(ParameterSetName='ServicePrincipalCertificate', Mandatory=$true)]
    [string]
    ${CertificateThumbprint},

    [Parameter(ParameterSetName='ServicePrincipalCertificate', Mandatory=$true)]
    [string]
    ${ApplicationId},

    [Parameter(ParameterSetName='AccessToken', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${AadAccessToken},

    [Parameter(ParameterSetName='AccessToken')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${MsAccessToken},

    [Parameter(ParameterSetName='AccessToken', Mandatory=$true)]
    [Parameter(ParameterSetName='UserCredential')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${AccountId},

    [Microsoft.Open.Azure.AD.CommonLibrary.LogLevel]
    ${LogLevel},

    [string]
    ${LogFilePath})

}
function Disconnect-AzureAD
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param()

}
function Enable-AzureADDirectoryRole
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${RoleTemplateId}
    )
}
function Get-AzureADAdministrativeUnit
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADAdministrativeUnitMember
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADApplication
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADApplicationExtensionProperty
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADApplicationKeyCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADApplicationLogo
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FilePath},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FileName},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [bool]
    ${View})

}
function Get-AzureADApplicationOwner
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADApplicationPasswordCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADApplicationPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADApplicationProxyApplication
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADApplicationProxyApplicationConnectorGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADApplicationProxyConnector
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADApplicationProxyConnectorGroup
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADApplicationProxyConnectorGroupMembers
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADApplicationProxyConnectorMemberOf
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADApplicationServiceEndpoint
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADApplicationSignInDetailedSummary
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADApplicationSignInSummary
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Days},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADAuditDirectoryLogs
{
    [CmdletBinding()]
param(
    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADAuditSignInLogs
{
    [CmdletBinding()]
param(
    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADContact
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADContactDirectReport
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADContactManager
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADContactMembership
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADContactThumbnailPhoto
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FilePath},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FileName},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [bool]
    ${View})

}
function Get-AzureADContract
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADCurrentSessionInfo
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param()

}
function Get-AzureADDeletedApplication
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADDevice
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADDeviceConfiguration
{
    [CmdletBinding()]
param()

}
function Get-AzureADDeviceRegisteredOwner
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADDeviceRegisteredUser
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADDirectoryRole
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADDirectoryRoleMember
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADDirectoryRoleTemplate
{
    [CmdletBinding()]
param()

}
function Get-AzureADDirectorySetting
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADDirectorySettingTemplate
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADDomain
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Name})

}
function Get-AzureADDomainNameReference
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Name})

}
function Get-AzureADDomainServiceConfigurationRecord
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Name})

}
function Get-AzureADDomainVerificationDnsRecord
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Name})

}
function Get-AzureADExtensionProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsSyncedFromOnPremises}
    )
}
function Get-AzureADExternalDomainFederation
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ExternalDomainName},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADGroup
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADGroupAppRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADGroupMember
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADGroupOwner
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADMSApplication
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSApplicationExtensionProperty
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADMSApplicationOwner
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADMSApplicationTemplate
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADMSAuthorizationPolicy
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADMSDeletedDirectoryObject
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADMSDeletedGroup
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSFeatureRolloutPolicy
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSGroup
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='GetById', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Select},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSGroupLifecyclePolicy
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADMSIdentityProvider
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADMSLifecyclePolicyGroup
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADMSPasswordSingleSignOnCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.MSGraph.Model.PasswordSSOObjectId]
    ${PasswordSSOObjectId})

}
function Get-AzureADMSPermissionGrantPolicy
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADMSPrivilegedResource
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ProviderId},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSPrivilegedRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ProviderId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ResourceId},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSPrivilegedRoleAssignmentRequest
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ProviderId},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSPrivilegedRoleDefinition
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ProviderId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ResourceId},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSPrivilegedRoleSetting
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ProviderId},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSRoleDefinition
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSServicePrincipalDelegatedPermissionClassification
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ServicePrincipalId},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSTrustFrameworkPolicy
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ParameterSetName='GetById', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${OutputFilePath})

}
function Get-AzureADOAuth2PermissionGrant
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADObjectByObjectId
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${ObjectIds},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${Types}
    )
}
function Get-AzureADObjectSetting
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${TargetType},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${TargetObjectId},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADPolicy
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADPolicyAppliedObject
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADPrivilegedRole
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADPrivilegedRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADScopedRoleMembership
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ScopedRoleMembershipId})

}
function Get-AzureADServiceAppRoleAssignedTo
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADServiceAppRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADServicePrincipal
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADServicePrincipalCreatedObject
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADServicePrincipalKeyCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADServicePrincipalMembership
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADServicePrincipalOAuth2PermissionGrant
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADServicePrincipalOwnedObject
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADServicePrincipalOwner
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADServicePrincipalPasswordCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADServicePrincipalPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADSubscribedSku
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADTenantDetail
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADTrustedCertificateAuthority
{
    [CmdletBinding()]
param(
    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true, HelpMessage='The ID of the tenant of instance of Azure Active Directory')]
    [string]
    ${TrustedIssuer},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true, HelpMessage='The ID of the tenant of instance of Azure Active Directory')]
    [string]
    ${TrustedIssuerSki})

}
function Get-AzureADUser
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADUserAppRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADUserCreatedObject
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADUserDirectReport
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADUserExtension
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADUserLicenseDetail
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADUserManager
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADUserMembership
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADUserOAuth2PermissionGrant
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADUserOwnedDevice
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADUserOwnedObject
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADUserRegisteredDevice
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADUserThumbnailPhoto
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FilePath},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FileName},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [bool]
    ${View})

}
function Get-CrossCloudVerificationCode
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Name})

}
function New-AzureADAdministrativeUnit
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Description},

        [Parameter()]
        [System.String]
        ${DisplayName}
    )
}
function New-AzureADApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.AddIn]]
        ${AddIns},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AllowGuestsSignIn},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AllowPassthroughUsers},

        [Parameter()]
        [System.String]
        ${AppLogoUrl},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.AppRole]]
        ${AppRoles},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AvailableToOtherTenants},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.String]
        ${ErrorUrl},

        [Parameter()]
        [System.String]
        ${GroupMembershipClaims},

        [Parameter()]
        [System.String]
        ${Homepage},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${IdentifierUris},

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.InformationalUrl]
        ${InformationalUrls},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsDeviceOnlyAuthSupported},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsDisabled},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.KeyCredential]]
        ${KeyCredentials},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${KnownClientApplications},

        [Parameter()]
        [System.String]
        ${LogoutUrl},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${Oauth2AllowImplicitFlow},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${Oauth2AllowUrlPathMatching},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.OAuth2Permission]]
        ${Oauth2Permissions},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${Oauth2RequirePostResponse},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${OrgRestrictions},

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.OptionalClaims]
        ${OptionalClaims},

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.ParentalControlSettings]
        ${ParentalControlSettings},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.PasswordCredential]]
        ${PasswordCredentials},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.PreAuthorizedApplication]]
        ${PreAuthorizedApplications},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${PublicClient},

        [Parameter()]
        [System.String]
        ${PublisherDomain},

        [Parameter()]
        [System.String]
        ${RecordConsentConditions},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${ReplyUrls},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.RequiredResourceAccess]]
        ${RequiredResourceAccess},

        [Parameter()]
        [System.String]
        ${SamlMetadataUrl},

        [Parameter()]
        [System.String]
        ${SignInAudience},

        [Parameter()]
        [System.String]
        ${WwwHomepage}
    )
}
function New-AzureADApplicationExtensionProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.String]
        ${Name},

        [Parameter()]
        [System.String]
        ${DataType},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${TargetObjects}
    )
}
function New-AzureADApplicationKeyCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${CustomKeyIdentifier},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[datetime]]
    ${StartDate},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[datetime]]
    ${EndDate},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[Microsoft.Open.AzureAD.Graph.PowerShell.Custom.KeyType]]
    ${Type},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[Microsoft.Open.AzureAD.Graph.PowerShell.Custom.KeyUsage]]
    ${Usage},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Value})

}
function New-AzureADApplicationPasswordCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${CustomKeyIdentifier},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[datetime]]
    ${StartDate},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[datetime]]
    ${EndDate},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Value})

}
function New-AzureADApplicationProxyApplication
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${DisplayName},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ExternalUrl},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${InternalUrl},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[Microsoft.Open.MSGraph.Model.ApplicationProxyApplicationObject+ExternalAuthenticationTypeEnum]]
    ${ExternalAuthenticationType},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${IsTranslateHostHeaderEnabled},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${IsTranslateLinksInBodyEnabled},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[Microsoft.Open.MSGraph.Model.ApplicationProxyApplicationObject+ApplicationServerTimeoutEnum]]
    ${ApplicationServerTimeout},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorGroupId})

}
function New-AzureADApplicationProxyConnectorGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.MSGraph.Model.Name]
    ${Name})

}
function New-AzureADDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AccountEnabled},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.AlternativeSecurityId]]
        ${AlternativeSecurityIds},

        [Parameter()]
        [System.Nullable`1[System.DateTime]]
        ${ApproximateLastLogonTimeStamp},

        [Parameter()]
        [System.String]
        ${DeviceId},

        [Parameter()]
        [System.String]
        ${DeviceMetadata},

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        ${DeviceObjectVersion},

        [Parameter()]
        [System.String]
        ${DeviceOSType},

        [Parameter()]
        [System.String]
        ${DeviceOSVersion},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${DevicePhysicalIds},

        [Parameter()]
        [System.String]
        ${DeviceTrustType},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsCompliant},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsManaged},

        [Parameter()]
        [System.String]
        ${ProfileType},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${SystemLabels}
    )
}
function New-AzureADDirectorySetting
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.MSGraph.Model.DirectorySetting]
    ${DirectorySetting})

}
function New-AzureADDomain
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsDefault},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsDefaultForCloudRedirections},

        [Parameter()]
        [System.String]
        ${Name},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${SupportedServices}
    )
}
function New-AzureADExternalDomainFederation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ExternalDomainName},

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.DomainFederationSettings]
        ${FederationSettings}
    )
}
function New-AzureADGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Description},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${MailEnabled},

        [Parameter()]
        [System.String]
        ${MailNickName},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${SecurityEnabled}
    )
}
function New-AzureADGroupAppRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.String]
        ${Id},

        [Parameter()]
        [System.String]
        ${PrincipalId},

        [Parameter()]
        [System.String]
        ${ResourceId}
    )
}
function New-AzureADMSApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AddIn]]
        ${AddIns},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.ApiApplication]
        ${Api},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AppRole]]
        ${AppRoles},

        [Parameter()]
        [System.String]
        ${GroupMembershipClaims},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsDeviceOnlyAuthSupported},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsFallbackPublicClient},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${IdentifierUris},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.InformationalUrl]
        ${InformationalUrl},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.KeyCredential]]
        ${KeyCredentials},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.OptionalClaims]
        ${OptionalClaims},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${OrgRestrictions},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.ParentalControlSettings]
        ${ParentalControlSettings},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PasswordCredential]]
        ${PasswordCredentials},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PreAuthorizedApplication]]
        ${PreAuthorizedApplications},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.PublicClientApplication]
        ${PublicClient},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.RequiredResourceAccess]]
        ${RequiredResourceAccess},

        [Parameter()]
        [System.String]
        ${SignInAudience},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${Tags},

        [Parameter()]
        [System.String]
        ${TokenEncryptionKeyId},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.WebApplication]
        ${Web}
    )
}
function New-AzureADMSApplicationExtensionProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.String]
        ${Name},

        [Parameter()]
        [System.String]
        ${DataType},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${TargetObjects}
    )
}
function New-AzureADMSApplicationKey
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.KeyCredential]
        ${KeyCredential},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.PasswordCredential]
        ${PasswordCredential},

        [Parameter()]
        [System.String]
        ${Proof}
    )
}
function New-AzureADMSApplicationPassword
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.PasswordCredential]
        ${PasswordCredential}
    )
}
function New-AzureADMSFeatureRolloutPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[Microsoft.Open.MSGraph.Model.MsFeatureRolloutPolicy+FeatureEnum]]
        ${Feature},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.String]
        ${Description},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsEnabled},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsAppliedToOrganization},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.MsDirectoryObject]]
        ${AppliesTo}
    )
}
function New-AzureADMSGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${LabelId}
    )
}
function New-AzureADMSGroupLifecyclePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        ${GroupLifetimeInDays},

        [Parameter()]
        [System.String]
        ${ManagedGroupTypes},

        [Parameter()]
        [System.String]
        ${AlternateNotificationEmails}
    )
}
function New-AzureADMSIdentityProvider
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Type},

        [Parameter()]
        [System.String]
        ${Name},

        [Parameter()]
        [System.String]
        ${ClientId},

        [Parameter()]
        [System.String]
        ${ClientSecret}
    )
}
function New-AzureADMSInvitation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${InvitedUserDisplayName},

        [Parameter()]
        [System.String]
        ${InvitedUserEmailAddress},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${SendInvitationMessage},

        [Parameter()]
        [System.String]
        ${InviteRedirectUrl},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.User]
        ${InvitedUser},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.InvitedUserMessageInfo]
        ${InvitedUserMessageInfo},

        [Parameter()]
        [System.String]
        ${InvitedUserType},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${ResetRedemption}
    )
}
function New-AzureADMSPasswordSingleSignOnCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.MSGraph.Model.PasswordSSOCredentials]
    ${PasswordSSOCredential})

}
function New-AzureADMSPermissionGrantPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Description},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PermissionGrantConditionSet]]
        ${Excludes},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PermissionGrantConditionSet]]
        ${Includes},

        [Parameter()]
        [System.String]
        ${Id}
    )
}
function New-AzureADMSRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${RoleDefinitionId},

        [Parameter()]
        [System.String]
        ${PrincipalId},

        [Parameter()]
        [System.String]
        ${ResourceScope}
    )
}
function New-AzureADMSRoleDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Description},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${ResourceScopes},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsEnabled},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.RolePermission]]
        ${RolePermissions},

        [Parameter()]
        [System.String]
        ${TemplateId},

        [Parameter()]
        [System.String]
        ${Version}
    )
}
function New-AzureADMSTrustFrameworkPolicy
{
    [CmdletBinding(DefaultParameterSetName='Content')]
param(
    [Parameter(ParameterSetName='File', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${InputFilePath},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Content')]
    [Parameter(ParameterSetName='File')]
    [string]
    ${OutputFilePath},

    [Parameter(ParameterSetName='Content', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Content})

}
function New-AzureADObjectSetting
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${TargetType},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${TargetObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.MSGraph.Model.DirectorySetting]
    ${DirectorySetting})

}
function New-AzureADPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${AlternativeIdentifier},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${Definition},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsOrganizationDefault},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.KeyCredential]]
        ${KeyCredentials},

        [Parameter()]
        [System.String]
        ${Type}
    )
}
function New-AzureADPrivilegedRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.DateTime]]
        ${ExpirationDateTime},

        [Parameter()]
        [System.String]
        ${Id},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsElevated},

        [Parameter()]
        [System.String]
        ${ResultMessage},

        [Parameter()]
        [System.String]
        ${RoleId},

        [Parameter()]
        [System.String]
        ${UserId}
    )
}
function New-AzureADServiceAppRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.String]
        ${Id},

        [Parameter()]
        [System.String]
        ${PrincipalId},

        [Parameter()]
        [System.String]
        ${ResourceId}
    )
}
function New-AzureADServicePrincipal
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${AccountEnabled},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${AlternativeNames},

        [Parameter()]
        [System.String]
        ${AppId},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AppRoleAssignmentRequired},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.String]
        ${ErrorUrl},

        [Parameter()]
        [System.String]
        ${Homepage},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.KeyCredential]]
        ${KeyCredentials},

        [Parameter()]
        [System.String]
        ${LogoutUrl},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.PasswordCredential]]
        ${PasswordCredentials},

        [Parameter()]
        [System.String]
        ${PublisherName},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${ReplyUrls},

        [Parameter()]
        [System.String]
        ${SamlMetadataUrl},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${ServicePrincipalNames},

        [Parameter()]
        [System.String]
        ${ServicePrincipalType},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${Tags}
    )
}
function New-AzureADServicePrincipalKeyCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${CustomKeyIdentifier},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[datetime]]
    ${StartDate},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[datetime]]
    ${EndDate},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[Microsoft.Open.AzureAD.Graph.PowerShell.Custom.KeyType]]
    ${Type},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[Microsoft.Open.AzureAD.Graph.PowerShell.Custom.KeyUsage]]
    ${Usage},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Value})

}
function New-AzureADServicePrincipalPasswordCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${CustomKeyIdentifier},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[datetime]]
    ${StartDate},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[datetime]]
    ${EndDate},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Value})

}
function New-AzureADTrustedCertificateAuthority
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true, HelpMessage='Trusted certificate authority list')]
    [Microsoft.Open.AzureAD.Model.CertificateAuthorityInformation]
    ${CertificateAuthorityInformation})

}
function New-AzureADUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.Dictionary`2[System.String,System.String]]
        ${ExtensionProperty},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AccountEnabled},

        [Parameter()]
        [System.String]
        ${AgeGroup},

        [Parameter()]
        [System.String]
        ${City},

        [Parameter()]
        [System.String]
        ${CompanyName},

        [Parameter()]
        [System.String]
        ${ConsentProvidedForMinor},

        [Parameter()]
        [System.String]
        ${Country},

        [Parameter()]
        [System.String]
        ${CreationType},

        [Parameter()]
        [System.String]
        ${Department},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.String]
        ${FacsimileTelephoneNumber},

        [Parameter()]
        [System.String]
        ${GivenName},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsCompromised},

        [Parameter()]
        [System.String]
        ${ImmutableId},

        [Parameter()]
        [System.String]
        ${JobTitle},

        [Parameter()]
        [System.String]
        ${MailNickName},

        [Parameter()]
        [System.String]
        ${Mobile},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${OtherMails},

        [Parameter()]
        [System.String]
        ${PasswordPolicies},

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.PasswordProfile]
        ${PasswordProfile},

        [Parameter()]
        [System.String]
        ${PhysicalDeliveryOfficeName},

        [Parameter()]
        [System.String]
        ${PostalCode},

        [Parameter()]
        [System.String]
        ${PreferredLanguage},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${ShowInAddressList},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.SignInName]]
        ${SignInNames},

        [Parameter()]
        [System.String]
        ${State},

        [Parameter()]
        [System.String]
        ${StreetAddress},

        [Parameter()]
        [System.String]
        ${Surname},

        [Parameter()]
        [System.String]
        ${TelephoneNumber},

        [Parameter()]
        [System.String]
        ${UsageLocation},

        [Parameter()]
        [System.String]
        ${UserPrincipalName},

        [Parameter()]
        [System.String]
        ${UserState},

        [Parameter()]
        [System.String]
        ${UserStateChangedOn},

        [Parameter()]
        [System.String]
        ${UserType}
    )
}
function New-AzureADUserAppRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.String]
        ${Id},

        [Parameter()]
        [System.String]
        ${PrincipalId},

        [Parameter()]
        [System.String]
        ${ResourceId}
    )
}
function Open-AzureADMSPrivilegedRoleAssignmentRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ProviderId}
    )
}
function Remove-AzureADAdministrativeUnit
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADAdministrativeUnitMember
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${MemberId})

}
function Remove-AzureADApplication
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADApplicationExtensionProperty
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ExtensionPropertyId})

}
function Remove-AzureADApplicationKeyCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${KeyId})

}
function Remove-AzureADApplicationOwner
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${OwnerId})

}
function Remove-AzureADApplicationPasswordCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${KeyId})

}
function Remove-AzureADApplicationPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${PolicyId})

}
function Remove-AzureADApplicationProxyApplication
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${RemoveADApplication})

}
function Remove-AzureADApplicationProxyApplicationConnectorGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADApplicationProxyConnectorGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADContact
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADContactManager
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADDeletedApplication
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADDevice
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADDeviceRegisteredOwner
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${OwnerId})

}
function Remove-AzureADDeviceRegisteredUser
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${UserId})

}
function Remove-AzureADDirectoryRoleMember
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${MemberId})

}
function Remove-AzureADDirectorySetting
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADDomain
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Name})

}
function Remove-AzureADExternalDomainFederation
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ExternalDomainName})

}
function Remove-AzureADGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADGroupAppRoleAssignment
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppRoleAssignmentId})

}
function Remove-AzureADGroupMember
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${MemberId})

}
function Remove-AzureADGroupOwner
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${OwnerId})

}
function Remove-AzureADMSApplication
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADMSApplicationExtensionProperty
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ExtensionPropertyId})

}
function Remove-AzureADMSApplicationKey
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.String]
        ${KeyId},

        [Parameter()]
        [System.String]
        ${Proof}
    )
}
function Remove-AzureADMSApplicationOwner
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${OwnerId})

}
function Remove-AzureADMSApplicationPassword
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.String]
        ${KeyId}
    )
}
function Remove-AzureADMSDeletedDirectoryObject
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADMSFeatureRolloutPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADMSFeatureRolloutPolicyDirectoryObject
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADMSGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADMSGroupLifecyclePolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADMSIdentityProvider
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADMSLifecyclePolicyGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Id}
    )
}
function Remove-AzureADMSPasswordSingleSignOnCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.MSGraph.Model.PasswordSSOObjectId]
    ${PasswordSSOObjectId})

}
function Remove-AzureADMSPermissionGrantPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADMSRoleAssignment
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADMSRoleDefinition
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADMSServicePrincipalDelegatedPermissionClassification
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ServicePrincipalId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADMSTrustFrameworkPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADOAuth2PermissionGrant
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADObjectSetting
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${TargetType},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${TargetObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADScopedRoleMembership
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ScopedRoleMembershipId})

}
function Remove-AzureADServiceAppRoleAssignment
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppRoleAssignmentId})

}
function Remove-AzureADServicePrincipal
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADServicePrincipalKeyCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${KeyId})

}
function Remove-AzureADServicePrincipalOwner
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${OwnerId})

}
function Remove-AzureADServicePrincipalPasswordCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${KeyId})

}
function Remove-AzureADServicePrincipalPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${PolicyId})

}
function Remove-AzureADTrustedCertificateAuthority
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true, HelpMessage='The unique identifier of the object specific Azure Active Directory object')]
    [Microsoft.Open.AzureAD.Model.CertificateAuthorityInformation]
    ${CertificateAuthorityInformation})

}
function Remove-AzureADUser
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADUserAppRoleAssignment
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppRoleAssignmentId})

}
function Remove-AzureADUserExtension
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='SetSingle', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='SetMultiple', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ParameterSetName='SetSingle', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ExtensionName},

    [Parameter(ParameterSetName='SetMultiple', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Collections.Generic.List[string]]
    ${ExtensionNames})

}
function Remove-AzureADUserManager
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Reset-AzureADMSLifeCycleGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${GroupId}
    )
}
function Restore-AzureADDeletedApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${IdentifierUris}
    )
}
function Restore-AzureADMSDeletedDirectoryObject
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Revoke-AzureADSignedInUserAllRefreshToken
{
    [CmdletBinding()]
param()

}
function Revoke-AzureADUserAllRefreshToken
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Select-AzureADGroupIdsContactIsMemberOf
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.AzureAD.Model.GroupIdsForMembershipCheck]
    ${GroupIdsForMembershipCheck})

}
function Select-AzureADGroupIdsGroupIsMemberOf
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.AzureAD.Model.GroupIdsForMembershipCheck]
    ${GroupIdsForMembershipCheck})

}
function Select-AzureADGroupIdsServicePrincipalIsMemberOf
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.AzureAD.Model.GroupIdsForMembershipCheck]
    ${GroupIdsForMembershipCheck})

}
function Select-AzureADGroupIdsUserIsMemberOf
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.AzureAD.Model.GroupIdsForMembershipCheck]
    ${GroupIdsForMembershipCheck})

}
function Set-AzureADAdministrativeUnit
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.String]
        ${Description},

        [Parameter()]
        [System.String]
        ${DisplayName}
    )
}
function Set-AzureADApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.AddIn]]
        ${AddIns},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AllowGuestsSignIn},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AllowPassthroughUsers},

        [Parameter()]
        [System.String]
        ${AppLogoUrl},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.AppRole]]
        ${AppRoles},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AvailableToOtherTenants},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.String]
        ${ErrorUrl},

        [Parameter()]
        [System.String]
        ${GroupMembershipClaims},

        [Parameter()]
        [System.String]
        ${Homepage},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${IdentifierUris},

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.InformationalUrl]
        ${InformationalUrls},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsDeviceOnlyAuthSupported},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsDisabled},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.KeyCredential]]
        ${KeyCredentials},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${KnownClientApplications},

        [Parameter()]
        [System.String]
        ${LogoutUrl},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${Oauth2AllowImplicitFlow},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${Oauth2AllowUrlPathMatching},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.OAuth2Permission]]
        ${Oauth2Permissions},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${Oauth2RequirePostResponse},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${OrgRestrictions},

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.OptionalClaims]
        ${OptionalClaims},

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.ParentalControlSettings]
        ${ParentalControlSettings},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.PasswordCredential]]
        ${PasswordCredentials},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.PreAuthorizedApplication]]
        ${PreAuthorizedApplications},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${PublicClient},

        [Parameter()]
        [System.String]
        ${PublisherDomain},

        [Parameter()]
        [System.String]
        ${RecordConsentConditions},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${ReplyUrls},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.RequiredResourceAccess]]
        ${RequiredResourceAccess},

        [Parameter()]
        [System.String]
        ${SamlMetadataUrl},

        [Parameter()]
        [System.String]
        ${SignInAudience},

        [Parameter()]
        [System.String]
        ${WwwHomepage}
    )
}
function Set-AzureADApplicationLogo
{
    [CmdletBinding(DefaultParameterSetName='File')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Stream')]
    [Parameter(ParameterSetName='File')]
    [Parameter(ParameterSetName='ByteArray')]
    [string]
    ${ObjectId},

    [Parameter(ParameterSetName='Stream', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.IO.Stream]
    ${FileStream},

    [Parameter(ParameterSetName='File', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FilePath},

    [Parameter(ParameterSetName='ByteArray', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [byte[]]
    ${ImageByteArray})

}
function Set-AzureADApplicationProxyApplication
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ExternalUrl},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${InternalUrl},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[Microsoft.Open.MSGraph.Model.ApplicationProxyApplicationObject+ExternalAuthenticationTypeEnum]]
    ${ExternalAuthenticationType},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${IsTranslateHostHeaderEnabled},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${IsTranslateLinksInBodyEnabled},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[Microsoft.Open.MSGraph.Model.ApplicationProxyApplicationObject+ApplicationServerTimeoutEnum]]
    ${ApplicationServerTimeout},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorGroupId})

}
function Set-AzureADApplicationProxyApplicationConnectorGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorGroupId})

}
function Set-AzureADApplicationProxyApplicationCustomDomainCertificate
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${PfxFilePath},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [securestring]
    ${Password})

}
function Set-AzureADApplicationProxyApplicationSingleSignOn
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[Microsoft.Open.MSGraph.Model.OnPremisesPublishingSingleSignOnObject+SingleSignOnModeEnum]]
    ${SingleSignOnMode},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${KerberosInternalApplicationServicePrincipalName},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[Microsoft.Open.MSGraph.Model.OnPremisesPublishingKerberosSignOnSettingsObject+KerberosSignOnMappingAttributeTypeEnum]]
    ${KerberosDelegatedLoginIdentity})

}
function Set-AzureADApplicationProxyConnector
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorGroupId})

}
function Set-AzureADApplicationProxyConnectorGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.MSGraph.Model.Name]
    ${Name})

}
function Set-AzureADDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AccountEnabled},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.AlternativeSecurityId]]
        ${AlternativeSecurityIds},

        [Parameter()]
        [System.Nullable`1[System.DateTime]]
        ${ApproximateLastLogonTimeStamp},

        [Parameter()]
        [System.String]
        ${DeviceId},

        [Parameter()]
        [System.String]
        ${DeviceMetadata},

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        ${DeviceObjectVersion},

        [Parameter()]
        [System.String]
        ${DeviceOSType},

        [Parameter()]
        [System.String]
        ${DeviceOSVersion},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${DevicePhysicalIds},

        [Parameter()]
        [System.String]
        ${DeviceTrustType},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsCompliant},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsManaged},

        [Parameter()]
        [System.String]
        ${ProfileType},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${SystemLabels}
    )
}
function Set-AzureADDirectorySetting
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.MSGraph.Model.DirectorySetting]
    ${DirectorySetting})

}
function Set-AzureADDomain
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Name}
    )
}
function Set-AzureADGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.String]
        ${Description},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${MailEnabled},

        [Parameter()]
        [System.String]
        ${MailNickName},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${SecurityEnabled}
    )
}
function Set-AzureADMSApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AddIn]]
        ${AddIns},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.ApiApplication]
        ${Api},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AppRole]]
        ${AppRoles},

        [Parameter()]
        [System.String]
        ${GroupMembershipClaims},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsDeviceOnlyAuthSupported},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsFallbackPublicClient},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${IdentifierUris},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.InformationalUrl]
        ${InformationalUrl},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.KeyCredential]]
        ${KeyCredentials},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.OptionalClaims]
        ${OptionalClaims},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${OrgRestrictions},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.ParentalControlSettings]
        ${ParentalControlSettings},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PasswordCredential]]
        ${PasswordCredentials},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PreAuthorizedApplication]]
        ${PreAuthorizedApplications},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.PublicClientApplication]
        ${PublicClient},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.RequiredResourceAccess]]
        ${RequiredResourceAccess},

        [Parameter()]
        [System.String]
        ${SignInAudience},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${Tags},

        [Parameter()]
        [System.String]
        ${TokenEncryptionKeyId},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.WebApplication]
        ${Web}
    )
}
function Set-AzureADMSApplicationLogo
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [byte[]]
    ${Content})

}
function Set-AzureADMSAuthorizationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Id}
    )
}
function Set-AzureADMSFeatureRolloutPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Id}
    )
}
function Set-AzureADMSGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Id},

        [Parameter()]
        [System.String]
        ${LabelId}
    )
}
function Set-AzureADMSGroupLifecyclePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Id}
    )
}
function Set-AzureADMSIdentityProvider
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Id}
    )
}
function Set-AzureADMSPasswordSingleSignOnCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.MSGraph.Model.PasswordSSOCredentials]
    ${PasswordSSOCredential})

}
function Set-AzureADMSPermissionGrantPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Id}
    )
}
function Set-AzureADMSPrivilegedRoleAssignmentRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ProviderId},

        [Parameter()]
        [System.String]
        ${Id}
    )
}
function Set-AzureADMSPrivilegedRoleSetting
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ProviderId},

        [Parameter()]
        [System.String]
        ${Id}
    )
}
function Set-AzureADMSRoleDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Id}
    )
}
function Set-AzureADMSTrustFrameworkPolicy
{
    [CmdletBinding(DefaultParameterSetName='Content')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Content')]
    [Parameter(ParameterSetName='File')]
    [string]
    ${Id},

    [Parameter(ParameterSetName='File', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${InputFilePath},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Content')]
    [Parameter(ParameterSetName='File')]
    [string]
    ${OutputFilePath},

    [Parameter(ParameterSetName='Content', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Content})

}
function Set-AzureADObjectSetting
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${TargetType},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${TargetObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.MSGraph.Model.DirectorySetting]
    ${DirectorySetting})

}
function Set-AzureADPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Id}
    )
}
function Set-AzureADServicePrincipal
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.String]
        ${AccountEnabled},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${AlternativeNames},

        [Parameter()]
        [System.String]
        ${AppId},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AppRoleAssignmentRequired},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.String]
        ${ErrorUrl},

        [Parameter()]
        [System.String]
        ${Homepage},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.KeyCredential]]
        ${KeyCredentials},

        [Parameter()]
        [System.String]
        ${LogoutUrl},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.PasswordCredential]]
        ${PasswordCredentials},

        [Parameter()]
        [System.String]
        ${PublisherName},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${ReplyUrls},

        [Parameter()]
        [System.String]
        ${SamlMetadataUrl},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${ServicePrincipalNames},

        [Parameter()]
        [System.String]
        ${ServicePrincipalType},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${Tags}
    )
}
function Set-AzureADTenantDetail
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${MarketingNotificationEmails},

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.PrivacyProfile]
        ${PrivacyProfile},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${SecurityComplianceNotificationMails},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${SecurityComplianceNotificationPhones},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${TechnicalNotificationMails}
    )
}
function Set-AzureADTrustedCertificateAuthority
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true, HelpMessage='Trusted certificate authority list')]
    [Microsoft.Open.AzureAD.Model.CertificateAuthorityInformation]
    ${CertificateAuthorityInformation})

}
function Set-AzureADUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.Collections.Generic.Dictionary`2[System.String,System.String]]
        ${ExtensionProperty},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AccountEnabled},

        [Parameter()]
        [System.String]
        ${AgeGroup},

        [Parameter()]
        [System.String]
        ${City},

        [Parameter()]
        [System.String]
        ${CompanyName},

        [Parameter()]
        [System.String]
        ${ConsentProvidedForMinor},

        [Parameter()]
        [System.String]
        ${Country},

        [Parameter()]
        [System.String]
        ${CreationType},

        [Parameter()]
        [System.String]
        ${Department},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.String]
        ${FacsimileTelephoneNumber},

        [Parameter()]
        [System.String]
        ${GivenName},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsCompromised},

        [Parameter()]
        [System.String]
        ${ImmutableId},

        [Parameter()]
        [System.String]
        ${JobTitle},

        [Parameter()]
        [System.String]
        ${MailNickName},

        [Parameter()]
        [System.String]
        ${Mobile},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${OtherMails},

        [Parameter()]
        [System.String]
        ${PasswordPolicies},

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.PasswordProfile]
        ${PasswordProfile},

        [Parameter()]
        [System.String]
        ${PhysicalDeliveryOfficeName},

        [Parameter()]
        [System.String]
        ${PostalCode},

        [Parameter()]
        [System.String]
        ${PreferredLanguage},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${ShowInAddressList},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.SignInName]]
        ${SignInNames},

        [Parameter()]
        [System.String]
        ${State},

        [Parameter()]
        [System.String]
        ${StreetAddress},

        [Parameter()]
        [System.String]
        ${Surname},

        [Parameter()]
        [System.String]
        ${TelephoneNumber},

        [Parameter()]
        [System.String]
        ${UsageLocation},

        [Parameter()]
        [System.String]
        ${UserPrincipalName},

        [Parameter()]
        [System.String]
        ${UserState},

        [Parameter()]
        [System.String]
        ${UserStateChangedOn},

        [Parameter()]
        [System.String]
        ${UserType}
    )
}
function Set-AzureADUserExtension
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='SetSingle', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='SetMultiple', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ParameterSetName='SetSingle', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ExtensionName},

    [Parameter(ParameterSetName='SetSingle', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ExtensionValue},

    [Parameter(ParameterSetName='SetMultiple', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Collections.Generic.Dictionary[string,string]]
    ${ExtensionNameValues})

}
function Set-AzureADUserLicense
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.AzureAD.Model.AssignedLicenses]
    ${AssignedLicenses})

}
function Set-AzureADUserManager
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Set-AzureADUserPassword
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [securestring]
    ${Password},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [bool]
    ${ForceChangePasswordNextLogin},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [bool]
    ${EnforceChangePasswordPolicy})

}
function Set-AzureADUserThumbnailPhoto
{
    [CmdletBinding(DefaultParameterSetName='File')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Stream')]
    [Parameter(ParameterSetName='File')]
    [Parameter(ParameterSetName='ByteArray')]
    [string]
    ${ObjectId},

    [Parameter(ParameterSetName='Stream', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.IO.Stream]
    ${FileStream},

    [Parameter(ParameterSetName='File', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FilePath},

    [Parameter(ParameterSetName='ByteArray', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [byte[]]
    ${ImageByteArray})

}
function Update-AzureADSignedInUserPassword
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [securestring]
    ${CurrentPassword},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [securestring]
    ${NewPassword})

}
#endregion
#region ExchangeOnline
function Add-AvailabilityAddressSpace
{

param(
    [System.Object]
    ${Credentials},

    [System.Object]
    ${ForestName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TargetAutodiscoverEpr},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AccessMethod},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Add-DistributionGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [System.Object]
    ${Member},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Add-MailboxFolderPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AccessRights},

    [System.Object]
    ${SharingPermissionFlags},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SendNotificationToUser},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Add-MailboxLocation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Add-MailboxPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AccessRights},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Deny},

    [System.Object]
    ${AutoMapping},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [System.Object]
    ${Owner},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${InheritanceType},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Add-ManagementRoleEntry
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ParentRoleEntry},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Force},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Parameters},

    [switch]
    ${Overwrite},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Type},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Role},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Add-PublicFolderClientPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AccessRights},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Add-RecipientPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${SkipDomainValidationForMailContact},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AccessRights},

    [System.Object]
    ${Trustee},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${SkipDomainValidationForMailUser},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${SkipDomainValidationForSharedMailbox},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Add-RoleGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [System.Object]
    ${Member},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Add-UnifiedGroupLinks
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${LinkType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Links},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Approve-ElevatedAccessRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('Identity')]
    [System.Object]
    ${RequestId},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RequestContext},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Organization},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Clear-ActiveSyncDevice
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Cancel},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NotificationEmailAddresses},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Clear-MobileDevice
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Cancel},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${AccountOnly},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NotificationEmailAddresses},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Clear-TextMessagingAccount
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Compare-TextMessagingVerificationCode
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${VerificationCode},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Complete-MigrationBatch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${SyncAndComplete},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function ConvertFrom-ExoJobData.ps1
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${InputObject},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Delete-QuarantineMessage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identities},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Deny-ElevatedAccessRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('Identity')]
    [System.Object]
    ${RequestId},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Organization},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-AntiPhishRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-App
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-HostedContentFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-HostedOutboundSpamFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-InboxRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${AlwaysDeleteOutlookRulesBlob},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-JournalArchiving
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${PreserveMailUser},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-JournalRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-Mailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Archive},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${PermanentlyDisable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${IgnoreLegalHold},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-MailPublicFolder
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-MalwareFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-OutlookProtectionRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-SweepRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-TransportRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-UMAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-UMCallAnsweringRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-UMIPGateway
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Immediate},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-UMMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${KeepProperties},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-AntiPhishRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-App
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-HostedContentFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-HostedOutboundSpamFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-InboxRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${AlwaysDeleteOutlookRulesBlob},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-JournalRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-Mailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${RoleAssignmentPolicy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Archive},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AutoExpandingArchive},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ArchiveName},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-MailPublicFolder
{

param(
    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${HiddenFromAddressListsEnabled},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${OverrideRecipientQuotas},

    [switch]
    ${AsJob})

}
function Enable-MalwareFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-OrganizationCustomization
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-OutlookProtectionRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-SweepRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-TransportRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Mode},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-UMAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-UMCallAnsweringRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-UMIPGateway
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-UMMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AutomaticSpeechRecognitionEnabled},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${ValidateOnly},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SendWelcomeMail},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Extensions},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${PinExpired},

    [switch]
    ${EnableCloudVoiceMail},

    [System.Object]
    ${NotifyEmail},

    [System.Object]
    ${Identity},

    [System.Object]
    ${SIPResourceIdentifier},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${UMMailboxPolicy},

    [System.Object]
    ${Pin},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${PilotNumber},

    [switch]
    ${AsJob})

}
function Export-DlpPolicyCollection
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Export-MailboxDiagnosticLogs
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ComponentName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${ExtendedProperties},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [switch]
    ${IncludeInactiveMailboxes},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Export-MigrationReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${StartingRowIndex},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RowCount},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${CsvStream},

    [switch]
    ${AsJob})

}
function Export-QuarantineMessage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identities},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Export-TransportRuleCollection
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Export-UMCallDataRecord
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ClientStream},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${UMIPGateway},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Date},

    [System.Object]
    ${UMDialPlan},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Export-UMPrompt
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UMDialPlan},

    [System.Object]
    ${PromptFileName},

    [System.Object]
    ${UMAutoAttendant},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-AcceptedDomain
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ActiveSyncDevice
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ActiveSyncDeviceAccessRule
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ActiveSyncDeviceClass
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ActiveSyncDeviceStatistics
{

param(
    [switch]
    ${ShowRecoveryPassword},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${GetMailboxLog},

    [System.Object]
    ${Identity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NotificationEmailAddresses},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ActiveSyncMailboxPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ActiveSyncOrganizationSettings
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AddressBookPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AdminAuditLogConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AdministrativeUnit
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-AdvancedThreatProtectionDocumentDetail
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EventType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-AdvancedThreatProtectionDocumentReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EventType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${SummarizeBy},

    [switch]
    ${AsJob})

}
function Get-AntiPhishPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Spoof},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-AntiPhishRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${State},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-App
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${OrganizationApp},

    [switch]
    ${PrivateCatalog},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ApplicationAccessPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ATPEvaluation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${PrintAll},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${OrganizationId},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ATPTotalTrafficReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${SummarizeBy},

    [switch]
    ${AsJob})

}
function Get-AuditConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AuditConfigurationPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AuditConfigurationRule
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AuditLogSearch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Type},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${CreatedAfter},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${CreatedBefore},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-AuthenticationPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AuthServer
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AvailabilityAddressSpace
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AvailabilityConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-BlockedSenderAddress
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SenderAddress},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-CalendarDiagnosticAnalysis
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${GlobalObjectId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${LogLocation},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OutputAs},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DetailLevel},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${CalendarLogs},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CalendarDiagnosticLog
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${Latest},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Subject},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${LogLocation},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ItemClass},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ItemIds},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${MeetingId},

    [System.Object]
    ${EntryId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ExactMatch},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CalendarDiagnosticObjects
{

param(
    [System.Object]
    ${ShouldDecodeEnums},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ShouldFetchAttendeeCollection},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Subject},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ExactMatch},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ItemIds},

    [System.Object]
    ${ShouldBindToItem},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${EwsId},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ShouldFetchRecurrenceExceptions},

    [System.Object]
    ${MeetingId},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ItemClass},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ConfigurationName},

    [System.Object]
    ${EndDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ODataId},

    [System.Object]
    ${CustomPropertyNames},

    [System.Object]
    ${EntryId},

    [switch]
    ${AsJob})

}
function Get-CalendarNotification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CalendarProcessing
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CalendarViewDiagnostics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CalendarId},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${WindowEndUtc},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${ReturnSeriesMasters},

    [switch]
    ${IgnoreCorruptItems},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${WindowStartUtc},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CASMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SortBy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${ReadIsOptimizedForAccessibility},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [switch]
    ${ActiveSyncDebugLogging},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [switch]
    ${ProtocolSettings},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${RecalculateHasActiveSyncDevicePartnership},

    [System.Object]
    ${Filter},

    [switch]
    ${ActiveSyncSuppressReadReceipt},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CASMailboxPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Filter},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ClassificationRuleCollection
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ClientAccessRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-Clutter
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-CompliancePolicyFileSyncNotification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CompliancePolicySyncNotification
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ComplianceTag
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${IncludingLabelState},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ComplianceTagStorage
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ConnectionByClientTypeDetailReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ConnectionByClientTypeReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ConnectSubscription
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${IncludeReport},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AggregationType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-Contact
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RecipientTypeDetails},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Filter},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsActiveUserReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsAVConferenceTimeReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsClientDeviceDetailReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${UserName},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsClientDeviceReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsConferenceReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsP2PAVTimeReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsP2PSessionReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsPSTNConferenceTimeReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsPSTNUsageDetailReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsUserActivitiesReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${UserName},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsUsersBlockedReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CustomizedUserSubmission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${SubmittedBy},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DataClassification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ClassificationRuleCollectionIdentity},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DataClassificationConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DataEncryptionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DataRetentionReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceDetailsReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${DeviceUserName},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DeviceComplianceStatus},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DevicePlatform},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DeviceCompliancePolicy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceDetailsReportFilter
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceCompliancePolicyInventory
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceReportDate
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceSummaryReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${DeviceUserName},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DeviceComplianceStatus},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DevicePlatform},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DeviceCompliancePolicy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceUserInventory
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceUserReport
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceConditionalAccessPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceConditionalAccessRule
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceConfigurationPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceConfigurationRule
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DevicePolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceTenantPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceTenantRule
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DistributionGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SortBy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RecipientTypeDetails},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ManagedBy},

    [System.Object]
    ${Filter},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DistributionGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IncludeSoftDeletedObjects},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Credential},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DkimSigningConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DlpDetailReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Source},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Actor},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${DlpCompliancePolicy},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${EventType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DlpComplianceRule},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DlpDetectionsReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Source},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${DlpCompliancePolicy},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EventType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DlpComplianceRule},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${SummarizeBy},

    [switch]
    ${AsJob})

}
function Get-DlpIncidentDetailReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Source},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Actor},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${DlpCompliancePolicy},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${EventType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DlpComplianceRule},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DlpKeywordDictionary
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DlpPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DlpPolicyTemplate
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DlpSensitiveInformationTypeConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DlpSensitiveInformationTypeRulePackage
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DlpSiDetectionsReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SensitiveType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DynamicDistributionGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SortBy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ManagedBy},

    [System.Object]
    ${Filter},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ElevatedAccessApprovalPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ElevatedAccessAuthorization
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RequestId},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Requestor},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ElevatedAccessRequest
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('Identity')]
    [System.Object]
    ${RequestId},

    [switch]
    ${AsJob})

}
function Get-EligibleDistributionGroupForMigration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ManagedBy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-EmailAddressPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-EvaluationModeReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RecipientDomain},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${EventSubType},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${IsScanAndDrop},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EventType},

    [System.Object]
    ${IsComplexRouted},

    [System.Object]
    ${IsEvaluationMode},

    [System.Object]
    ${ConnectorId},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ProbeTag},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${StartDate},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-FailedContentIndexDocuments
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ErrorCode},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${FailureMode},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Archive},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('mailbox')]
    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-FederatedOrganizationIdentifier
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${IncludeExtendedDomainInfo},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-FederationInformation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TrustedHostnames},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassAdditionalDomainValidation},

    [System.Object]
    ${DomainName},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-FederationTrust
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-FfoMigrationReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Page},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-FocusedInbox
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-Group
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RecipientTypeDetails},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Filter},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-GroupActivityReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-GroupMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${IncludeMailboxUrls},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IncludeMembers},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-HistoricalSearch
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${JobId},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-HostedConnectionFilterPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-HostedContentFilterPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-HostedContentFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${State},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-HostedOutboundSpamFilterPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-HostedOutboundSpamFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${State},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-HotmailSubscription
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${IncludeReport},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AggregationType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-HybridMailflow
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-HybridMailflowDatacenterIPs
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ImapSubscription
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${IncludeReport},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AggregationType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-InboundConnector
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-InboxRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${DescriptionTimeFormat},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${IncludeHidden},

    [switch]
    ${BypassScopeCheck},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DescriptionTimeZone},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-InformationBarrierReportDetails
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Source},

    [System.Object]
    ${Page},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [System.Object]
    ${TargetUsers},

    [System.Object]
    ${InformationBarrierPolicy},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${InitiatingUser},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-InformationBarrierReportSummary
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Source},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${TargetUsers},

    [System.Object]
    ${InformationBarrierPolicy},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${InitiatingUser},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-IntraOrganizationConfiguration
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${OrganizationGuid},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-IntraOrganizationConnector
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-IRMConfiguration
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-JournalRule
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-LicenseVsUsageSummaryReport
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-LinkedUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-LogonStatistics
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-Mailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${IncludeInactiveMailbox},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SortBy},

    [switch]
    ${InactiveMailboxOnly},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${PublicFolder},

    [switch]
    ${Archive},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${SoftDeletedMailbox},

    [System.Object]
    ${RecipientTypeDetails},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Filter},

    [System.Object]
    ${MailboxPlan},

    [switch]
    ${Migration},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxActivityReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxAuditBypassAssociation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxAutoReplyConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxCalendarConfiguration
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-MailboxCalendarFolder
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-MailboxFolder
{

param(
    [switch]
    ${GetChildren},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${MailFolderOnly},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [switch]
    ${Recurse},

    [switch]
    ${AsJob})

}
function Get-MailboxFolderPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxFolderStatistics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DiagnosticInfo},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${IncludeOldestAndNewestItems},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Archive},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${IncludeSoftDeletedRecipients},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${IncludeAnalysis},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${FolderScope},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxJunkEmailConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxLocation
{

param(
    [switch]
    ${IncludePreviousPrimary},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${MailboxLocationType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxMessageConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxOverrideConfiguration
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-MailboxPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [System.Object]
    ${User},

    [switch]
    ${Owner},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${SoftDeletedMailbox},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SortBy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AllMailboxPlanReleases},

    [System.Object]
    ${Filter},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxPreferredLocation
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-MailboxRegionalConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${VerifyDefaultFolderNameLanguage},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${Archive},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxRestoreRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${BatchName},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Suspend},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Status},

    [System.Object]
    ${HighPriority},

    [System.Object]
    ${TargetMailbox},

    [switch]
    ${AsJob})

}
function Get-MailboxRestoreRequestStatistics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${IncludeReport},

    [System.Object]
    ${DiagnosticInfo},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${ReportOnly},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxSearch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${ShowDeletionInProgressSearches},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${InPlaceHoldIdentity},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxSpellingConfiguration
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-MailboxStatistics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IncludeMoveReport},

    [switch]
    ${Archive},

    [switch]
    ${IncludeMoveHistory},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${IncludeSoftDeletedRecipients},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxUsageDetailReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxUsageReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxUserConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailContact
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RecipientTypeDetails},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Filter},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailDetailATPReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${DataSource},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${ProbeTag},

    [System.Object]
    ${MessageTraceId},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${MalwareName},

    [System.Object]
    ${RecipientAddress},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${MessageId},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${SenderAddress},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailDetailDlpPolicyReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${MessageTraceId},

    [System.Object]
    ${Domain},

    [System.Object]
    ${DlpPolicy},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TransportRule},

    [System.Object]
    ${SenderAddress},

    [System.Object]
    ${RecipientAddress},

    [System.Object]
    ${MessageId},

    [System.Object]
    ${StartDate},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailDetailEvaluationModeReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RecipientDomain},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [System.Object]
    ${EventSubType},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsScanAndDrop},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${ProbeTag},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EventType},

    [System.Object]
    ${IsComplexRouted},

    [System.Object]
    ${IsEvaluationMode},

    [System.Object]
    ${ConnectorId},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${StartDate},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailDetailMalwareReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${MessageTraceId},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${MalwareName},

    [System.Object]
    ${RecipientAddress},

    [System.Object]
    ${MessageId},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${SenderAddress},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailDetailReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [System.Object]
    ${MessageTraceId},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${MessageId},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailDetailSpamReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${MessageTraceId},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SenderAddress},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RecipientAddress},

    [System.Object]
    ${MessageId},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailDetailTransportRuleReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${MessageTraceId},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SenderAddress},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TransportRule},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RecipientAddress},

    [System.Object]
    ${MessageId},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailFilterListReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SelectionTarget},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Domain},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailFlowStatusReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EventType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailPublicFolder
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Filter},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailTrafficATPReport
{

param(
    [System.Object]
    ${NumberOfRows},

    [System.Object]
    ${Action},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EventType},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${PivotBy},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${SummarizeBy},

    [switch]
    ${AsJob})

}
function Get-MailTrafficPolicyReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [System.Object]
    ${DlpPolicy},

    [System.Object]
    ${EventType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${TransportRule},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${SummarizeBy},

    [switch]
    ${AsJob})

}
function Get-MailTrafficReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EventType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${SummarizeBy},

    [switch]
    ${AsJob})

}
function Get-MailTrafficSummaryReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [System.Object]
    ${DlpPolicy},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${TransportRule},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${Category},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailTrafficTopReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EventType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${SummarizeBy},

    [switch]
    ${AsJob})

}
function Get-MailUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Filter},

    [switch]
    ${SoftDeletedMailUser},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MalwareFilterPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-MalwareFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${State},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ManagementRole
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RoleType},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${CmdletParameters},

    [System.Object]
    ${ScriptParameters},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Cmdlet},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Script},

    [switch]
    ${GetChildren},

    [switch]
    ${Recurse},

    [switch]
    ${AsJob})

}
function Get-ManagementRoleAssignment
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RoleAssigneeType},

    [System.Object]
    ${CustomRecipientWriteScope},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Enabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RecipientWriteScope},

    [System.Object]
    ${WritableRecipient},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ConfigWriteScope},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${RoleAssignee},

    [System.Object]
    ${Delegating},

    [System.Object]
    ${Exclusive},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${AssignmentMethod},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Role},

    [System.Object]
    ${RecipientAdministrativeUnitScope},

    [System.Object]
    ${ExclusiveRecipientWriteScope},

    [System.Object]
    ${RecipientOrganizationalUnitScope},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${GetEffectiveUsers},

    [switch]
    ${AsJob})

}
function Get-ManagementRoleEntry
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Type},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${PSSnapinName},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Parameters},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ManagementScope
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Exclusive},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Orphan},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MessageCategory
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MessageClassification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${IncludeLocales},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MessageRecallResult
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${NetworkMessageId},

    [System.Object]
    ${Recipients},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Sender},

    [System.Object]
    ${RequestTime},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MessageTrace
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${FromIP},

    [System.Object]
    ${MessageTraceId},

    [System.Object]
    ${PageSize},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SenderAddress},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ToIP},

    [System.Object]
    ${RecipientAddress},

    [System.Object]
    ${Status},

    [System.Object]
    ${MessageId},

    [System.Object]
    ${StartDate},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MessageTraceDetail
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Event},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${MessageTraceId},

    [System.Object]
    ${PageSize},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SenderAddress},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RecipientAddress},

    [System.Object]
    ${MessageId},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MessageTrackingReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RecipientPathFilter},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ReportTemplate},

    [System.Object]
    ${Recipients},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${BypassDelegateChecking},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${DoNotResolve},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Status},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MigrationBatch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DiagnosticInfo},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IncludeReport},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Status},

    [System.Object]
    ${Endpoint},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MigrationConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-MigrationEndpoint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DiagnosticInfo},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Type},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MigrationStatistics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DiagnosticInfo},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MigrationUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${MailboxGuid},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${BatchId},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Status},

    [System.Object]
    ${StatusSummary},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MigrationUserStatistics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DiagnosticInfo},

    [switch]
    ${IncludeSkippedItems},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${IncludeReport},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${SkipSubscription},

    [System.Object]
    ${LimitSkippedItemsTo},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MobileDevice
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${OWAforDevices},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${UniversalOutlook},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [switch]
    ${ActiveSync},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Filter},

    [switch]
    ${RestApi},

    [switch]
    ${AsJob})

}
function Get-MobileDeviceDashboardSummaryReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DeviceType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MobileDeviceMailboxPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-MobileDeviceStatistics
{

param(
    [switch]
    ${ShowRecoveryPassword},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${OWAforDevices},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${UniversalOutlook},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${GetMailboxLog},

    [System.Object]
    ${Identity},

    [switch]
    ${ActiveSync},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NotificationEmailAddresses},

    [switch]
    ${RestApi},

    [switch]
    ${AsJob})

}
function Get-MoveRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Flags},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${BatchName},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SortBy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${MoveStatus},

    [System.Object]
    ${ProxyToMailbox},

    [System.Object]
    ${Suspend},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RemoteHostName},

    [System.Object]
    ${SuspendWhenReadyToComplete},

    [System.Object]
    ${Offline},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MoveRequestStatistics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${IncludeReport},

    [System.Object]
    ${DiagnosticInfo},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${ReportOnly},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ProxyToMailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${DiagnosticOnly},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MxRecordReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MxRecordsReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-Notification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Summary},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ProcessType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-O365ClientBrowserDetailReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${WindowsLiveID},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Browser},

    [System.Object]
    ${BrowserVersion},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-O365ClientBrowserReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Browser},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-O365ClientOSDetailReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${OperatingSystem},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${OperatingSystemVersion},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${WindowsLiveID},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-O365ClientOSReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${OS},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-OMEConfiguration
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-OnlineMeetingConfiguration
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-OnPremisesOrganization
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-OrganizationalUnit
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${SearchText},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${SingleNodeOnly},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [switch]
    ${IncludeContainers},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-OrganizationConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-OrganizationRelationship
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-OutboundConnector
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${IncludeTestModeConnectors},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${IsTransportRuleScoped},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-OutboundConnectorReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-OutlookProtectionRule
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-OwaMailboxPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-PartnerApplication
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-PartnerCustomerUserReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-PerimeterConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-PerimeterMessageTrace
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${End},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Start},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Recipient},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Sender},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-PhishFilterPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Detailed},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DecisionSetBy},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SpoofType},

    [switch]
    ${WidgetData},

    [switch]
    ${SpoofAllowBlockList},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AllowedToSpoof},

    [System.Object]
    ${ConfidenceLevel},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-Place
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-PolicyConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-PolicyTipConfig
{

param(
    [System.Object]
    ${Locale},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${Original},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-PopSubscription
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${IncludeReport},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AggregationType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-PublicFolder
{

param(
    [switch]
    ${GetChildren},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${LostAndFound},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${ResidentFolders},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [switch]
    ${Recurse},

    [switch]
    ${AsJob})

}
function Get-PublicFolderClientPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Mailbox},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-PublicFolderItemStatistics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-PublicFolderMailboxDiagnostics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${IncludeHierarchyInfo},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${IncludeDumpsterInfo},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-PublicFolderMailboxMigrationRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${BatchName},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Suspend},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Status},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-PublicFolderMailboxMigrationRequestStatistics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${IncludeReport},

    [System.Object]
    ${DiagnosticInfo},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${ReportOnly},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-PublicFolderStatistics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-QuarantineMessage
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MessageId},

    [System.Object]
    ${Page},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Reported},

    [System.Object]
    ${Direction},

    [System.Object]
    ${QuarantineTypes},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EndReceivedDate},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${PageSize},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RecipientAddress},

    [System.Object]
    ${StartExpiresDate},

    [System.Object]
    ${SenderAddress},

    [System.Object]
    ${Subject},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${StartReceivedDate},

    [System.Object]
    ${Type},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${MyItems},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EndExpiresDate},

    [switch]
    ${AsJob})

}
function Get-QuarantineMessageHeader
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-RbacDiagnosticInfo
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${UserName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-Recipient
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SortBy},

    [System.Object]
    ${Identity},

    [System.Object]
    ${RecipientPreviewFilter},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Anr},

    [System.Object]
    ${BookmarkDisplayName},

    [System.Object]
    ${Capabilities},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${RecipientTypeDetails},

    [System.Object]
    ${Properties},

    [System.Object]
    ${PropertySet},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AuthenticationType},

    [System.Object]
    ${Filter},

    [switch]
    ${IncludeSoftDeletedRecipients},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${RecipientType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${OrganizationalUnit},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${IncludeBookmarkObject},

    [switch]
    ${AsJob})

}
function Get-RecipientPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AccessRights},

    [System.Object]
    ${Trustee},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-RecipientStatisticsReport
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-RemoteDomain
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ReportExecutionInstance
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ScheduleId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ReportSchedule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${IncludeDLP},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ScheduleId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ReportScheduleList
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IncludeDLP},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ReportSubmissionPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ResourceConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-RetentionEvent
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AllStatus},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-RetentionPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-RetentionPolicyTag
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${OptionalInMailbox},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IncludeSystemTags},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Types},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-RMSTemplate
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Type},

    [System.Object]
    ${TrustedPublishingDomain},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-RMSTrustedPublishingDomain
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${Default},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-RoleAssignmentPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-RoleGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [switch]
    ${ShowPartnerLinked},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-RoleGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SCInsights
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ScorecardClientDeviceReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Category},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ScorecardClientOSReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Category},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ScorecardClientOutlookReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Category},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ScorecardMetricsReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SearchDocumentFormat
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-SecurityPrincipal
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Types},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [switch]
    ${RoleGroupAssignable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SendAddress
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AddressId},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SenderPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Recipients},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Sender},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SensitivityLabelActivityDetailsReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Source},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Sender},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${MIPLabelName},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SensitivityLabelActivityReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Source},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${MIPLabelName},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ServiceDeliveryReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Recipient},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ServiceStatus
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${MaintenanceWindowDays},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-SharingPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-SiteMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [switch]
    ${BypassOwnerCheck},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SiteMailboxDiagnostics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${SendMeEmail},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassOwnerCheck},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SiteMailboxProvisioningPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-SmimeConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-SPOActiveUserReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SpoofMailReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EventType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SPOSkyDriveProDeployedReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SPOSkyDriveProStorageReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SPOTeamSiteDeployedReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SPOTeamSiteStorageReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SPOTenantStorageMetricReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-StaleMailboxDetailReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-StaleMailboxReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-Subscription
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${IncludeReport},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SubscriptionType},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AggregationType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewActivity
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PolicyId},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewPolicyReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Policies},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewPolicyV2
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Policies},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Reviewers},

    [System.Object]
    ${StartDate},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Policy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SweepRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Provider},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${BypassScopeCheck},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SyncConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-SyncRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${WorkloadType},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${SyncProtocol},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SyncRequestStatistics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${IncludeReport},

    [System.Object]
    ${DiagnosticInfo},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${ReportOnly},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-TenantAnalyticsConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-TextMessagingAccount
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ToolInformation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Version},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-TransportConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-TransportRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DlpPolicy},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${State},

    [System.Object]
    ${Filter},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-TransportRuleAction
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-TransportRulePredicate
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-TxpUserSettings
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-UMAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UMDialPlan},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UMCallAnsweringRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UMCallDataRecord
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Mailbox},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UMCallSummaryReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${GroupBy},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${UMIPGateway},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UMDialPlan},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UMDialPlan
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-UMHuntGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UMDialPlan},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UMIPGateway
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${IncludeSimulator},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UMMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UMMailboxConfiguration
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-UMMailboxPIN
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [switch]
    ${IgnoreErrors},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UMMailboxPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Filter},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UMMailboxPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UMDialPlan},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UMPhoneSession
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-UnifiedAuditSetting
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-UnifiedGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${IncludeSoftDeletedGroups},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${IncludeAllProperties},

    [System.Object]
    ${Filter},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UnifiedGroupLinks
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${LinkType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-User
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SortBy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${PublicFolder},

    [switch]
    ${IsVIP},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RecipientTypeDetails},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Filter},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UserAnalyticsConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-UserPhoto
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SortBy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${PhotoType},

    [System.Object]
    ${Filter},

    [switch]
    ${Preview},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Import-ContactList
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DateCultureName},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${CSV},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${CSVData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${CSVStream},

    [switch]
    ${AsJob})

}
function Import-DlpPolicyCollection
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FileData},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Import-RecipientDataProperty
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${Picture},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${SpokenName},

    [System.Object]
    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Import-RMSTrustedPublishingDomain
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Password},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExtranetCertificationUrl},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${RMSOnline},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${Default},

    [System.Object]
    ${ExtranetLicensingUrl},

    [switch]
    ${RefreshTemplates},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${IntranetLicensingUrl},

    [System.Object]
    ${IntranetCertificationUrl},

    [System.Object]
    ${FileData},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Import-TransportRuleCollection
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FileData},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Import-UMPrompt
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PromptFileData},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UMDialPlan},

    [System.Object]
    ${PromptFileName},

    [System.Object]
    ${UMAutoAttendant},

    [System.Object]
    ${PromptFileStream},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Invoke-ShadowCalendarSync
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CalendarId},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${MaxEventsToSync},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ActiveSyncDeviceAccessRule
{

param(
    [System.Object]
    ${QueryString},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Characteristic},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AccessLevel},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ActiveSyncMailboxPolicy
{

param(
    [System.Object]
    ${AllowUnsignedApplications},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowUnsignedInstallationPackages},

    [System.Object]
    ${MaxInactivityTimeDeviceLock},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AllowExternalDeviceManagement},

    [System.Object]
    ${RequireDeviceEncryption},

    [System.Object]
    ${AllowStorageCard},

    [System.Object]
    ${AllowIrDA},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AllowNonProvisionableDevices},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${UnapprovedInROMApplicationList},

    [System.Object]
    ${DevicePasswordEnabled},

    [System.Object]
    ${RequireEncryptedSMIMEMessages},

    [System.Object]
    ${DevicePasswordHistory},

    [System.Object]
    ${AllowInternetSharing},

    [System.Object]
    ${MinDevicePasswordComplexCharacters},

    [System.Object]
    ${RequireSignedSMIMEAlgorithm},

    [System.Object]
    ${MaxEmailHTMLBodyTruncationSize},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${DevicePasswordExpiration},

    [System.Object]
    ${UNCAccessEnabled},

    [System.Object]
    ${AllowCamera},

    [System.Object]
    ${AllowTextMessaging},

    [System.Object]
    ${MaxDevicePasswordFailedAttempts},

    [System.Object]
    ${AllowBrowser},

    [System.Object]
    ${MaxEmailAgeFilter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${RequireManualSyncWhenRoaming},

    [System.Object]
    ${AllowSMIMEEncryptionAlgorithmNegotiation},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${DeviceEncryptionEnabled},

    [System.Object]
    ${MaxEmailBodyTruncationSize},

    [System.Object]
    ${AllowBluetooth},

    [System.Object]
    ${RequireEncryptionSMIMEAlgorithm},

    [System.Object]
    ${DevicePolicyRefreshInterval},

    [System.Object]
    ${AllowMobileOTAUpdate},

    [System.Object]
    ${MaxAttachmentSize},

    [System.Object]
    ${AllowConsumerEmail},

    [System.Object]
    ${AllowDesktopSync},

    [System.Object]
    ${PasswordRecoveryEnabled},

    [System.Object]
    ${AlphanumericDevicePasswordRequired},

    [System.Object]
    ${RequireStorageCardEncryption},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowSMIMESoftCerts},

    [System.Object]
    ${AllowRemoteDesktop},

    [System.Object]
    ${AllowSimpleDevicePassword},

    [System.Object]
    ${AttachmentsEnabled},

    [System.Object]
    ${MaxCalendarAgeFilter},

    [System.Object]
    ${AllowWiFi},

    [System.Object]
    ${AllowApplePushNotifications},

    [System.Object]
    ${AllowPOPIMAPEmail},

    [System.Object]
    ${IsDefault},

    [System.Object]
    ${IsDefaultPolicy},

    [System.Object]
    ${ApprovedApplicationList},

    [System.Object]
    ${Name},

    [System.Object]
    ${WSSAccessEnabled},

    [System.Object]
    ${RequireSignedSMIMEMessages},

    [System.Object]
    ${AllowHTMLEmail},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${MinDevicePasswordLength},

    [System.Object]
    ${IrmEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function New-AdminAuditLogSearch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${ObjectIds},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExternalAccess},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${StatusMailRecipients},

    [System.Object]
    ${Parameters},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Cmdlets},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${UserIds},

    [System.Object]
    ${StartDate},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-AntiPhishPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${EnableUnauthenticatedSender},

    [System.Object]
    ${EnableAntiSpoofEnforcement},

    [System.Object]
    ${Name},

    [System.Object]
    ${AdminDisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AuthenticationFailAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-AntiPhishRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SentToMemberOf},

    [System.Object]
    ${AntiPhishPolicy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SentTo},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Comments},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RecipientDomainIs},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ExceptIfRecipientDomainIs},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExceptIfSentTo},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExceptIfSentToMemberOf},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-App
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Etoken},

    [System.Object]
    ${FileStream},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${Url},

    [System.Object]
    ${Mailbox},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${MarketplaceServicesUrl},

    [switch]
    ${PrivateCatalog},

    [System.Object]
    ${MarketplaceCorrelationID},

    [System.Object]
    ${DefaultStateForUser},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${MarketplaceQueryMarket},

    [System.Object]
    ${MarketplaceUserProfileType},

    [switch]
    ${DownloadOnly},

    [System.Object]
    ${ProvidedTo},

    [System.Object]
    ${UserList},

    [switch]
    ${OrganizationApp},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${MarketplaceAssetID},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${FileData},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AllowReadWriteMailbox},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function New-ApplicationAccessPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${AppId},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PolicyScopeGroupId},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AccessRight},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-AuthenticationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${AllowBasicAuthRpc},

    [switch]
    ${AllowBasicAuthPop},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AllowBasicAuthSmtp},

    [switch]
    ${AllowBasicAuthMapi},

    [switch]
    ${AllowBasicAuthImap},

    [switch]
    ${AllowBasicAuthAutodiscover},

    [switch]
    ${AllowBasicAuthPowershell},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AllowBasicAuthActiveSync},

    [switch]
    ${AllowBasicAuthOfflineAddressBook},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${AllowBasicAuthReportingWebServices},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AllowBasicAuthOutlookService},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${AllowBasicAuthWebServices},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-AvailabilityConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${OrgWideAccount},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ClassificationRuleCollection
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ClientAccessRule
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UsernameMatchesAnyOfPatterns},

    [System.Object]
    ${Action},

    [System.Object]
    ${AnyOfClientIPAddressesOrRanges},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${ExceptAnyOfClientIPAddressesOrRanges},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${UserRecipientFilter},

    [System.Object]
    ${ExceptAnyOfProtocols},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Priority},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ExceptUsernameMatchesAnyOfPatterns},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AnyOfAuthenticationTypes},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AnyOfProtocols},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ExceptAnyOfAuthenticationTypes},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Scope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function New-CompliancePolicySyncNotification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Workload},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SyncChangeInfos},

    [switch]
    ${FullSync},

    [switch]
    ${SyncNow},

    [System.Object]
    ${SyncSvcUrl},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ConnectSubscription
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RequestToken},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OAuthVerifier},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RequestSecret},

    [switch]
    ${LinkedIn},

    [System.Object]
    ${RedirectUri},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DataClassification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Locale},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ClassificationRuleCollectionIdentity},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Fingerprints},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DistributionGroup
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${RequireSenderAuthenticationEnabled},

    [System.Object]
    ${ModerationEnabled},

    [System.Object]
    ${DisplayName},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${MemberDepartRestriction},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IgnoreNamingPolicy},

    [switch]
    ${RoomList},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${BypassNestedModerationEnabled},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${CopyOwnerToMember},

    [System.Object]
    ${Members},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${MemberJoinRestriction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Type},

    [System.Object]
    ${Alias},

    [System.Object]
    ${ManagedBy},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${PrimarySmtpAddress},

    [System.Object]
    ${SendModerationNotifications},

    [System.Object]
    ${Notes},

    [System.Object]
    ${OrganizationalUnit},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function New-DkimSigningConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AdminDisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${BodyCanonicalization},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${KeySize},

    [System.Object]
    ${HeaderCanonicalization},

    [System.Object]
    ${DomainName},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DlpPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${TemplateData},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Parameters},

    [System.Object]
    ${Template},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${State},

    [System.Object]
    ${Mode},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DynamicDistributionGroup
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ConditionalCustomAttribute5},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${ModerationEnabled},

    [System.Object]
    ${RecipientFilter},

    [System.Object]
    ${ConditionalCustomAttribute8},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${ConditionalCustomAttribute10},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ConditionalCustomAttribute9},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ConditionalCustomAttribute2},

    [System.Object]
    ${IncludedRecipients},

    [System.Object]
    ${ConditionalCompany},

    [System.Object]
    ${ConditionalCustomAttribute6},

    [System.Object]
    ${ConditionalCustomAttribute3},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ConditionalCustomAttribute13},

    [System.Object]
    ${RecipientContainer},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ConditionalCustomAttribute12},

    [System.Object]
    ${ConditionalDepartment},

    [System.Object]
    ${ConditionalStateOrProvince},

    [System.Object]
    ${DirectMembershipOnly},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ConditionalCustomAttribute7},

    [System.Object]
    ${ConditionalCustomAttribute14},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ConditionalCustomAttribute4},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ConditionalCustomAttribute1},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Alias},

    [System.Object]
    ${PrimarySmtpAddress},

    [System.Object]
    ${SendModerationNotifications},

    [System.Object]
    ${ConditionalCustomAttribute15},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${ConditionalCustomAttribute11},

    [switch]
    ${AsJob})

}
function New-ElevatedAccessRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RoleGroup},

    [System.Object]
    ${ExternalIdentity},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DurationHours},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Reason},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Task},

    [System.Object]
    ${RequestContext},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Role},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-EmailAddressPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${EnabledEmailAddressTemplates},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${EnabledPrimarySMTPAddressTemplate},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ManagedByFilter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${IncludeUnifiedGroupRecipients},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-Fingerprint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-HostedConnectionFilterPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ConfigurationXmlRaw},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [System.Object]
    ${AdminDisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EnableSafeList},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${IPBlockList},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${IPAllowList},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-HostedContentFilterPolicy
{

param(
    [System.Object]
    ${HighConfidenceSpamAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${TestModeAction},

    [System.Object]
    ${QuarantineRetentionPeriod},

    [System.Object]
    ${MarkAsSpamWebBugsInHtml},

    [System.Object]
    ${EndUserSpamNotificationCustomFromName},

    [System.Object]
    ${MarkAsSpamFromAddressAuthFail},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EndUserSpamNotificationCustomFromAddress},

    [System.Object]
    ${IncreaseScoreWithRedirectToOtherPort},

    [System.Object]
    ${BulkThreshold},

    [System.Object]
    ${EnableLanguageBlockList},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EndUserSpamNotificationCustomSubject},

    [System.Object]
    ${MarkAsSpamSensitiveWordList},

    [System.Object]
    ${MarkAsSpamFormTagsInHtml},

    [System.Object]
    ${MarkAsSpamNdrBackscatter},

    [System.Object]
    ${AddXHeaderValue},

    [System.Object]
    ${BulkSpamAction},

    [System.Object]
    ${ModifySubjectValue},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${IncreaseScoreWithImageLinks},

    [System.Object]
    ${MarkAsSpamEmptyMessages},

    [System.Object]
    ${MarkAsSpamSpfRecordHardFail},

    [System.Object]
    ${PhishSpamAction},

    [System.Object]
    ${HighConfidencePhishAction},

    [System.Object]
    ${MarkAsSpamJavaScriptInHtml},

    [System.Object]
    ${EnableRegionBlockList},

    [System.Object]
    ${EnableEndUserSpamNotifications},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RedirectToRecipients},

    [System.Object]
    ${AllowedSenderDomains},

    [System.Object]
    ${MarkAsSpamObjectTagsInHtml},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${MarkAsSpamFramesInHtml},

    [System.Object]
    ${TestModeBccToRecipients},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${MarkAsSpamEmbedTagsInHtml},

    [System.Object]
    ${EndUserSpamNotificationLanguage},

    [System.Object]
    ${EndUserSpamNotificationLimit},

    [System.Object]
    ${SpamAction},

    [System.Object]
    ${InlineSafetyTipsEnabled},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ZapEnabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${SpamZapEnabled},

    [System.Object]
    ${PhishZapEnabled},

    [System.Object]
    ${BlockedSenders},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowedSenders},

    [System.Object]
    ${LanguageBlockList},

    [System.Object]
    ${RegionBlockList},

    [System.Object]
    ${IncreaseScoreWithBizOrInfoUrls},

    [System.Object]
    ${AdminDisplayName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${EndUserSpamNotificationFrequency},

    [System.Object]
    ${IncreaseScoreWithNumericIps},

    [System.Object]
    ${BlockedSenderDomains},

    [System.Object]
    ${MarkAsSpamBulkMail},

    [System.Object]
    ${DownloadLink},

    [switch]
    ${AsJob})

}
function New-HostedContentFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SentToMemberOf},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${HostedContentFilterPolicy},

    [System.Object]
    ${SentTo},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Comments},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RecipientDomainIs},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ExceptIfRecipientDomainIs},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExceptIfSentTo},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExceptIfSentToMemberOf},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-HostedOutboundSpamFilterPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [System.Object]
    ${AdminDisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${BccSuspiciousOutboundAdditionalRecipients},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${NotifyOutboundSpamRecipients},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RecipientLimitPerDay},

    [System.Object]
    ${ActionWhenThresholdReached},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RecipientLimitExternalPerHour},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${NotifyOutboundSpam},

    [System.Object]
    ${RecipientLimitInternalPerHour},

    [System.Object]
    ${BccSuspiciousOutboundMail},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-HostedOutboundSpamFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ExceptIfFrom},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExceptIfSenderDomainIs},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Comments},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${FromMemberOf},

    [System.Object]
    ${SenderDomainIs},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${HostedOutboundSpamFilterPolicy},

    [System.Object]
    ${ExceptIfFromMemberOf},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${From},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-InboundConnector
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RestrictDomainsToIPAddresses},

    [System.Object]
    ${CloudServicesMailEnabled},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EFSkipMailGateway},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${EFTestMode},

    [System.Object]
    ${TlsSenderCertificateName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ScanAndDropRecipients},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AssociatedAcceptedDomains},

    [System.Object]
    ${Comment},

    [System.Object]
    ${RequireTls},

    [System.Object]
    ${SenderDomains},

    [System.Object]
    ${SenderIPAddresses},

    [System.Object]
    ${EFSkipLastIP},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EFUsers},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ConnectorType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${RestrictDomainsToCertificate},

    [System.Object]
    ${EFSkipIPs},

    [System.Object]
    ${TreatMessagesAsInternal},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ConnectorSource},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AsJob})

}
function New-InboxRule
{

param(
    [System.Object]
    ${ExceptIfMyNameNotInToBox},

    [System.Object]
    ${ExceptIfMyNameInToOrCcBox},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PinMessage},

    [System.Object]
    ${WithinSizeRangeMaximum},

    [System.Object]
    ${ReceivedBeforeDate},

    [System.Object]
    ${ExceptIfFromAddressContainsWords},

    [System.Object]
    ${HasClassification},

    [System.Object]
    ${ExceptIfFromSubscription},

    [System.Object]
    ${ExceptIfWithinSizeRangeMaximum},

    [System.Object]
    ${WithinSizeRangeMinimum},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${MyNameInToOrCcBox},

    [System.Object]
    ${ExceptIfReceivedBeforeDate},

    [System.Object]
    ${Mailbox},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ExceptIfFrom},

    [System.Object]
    ${RedirectTo},

    [System.Object]
    ${ReceivedAfterDate},

    [System.Object]
    ${ForwardTo},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ExceptIfReceivedAfterDate},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ExceptIfWithImportance},

    [System.Object]
    ${HeaderContainsWords},

    [System.Object]
    ${ExceptIfSentOnlyToMe},

    [System.Object]
    ${ExceptIfSubjectOrBodyContainsWords},

    [System.Object]
    ${ExceptIfMessageTypeMatches},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExceptIfHasAttachment},

    [System.Object]
    ${DeleteMessage},

    [System.Object]
    ${ExceptIfMyNameInToBox},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${AlwaysDeleteOutlookRulesBlob},

    [System.Object]
    ${From},

    [System.Object]
    ${RecipientAddressContainsWords},

    [System.Object]
    ${FlaggedForAction},

    [System.Object]
    ${WithSensitivity},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CopyToFolder},

    [System.Object]
    ${FromMessageId},

    [System.Object]
    ${ExceptIfSubjectContainsWords},

    [System.Object]
    ${MarkImportance},

    [System.Object]
    ${Priority},

    [System.Object]
    ${ApplyCategory},

    [System.Object]
    ${SubjectContainsWords},

    [System.Object]
    ${ExceptIfHeaderContainsWords},

    [System.Object]
    ${ExceptIfRecipientAddressContainsWords},

    [System.Object]
    ${HasAttachment},

    [System.Object]
    ${SubjectOrBodyContainsWords},

    [System.Object]
    ${ExceptIfFlaggedForAction},

    [System.Object]
    ${FromSubscription},

    [System.Object]
    ${BodyContainsWords},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${StopProcessingRules},

    [System.Object]
    ${DeleteSystemCategory},

    [System.Object]
    ${ExceptIfWithinSizeRangeMinimum},

    [System.Object]
    ${MessageTypeMatches},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ApplySystemCategory},

    [System.Object]
    ${SendTextMessageNotificationTo},

    [System.Object]
    ${MarkAsRead},

    [System.Object]
    ${MoveToFolder},

    [System.Object]
    ${SentTo},

    [System.Object]
    ${MyNameInCcBox},

    [switch]
    ${ValidateOnly},

    [System.Object]
    ${WithImportance},

    [System.Object]
    ${MyNameInToBox},

    [System.Object]
    ${ExceptIfSentTo},

    [switch]
    ${Force},

    [System.Object]
    ${SentOnlyToMe},

    [System.Object]
    ${Name},

    [System.Object]
    ${ForwardAsAttachmentTo},

    [System.Object]
    ${ExceptIfBodyContainsWords},

    [System.Object]
    ${ExceptIfMyNameInCcBox},

    [System.Object]
    ${FromAddressContainsWords},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${MyNameNotInToBox},

    [System.Object]
    ${ExceptIfWithSensitivity},

    [System.Object]
    ${ExceptIfHasClassification},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function New-IntraOrganizationConnector
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${TargetAddressDomains},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DiscoveryEndpoint},

    [System.Object]
    ${TargetSharingEpr},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-JournalRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Scope},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${JournalEmailAddress},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Recipient},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-Mailbox
{

param(
    [System.Object]
    ${MailboxRegion},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${ModerationEnabled},

    [System.Object]
    ${Office},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${Password},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${TargetAllMDBs},

    [System.Object]
    ${RemovedMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${PublicFolder},

    [switch]
    ${Force},

    [System.Object]
    ${LastName},

    [System.Object]
    ${EnableRoomMailboxAccount},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RoleAssignmentPolicy},

    [System.Object]
    ${ResourceCapacity},

    [switch]
    ${Archive},

    [switch]
    ${Equipment},

    [System.Object]
    ${ImmutableId},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${RoomMailboxPassword},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${Shared},

    [System.Object]
    ${IsExcludedFromServingHierarchy},

    [System.Object]
    ${MailboxPlan},

    [System.Object]
    ${MicrosoftOnlineServicesID},

    [switch]
    ${Migration},

    [switch]
    ${Room},

    [System.Object]
    ${ResetPasswordOnNextLogon},

    [System.Object]
    ${Initials},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${FederatedIdentity},

    [System.Object]
    ${ActiveSyncMailboxPolicy},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${HoldForMigration},

    [switch]
    ${Discovery},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Alias},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${FirstName},

    [System.Object]
    ${Phone},

    [System.Object]
    ${PrimarySmtpAddress},

    [System.Object]
    ${SendModerationNotifications},

    [System.Object]
    ${InactiveMailbox},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Name},

    [System.Object]
    ${RemotePowerShellEnabled},

    [switch]
    ${AsJob})

}
function New-MailboxAuditLogSearch
{

param(
    [switch]
    ${ShowDetails},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [System.Object]
    ${LogonTypes},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExternalAccess},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${StatusMailRecipients},

    [System.Object]
    ${Operations},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Mailboxes},

    [System.Object]
    ${HasAttachments},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-MailboxFolder
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Parent},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-MailboxRestoreRequest
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ExcludeDumpster},

    [System.Object]
    ${TargetType},

    [System.Object]
    ${ConflictResolutionOption},

    [System.Object]
    ${RemoteDatabaseGuid},

    [System.Object]
    ${AssociatedMessagesCopyOption},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SuspendComment},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${TargetIsArchive},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${IncludeFolders},

    [System.Object]
    ${LargeItemLimit},

    [switch]
    ${Suspend},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${BatchName},

    [System.Object]
    ${RemoteRestoreType},

    [System.Object]
    ${RemoteHostName},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${SourceMailbox},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${AcceptLargeDataLoss},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${BadItemLimit},

    [System.Object]
    ${SourceStoreMailbox},

    [switch]
    ${SourceIsArchive},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${RemoteCredential},

    [switch]
    ${AllowLegacyDNMismatch},

    [System.Object]
    ${ExcludeFolders},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${TargetRootFolder},

    [System.Object]
    ${SourceRootFolder},

    [System.Object]
    ${CompletedRequestAgeLimit},

    [System.Object]
    ${TargetMailbox},

    [switch]
    ${AsJob})

}
function New-MailboxSearch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${InPlaceHoldEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ItemHoldPeriod},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SourceMailboxes},

    [System.Object]
    ${InPlaceHoldIdentity},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-MailContact
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${ModerationEnabled},

    [System.Object]
    ${MacAttachmentFormat},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${LastName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${UsePreferMessageFormat},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${MessageBodyFormat},

    [System.Object]
    ${Initials},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ExternalEmailAddress},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Alias},

    [System.Object]
    ${MessageFormat},

    [System.Object]
    ${FirstName},

    [System.Object]
    ${SendModerationNotifications},

    [System.Object]
    ${OrganizationalUnit},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function New-MailMessage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Body},

    [System.Object]
    ${Subject},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${BodyFormat},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-MailUser
{

param(
    [System.Object]
    ${MailboxRegion},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${ModerationEnabled},

    [System.Object]
    ${MacAttachmentFormat},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${Password},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${LastName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${UsePreferMessageFormat},

    [System.Object]
    ${ImmutableId},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${MicrosoftOnlineServicesID},

    [System.Object]
    ${MessageBodyFormat},

    [System.Object]
    ${Initials},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${FederatedIdentity},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ExternalEmailAddress},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Alias},

    [System.Object]
    ${MessageFormat},

    [System.Object]
    ${FirstName},

    [System.Object]
    ${PrimarySmtpAddress},

    [System.Object]
    ${SendModerationNotifications},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Name},

    [System.Object]
    ${RemotePowerShellEnabled},

    [switch]
    ${AsJob})

}
function New-MalwareFilterPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${CustomFromName},

    [System.Object]
    ${Action},

    [System.Object]
    ${AdminDisplayName},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${CustomExternalBody},

    [System.Object]
    ${EnableExternalSenderNotifications},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CustomNotifications},

    [System.Object]
    ${EnableInternalSenderNotifications},

    [System.Object]
    ${EnableExternalSenderAdminNotifications},

    [System.Object]
    ${InternalSenderAdminAddress},

    [System.Object]
    ${CustomAlertText},

    [System.Object]
    ${FileTypes},

    [System.Object]
    ${EnableInternalSenderAdminNotifications},

    [System.Object]
    ${CustomFromAddress},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CustomExternalSubject},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ZapEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExternalSenderAdminAddress},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${CustomInternalSubject},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${CustomInternalBody},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EnableFileFilter},

    [switch]
    ${AsJob})

}
function New-MalwareFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SentToMemberOf},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SentTo},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Comments},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RecipientDomainIs},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ExceptIfRecipientDomainIs},

    [System.Object]
    ${MalwareFilterPolicy},

    [System.Object]
    ${ExceptIfSentTo},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExceptIfSentToMemberOf},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ManagementRole
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${EnabledCmdlets},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Parent},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ManagementRoleAssignment
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${CustomRecipientWriteScope},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RecipientAdministrativeUnitScope},

    [System.Object]
    ${ExclusiveRecipientWriteScope},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RecipientOrganizationalUnitScope},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Delegating},

    [System.Object]
    ${Policy},

    [System.Object]
    ${SecurityGroup},

    [System.Object]
    ${Role},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RecipientRelativeWriteScope},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ManagementScope
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${Exclusive},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${RecipientRestrictionFilter},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RecipientRoot},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-MessageClassification
{

param(
    [System.Object]
    ${Locale},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RecipientDescription},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${PermissionMenuVisible},

    [System.Object]
    ${ClassificationID},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${SenderDescription},

    [System.Object]
    ${DisplayPrecedence},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RetainClassificationEnabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-MigrationBatch
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${SkipMail},

    [System.Object]
    ${SourceEndpoint},

    [switch]
    ${AutoStart},

    [switch]
    ${DisableOnCopy},

    [System.Object]
    ${MoveOptions},

    [System.Object]
    ${WorkflowControlFlags},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TargetDatabases},

    [System.Object]
    ${TargetEndpoint},

    [System.Object]
    ${CSVData},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${NotificationEmails},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${SkipReports},

    [System.Object]
    ${TargetArchiveDatabases},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ReportInterval},

    [System.Object]
    ${LargeItemLimit},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${SkipContacts},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SkipMoving},

    [switch]
    ${AutoComplete},

    [switch]
    ${PublicFolderToUnifiedGroup},

    [System.Object]
    ${CompleteAfter},

    [switch]
    ${PrimaryOnly},

    [System.Object]
    ${Partition},

    [System.Object]
    ${SourcePFPrimaryMailboxGuid},

    [System.Object]
    ${TargetDeliveryDomain},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Users},

    [switch]
    ${ArchiveOnly},

    [System.Object]
    ${BadItemLimit},

    [System.Object]
    ${ArchiveDomain},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${ExcludeDumpsters},

    [System.Object]
    ${UserIds},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExcludeFolders},

    [System.Object]
    ${SkipMerging},

    [System.Object]
    ${Name},

    [switch]
    ${SkipCalendar},

    [System.Object]
    ${AllowUnknownColumnsInCsv},

    [System.Object]
    ${StartAfter},

    [System.Object]
    ${WorkflowTemplate},

    [System.Object]
    ${TimeZone},

    [switch]
    ${AsJob})

}
function New-MigrationEndpoint
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AcceptUntrustedCertificates},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${ExchangeRemoteMove},

    [System.Object]
    ${MaxConcurrentMigrations},

    [System.Object]
    ${ServiceAccountKeyFileData},

    [switch]
    ${PublicFolder},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${TestMailbox},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ExchangeServer},

    [System.Object]
    ${Authentication},

    [switch]
    ${ExchangeOutlookAnywhere},

    [switch]
    ${Gmail},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Credentials},

    [switch]
    ${Compliance},

    [System.Object]
    ${Port},

    [System.Object]
    ${EmailAddress},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PublicFolderToUnifiedGroup},

    [System.Object]
    ${RemoteServer},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Partition},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${MailboxPermission},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SourceMailboxLegacyDN},

    [switch]
    ${IMAP},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${Autodiscover},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${NspiServer},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RpcProxyServer},

    [System.Object]
    ${PublicFolderDatabaseServerLegacyDN},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Security},

    [switch]
    ${SkipVerification},

    [System.Object]
    ${MaxConcurrentIncrementalSyncs},

    [switch]
    ${AsJob})

}
function New-MobileDeviceMailboxPolicy
{

param(
    [System.Object]
    ${AllowMicrosoftPushNotifications},

    [System.Object]
    ${AllowUnsignedApplications},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowUnsignedInstallationPackages},

    [System.Object]
    ${MaxPasswordFailedAttempts},

    [System.Object]
    ${AllowExternalDeviceManagement},

    [System.Object]
    ${RequireDeviceEncryption},

    [System.Object]
    ${RequireSignedSMIMEMessages},

    [System.Object]
    ${AllowStorageCard},

    [System.Object]
    ${AllowIrDA},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${PasswordHistory},

    [System.Object]
    ${AllowNonProvisionableDevices},

    [System.Object]
    ${UnapprovedInROMApplicationList},

    [System.Object]
    ${RequireEncryptedSMIMEMessages},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowInternetSharing},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${PasswordEnabled},

    [System.Object]
    ${MaxEmailHTMLBodyTruncationSize},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${MinPasswordComplexCharacters},

    [System.Object]
    ${UNCAccessEnabled},

    [System.Object]
    ${AllowCamera},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${IrmEnabled},

    [System.Object]
    ${PasswordExpiration},

    [System.Object]
    ${AllowBrowser},

    [System.Object]
    ${MaxEmailAgeFilter},

    [System.Object]
    ${RequireSignedSMIMEAlgorithm},

    [System.Object]
    ${RequireManualSyncWhenRoaming},

    [System.Object]
    ${AlphanumericPasswordRequired},

    [System.Object]
    ${AllowSMIMEEncryptionAlgorithmNegotiation},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${MaxEmailBodyTruncationSize},

    [System.Object]
    ${AllowBluetooth},

    [System.Object]
    ${RequireEncryptionSMIMEAlgorithm},

    [System.Object]
    ${DevicePolicyRefreshInterval},

    [System.Object]
    ${AllowGooglePushNotifications},

    [System.Object]
    ${AllowMobileOTAUpdate},

    [System.Object]
    ${Name},

    [System.Object]
    ${MaxAttachmentSize},

    [System.Object]
    ${AllowSimplePassword},

    [System.Object]
    ${AllowConsumerEmail},

    [System.Object]
    ${AllowDesktopSync},

    [System.Object]
    ${RequireStorageCardEncryption},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AttachmentsEnabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowSMIMESoftCerts},

    [System.Object]
    ${AllowRemoteDesktop},

    [System.Object]
    ${PasswordRecoveryEnabled},

    [System.Object]
    ${MaxCalendarAgeFilter},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowApplePushNotifications},

    [System.Object]
    ${AllowPOPIMAPEmail},

    [System.Object]
    ${IsDefault},

    [System.Object]
    ${MaxInactivityTimeLock},

    [System.Object]
    ${AllowWiFi},

    [System.Object]
    ${ApprovedApplicationList},

    [System.Object]
    ${AllowTextMessaging},

    [System.Object]
    ${WSSAccessEnabled},

    [System.Object]
    ${DeviceEncryptionEnabled},

    [System.Object]
    ${MinPasswordLength},

    [System.Object]
    ${AllowHTMLEmail},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function New-MoveRequest
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${IncrementalSyncInterval},

    [System.Object]
    ${ProxyToMailbox},

    [System.Object]
    ${Identity},

    [switch]
    ${SuspendWhenReadyToComplete},

    [System.Object]
    ${MoveOptions},

    [System.Object]
    ${RemoteArchiveTargetDatabase},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${ForceOffline},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RequestExpiryInterval},

    [switch]
    ${PreventCompletion},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${LargeItemLimit},

    [switch]
    ${Suspend},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${BatchName},

    [System.Object]
    ${SkipMoving},

    [System.Object]
    ${RemoteHostName},

    [System.Object]
    ${SuspendComment},

    [System.Object]
    ${CompleteAfter},

    [switch]
    ${PrimaryOnly},

    [switch]
    ${Remote},

    [System.Object]
    ${RemoteTargetDatabase},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${AcceptLargeDataLoss},

    [switch]
    ${ArchiveOnly},

    [System.Object]
    ${StartAfter},

    [System.Object]
    ${BadItemLimit},

    [System.Object]
    ${ArchiveDomain},

    [System.Object]
    ${RemoteGlobalCatalog},

    [System.Object]
    ${TargetDeliveryDomain},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RemoteCredential},

    [System.Object]
    ${CompletedRequestAgeLimit},

    [switch]
    ${Outbound},

    [switch]
    ${AsJob})

}
function New-OnPremisesOrganization
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${InboundConnector},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [System.Object]
    ${OutboundConnector},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${OrganizationName},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Comment},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OrganizationGuid},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationRelationship},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${HybridDomains},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-OrganizationRelationship
{

param(
    [System.Object]
    ${TargetApplicationUri},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MailTipsAccessLevel},

    [System.Object]
    ${TargetAutodiscoverEpr},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${DeliveryReportEnabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${OrganizationContact},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ArchiveAccessEnabled},

    [System.Object]
    ${FreeBusyAccessEnabled},

    [System.Object]
    ${MailTipsAccessScope},

    [System.Object]
    ${TargetOwaURL},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${MailTipsAccessEnabled},

    [System.Object]
    ${PhotosEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${MailboxMovePublishedScopes},

    [System.Object]
    ${MailboxMoveEnabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${TargetSharingEpr},

    [System.Object]
    ${FreeBusyAccessLevel},

    [System.Object]
    ${DomainNames},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${FreeBusyAccessScope},

    [switch]
    ${AsJob})

}
function New-OutboundConnector
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RouteAllMessagesViaOnPremises},

    [System.Object]
    ${RecipientDomains},

    [System.Object]
    ${CloudServicesMailEnabled},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${LinkForModifiedConnector},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${TestMode},

    [System.Object]
    ${AllAcceptedDomains},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Comment},

    [System.Object]
    ${IsTransportRuleScoped},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${UseMXRecord},

    [System.Object]
    ${TlsSettings},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ConnectorType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SmartHosts},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${TlsDomain},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ConnectorSource},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AsJob})

}
function New-OutlookProtectionRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SentToScope},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SentTo},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${UserCanOverride},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${FromDepartment},

    [System.Object]
    ${ApplyRightsProtectionTemplate},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-OwaMailboxPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${IsDefault},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-PartnerApplication
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ApplicationIdentifier},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${LinkedAccount},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AcceptSecurityIdentifierInformation},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AccountType},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-PolicyTipConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Value},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-PrivilegedIdentityManagementRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RoleGroup},

    [System.Object]
    ${ExternalIdentity},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DurationHours},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Reason},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Task},

    [System.Object]
    ${RequestContext},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Role},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ProtectionServicePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-PublicFolder
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EformsLocaleId},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Path},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-RemoteDomain
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ReportSchedule
{

param(
    [System.Object]
    ${Locale},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Direction},

    [System.Object]
    ${EncryptionTemplate},

    [System.Object]
    ${TransportRuleId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ScheduleName},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${IncludeDLP},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DlpRuleId},

    [System.Object]
    ${EncryptionType},

    [System.Object]
    ${ExpiryDate},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${SenderAddress},

    [System.Object]
    ${RecipientAddress},

    [System.Object]
    ${NotificationEmail},

    [System.Object]
    ${ReportFrequency},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ReportSubmissionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${PostSubmitMessage},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ThirdPartyReportAddresses},

    [System.Object]
    ${EnableCustomizedMsg},

    [System.Object]
    ${EnableThirdPartyAddress},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ReportJunkToCustomizedAddress},

    [System.Object]
    ${ReportNotJunkAddresses},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ReportJunkAddresses},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ReportNotJunkToCustomizedAddress},

    [System.Object]
    ${PostSubmitMessageTitle},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ReportPhishToCustomizedAddress},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PreSubmitMessageTitle},

    [System.Object]
    ${PreSubmitMessage},

    [System.Object]
    ${EnableReportToMicrosoft},

    [System.Object]
    ${ReportPhishAddresses},

    [switch]
    ${AsJob})

}
function New-RetentionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RetentionPolicyTagLinks},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RetentionId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${IsDefaultArbitrationMailbox},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${IsDefault},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-RetentionPolicyTag
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${MessageClass},

    [System.Object]
    ${MustDisplayCommentEnabled},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IsDefaultAutoGroupPolicyTag},

    [System.Object]
    ${LocalizedRetentionPolicyTagName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AgeLimitForRetention},

    [switch]
    ${IsDefaultModeratedRecipientsPolicyTag},

    [System.Object]
    ${RetentionAction},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${LocalizedComment},

    [System.Object]
    ${Comment},

    [System.Object]
    ${RetentionId},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RetentionEnabled},

    [System.Object]
    ${Type},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SystemTag},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-RoleAssignmentPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Roles},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${IsDefault},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-RoleGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${CustomRecipientWriteScope},

    [System.Object]
    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Members},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${WellKnownObject},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ManagedBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${Force},

    [System.Object]
    ${Roles},

    [switch]
    ${AsJob})

}
function New-SchedulingMailbox
{

param(
    [System.Object]
    ${ReplyToAddress},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Alias},

    [System.Object]
    ${Name},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${BusinessType},

    [System.Object]
    ${Owner},

    [System.Object]
    ${Culture},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${TimeZone},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PrimarySmtpAddress},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${BookingServiceName},

    [switch]
    ${AsJob})

}
function New-SharingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Domains},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${Default},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-SiteMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Alias},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SharePointUrl},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-SiteMailboxProvisioningPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-SweepRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Provider},

    [System.Object]
    ${SystemCategory},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${KeepLatest},

    [System.Object]
    ${ExceptIfFlagged},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SourceFolder},

    [System.Object]
    ${Mailbox},

    [System.Object]
    ${DestinationFolder},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ExceptIfPinned},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Sender},

    [System.Object]
    ${KeepForDays},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-SyncMailPublicFolder
{

param(
    [System.Object]
    ${WindowsEmailAddress},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${CustomAttribute12},

    [System.Object]
    ${CustomAttribute10},

    [System.Object]
    ${RequireSenderAuthenticationEnabled},

    [System.Object]
    ${DeliverToMailboxAndForward},

    [System.Object]
    ${CustomAttribute8},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${CustomAttribute3},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${CustomAttribute7},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ForwardingAddress},

    [switch]
    ${HiddenFromAddressListsEnabled},

    [System.Object]
    ${MaxSendSize},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${CustomAttribute6},

    [System.Object]
    ${CustomAttribute1},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${OverrideRecipientQuotas},

    [System.Object]
    ${CustomAttribute9},

    [System.Object]
    ${CustomAttribute14},

    [System.Object]
    ${RejectMessagesFrom},

    [System.Object]
    ${MaxReceiveSize},

    [System.Object]
    ${Contacts},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${AcceptMessagesOnlyFrom},

    [System.Object]
    ${CustomAttribute15},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CustomAttribute5},

    [System.Object]
    ${OnPremisesObjectId},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ExternalEmailAddress},

    [System.Object]
    ${CustomAttribute4},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Alias},

    [System.Object]
    ${GrantSendOnBehalfTo},

    [System.Object]
    ${CustomAttribute2},

    [System.Object]
    ${CustomAttribute13},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${CustomAttribute11},

    [System.Object]
    ${EmailAddresses},

    [System.Object]
    ${EntryId},

    [switch]
    ${AsJob})

}
function New-SyncRequest
{

param(
    [System.Object]
    ${Password},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${IncrementalSyncInterval},

    [switch]
    ${Unified},

    [switch]
    ${Mail},

    [System.Object]
    ${TokenSecret},

    [switch]
    ${AcceptUntrustedCertificates},

    [System.Object]
    ${DisplayName},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${WorkloadType},

    [System.Object]
    ${Name},

    [System.Object]
    ${RequestExpiryInterval},

    [System.Object]
    ${TargetRootFolder},

    [System.Object]
    ${OAuthProvider},

    [switch]
    ${Force},

    [switch]
    ${Contact},

    [switch]
    ${SendOnly},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${RemoteServerPort},

    [System.Object]
    ${Authentication},

    [System.Object]
    ${SmtpPassword},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Pop},

    [switch]
    ${DoNotLeaveOnServer},

    [System.Object]
    ${SmtpUserName},

    [System.Object]
    ${IncludeFolders},

    [switch]
    ${UseTokenStore},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${UserName},

    [System.Object]
    ${TokenStoreId},

    [switch]
    ${RemoteSendEnabled},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${Eas},

    [System.Object]
    ${SmtpServerName},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${SkipInitialConnectionValidation},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${Calendar},

    [switch]
    ${Imap},

    [switch]
    ${ThirdPartyCalendarSync},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${GroupMailbox},

    [System.Object]
    ${RemoteEmailAddress},

    [System.Object]
    ${RemoteUserIdentifier},

    [System.Object]
    ${SmtpServerPort},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AccessToken},

    [switch]
    ${Xrm},

    [System.Object]
    ${ExcludeFolders},

    [System.Object]
    ${SkipMerging},

    [System.Object]
    ${Security},

    [System.Object]
    ${RefreshToken},

    [System.Object]
    ${ProviderArgs},

    [System.Object]
    ${CompletedRequestAgeLimit},

    [System.Object]
    ${RemoteServerName},

    [switch]
    ${AsJob})

}
function New-TransportRule
{

param(
    [System.Object]
    ${ActivationDate},

    [System.Object]
    ${AddToRecipients},

    [System.Object]
    ${ApplyHtmlDisclaimerFallbackAction},

    [System.Object]
    ${ExceptIfRecipientADAttributeContainsWords},

    [System.Object]
    ${RecipientADAttributeMatchesPatterns},

    [System.Object]
    ${AttachmentSizeOver},

    [System.Object]
    ${ExceptIfSenderADAttributeContainsWords},

    [System.Object]
    ${SetSCL},

    [System.Object]
    ${AnyOfToHeaderMemberOf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Disconnect},

    [System.Object]
    ${ExceptIfSentToMemberOf},

    [System.Object]
    ${ExceptIfAnyOfCcHeader},

    [System.Object]
    ${ExceptIfAttachmentMatchesPatterns},

    [System.Object]
    ${RecipientDomainIs},

    [System.Object]
    ${ManagerForEvaluatedUser},

    [System.Object]
    ${SmtpRejectMessageRejectStatusCode},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ExceptIfHeaderMatchesPatterns},

    [System.Object]
    ${ExceptIfFromScope},

    [System.Object]
    ${ADComparisonAttribute},

    [System.Object]
    ${ExceptIfAttachmentContainsWords},

    [System.Object]
    ${ExceptIfHeaderContainsWords},

    [System.Object]
    ${HeaderMatchesPatterns},

    [System.Object]
    ${ExceptIfAttachmentIsPasswordProtected},

    [System.Object]
    ${DeleteMessage},

    [System.Object]
    ${HasSenderOverride},

    [System.Object]
    ${ExceptIfSubjectOrBodyMatchesPatterns},

    [System.Object]
    ${ExceptIfHasClassification},

    [System.Object]
    ${Quarantine},

    [System.Object]
    ${ExceptIfAnyOfRecipientAddressMatchesPatterns},

    [System.Object]
    ${RecipientAddressType},

    [System.Object]
    ${ExceptIfContentCharacterSetContainsWords},

    [System.Object]
    ${BlindCopyTo},

    [System.Object]
    ${ApplyHtmlDisclaimerLocation},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ExceptIfMessageTypeMatches},

    [System.Object]
    ${SenderIpRanges},

    [System.Object]
    ${ExceptIfMessageContainsDataClassifications},

    [System.Object]
    ${ModerateMessageByUser},

    [System.Object]
    ${HasNoClassification},

    [System.Object]
    ${ExceptIfSenderInRecipientList},

    [System.Object]
    ${HeaderContainsMessageHeader},

    [System.Object]
    ${RemoveHeader},

    [System.Object]
    ${HasClassification},

    [System.Object]
    ${MessageContainsDataClassifications},

    [System.Object]
    ${ExceptIfFromMemberOf},

    [System.Object]
    ${RuleSubType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SentToScope},

    [System.Object]
    ${AnyOfToCcHeaderMemberOf},

    [System.Object]
    ${From},

    [System.Object]
    ${ExceptIfAnyOfRecipientAddressContainsWords},

    [System.Object]
    ${ExceptIfWithImportance},

    [System.Object]
    ${ContentCharacterSetContainsWords},

    [System.Object]
    ${SubjectContainsWords},

    [System.Object]
    ${RejectMessageEnhancedStatusCode},

    [System.Object]
    ${SenderADAttributeMatchesPatterns},

    [System.Object]
    ${ExceptIfSenderADAttributeMatchesPatterns},

    [System.Object]
    ${IncidentReportContent},

    [System.Object]
    ${UseLegacyRegex},

    [System.Object]
    ${FromMemberOf},

    [System.Object]
    ${AttachmentContainsWords},

    [System.Object]
    ${ExceptIfSCLOver},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ExceptIfBetweenMemberOf1},

    [System.Object]
    ${GenerateNotification},

    [System.Object]
    ${NotifySender},

    [System.Object]
    ${ExceptIfAttachmentNameMatchesPatterns},

    [System.Object]
    ${ExceptIfSenderManagementRelationship},

    [System.Object]
    ${SetAuditSeverity},

    [System.Object]
    ${AttachmentPropertyContainsWords},

    [System.Object]
    ${ExceptIfAnyOfToHeader},

    [System.Object]
    ${ApplyRightsProtectionCustomizationTemplate},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RouteMessageOutboundRequireTls},

    [System.Object]
    ${WithImportance},

    [System.Object]
    ${RuleErrorAction},

    [System.Object]
    ${FromScope},

    [System.Object]
    ${AttachmentNameMatchesPatterns},

    [System.Object]
    ${SentTo},

    [System.Object]
    ${ExceptIfFromAddressMatchesPatterns},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${ExceptIfAttachmentSizeOver},

    [System.Object]
    ${ExceptIfManagerForEvaluatedUser},

    [System.Object]
    ${RemoveOMEv2},

    [System.Object]
    ${ExceptIfFromAddressContainsWords},

    [System.Object]
    ${AttachmentHasExecutableContent},

    [System.Object]
    ${RouteMessageOutboundConnector},

    [System.Object]
    ${SubjectMatchesPatterns},

    [System.Object]
    ${ExceptIfRecipientDomainIs},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExceptIfSenderDomainIs},

    [System.Object]
    ${SenderManagementRelationship},

    [System.Object]
    ${ExceptIfBetweenMemberOf2},

    [System.Object]
    ${RedirectMessageTo},

    [System.Object]
    ${ApplyOME},

    [System.Object]
    ${AddManagerAsRecipientType},

    [System.Object]
    ${ExceptIfMessageSizeOver},

    [System.Object]
    ${RecipientInSenderList},

    [System.Object]
    ${SenderADAttributeContainsWords},

    [System.Object]
    ${MessageSizeOver},

    [System.Object]
    ${ExceptIfRecipientInSenderList},

    [System.Object]
    ${ExceptIfAttachmentHasExecutableContent},

    [System.Object]
    ${ExceptIfAttachmentIsUnsupported},

    [System.Object]
    ${RemoveOME},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${RejectMessageReasonText},

    [System.Object]
    ${RecipientAddressContainsWords},

    [System.Object]
    ${GenerateIncidentReport},

    [System.Object]
    ${FromAddressContainsWords},

    [System.Object]
    ${AnyOfRecipientAddressMatchesPatterns},

    [System.Object]
    ${ApplyHtmlDisclaimerText},

    [System.Object]
    ${RecipientAddressMatchesPatterns},

    [System.Object]
    ${ExceptIfSubjectContainsWords},

    [System.Object]
    ${ExceptIfFrom},

    [System.Object]
    ${AnyOfToCcHeader},

    [System.Object]
    ${ExceptIfSentToScope},

    [System.Object]
    ${ExceptIfAnyOfToCcHeaderMemberOf},

    [System.Object]
    ${ModerateMessageByManager},

    [System.Object]
    ${ADComparisonOperator},

    [System.Object]
    ${BetweenMemberOf2},

    [System.Object]
    ${SetHeaderName},

    [System.Object]
    ${AttachmentProcessingLimitExceeded},

    [System.Object]
    ${ExceptIfAnyOfCcHeaderMemberOf},

    [System.Object]
    ${ExceptIfSubjectMatchesPatterns},

    [System.Object]
    ${Name},

    [System.Object]
    ${ExceptIfRecipientAddressContainsWords},

    [System.Object]
    ${HeaderMatchesMessageHeader},

    [System.Object]
    ${AnyOfRecipientAddressContainsWords},

    [System.Object]
    ${HeaderContainsWords},

    [System.Object]
    ${Comments},

    [System.Object]
    ${SentToMemberOf},

    [System.Object]
    ${ExceptIfADComparisonAttribute},

    [System.Object]
    ${ExceptIfSentTo},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ExceptIfADComparisonOperator},

    [System.Object]
    ${ExceptIfAnyOfToHeaderMemberOf},

    [System.Object]
    ${Mode},

    [System.Object]
    ${ExceptIfAnyOfToCcHeader},

    [System.Object]
    ${SubjectOrBodyMatchesPatterns},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExceptIfAttachmentExtensionMatchesWords},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SenderDomainIs},

    [System.Object]
    ${ExceptIfRecipientAddressMatchesPatterns},

    [System.Object]
    ${ExceptIfHasNoClassification},

    [System.Object]
    ${ExceptIfSenderIpRanges},

    [System.Object]
    ${ExceptIfRecipientADAttributeMatchesPatterns},

    [System.Object]
    ${RecipientADAttributeContainsWords},

    [System.Object]
    ${AttachmentIsUnsupported},

    [System.Object]
    ${ExpiryDate},

    [System.Object]
    ${AttachmentExtensionMatchesWords},

    [System.Object]
    ${ExceptIfSubjectOrBodyContainsWords},

    [System.Object]
    ${LogEventText},

    [System.Object]
    ${ExceptIfManagerAddresses},

    [System.Object]
    ${SenderInRecipientList},

    [System.Object]
    ${AttachmentMatchesPatterns},

    [System.Object]
    ${DlpPolicy},

    [System.Object]
    ${ManagerAddresses},

    [System.Object]
    ${SenderAddressLocation},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CopyTo},

    [System.Object]
    ${SubjectOrBodyContainsWords},

    [System.Object]
    ${ApplyClassification},

    [System.Object]
    ${SetHeaderValue},

    [System.Object]
    ${Priority},

    [System.Object]
    ${AttachmentIsPasswordProtected},

    [System.Object]
    ${BetweenMemberOf1},

    [System.Object]
    ${AnyOfCcHeader},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ExceptIfAttachmentProcessingLimitExceeded},

    [System.Object]
    ${FromAddressMatchesPatterns},

    [System.Object]
    ${ExceptIfHeaderMatchesMessageHeader},

    [System.Object]
    ${SmtpRejectMessageRejectText},

    [System.Object]
    ${AnyOfCcHeaderMemberOf},

    [System.Object]
    ${AnyOfToHeader},

    [System.Object]
    ${ExceptIfHasSenderOverride},

    [System.Object]
    ${SCLOver},

    [System.Object]
    ${PrependSubject},

    [System.Object]
    ${ApplyRightsProtectionTemplate},

    [System.Object]
    ${MessageTypeMatches},

    [System.Object]
    ${ExceptIfAttachmentPropertyContainsWords},

    [System.Object]
    ${StopRuleProcessing},

    [System.Object]
    ${ExceptIfHeaderContainsMessageHeader},

    [switch]
    ${AsJob})

}
function New-UMAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${SpeechEnabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${PilotIdentifierList},

    [System.Object]
    ${DTMFFallbackAutoAttendant},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Status},

    [System.Object]
    ${UMDialPlan},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-UMCallAnsweringRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${CallerIds},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${CallersCanInterruptGreeting},

    [System.Object]
    ${ScheduleStatus},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${TimeOfDay},

    [System.Object]
    ${CheckAutomaticReplies},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExtensionsDialed},

    [System.Object]
    ${KeyMappings},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-UMDialPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [System.Object]
    ${CountryOrRegionCode},

    [System.Object]
    ${GenerateUMMailboxPolicy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${NumberOfDigitsInExtension},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${FaxEnabled},

    [System.Object]
    ${AccessTelephoneNumbers},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DefaultLanguage},

    [System.Object]
    ${URIType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-UMHuntGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${UMIPGateway},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${PilotIdentifier},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${UMDialPlan},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-UMMailboxPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${UMDialPlan},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-UnifiedGroup
{

param(
    [System.Object]
    ${MailboxRegion},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RequireSenderAuthenticationEnabled},

    [switch]
    ${ConvertClosedDlToPrivateGroup},

    [switch]
    ${ExoErrorAsWarning},

    [System.Object]
    ${DisplayName},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Classification},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${HiddenGroupMembershipEnabled},

    [switch]
    ${AutoSubscribeNewMembers},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ExecutingUser},

    [switch]
    ${SuppressWarmupMessage},

    [switch]
    ${SubscriptionEnabled},

    [System.Object]
    ${DlIdentity},

    [switch]
    ${AlwaysSubscribeMembersToCalendarEvents},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Members},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${DeleteDlAfterMigration},

    [System.Object]
    ${Owner},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Notes},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Alias},

    [System.Object]
    ${ManagedBy},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Language},

    [System.Object]
    ${PrimarySmtpAddress},

    [System.Object]
    ${DataEncryptionPolicy},

    [System.Object]
    ${AccessType},

    [System.Object]
    ${Name},

    [System.Object]
    ${EmailAddresses},

    [System.Object]
    ${SensitivityLabelId},

    [switch]
    ${AsJob})

}
function Preview-QuarantineMessage
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Release-QuarantineMessage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${ReportFalsePositive},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${AllowSender},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${ReleaseToAll},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Identities},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ActiveSyncDevice
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ActiveSyncDeviceAccessRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ActiveSyncMailboxPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-AntiPhishPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-AntiPhishRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-App
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${OrganizationApp},

    [switch]
    ${PrivateCatalog},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ApplicationAccessPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ATPEvaluation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${OrganizationId},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-AuditConfigurationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-AuditConfigurationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-AuditStubFolder
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${FolderName},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-AuthenticationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-AvailabilityAddressSpace
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-AvailabilityConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-BlockedSenderAddress
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Reason},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SenderAddress},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CalendarEvents
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${QueryStartDate},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${CancelOrganizedMeetings},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${QueryWindowInDays},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${PreviewOnly},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ClassificationRuleCollection
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ClientAccessRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CompliancePolicyFileSyncNotification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CompliancePolicySyncNotification
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Remove-ConnectSubscription
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DataClassification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DistributionGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DistributionGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [System.Object]
    ${Member},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DlpPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DynamicDistributionGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-EmailAddressPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-HostedConnectionFilterPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-HostedContentFilterPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-HostedContentFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-HostedOutboundSpamFilterPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-HostedOutboundSpamFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-HybridConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-InboundConnector
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-InboxRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${AlwaysDeleteOutlookRulesBlob},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-IntraOrganizationConnector
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-JournalRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-Mailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${PublicFolder},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${PermanentlyDelete},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${IgnoreLegalHold},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Migration},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MailboxFolderPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SendNotificationToUser},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MailboxLocation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MailboxPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${ClearAutoMapping},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AccessRights},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${GroupMailbox},

    [switch]
    ${BypassMasterAccountSid},

    [switch]
    ${Deny},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${SoftDeletedMailbox},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ResetDefault},

    [System.Object]
    ${InheritanceType},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MailboxRestoreRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MailboxSearch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MailboxUserConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MailContact
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MailUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${PermanentlyDelete},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${IgnoreLegalHold},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MalwareFilterPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MalwareFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ManagementRole
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [switch]
    ${Recurse},

    [switch]
    ${AsJob})

}
function Remove-ManagementRoleAssignment
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ManagementRoleEntry
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ManagementScope
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MessageClassification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MigrationBatch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MigrationEndpoint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MigrationUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MobileDevice
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MobileDeviceMailboxPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MoveRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ProxyToMailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-OnPremisesOrganization
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-OrganizationRelationship
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-OutboundConnector
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-OutlookProtectionRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-OwaMailboxPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-PartnerApplication
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-PolicyTipConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-PublicFolder
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${Recurse},

    [switch]
    ${AsJob})

}
function Remove-PublicFolderClientPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-PublicFolderMailboxMigrationRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RecipientPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AccessRights},

    [System.Object]
    ${Trustee},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RemoteDomain
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ReportSchedule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${IncludeDLP},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ScheduleId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ReportSubmissionPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Remove-RetentionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RetentionPolicyTag
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RMSTrustedPublishingDomain
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RoleAssignmentPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RoleGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RoleGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [System.Object]
    ${Member},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-SharingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-Subscription
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-SweepRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-SyncMailPublicFolder
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-SyncRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Xrm},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-TransportRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-UMAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-UMCallAnsweringRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-UMDialPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-UMHuntGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-UMIPGateway
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-UMMailboxPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-UnifiedGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-UnifiedGroupLinks
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${LinkType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Links},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-UserPhoto
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PhotoType},

    [switch]
    ${ClearMailboxPhotoRecord},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Reset-ShadowCalendar
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CalendarId},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Reset-TxpBlockStatus
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Resume-MailboxRestoreRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Resume-MoveRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ProxyToMailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${SuspendWhenReadyToComplete},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Resume-PublicFolderMailboxMigrationRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Resume-SyncRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Revoke-ElevatedAccessAuthorization
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RequestId},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Organization},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Rotate-DkimSigningConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${KeySize},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Search-AdminAuditLog
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${ObjectIds},

    [System.Object]
    ${StartIndex},

    [System.Object]
    ${ExternalAccess},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Parameters},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Cmdlets},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${UserIds},

    [System.Object]
    ${IsSuccess},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Search-MailboxAuditLog
{

param(
    [switch]
    ${ShowDetails},

    [switch]
    ${IncludeInactiveMailbox},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${LogonTypes},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ExternalAccess},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Operations},

    [System.Object]
    ${Identity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Mailboxes},

    [System.Object]
    ${HasAttachments},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Search-MessageTrackingReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Subject},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Recipients},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${BypassDelegateChecking},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${DoNotResolve},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Sender},

    [System.Object]
    ${MessageEntryId},

    [System.Object]
    ${MessageId},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Search-UnifiedAuditLog
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${ObjectIds},

    [System.Object]
    ${IPAddresses},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Operations},

    [switch]
    ${Formatted},

    [System.Object]
    ${FreeText},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SiteIds},

    [System.Object]
    ${SessionId},

    [System.Object]
    ${SessionCommand},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${UserIds},

    [System.Object]
    ${RecordType},

    [System.Object]
    ${StartDate},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Send-TextMessagingVerificationCode
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-AcceptedDomain
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${EnableNego2Authentication},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainType},

    [System.Object]
    ${MatchSubDomains},

    [System.Object]
    ${OutboundOnly},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ActiveSyncDeviceAccessRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AccessLevel},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ActiveSyncMailboxPolicy
{

param(
    [System.Object]
    ${AllowUnsignedApplications},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowUnsignedInstallationPackages},

    [System.Object]
    ${MaxInactivityTimeDeviceLock},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AllowExternalDeviceManagement},

    [System.Object]
    ${RequireDeviceEncryption},

    [System.Object]
    ${AllowStorageCard},

    [System.Object]
    ${AllowIrDA},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AllowNonProvisionableDevices},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${UnapprovedInROMApplicationList},

    [System.Object]
    ${DevicePasswordEnabled},

    [System.Object]
    ${RequireEncryptedSMIMEMessages},

    [System.Object]
    ${DevicePasswordHistory},

    [System.Object]
    ${AllowInternetSharing},

    [System.Object]
    ${MinDevicePasswordComplexCharacters},

    [System.Object]
    ${RequireSignedSMIMEAlgorithm},

    [System.Object]
    ${MaxEmailHTMLBodyTruncationSize},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${DevicePasswordExpiration},

    [System.Object]
    ${UNCAccessEnabled},

    [System.Object]
    ${AllowCamera},

    [System.Object]
    ${AllowTextMessaging},

    [System.Object]
    ${MaxDevicePasswordFailedAttempts},

    [System.Object]
    ${AllowBrowser},

    [System.Object]
    ${MaxEmailAgeFilter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${RequireManualSyncWhenRoaming},

    [System.Object]
    ${AllowSMIMEEncryptionAlgorithmNegotiation},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${DeviceEncryptionEnabled},

    [System.Object]
    ${MaxEmailBodyTruncationSize},

    [System.Object]
    ${AllowBluetooth},

    [System.Object]
    ${RequireEncryptionSMIMEAlgorithm},

    [System.Object]
    ${DevicePolicyRefreshInterval},

    [System.Object]
    ${AllowMobileOTAUpdate},

    [System.Object]
    ${MaxAttachmentSize},

    [System.Object]
    ${AllowConsumerEmail},

    [System.Object]
    ${AllowDesktopSync},

    [System.Object]
    ${PasswordRecoveryEnabled},

    [System.Object]
    ${AlphanumericDevicePasswordRequired},

    [System.Object]
    ${RequireStorageCardEncryption},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowSMIMESoftCerts},

    [System.Object]
    ${AllowRemoteDesktop},

    [System.Object]
    ${AllowSimpleDevicePassword},

    [System.Object]
    ${AttachmentsEnabled},

    [System.Object]
    ${MaxCalendarAgeFilter},

    [System.Object]
    ${AllowWiFi},

    [System.Object]
    ${AllowApplePushNotifications},

    [System.Object]
    ${AllowPOPIMAPEmail},

    [System.Object]
    ${IsDefault},

    [System.Object]
    ${IsDefaultPolicy},

    [System.Object]
    ${ApprovedApplicationList},

    [System.Object]
    ${Name},

    [System.Object]
    ${WSSAccessEnabled},

    [System.Object]
    ${RequireSignedSMIMEMessages},

    [System.Object]
    ${AllowHTMLEmail},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${MinDevicePasswordLength},

    [System.Object]
    ${IrmEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-ActiveSyncOrganizationSettings
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AllowRMSSupportForUnenlightenedApps},

    [System.Object]
    ${UserMailInsert},

    [System.Object]
    ${DefaultAccessLevel},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OtaNotificationMailInsert},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${EnableMobileMailboxPolicyWhenCAInplace},

    [System.Object]
    ${AllowAccessForUnSupportedPlatform},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${TenantAdminPreference},

    [System.Object]
    ${AdminMailRecipients},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-AdminAuditLogConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${UnifiedAuditLogIngestionEnabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-AntiPhishPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${EnableUnauthenticatedSender},

    [System.Object]
    ${EnableAntiSpoofEnforcement},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AdminDisplayName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AuthenticationFailAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${MakeDefault},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-AntiPhishRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [System.Object]
    ${SentToMemberOf},

    [System.Object]
    ${AntiPhishPolicy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SentTo},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Comments},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RecipientDomainIs},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ExceptIfRecipientDomainIs},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExceptIfSentTo},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExceptIfSentToMemberOf},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-App
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${DefaultStateForUser},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${UserList},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${OrganizationApp},

    [System.Object]
    ${ProvidedTo},

    [switch]
    ${PrivateCatalog},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ApplicationAccessPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-AuthenticationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${AllowBasicAuthRpc},

    [switch]
    ${AllowBasicAuthPop},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AllowBasicAuthSmtp},

    [switch]
    ${AllowBasicAuthMapi},

    [switch]
    ${AllowBasicAuthImap},

    [switch]
    ${AllowBasicAuthAutodiscover},

    [switch]
    ${AllowBasicAuthPowershell},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AllowBasicAuthActiveSync},

    [switch]
    ${AllowBasicAuthOfflineAddressBook},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${AllowBasicAuthReportingWebServices},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AllowBasicAuthOutlookService},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${AllowBasicAuthWebServices},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-AvailabilityConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${OrgWideAccount},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CalendarNotification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DailyAgendaNotificationSendTime},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${DailyAgendaNotification},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${MeetingReminderSendDuringWorkHour},

    [System.Object]
    ${NextDays},

    [System.Object]
    ${CalendarUpdateNotification},

    [System.Object]
    ${MeetingReminderNotification},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${CalendarUpdateSendDuringWorkHour},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CalendarProcessing
{

param(
    [System.Object]
    ${MaximumConflictInstances},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${BookingType},

    [System.Object]
    ${ForwardRequestsToDelegates},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResourceDelegates},

    [System.Object]
    ${DeleteNonCalendarItems},

    [System.Object]
    ${DeleteComments},

    [System.Object]
    ${EnforceSchedulingHorizon},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${EnableResponseDetails},

    [System.Object]
    ${RequestInPolicy},

    [System.Object]
    ${AutoRSVPConfiguration},

    [switch]
    ${IgnoreDefaultScope},

    [System.Object]
    ${AllowConflicts},

    [System.Object]
    ${AllRequestInPolicy},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${BookInPolicy},

    [System.Object]
    ${ConflictPercentageAllowed},

    [System.Object]
    ${AutomateProcessing},

    [System.Object]
    ${AllRequestOutOfPolicy},

    [System.Object]
    ${AddNewRequestsTentatively},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AllBookInPolicy},

    [System.Object]
    ${ProcessExternalMeetingMessages},

    [System.Object]
    ${DeleteAttachments},

    [System.Object]
    ${ScheduleOnlyDuringWorkHours},

    [System.Object]
    ${RemovePrivateProperty},

    [System.Object]
    ${AdditionalResponse},

    [System.Object]
    ${TentativePendingApproval},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${MaximumDurationInMinutes},

    [System.Object]
    ${OrganizerInfo},

    [System.Object]
    ${RequestOutOfPolicy},

    [System.Object]
    ${RemoveOldMeetingMessages},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${BookingWindowInDays},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AddAdditionalResponse},

    [System.Object]
    ${RemoveForwardedMeetingNotifications},

    [System.Object]
    ${DeleteSubject},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AllowRecurringMeetings},

    [System.Object]
    ${AddOrganizerToSubject},

    [switch]
    ${AsJob})

}
function Set-CASMailbox
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${IsOptimizedForAccessibility},

    [System.Object]
    ${ImapEnabled},

    [System.Object]
    ${ImapSuppressReadReceipt},

    [System.Object]
    ${ActiveSyncSuppressReadReceipt},

    [System.Object]
    ${Identity},

    [System.Object]
    ${EwsBlockList},

    [System.Object]
    ${EwsAllowEntourage},

    [System.Object]
    ${OwaMailboxPolicy},

    [System.Object]
    ${PopUseProtocolDefaults},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SmtpClientAuthenticationDisabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PopForceICalForCalendarRetrievalOption},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ImapForceICalForCalendarRetrievalOption},

    [System.Object]
    ${ShowGalAsDefaultView},

    [System.Object]
    ${OutlookMobileEnabled},

    [System.Object]
    ${ActiveSyncBlockedDeviceIDs},

    [System.Object]
    ${MAPIEnabled},

    [System.Object]
    ${EwsAllowOutlook},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${PopEnabled},

    [System.Object]
    ${ActiveSyncAllowedDeviceIDs},

    [System.Object]
    ${EwsEnabled},

    [System.Object]
    ${EwsAllowMacOutlook},

    [System.Object]
    ${EwsApplicationAccessPolicy},

    [System.Object]
    ${PublicFolderClientAccess},

    [System.Object]
    ${OWAEnabled},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ActiveSyncEnabled},

    [System.Object]
    ${ActiveSyncMailboxPolicy},

    [System.Object]
    ${UniversalOutlookEnabled},

    [System.Object]
    ${ImapUseProtocolDefaults},

    [System.Object]
    ${ActiveSyncDebugLogging},

    [System.Object]
    ${OWAforDevicesEnabled},

    [System.Object]
    ${ImapMessagesRetrievalMimeFormat},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${MacOutlookEnabled},

    [System.Object]
    ${PopSuppressReadReceipt},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EwsAllowList},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${PopMessagesRetrievalMimeFormat},

    [switch]
    ${AsJob})

}
function set-CASMailboxPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ImapEnabled},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${OwaMailboxPolicy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PopEnabled},

    [System.Object]
    ${ActiveSyncEnabled},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ClassificationRuleCollection
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ClientAccessRule
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UsernameMatchesAnyOfPatterns},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Action},

    [System.Object]
    ${AnyOfClientIPAddressesOrRanges},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${ExceptAnyOfClientIPAddressesOrRanges},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${UserRecipientFilter},

    [System.Object]
    ${ExceptAnyOfProtocols},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Priority},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ExceptUsernameMatchesAnyOfPatterns},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AnyOfAuthenticationTypes},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AnyOfProtocols},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ExceptAnyOfAuthenticationTypes},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Scope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-Clutter
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Enable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ConnectSubscription
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RequestToken},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${OAuthVerifier},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RequestSecret},

    [switch]
    ${LinkedIn},

    [System.Object]
    ${RedirectUri},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-Contact
{

param(
    [System.Object]
    ${Company},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Phone},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Office},

    [System.Object]
    ${CountryOrRegion},

    [System.Object]
    ${OtherTelephone},

    [System.Object]
    ${Pager},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${PhoneticDisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Fax},

    [System.Object]
    ${PostOfficeBox},

    [System.Object]
    ${LastName},

    [System.Object]
    ${UMCallingLineIds},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${SeniorityIndex},

    [System.Object]
    ${City},

    [System.Object]
    ${TelephoneAssistant},

    [System.Object]
    ${AllowUMCallsFromNonUsers},

    [System.Object]
    ${Title},

    [System.Object]
    ${MobilePhone},

    [System.Object]
    ${AssistantName},

    [System.Object]
    ${CreateDTMFMap},

    [System.Object]
    ${StateOrProvince},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Initials},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${WebPage},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Manager},

    [System.Object]
    ${HomePhone},

    [System.Object]
    ${OtherFax},

    [System.Object]
    ${SimpleDisplayName},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Department},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OtherHomePhone},

    [System.Object]
    ${FirstName},

    [System.Object]
    ${UMDtmfMap},

    [System.Object]
    ${WindowsEmailAddress},

    [System.Object]
    ${Notes},

    [System.Object]
    ${Name},

    [System.Object]
    ${GeoCoordinates},

    [System.Object]
    ${StreetAddress},

    [System.Object]
    ${PostalCode},

    [switch]
    ${AsJob})

}
function Set-DataClassification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Locale},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Fingerprints},

    [switch]
    ${IsDefault},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DataEncryptionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${PermanentDataPurgeRequested},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${PermanentDataPurgeReason},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${PermanentDataPurgeContact},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DistributionGroup
{

param(
    [System.Object]
    ${EmailAddresses},

    [System.Object]
    ${RejectMessagesFromDLMembers},

    [System.Object]
    ${ModerationEnabled},

    [System.Object]
    ${AcceptMessagesOnlyFromSendersOrMembers},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExtensionCustomAttribute5},

    [System.Object]
    ${CustomAttribute8},

    [System.Object]
    ${CustomAttribute5},

    [System.Object]
    ${AcceptMessagesOnlyFromDLMembers},

    [System.Object]
    ${SimpleDisplayName},

    [switch]
    ${IgnoreNamingPolicy},

    [System.Object]
    ${ReportToManagerEnabled},

    [System.Object]
    ${MailTip},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${GrantSendOnBehalfTo},

    [switch]
    ${ResetMigrationToUnifiedGroup},

    [System.Object]
    ${AcceptMessagesOnlyFrom},

    [System.Object]
    ${BypassNestedModerationEnabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${MemberDepartRestriction},

    [System.Object]
    ${ExtensionCustomAttribute4},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CustomAttribute15},

    [System.Object]
    ${RejectMessagesFromSendersOrMembers},

    [System.Object]
    ${WindowsEmailAddress},

    [System.Object]
    ${ReportToOriginatorEnabled},

    [System.Object]
    ${Alias},

    [System.Object]
    ${DisplayName},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${BypassModerationFromSendersOrMembers},

    [System.Object]
    ${RejectMessagesFrom},

    [System.Object]
    ${CustomAttribute1},

    [switch]
    ${ForceUpgrade},

    [System.Object]
    ${UMDtmfMap},

    [System.Object]
    ${ManagedBy},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ExtensionCustomAttribute1},

    [System.Object]
    ${CustomAttribute14},

    [System.Object]
    ${RequireSenderAuthenticationEnabled},

    [System.Object]
    ${CustomAttribute9},

    [System.Object]
    ${CustomAttribute6},

    [System.Object]
    ${SendOofMessageToOriginatorEnabled},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${CustomAttribute7},

    [System.Object]
    ${ExtensionCustomAttribute2},

    [System.Object]
    ${CustomAttribute13},

    [System.Object]
    ${CustomAttribute2},

    [System.Object]
    ${PrimarySmtpAddress},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SendModerationNotifications},

    [System.Object]
    ${MemberJoinRestriction},

    [System.Object]
    ${CreateDTMFMap},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${MailTipTranslations},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CustomAttribute4},

    [System.Object]
    ${CustomAttribute10},

    [System.Object]
    ${Name},

    [System.Object]
    ${ExtensionCustomAttribute3},

    [switch]
    ${RoomList},

    [System.Object]
    ${CustomAttribute12},

    [System.Object]
    ${CustomAttribute3},

    [System.Object]
    ${CustomAttribute11},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Identity},

    [System.Object]
    ${HiddenFromAddressListsEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-DkimSigningConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AdminDisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${BodyCanonicalization},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${PublishTxtRecords},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${HeaderCanonicalization},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DlpPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${State},

    [System.Object]
    ${Mode},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DynamicDistributionGroup
{

param(
    [System.Object]
    ${EmailAddresses},

    [System.Object]
    ${ConditionalCustomAttribute6},

    [System.Object]
    ${ModerationEnabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AcceptMessagesOnlyFromSendersOrMembers},

    [System.Object]
    ${ConditionalCustomAttribute7},

    [System.Object]
    ${CustomAttribute12},

    [System.Object]
    ${CustomAttribute10},

    [System.Object]
    ${ExtensionCustomAttribute5},

    [System.Object]
    ${CustomAttribute8},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CustomAttribute5},

    [System.Object]
    ${AcceptMessagesOnlyFromDLMembers},

    [System.Object]
    ${ConditionalCustomAttribute2},

    [System.Object]
    ${ConditionalCustomAttribute1},

    [System.Object]
    ${PhoneticDisplayName},

    [System.Object]
    ${MailTip},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${GrantSendOnBehalfTo},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AcceptMessagesOnlyFrom},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ConditionalCustomAttribute9},

    [System.Object]
    ${ConditionalCustomAttribute4},

    [System.Object]
    ${CustomAttribute15},

    [System.Object]
    ${RejectMessagesFromSendersOrMembers},

    [System.Object]
    ${WindowsEmailAddress},

    [System.Object]
    ${ConditionalCustomAttribute13},

    [System.Object]
    ${RejectMessagesFromDLMembers},

    [System.Object]
    ${RejectMessagesFrom},

    [System.Object]
    ${Alias},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${ReportToOriginatorEnabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${BypassModerationFromSendersOrMembers},

    [System.Object]
    ${IncludedRecipients},

    [System.Object]
    ${ConditionalCustomAttribute12},

    [System.Object]
    ${CustomAttribute1},

    [System.Object]
    ${ReportToManagerEnabled},

    [switch]
    ${ForceUpgrade},

    [System.Object]
    ${ConditionalCustomAttribute14},

    [System.Object]
    ${UMDtmfMap},

    [System.Object]
    ${ManagedBy},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ExtensionCustomAttribute1},

    [System.Object]
    ${Notes},

    [System.Object]
    ${CustomAttribute14},

    [System.Object]
    ${RequireSenderAuthenticationEnabled},

    [System.Object]
    ${CustomAttribute9},

    [System.Object]
    ${RecipientFilter},

    [System.Object]
    ${CustomAttribute6},

    [System.Object]
    ${SendOofMessageToOriginatorEnabled},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExtensionCustomAttribute4},

    [System.Object]
    ${SimpleDisplayName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ConditionalCompany},

    [System.Object]
    ${CustomAttribute7},

    [System.Object]
    ${ConditionalStateOrProvince},

    [System.Object]
    ${CustomAttribute13},

    [System.Object]
    ${CustomAttribute2},

    [System.Object]
    ${PrimarySmtpAddress},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ConditionalCustomAttribute15},

    [System.Object]
    ${SendModerationNotifications},

    [System.Object]
    ${CreateDTMFMap},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ConditionalCustomAttribute10},

    [System.Object]
    ${ConditionalCustomAttribute5},

    [System.Object]
    ${CustomAttribute3},

    [System.Object]
    ${MailTipTranslations},

    [System.Object]
    ${ConditionalCustomAttribute8},

    [System.Object]
    ${CustomAttribute4},

    [System.Object]
    ${RecipientContainer},

    [System.Object]
    ${CustomAttribute11},

    [System.Object]
    ${ExtensionCustomAttribute2},

    [System.Object]
    ${ConditionalCustomAttribute3},

    [System.Object]
    ${Name},

    [System.Object]
    ${ExtensionCustomAttribute3},

    [System.Object]
    ${ConditionalDepartment},

    [System.Object]
    ${DirectMembershipOnly},

    [System.Object]
    ${ConditionalCustomAttribute11},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Identity},

    [System.Object]
    ${HiddenFromAddressListsEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-ElevatedAccessRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('Identity')]
    [System.Object]
    ${RequestId},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ApprovalDecision')]
    [System.Object]
    ${Decision},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RequestContext},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Organization},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-EmailAddressPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${EnabledEmailAddressTemplates},

    [switch]
    ${ForceUpgrade},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${EnabledPrimarySMTPAddressTemplate},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-FederatedOrganizationIdentifier
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AccountNamespace},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${DelegationFederationTrust},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OrganizationContact},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${DefaultDomain},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-FocusedInbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${FocusedInboxOn},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-Group
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${IsHierarchicalGroup},

    [System.Object]
    ${DisplayName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SimpleDisplayName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Universal},

    [System.Object]
    ${Notes},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Name},

    [System.Object]
    ${Identity},

    [System.Object]
    ${PhoneticDisplayName},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [System.Object]
    ${SeniorityIndex},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ManagedBy},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${WindowsEmailAddress},

    [switch]
    ${AsJob})

}
function Set-GroupMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PrimarySmtpAddress},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RequireSenderAuthenticationEnabled},

    [System.Object]
    ${Language},

    [switch]
    ${AutoSubscribeNewGroupMembers},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-HostedConnectionFilterPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ConfigurationXmlRaw},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AdminDisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EnableSafeList},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${IPBlockList},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${IPAllowList},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${MakeDefault},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-HostedContentFilterPolicy
{

param(
    [System.Object]
    ${HighConfidenceSpamAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${MakeDefault},

    [System.Object]
    ${QuarantineRetentionPeriod},

    [System.Object]
    ${MarkAsSpamWebBugsInHtml},

    [System.Object]
    ${EndUserSpamNotificationCustomFromName},

    [System.Object]
    ${MarkAsSpamFromAddressAuthFail},

    [System.Object]
    ${Identity},

    [System.Object]
    ${EndUserSpamNotificationCustomFromAddress},

    [System.Object]
    ${IncreaseScoreWithRedirectToOtherPort},

    [System.Object]
    ${BulkThreshold},

    [System.Object]
    ${EnableLanguageBlockList},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PhishZapEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EndUserSpamNotificationCustomSubject},

    [System.Object]
    ${MarkAsSpamSensitiveWordList},

    [System.Object]
    ${MarkAsSpamFormTagsInHtml},

    [System.Object]
    ${MarkAsSpamNdrBackscatter},

    [System.Object]
    ${AddXHeaderValue},

    [System.Object]
    ${BulkSpamAction},

    [System.Object]
    ${ModifySubjectValue},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${IncreaseScoreWithImageLinks},

    [System.Object]
    ${MarkAsSpamEmptyMessages},

    [System.Object]
    ${MarkAsSpamSpfRecordHardFail},

    [System.Object]
    ${PhishSpamAction},

    [System.Object]
    ${HighConfidencePhishAction},

    [System.Object]
    ${MarkAsSpamJavaScriptInHtml},

    [System.Object]
    ${EnableRegionBlockList},

    [System.Object]
    ${EnableEndUserSpamNotifications},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TestModeAction},

    [System.Object]
    ${RedirectToRecipients},

    [System.Object]
    ${AllowedSenderDomains},

    [System.Object]
    ${MarkAsSpamObjectTagsInHtml},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${MarkAsSpamFramesInHtml},

    [System.Object]
    ${TestModeBccToRecipients},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${MarkAsSpamEmbedTagsInHtml},

    [System.Object]
    ${EndUserSpamNotificationLanguage},

    [System.Object]
    ${EndUserSpamNotificationLimit},

    [System.Object]
    ${SpamAction},

    [System.Object]
    ${InlineSafetyTipsEnabled},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ZapEnabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${SpamZapEnabled},

    [System.Object]
    ${BlockedSenders},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowedSenders},

    [System.Object]
    ${LanguageBlockList},

    [System.Object]
    ${RegionBlockList},

    [System.Object]
    ${IncreaseScoreWithBizOrInfoUrls},

    [System.Object]
    ${AdminDisplayName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${EndUserSpamNotificationFrequency},

    [System.Object]
    ${IncreaseScoreWithNumericIps},

    [System.Object]
    ${BlockedSenderDomains},

    [System.Object]
    ${MarkAsSpamBulkMail},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DownloadLink},

    [switch]
    ${AsJob})

}
function Set-HostedContentFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [System.Object]
    ${SentToMemberOf},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${HostedContentFilterPolicy},

    [System.Object]
    ${SentTo},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Comments},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RecipientDomainIs},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ExceptIfRecipientDomainIs},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExceptIfSentTo},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExceptIfSentToMemberOf},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-HostedOutboundSpamFilterPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AdminDisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${BccSuspiciousOutboundAdditionalRecipients},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${NotifyOutboundSpamRecipients},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RecipientLimitPerDay},

    [System.Object]
    ${ActionWhenThresholdReached},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NotifyOutboundSpam},

    [System.Object]
    ${BccSuspiciousOutboundMail},

    [System.Object]
    ${RecipientLimitInternalPerHour},

    [System.Object]
    ${RecipientLimitExternalPerHour},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-HostedOutboundSpamFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ExceptIfFrom},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExceptIfSenderDomainIs},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Comments},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${FromMemberOf},

    [System.Object]
    ${Identity},

    [System.Object]
    ${SenderDomainIs},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${HostedOutboundSpamFilterPolicy},

    [System.Object]
    ${ExceptIfFromMemberOf},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${From},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-HotmailSubscription
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Password},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-HybridMailflow
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CertificateSubject},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CentralizedTransportEnabled},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${OnPremisesFQDN},

    [System.Object]
    ${SecureMailEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OutboundDomains},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${InboundIPs},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ImapSubscription
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [switch]
    ${ResendVerification},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${Mailbox},

    [System.Object]
    ${EmailAddress},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${IncomingServer},

    [System.Object]
    ${IncomingUserName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${IncomingSecurity},

    [System.Object]
    ${IncomingPort},

    [System.Object]
    ${IncomingPassword},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ValidateSecret},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${Force},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${IncomingAuth},

    [switch]
    ${AsJob})

}
function Set-InboundConnector
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RestrictDomainsToIPAddresses},

    [System.Object]
    ${CloudServicesMailEnabled},

    [System.Object]
    ${Identity},

    [System.Object]
    ${EFTestMode},

    [System.Object]
    ${Enabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EFSkipMailGateway},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${TlsSenderCertificateName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ScanAndDropRecipients},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AssociatedAcceptedDomains},

    [System.Object]
    ${Comment},

    [System.Object]
    ${RequireTls},

    [System.Object]
    ${SenderDomains},

    [System.Object]
    ${SenderIPAddresses},

    [System.Object]
    ${EFSkipLastIP},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EFUsers},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ConnectorType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${RestrictDomainsToCertificate},

    [System.Object]
    ${EFSkipIPs},

    [System.Object]
    ${TreatMessagesAsInternal},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ConnectorSource},

    [System.Object]
    ${Name},

    [switch]
    ${AsJob})

}
function Set-InboxRule
{

param(
    [System.Object]
    ${ExceptIfMyNameNotInToBox},

    [System.Object]
    ${ExceptIfMyNameInToOrCcBox},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PinMessage},

    [System.Object]
    ${WithinSizeRangeMaximum},

    [System.Object]
    ${ReceivedBeforeDate},

    [System.Object]
    ${ExceptIfFromAddressContainsWords},

    [System.Object]
    ${HasClassification},

    [System.Object]
    ${ExceptIfFromSubscription},

    [System.Object]
    ${ExceptIfWithinSizeRangeMaximum},

    [System.Object]
    ${WithinSizeRangeMinimum},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${MyNameInToOrCcBox},

    [System.Object]
    ${ExceptIfReceivedBeforeDate},

    [System.Object]
    ${Mailbox},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ExceptIfFrom},

    [System.Object]
    ${RedirectTo},

    [System.Object]
    ${ReceivedAfterDate},

    [System.Object]
    ${ForwardTo},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ExceptIfReceivedAfterDate},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ExceptIfWithImportance},

    [System.Object]
    ${HeaderContainsWords},

    [System.Object]
    ${ExceptIfSentOnlyToMe},

    [System.Object]
    ${ExceptIfSubjectOrBodyContainsWords},

    [System.Object]
    ${ExceptIfMessageTypeMatches},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExceptIfHasAttachment},

    [System.Object]
    ${DeleteMessage},

    [System.Object]
    ${ExceptIfMyNameInToBox},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${AlwaysDeleteOutlookRulesBlob},

    [System.Object]
    ${From},

    [System.Object]
    ${RecipientAddressContainsWords},

    [System.Object]
    ${FlaggedForAction},

    [System.Object]
    ${WithSensitivity},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CopyToFolder},

    [System.Object]
    ${ExceptIfSubjectContainsWords},

    [System.Object]
    ${MarkImportance},

    [System.Object]
    ${Priority},

    [System.Object]
    ${ApplyCategory},

    [System.Object]
    ${SubjectContainsWords},

    [System.Object]
    ${ExceptIfHeaderContainsWords},

    [System.Object]
    ${ExceptIfRecipientAddressContainsWords},

    [System.Object]
    ${HasAttachment},

    [System.Object]
    ${SubjectOrBodyContainsWords},

    [System.Object]
    ${ExceptIfFlaggedForAction},

    [System.Object]
    ${FromSubscription},

    [System.Object]
    ${BodyContainsWords},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${StopProcessingRules},

    [System.Object]
    ${DeleteSystemCategory},

    [System.Object]
    ${ExceptIfWithinSizeRangeMinimum},

    [System.Object]
    ${MessageTypeMatches},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ApplySystemCategory},

    [System.Object]
    ${SendTextMessageNotificationTo},

    [System.Object]
    ${MarkAsRead},

    [System.Object]
    ${MoveToFolder},

    [System.Object]
    ${SentTo},

    [System.Object]
    ${MyNameInCcBox},

    [System.Object]
    ${WithImportance},

    [System.Object]
    ${MyNameInToBox},

    [System.Object]
    ${ExceptIfSentTo},

    [switch]
    ${Force},

    [System.Object]
    ${SentOnlyToMe},

    [System.Object]
    ${Name},

    [System.Object]
    ${ForwardAsAttachmentTo},

    [System.Object]
    ${ExceptIfBodyContainsWords},

    [System.Object]
    ${ExceptIfMyNameInCcBox},

    [System.Object]
    ${FromAddressContainsWords},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${MyNameNotInToBox},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ExceptIfWithSensitivity},

    [System.Object]
    ${ExceptIfHasClassification},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-IntraOrganizationConnector
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${TargetAddressDomains},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DiscoveryEndpoint},

    [System.Object]
    ${TargetSharingEpr},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-IRMConfiguration
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${TransportDecryptionSetting},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RMSOnlineKeySharingLocation},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SimplifiedClientAccessDoNotForwardDisabled},

    [switch]
    ${Force},

    [System.Object]
    ${AzureRMSLicensingEnabled},

    [System.Object]
    ${EnablePdfEncryption},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DecryptAttachmentForEncryptOnly},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${InternalLicensingEnabled},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EDiscoverySuperUserEnabled},

    [System.Object]
    ${JournalReportDecryptionEnabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AutomaticServiceUpdateEnabled},

    [System.Object]
    ${SimplifiedClientAccessEncryptOnlyDisabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${SearchEnabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${LicensingLocation},

    [System.Object]
    ${SimplifiedClientAccessEnabled},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-JournalRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Scope},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${JournalEmailAddress},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Recipient},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-LabelProperties
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ApplyToUsers},

    [System.Object]
    ${GrantAccessToNoUsers},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-LinkedUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CertificateSubject},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-Mailbox
{

param(
    [System.Object]
    ${EmailAddresses},

    [System.Object]
    ${RejectMessagesFromDLMembers},

    [System.Object]
    ${AuditOwner},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AcceptMessagesOnlyFromSendersOrMembers},

    [switch]
    ${GroupMailbox},

    [System.Object]
    ${UserCertificate},

    [System.Object]
    ${CustomAttribute12},

    [System.Object]
    ${CustomAttribute10},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${DeliverToMailboxAndForward},

    [System.Object]
    ${RetentionUrl},

    [System.Object]
    ${ExtensionCustomAttribute5},

    [switch]
    ${RecalculateInactiveMailbox},

    [System.Object]
    ${CustomAttribute8},

    [System.Object]
    ${ProhibitSendReceiveQuota},

    [System.Object]
    ${CustomAttribute5},

    [System.Object]
    ${RoomMailboxPassword},

    [System.Object]
    ${MessageRecallProcessingEnabled},

    [System.Object]
    ${ElcProcessingDisabled},

    [System.Object]
    ${ExcludeFromOrgHolds},

    [System.Object]
    ${Type},

    [System.Object]
    ${MailTip},

    [System.Object]
    ${IssueWarningQuota},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${GrantSendOnBehalfTo},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AuditLogAgeLimit},

    [System.Object]
    ${UserSMimeCertificate},

    [System.Object]
    ${AcceptMessagesOnlyFrom},

    [System.Object]
    ${SingleItemRecoveryEnabled},

    [switch]
    ${RemoveDisabledArchive},

    [System.Object]
    ${Languages},

    [System.Object]
    ${UseDatabaseQuotaDefaults},

    [System.Object]
    ${JournalArchiveAddress},

    [System.Object]
    ${LitigationHoldDuration},

    [System.Object]
    ${ModerationEnabled},

    [switch]
    ${InactiveMailbox},

    [System.Object]
    ${RetentionComment},

    [System.Object]
    ${MaxReceiveSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${MessageCopyForSendOnBehalfEnabled},

    [System.Object]
    ${CustomAttribute15},

    [System.Object]
    ${LitigationHoldEnabled},

    [switch]
    ${UpdateEnforcedTimestamp},

    [System.Object]
    ${ImmutableId},

    [switch]
    ${PublicFolder},

    [System.Object]
    ${UseDatabaseRetentionDefaults},

    [System.Object]
    ${SharingPolicy},

    [System.Object]
    ${RemoveOrphanedHolds},

    [System.Object]
    ${RejectMessagesFrom},

    [System.Object]
    ${RulesQuota},

    [System.Object]
    ${Alias},

    [System.Object]
    ${EnforcedTimestamps},

    [System.Object]
    ${RejectMessagesFromSendersOrMembers},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${ResourceCustom},

    [System.Object]
    ${DefaultPublicFolderMailbox},

    [System.Object]
    ${BypassModerationFromSendersOrMembers},

    [System.Object]
    ${ProhibitSendQuota},

    [System.Object]
    ${DefaultAuditSet},

    [System.Object]
    ${AcceptMessagesOnlyFromDLMembers},

    [System.Object]
    ${SimpleDisplayName},

    [System.Object]
    ${CustomAttribute1},

    [System.Object]
    ${CalendarRepairDisabled},

    [System.Object]
    ${StsRefreshTokensValidFrom},

    [System.Object]
    ${SecondaryDialPlan},

    [System.Object]
    ${UMDtmfMap},

    [System.Object]
    ${AddressBookPolicy},

    [System.Object]
    ${MailboxRegion},

    [System.Object]
    ${NonCompliantDevices},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ResourceCapacity},

    [System.Object]
    ${LitigationHoldOwner},

    [System.Object]
    ${ExtensionCustomAttribute1},

    [System.Object]
    ${AccountDisabled},

    [System.Object]
    ${WindowsEmailAddress},

    [System.Object]
    ${AuditDelegate},

    [System.Object]
    ${CustomAttribute14},

    [switch]
    ${ApplyMandatoryProperties},

    [System.Object]
    ${RequireSenderAuthenticationEnabled},

    [System.Object]
    ${CustomAttribute9},

    [System.Object]
    ${CustomAttribute6},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExtensionCustomAttribute4},

    [System.Object]
    ${LitigationHoldDate},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${EnableRoomMailboxAccount},

    [System.Object]
    ${RetentionPolicy},

    [System.Object]
    ${RetainDeletedItemsFor},

    [System.Object]
    ${MicrosoftOnlineServicesID},

    [System.Object]
    ${MessageTrackingReadStatusEnabled},

    [System.Object]
    ${AuditAdmin},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ExtensionCustomAttribute2},

    [System.Object]
    ${RetentionHoldEnabled},

    [System.Object]
    ${CustomAttribute13},

    [System.Object]
    ${Identity},

    [System.Object]
    ${CustomAttribute2},

    [switch]
    ${RemoveDelayHoldApplied},

    [System.Object]
    ${ExternalOofOptions},

    [System.Object]
    ${ImListMigrationCompleted},

    [switch]
    ${RemoveMailboxProvisioningConstraint},

    [System.Object]
    ${SendModerationNotifications},

    [System.Object]
    ${EndDateForRetentionHold},

    [System.Object]
    ${RoleAssignmentPolicy},

    [System.Object]
    ${IsExcludedFromServingHierarchy},

    [System.Object]
    ${Office},

    [System.Object]
    ${MaxSendSize},

    [System.Object]
    ${CreateDTMFMap},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${RecipientLimits},

    [System.Object]
    ${MessageCopyForSentAsEnabled},

    [switch]
    ${ProvisionedForOfficeGraph},

    [System.Object]
    ${MailTipTranslations},

    [System.Object]
    ${CustomAttribute7},

    [System.Object]
    ${CustomAttribute4},

    [System.Object]
    ${CalendarVersionStoreDisabled},

    [System.Object]
    ${SecondaryAddress},

    [System.Object]
    ${ArchiveName},

    [System.Object]
    ${StartDateForRetentionHold},

    [System.Object]
    ${AuditEnabled},

    [System.Object]
    ${Password},

    [switch]
    ${Force},

    [System.Object]
    ${Name},

    [System.Object]
    ${ExtensionCustomAttribute3},

    [System.Object]
    ${ForwardingAddress},

    [switch]
    ${ExcludeFromAllOrgHolds},

    [System.Object]
    ${CustomAttribute3},

    [System.Object]
    ${CustomAttribute11},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${RemoveDelayReleaseHoldApplied},

    [System.Object]
    ${ForwardingSmtpAddress},

    [System.Object]
    ${HiddenFromAddressListsEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-MailboxAuditBypassAssociation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AuditBypassEnabled},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MailboxAutoReplyConfiguration
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [System.Object]
    ${DeclineMeetingMessage},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExternalAudience},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DeclineEventsForScheduledOOF},

    [System.Object]
    ${AutoDeclineFutureRequestsWhenOOF},

    [System.Object]
    ${AutoReplyState},

    [System.Object]
    ${EventsToDeleteIDs},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${StartTime},

    [System.Object]
    ${CreateOOFEvent},

    [System.Object]
    ${OOFEventSubject},

    [System.Object]
    ${DeclineAllEventsForScheduledOOF},

    [System.Object]
    ${EndTime},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${InternalMessage},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ExternalMessage},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-MailboxCalendarConfiguration
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${EntertainmentEventsFromEmailEnabled},

    [System.Object]
    ${ConversationalSchedulingEnabled},

    [System.Object]
    ${HotelEventsFromEmailEnabled},

    [System.Object]
    ${SkipAgendaMailOnFreeDays},

    [System.Object]
    ${DiningEventsFromEmailEnabled},

    [System.Object]
    ${Identity},

    [System.Object]
    ${CreateEventsFromEmailAsPrivate},

    [System.Object]
    ${WeatherLocationBookmark},

    [System.Object]
    ${CalendarFeedsPreferredLanguage},

    [System.Object]
    ${PackageDeliveryEventsFromEmailEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RentalCarEventsFromEmailEnabled},

    [System.Object]
    ${DefaultMeetingDuration},

    [System.Object]
    ${ReminderSoundEnabled},

    [System.Object]
    ${WorkingHoursEndTime},

    [System.Object]
    ${AgendaMailIntroductionEnabled},

    [System.Object]
    ${InvoiceEventsFromEmailEnabled},

    [System.Object]
    ${UseBrightCalendarColorThemeInOwa},

    [System.Object]
    ${DefaultReminderTime},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${WorkDays},

    [System.Object]
    ${CalendarFeedsPreferredRegion},

    [System.Object]
    ${ServiceAppointmentEventsFromEmailEnabled},

    [System.Object]
    ${ShowWeekNumbers},

    [System.Object]
    ${RemindersEnabled},

    [System.Object]
    ${WeekStartDay},

    [System.Object]
    ${FirstWeekOfYear},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${WorkingHoursStartTime},

    [System.Object]
    ${CalendarFeedsRootPageId},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${DailyAgendaMailSchedule},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AddOnlineMeetingToAllEvents},

    [System.Object]
    ${WeatherLocations},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${TimeIncrement},

    [System.Object]
    ${WorkingHoursTimeZone},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EventsFromEmailEnabled},

    [System.Object]
    ${WeatherUnit},

    [System.Object]
    ${FlightEventsFromEmailEnabled},

    [System.Object]
    ${WeatherEnabled},

    [System.Object]
    ${AgendaMailEnabled},

    [System.Object]
    ${AgendaPaneEnabled},

    [switch]
    ${AsJob})

}
function Set-MailboxCalendarFolder
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DetailLevel},

    [switch]
    ${UseHttps},

    [switch]
    ${SetAsSharingSource},

    [System.Object]
    ${SharedCalendarSyncStartDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SearchableUrlEnabled},

    [System.Object]
    ${PublishEnabled},

    [System.Object]
    ${PublishDateRangeTo},

    [System.Object]
    ${PublishDateRangeFrom},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${ResetUrl},

    [System.Object]
    ${Identity},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MailboxFolderPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AccessRights},

    [System.Object]
    ${SharingPermissionFlags},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SendNotificationToUser},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MailboxJunkEmailConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${TrustedSendersAndDomains},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${TrustedListsOnly},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${BlockedSendersAndDomains},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ContactsTrusted},

    [System.Object]
    ${TrustedRecipientsAndDomains},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MailboxLocation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MailboxMessageConfiguration
{

param(
    [System.Object]
    ${SendAddressDefault},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AutoAddSignature},

    [System.Object]
    ${NewItemNotification},

    [System.Object]
    ${SignatureText},

    [System.Object]
    ${ShowPreviewTextInListView},

    [System.Object]
    ${ShowReadingPaneOnFirstLoad},

    [System.Object]
    ${Identity},

    [System.Object]
    ${LinkPreviewEnabled},

    [System.Object]
    ${AfterMoveOrDeleteBehavior},

    [System.Object]
    ${DefaultFontColor},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${GlobalReadingPanePosition},

    [System.Object]
    ${PreviewMarkAsReadDelaytime},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AlwaysShowFrom},

    [System.Object]
    ${ShowSenderOnTopInListView},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${IsReplyAllTheDefaultResponse},

    [System.Object]
    ${SignatureHtml},

    [switch]
    ${IgnoreDefaultScope},

    [System.Object]
    ${UseDefaultSignatureOnMobile},

    [System.Object]
    ${DefaultFontName},

    [System.Object]
    ${NavigationPaneViewOption},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${EmailComposeMode},

    [System.Object]
    ${AutoAddSignatureOnReply},

    [System.Object]
    ${HideDeletedItems},

    [System.Object]
    ${ShowConversationAsTree},

    [System.Object]
    ${EchoGroupMessageBackToSubscribedSender},

    [System.Object]
    ${CheckForForgottenAttachments},

    [System.Object]
    ${IsFavoritesFolderTreeCollapsed},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SignatureTextOnMobile},

    [System.Object]
    ${IsMailRootFolderTreeCollapsed},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ConversationSortOrder},

    [System.Object]
    ${ShowUpNext},

    [System.Object]
    ${PreferAccessibleContent},

    [System.Object]
    ${EmptyDeletedItemsOnLogoff},

    [System.Object]
    ${ReadReceiptResponse},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${DefaultFontSize},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${MailFolderPaneExpanded},

    [System.Object]
    ${AlwaysShowBcc},

    [System.Object]
    ${AutoAddSignatureOnMobile},

    [System.Object]
    ${PreviewMarkAsReadBehavior},

    [System.Object]
    ${DefaultFontFlags},

    [System.Object]
    ${DefaultFormat},

    [switch]
    ${AsJob})

}
function Set-MailboxPlan
{

param(
    [System.Object]
    ${RoleAssignmentPolicy},

    [System.Object]
    ${IssueWarningQuota},

    [switch]
    ${Force},

    [System.Object]
    ${MaxSendSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${RetentionPolicy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ProhibitSendQuota},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${RetainDeletedItemsFor},

    [System.Object]
    ${ProhibitSendReceiveQuota},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RecipientLimits},

    [System.Object]
    ${MaxReceiveSize},

    [switch]
    ${IsDefault},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${AsJob})

}
function Set-MailboxRegionalConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${DateFormat},

    [System.Object]
    ${TimeFormat},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Archive},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${LocalizeDefaultFolderName},

    [System.Object]
    ${TimeZone},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Language},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MailboxRestoreRequest
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RequestExpiryInterval},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Priority},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SkipMerging},

    [System.Object]
    ${LargeItemLimit},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${BatchName},

    [switch]
    ${RehomeRequest},

    [System.Object]
    ${RemoteHostName},

    [System.Object]
    ${SkippedItemApprovalTime},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${InternalFlags},

    [switch]
    ${SkipInitialConnectionValidation},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${AcceptLargeDataLoss},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${BadItemLimit},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${CompletedRequestAgeLimit},

    [switch]
    ${AsJob})

}
function Set-MailboxSearch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${InPlaceHoldEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ItemHoldPeriod},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SourceMailboxes},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MailboxSpellingConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${DictionaryLanguage},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${CheckBeforeSend},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${IgnoreMixedDigits},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${IgnoreUppercase},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MailContact
{

param(
    [System.Object]
    ${EmailAddresses},

    [System.Object]
    ${RejectMessagesFromDLMembers},

    [System.Object]
    ${ModerationEnabled},

    [System.Object]
    ${AcceptMessagesOnlyFromSendersOrMembers},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExtensionCustomAttribute5},

    [System.Object]
    ${CustomAttribute8},

    [System.Object]
    ${CustomAttribute5},

    [System.Object]
    ${SimpleDisplayName},

    [System.Object]
    ${MailTip},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${GrantSendOnBehalfTo},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AcceptMessagesOnlyFrom},

    [System.Object]
    ${MessageBodyFormat},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CustomAttribute15},

    [System.Object]
    ${RejectMessagesFromSendersOrMembers},

    [System.Object]
    ${WindowsEmailAddress},

    [System.Object]
    ${RejectMessagesFrom},

    [System.Object]
    ${Alias},

    [System.Object]
    ${DisplayName},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${BypassModerationFromSendersOrMembers},

    [System.Object]
    ${AcceptMessagesOnlyFromDLMembers},

    [System.Object]
    ${CustomAttribute1},

    [switch]
    ${ForceUpgrade},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${HiddenFromAddressListsEnabled},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${MessageFormat},

    [System.Object]
    ${ExtensionCustomAttribute1},

    [System.Object]
    ${CustomAttribute14},

    [System.Object]
    ${RequireSenderAuthenticationEnabled},

    [System.Object]
    ${CustomAttribute9},

    [System.Object]
    ${CustomAttribute6},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExtensionCustomAttribute4},

    [System.Object]
    ${UsePreferMessageFormat},

    [System.Object]
    ${CustomAttribute7},

    [System.Object]
    ${ExtensionCustomAttribute2},

    [System.Object]
    ${CustomAttribute13},

    [System.Object]
    ${CustomAttribute2},

    [System.Object]
    ${UMDtmfMap},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${UseMapiRichTextFormat},

    [System.Object]
    ${SecondaryDialPlan},

    [System.Object]
    ${SendModerationNotifications},

    [System.Object]
    ${ExternalEmailAddress},

    [System.Object]
    ${CreateDTMFMap},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${SecondaryAddress},

    [System.Object]
    ${MailTipTranslations},

    [System.Object]
    ${CustomAttribute4},

    [System.Object]
    ${CustomAttribute10},

    [System.Object]
    ${Name},

    [System.Object]
    ${ExtensionCustomAttribute3},

    [System.Object]
    ${CustomAttribute12},

    [System.Object]
    ${MacAttachmentFormat},

    [System.Object]
    ${CustomAttribute3},

    [System.Object]
    ${CustomAttribute11},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-MailPublicFolder
{

param(
    [System.Object]
    ${EmailAddresses},

    [System.Object]
    ${RejectMessagesFromDLMembers},

    [System.Object]
    ${ModerationEnabled},

    [System.Object]
    ${AcceptMessagesOnlyFromSendersOrMembers},

    [System.Object]
    ${CustomAttribute14},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DeliverToMailboxAndForward},

    [System.Object]
    ${ExtensionCustomAttribute5},

    [System.Object]
    ${CustomAttribute8},

    [System.Object]
    ${CustomAttribute5},

    [System.Object]
    ${SimpleDisplayName},

    [System.Object]
    ${PhoneticDisplayName},

    [System.Object]
    ${MailTip},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${GrantSendOnBehalfTo},

    [System.Object]
    ${AcceptMessagesOnlyFrom},

    [System.Object]
    ${MaxReceiveSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EmailAddressPolicyEnabled},

    [System.Object]
    ${CustomAttribute15},

    [switch]
    ${IgnoreDefaultScope},

    [System.Object]
    ${RejectMessagesFromSendersOrMembers},

    [System.Object]
    ${WindowsEmailAddress},

    [System.Object]
    ${RejectMessagesFrom},

    [System.Object]
    ${Alias},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${IgnoreMissingFolderLink},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${BypassModerationFromSendersOrMembers},

    [System.Object]
    ${AcceptMessagesOnlyFromDLMembers},

    [System.Object]
    ${CustomAttribute1},

    [System.Object]
    ${Contacts},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ExtensionCustomAttribute1},

    [System.Object]
    ${EntryId},

    [System.Object]
    ${RequireSenderAuthenticationEnabled},

    [System.Object]
    ${CustomAttribute9},

    [System.Object]
    ${CustomAttribute6},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExtensionCustomAttribute4},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${CustomAttribute7},

    [System.Object]
    ${ExtensionCustomAttribute2},

    [System.Object]
    ${CustomAttribute13},

    [System.Object]
    ${CustomAttribute2},

    [System.Object]
    ${PrimarySmtpAddress},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SendModerationNotifications},

    [System.Object]
    ${ExternalEmailAddress},

    [System.Object]
    ${MaxSendSize},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${MailTipTranslations},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CustomAttribute4},

    [System.Object]
    ${CustomAttribute10},

    [System.Object]
    ${OnPremisesObjectId},

    [System.Object]
    ${Name},

    [System.Object]
    ${ExtensionCustomAttribute3},

    [System.Object]
    ${ForwardingAddress},

    [System.Object]
    ${CustomAttribute12},

    [System.Object]
    ${CustomAttribute3},

    [System.Object]
    ${CustomAttribute11},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Identity},

    [System.Object]
    ${HiddenFromAddressListsEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-MailUser
{

param(
    [System.Object]
    ${EmailAddresses},

    [System.Object]
    ${RejectMessagesFromDLMembers},

    [System.Object]
    ${ModerationEnabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AcceptMessagesOnlyFromSendersOrMembers},

    [System.Object]
    ${UserCertificate},

    [System.Object]
    ${Password},

    [System.Object]
    ${ExtensionCustomAttribute5},

    [System.Object]
    ${CustomAttribute8},

    [System.Object]
    ${CustomAttribute5},

    [System.Object]
    ${SimpleDisplayName},

    [System.Object]
    ${ExchangeGuid},

    [System.Object]
    ${ExcludeFromOrgHolds},

    [System.Object]
    ${MailboxRegion},

    [System.Object]
    ${MailTip},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${GrantSendOnBehalfTo},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${PrimarySmtpAddress},

    [System.Object]
    ${UserSMimeCertificate},

    [System.Object]
    ${AcceptMessagesOnlyFrom},

    [System.Object]
    ${JournalArchiveAddress},

    [System.Object]
    ${MessageBodyFormat},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CustomAttribute15},

    [System.Object]
    ${FederatedIdentity},

    [System.Object]
    ${WindowsEmailAddress},

    [System.Object]
    ${RemoveOrphanedHolds},

    [System.Object]
    ${RejectMessagesFrom},

    [System.Object]
    ${Alias},

    [System.Object]
    ${RejectMessagesFromSendersOrMembers},

    [System.Object]
    ${DisplayName},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${BypassModerationFromSendersOrMembers},

    [System.Object]
    ${AcceptMessagesOnlyFromDLMembers},

    [System.Object]
    ${CustomAttribute1},

    [switch]
    ${ForceUpgrade},

    [System.Object]
    ${UMDtmfMap},

    [switch]
    ${RemoveMailboxProvisioningConstraint},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${MessageFormat},

    [System.Object]
    ${ExtensionCustomAttribute1},

    [System.Object]
    ${ResetPasswordOnNextLogon},

    [System.Object]
    ${CustomAttribute14},

    [System.Object]
    ${RequireSenderAuthenticationEnabled},

    [System.Object]
    ${CustomAttribute9},

    [System.Object]
    ${CustomAttribute6},

    [switch]
    ${RecalculateInactiveMailUser},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExtensionCustomAttribute4},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${UsePreferMessageFormat},

    [System.Object]
    ${HiddenFromAddressListsEnabled},

    [System.Object]
    ${MicrosoftOnlineServicesID},

    [switch]
    ${RemoveDelayReleaseHoldApplied},

    [System.Object]
    ${ImmutableId},

    [System.Object]
    ${ExtensionCustomAttribute2},

    [System.Object]
    ${CustomAttribute13},

    [System.Object]
    ${CustomAttribute2},

    [switch]
    ${RemoveDelayHoldApplied},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${UseMapiRichTextFormat},

    [System.Object]
    ${SecondaryDialPlan},

    [System.Object]
    ${SendModerationNotifications},

    [System.Object]
    ${ExternalEmailAddress},

    [System.Object]
    ${CreateDTMFMap},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${SecondaryAddress},

    [System.Object]
    ${MailTipTranslations},

    [System.Object]
    ${CustomAttribute7},

    [System.Object]
    ${CustomAttribute4},

    [System.Object]
    ${CustomAttribute10},

    [System.Object]
    ${Name},

    [System.Object]
    ${ExtensionCustomAttribute3},

    [System.Object]
    ${CustomAttribute12},

    [System.Object]
    ${MacAttachmentFormat},

    [System.Object]
    ${CustomAttribute3},

    [System.Object]
    ${CustomAttribute11},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Identity},

    [switch]
    ${RemoveComplianceTagHoldApplied},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-MalwareFilterPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${MakeDefault},

    [System.Object]
    ${CustomFromName},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AdminDisplayName},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Action},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${CustomExternalBody},

    [System.Object]
    ${EnableExternalSenderNotifications},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CustomNotifications},

    [System.Object]
    ${EnableInternalSenderNotifications},

    [System.Object]
    ${EnableExternalSenderAdminNotifications},

    [System.Object]
    ${InternalSenderAdminAddress},

    [System.Object]
    ${CustomAlertText},

    [System.Object]
    ${FileTypes},

    [System.Object]
    ${EnableInternalSenderAdminNotifications},

    [System.Object]
    ${CustomFromAddress},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CustomExternalSubject},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ZapEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExternalSenderAdminAddress},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${CustomInternalSubject},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${CustomInternalBody},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EnableFileFilter},

    [switch]
    ${AsJob})

}
function Set-MalwareFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SentToMemberOf},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SentTo},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Comments},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RecipientDomainIs},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ExceptIfRecipientDomainIs},

    [System.Object]
    ${MalwareFilterPolicy},

    [System.Object]
    ${ExceptIfSentTo},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExceptIfSentToMemberOf},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ManagementRoleAssignment
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${CustomRecipientWriteScope},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RecipientAdministrativeUnitScope},

    [System.Object]
    ${ExclusiveRecipientWriteScope},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Enabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RecipientRelativeWriteScope},

    [System.Object]
    ${RecipientOrganizationalUnitScope},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ManagementRoleEntry
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Parameters},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${RemoveParameter},

    [switch]
    ${AddParameter},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ManagementScope
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${RecipientRestrictionFilter},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RecipientRoot},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MessageClassification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RecipientDescription},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${PermissionMenuVisible},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ClassificationID},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SenderDescription},

    [System.Object]
    ${DisplayPrecedence},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${RetainClassificationEnabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MigrationBatch
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Identity},

    [System.Object]
    ${MoveOptions},

    [switch]
    ${Update},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${NotificationEmails},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${SkipReports},

    [switch]
    ${ApproveSkippedItems},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${SyncNow},

    [System.Object]
    ${ReportInterval},

    [System.Object]
    ${SkipMoving},

    [System.Object]
    ${CompleteAfter},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Partition},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${BadItemLimit},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SkipMerging},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowUnknownColumnsInCsv},

    [System.Object]
    ${StartAfter},

    [System.Object]
    ${LargeItemLimit},

    [switch]
    ${AsJob})

}
function Set-MigrationConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MigrationEndpoint
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AcceptUntrustedCertificates},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${MaxConcurrentMigrations},

    [System.Object]
    ${ServiceAccountKeyFileData},

    [System.Object]
    ${TestMailbox},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ExchangeServer},

    [System.Object]
    ${Authentication},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Port},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RemoteServer},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Partition},

    [System.Object]
    ${MailboxPermission},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SourceMailboxLegacyDN},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${NspiServer},

    [System.Object]
    ${RpcProxyServer},

    [System.Object]
    ${PublicFolderDatabaseServerLegacyDN},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Security},

    [switch]
    ${SkipVerification},

    [System.Object]
    ${MaxConcurrentIncrementalSyncs},

    [System.Object]
    ${Credentials},

    [switch]
    ${AsJob})

}
function Set-MigrationUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${ApproveSkippedItems},

    [System.Object]
    ${LargeItemLimit},

    [System.Object]
    ${CompleteAfter},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${BadItemLimit},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${StartAfter},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${SyncNow},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MobileDeviceMailboxPolicy
{

param(
    [System.Object]
    ${AllowMicrosoftPushNotifications},

    [System.Object]
    ${AllowUnsignedApplications},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowUnsignedInstallationPackages},

    [System.Object]
    ${MaxPasswordFailedAttempts},

    [System.Object]
    ${AllowExternalDeviceManagement},

    [System.Object]
    ${RequireDeviceEncryption},

    [System.Object]
    ${RequireSignedSMIMEMessages},

    [System.Object]
    ${AllowStorageCard},

    [System.Object]
    ${AllowIrDA},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${PasswordHistory},

    [System.Object]
    ${AllowNonProvisionableDevices},

    [System.Object]
    ${UnapprovedInROMApplicationList},

    [System.Object]
    ${RequireEncryptedSMIMEMessages},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowInternetSharing},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${PasswordEnabled},

    [System.Object]
    ${MaxEmailHTMLBodyTruncationSize},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${MinPasswordComplexCharacters},

    [System.Object]
    ${UNCAccessEnabled},

    [System.Object]
    ${AllowCamera},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${IrmEnabled},

    [System.Object]
    ${PasswordExpiration},

    [System.Object]
    ${AllowBrowser},

    [System.Object]
    ${MaxEmailAgeFilter},

    [System.Object]
    ${RequireSignedSMIMEAlgorithm},

    [System.Object]
    ${RequireManualSyncWhenRoaming},

    [System.Object]
    ${AlphanumericPasswordRequired},

    [System.Object]
    ${AllowSMIMEEncryptionAlgorithmNegotiation},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${MaxEmailBodyTruncationSize},

    [System.Object]
    ${AllowBluetooth},

    [System.Object]
    ${RequireEncryptionSMIMEAlgorithm},

    [System.Object]
    ${DevicePolicyRefreshInterval},

    [System.Object]
    ${AllowGooglePushNotifications},

    [System.Object]
    ${AllowMobileOTAUpdate},

    [System.Object]
    ${Name},

    [System.Object]
    ${MaxAttachmentSize},

    [System.Object]
    ${AllowSimplePassword},

    [System.Object]
    ${AllowConsumerEmail},

    [System.Object]
    ${AllowDesktopSync},

    [System.Object]
    ${RequireStorageCardEncryption},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AttachmentsEnabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowSMIMESoftCerts},

    [System.Object]
    ${AllowRemoteDesktop},

    [System.Object]
    ${PasswordRecoveryEnabled},

    [System.Object]
    ${MaxCalendarAgeFilter},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowApplePushNotifications},

    [System.Object]
    ${AllowPOPIMAPEmail},

    [System.Object]
    ${IsDefault},

    [System.Object]
    ${MaxInactivityTimeLock},

    [System.Object]
    ${AllowWiFi},

    [System.Object]
    ${ApprovedApplicationList},

    [System.Object]
    ${AllowTextMessaging},

    [System.Object]
    ${WSSAccessEnabled},

    [System.Object]
    ${DeviceEncryptionEnabled},

    [System.Object]
    ${MinPasswordLength},

    [System.Object]
    ${AllowHTMLEmail},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-MoveRequest
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${IncrementalSyncInterval},

    [System.Object]
    ${ProxyToMailbox},

    [System.Object]
    ${Identity},

    [System.Object]
    ${SuspendWhenReadyToComplete},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RequestExpiryInterval},

    [System.Object]
    ${PreventCompletion},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${LargeItemLimit},

    [System.Object]
    ${BatchName},

    [System.Object]
    ${SkipMoving},

    [System.Object]
    ${RemoteHostName},

    [System.Object]
    ${CompleteAfter},

    [System.Object]
    ${SkippedItemApprovalTime},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${MoveOptions},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${AcceptLargeDataLoss},

    [System.Object]
    ${StartAfter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${BadItemLimit},

    [System.Object]
    ${RemoteGlobalCatalog},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RemoteCredential},

    [System.Object]
    ${CompletedRequestAgeLimit},

    [switch]
    ${AsJob})

}
function Set-Notification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NotificationEmails},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-OMEConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ReadButtonText},

    [System.Object]
    ${PortalText},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Image},

    [System.Object]
    ${OTPEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${BackgroundColor},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DisclaimerText},

    [System.Object]
    ${Identity},

    [System.Object]
    ${SocialIdSignIn},

    [System.Object]
    ${IntroductionText},

    [System.Object]
    ${EmailText},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-OnPremisesOrganization
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${InboundConnector},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${OutboundConnector},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${OrganizationName},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Comment},

    [System.Object]
    ${Identity},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationRelationship},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${HybridDomains},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-Organization
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${UnifiedAuditLogIngestionEnabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-OrganizationConfig
{

param(
    [System.Object]
    ${RequiredCharsetCoverage},

    [System.Object]
    ${ConnectorsEnabledForYammer},

    [System.Object]
    ${PublicFolderShowClientControl},

    [System.Object]
    ${MailTipsGroupMetricsEnabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PublicFoldersEnabled},

    [System.Object]
    ${ReadTrackingEnabled},

    [System.Object]
    ${ExchangeNotificationEnabled},

    [System.Object]
    ${DefaultPublicFolderDeletedItemRetention},

    [System.Object]
    ${MailTipsExternalRecipientsTipsEnabled},

    [System.Object]
    ${FocusedInboxOn},

    [System.Object]
    ${EwsApplicationAccessPolicy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${OAuth2ClientProfileEnabled},

    [System.Object]
    ${PreferredInternetCodePageForShiftJis},

    [System.Object]
    ${ElcProcessingDisabled},

    [System.Object]
    ${UnblockUnsafeSenderPromptEnabled},

    [System.Object]
    ${AutoEnableArchiveMailbox},

    [System.Object]
    ${RefreshSessionEnabled},

    [System.Object]
    ${ActivityBasedAuthenticationTimeoutEnabled},

    [System.Object]
    ${SmtpActionableMessagesEnabled},

    [System.Object]
    ${ConnectorsEnabledForTeams},

    [System.Object]
    ${ComplianceMLBgdCrawlEnabled},

    [System.Object]
    ${MailTipsAllTipsEnabled},

    [System.Object]
    ${RemotePublicFolderMailboxes},

    [System.Object]
    ${DefaultPublicFolderMovedItemRetention},

    [System.Object]
    ${EwsAllowEntourage},

    [System.Object]
    ${ExternalCloudAccessEnabled},

    [System.Object]
    ${DefaultPublicFolderProhibitPostQuota},

    [System.Object]
    ${ExchangeNotificationRecipients},

    [System.Object]
    ${DirectReportsGroupAutoCreationEnabled},

    [System.Object]
    ${LinkPreviewEnabled},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${OutlookPayEnabled},

    [System.Object]
    ${OutlookMobileGCCRestrictionsEnabled},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${WebPushNotificationsDisabled},

    [System.Object]
    ${ConnectorsEnabledForOutlook},

    [System.Object]
    ${DefaultAuthenticationPolicy},

    [System.Object]
    ${AuditDisabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${IsAgendaMailEnabled},

    [System.Object]
    ${EwsEnabled},

    [System.Object]
    ${PerTenantSwitchToESTSEnabled},

    [System.Object]
    ${LeanPopoutEnabled},

    [System.Object]
    ${DistributionGroupNameBlockedWordsList},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AsyncSendEnabled},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ConnectorsEnabledForSharepoint},

    [System.Object]
    ${ActivityBasedAuthenticationTimeoutWithSingleSignOnEnabled},

    [System.Object]
    ${HierarchicalAddressBookRoot},

    [System.Object]
    ${WebSuggestedRepliesDisabled},

    [System.Object]
    ${DefaultPublicFolderAgeLimit},

    [System.Object]
    ${VisibleMeetingUpdateProperties},

    [System.Object]
    ${MailTipsLargeAudienceThreshold},

    [System.Object]
    ${DefaultGroupAccessType},

    [System.Object]
    ${CalendarVersionStoreEnabled},

    [System.Object]
    ${BookingsPaymentsEnabled},

    [System.Object]
    ${DistributionGroupNamingPolicy},

    [System.Object]
    ${PublicComputersDetectionEnabled},

    [System.Object]
    ${BookingsSocialSharingRestricted},

    [System.Object]
    ${EwsBlockList},

    [System.Object]
    ${MatchSenderOrganizerProperties},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${DistributionGroupDefaultOU},

    [System.Object]
    ${ConnectorsActionableMessagesEnabled},

    [System.Object]
    ${MailTipsMailboxSourcedTipsEnabled},

    [System.Object]
    ${BookingsEnabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${EndUserDLUpgradeFlowsDisabled},

    [System.Object]
    ${AppsForOfficeEnabled},

    [System.Object]
    ${EwsAllowOutlook},

    [switch]
    ${AutoExpandingArchive},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${EwsAllowMacOutlook},

    [System.Object]
    ${EwsAllowList},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${IPListBlocked},

    [System.Object]
    ${BookingsMembershipApprovalRequired},

    [System.Object]
    ${AutodiscoverPartialDirSync},

    [System.Object]
    ${ActivityBasedAuthenticationTimeoutInterval},

    [System.Object]
    ${ConnectorsEnabled},

    [System.Object]
    ${OutlookMobileHelpShiftEnabled},

    [System.Object]
    ${SiteMailboxCreationURL},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DefaultPublicFolderMaxItemSize},

    [System.Object]
    ${ByteEncoderTypeFor7BitCharsets},

    [System.Object]
    ${DefaultPublicFolderIssueWarningQuota},

    [System.Object]
    ${OutlookMobileSingleAccountEnabled},

    [switch]
    ${AsJob})

}
function Set-OrganizationRelationship
{

param(
    [System.Object]
    ${TargetApplicationUri},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MailTipsAccessLevel},

    [System.Object]
    ${TargetAutodiscoverEpr},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [System.Object]
    ${DeliveryReportEnabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${OrganizationContact},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ArchiveAccessEnabled},

    [System.Object]
    ${FreeBusyAccessEnabled},

    [System.Object]
    ${MailTipsAccessScope},

    [System.Object]
    ${TargetOwaURL},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${MailTipsAccessEnabled},

    [System.Object]
    ${PhotosEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${MailboxMovePublishedScopes},

    [System.Object]
    ${MailboxMoveEnabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${TargetSharingEpr},

    [System.Object]
    ${FreeBusyAccessLevel},

    [System.Object]
    ${DomainNames},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${FreeBusyAccessScope},

    [switch]
    ${AsJob})

}
function Set-OutboundConnector
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RouteAllMessagesViaOnPremises},

    [System.Object]
    ${RecipientDomains},

    [System.Object]
    ${CloudServicesMailEnabled},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${TestMode},

    [System.Object]
    ${AllAcceptedDomains},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Comment},

    [System.Object]
    ${IsTransportRuleScoped},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${IsValidated},

    [System.Object]
    ${UseMXRecord},

    [System.Object]
    ${LastValidationTimestamp},

    [System.Object]
    ${TlsSettings},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ValidationRecipients},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ConnectorType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SmartHosts},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${TlsDomain},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ConnectorSource},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AsJob})

}
function Set-OutlookProtectionRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SentToScope},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SentTo},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${UserCanOverride},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${FromDepartment},

    [System.Object]
    ${ApplyRightsProtectionTemplate},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-OwaMailboxPolicy
{

param(
    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${DefaultClientLanguage},

    [System.Object]
    ${ContactsEnabled},

    [System.Object]
    ${PersonalAccountCalendarsEnabled},

    [System.Object]
    ${ConditionalAccessPolicy},

    [System.Object]
    ${MessagePreviewsDisabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExplicitLogonEnabled},

    [System.Object]
    ${WebPartsFrameOptionsType},

    [System.Object]
    ${BlockedFileTypes},

    [System.Object]
    ${OneDriveAttachmentsEnabled},

    [System.Object]
    ${LinkedInEnabled},

    [System.Object]
    ${DirectFileAccessOnPrivateComputersEnabled},

    [System.Object]
    ${ChangePasswordEnabled},

    [System.Object]
    ${SignaturesEnabled},

    [System.Object]
    ${AllowedMimeTypes},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${WacViewingOnPublicComputersEnabled},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${OutlookBetaToggleEnabled},

    [System.Object]
    ${ExternalSPMySiteHostURL},

    [System.Object]
    ${OnSendAddinsEnabled},

    [System.Object]
    ${NotesEnabled},

    [System.Object]
    ${JournalEnabled},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SpellCheckerEnabled},

    [System.Object]
    ${DisplayPhotosEnabled},

    [System.Object]
    ${TasksEnabled},

    [System.Object]
    ${GroupCreationEnabled},

    [System.Object]
    ${ForceSaveFileTypes},

    [System.Object]
    ${ForceWacViewingFirstOnPublicComputers},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PlacesEnabled},

    [System.Object]
    ${TeamsnapCalendarsEnabled},

    [System.Object]
    ${WacViewingOnPrivateComputersEnabled},

    [System.Object]
    ${TextMessagingEnabled},

    [System.Object]
    ${SearchFoldersEnabled},

    [System.Object]
    ${UserVoiceEnabled},

    [System.Object]
    ${CalendarEnabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${GlobalAddressListEnabled},

    [System.Object]
    ${IRMEnabled},

    [System.Object]
    ${DirectFileAccessOnPublicComputersEnabled},

    [System.Object]
    ${NpsSurveysEnabled},

    [System.Object]
    ${WSSAccessOnPublicComputersEnabled},

    [System.Object]
    ${ForceSaveMimeTypes},

    [System.Object]
    ${WacOMEXEnabled},

    [System.Object]
    ${WacExternalServicesEnabled},

    [System.Object]
    ${InternalSPMySiteHostURL},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${SatisfactionEnabled},

    [System.Object]
    ${InstantMessagingType},

    [System.Object]
    ${ActiveSyncIntegrationEnabled},

    [System.Object]
    ${DefaultTheme},

    [System.Object]
    ${SetPhotoEnabled},

    [System.Object]
    ${ClassicAttachmentsEnabled},

    [System.Object]
    ${AllowCopyContactsToDeviceAddressBook},

    [System.Object]
    ${UseISO885915},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${OutboundCharset},

    [System.Object]
    ${LocalEventsEnabled},

    [System.Object]
    ${ReportJunkEmailEnabled},

    [System.Object]
    ${ForceWacViewingFirstOnPrivateComputers},

    [System.Object]
    ${RecoverDeletedItemsEnabled},

    [System.Object]
    ${InstantMessagingEnabled},

    [System.Object]
    ${OrganizationEnabled},

    [System.Object]
    ${DelegateAccessEnabled},

    [System.Object]
    ${ActionForUnknownFileAndMIMETypes},

    [System.Object]
    ${WacEditingEnabled},

    [System.Object]
    ${PublicFoldersEnabled},

    [System.Object]
    ${ForceSaveAttachmentFilteringEnabled},

    [System.Object]
    ${LogonAndErrorLanguage},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${WSSAccessOnPrivateComputersEnabled},

    [System.Object]
    ${AllAddressListsEnabled},

    [System.Object]
    ${ExternalImageProxyEnabled},

    [System.Object]
    ${PremiumClientEnabled},

    [System.Object]
    ${BlockedMimeTypes},

    [System.Object]
    ${UMIntegrationEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SilverlightEnabled},

    [System.Object]
    ${WeatherEnabled},

    [switch]
    ${IsDefault},

    [System.Object]
    ${UseGB18030},

    [System.Object]
    ${AllowOfflineOn},

    [System.Object]
    ${AllowedFileTypes},

    [System.Object]
    ${SetPhotoURL},

    [System.Object]
    ${RulesEnabled},

    [System.Object]
    ${RemindersAndNotificationsEnabled},

    [System.Object]
    ${FreCardsEnabled},

    [System.Object]
    ${Name},

    [System.Object]
    ${ThemeSelectionEnabled},

    [System.Object]
    ${AdditionalStorageProvidersAvailable},

    [System.Object]
    ${InterestingCalendarsEnabled},

    [System.Object]
    ${OWALightEnabled},

    [System.Object]
    ${PrintWithoutDownloadEnabled},

    [System.Object]
    ${SaveAttachmentsToCloudEnabled},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SkipCreateUnifiedGroupCustomSharepointClassification},

    [System.Object]
    ${ReferenceAttachmentsEnabled},

    [switch]
    ${DisableFacebook},

    [System.Object]
    ${PhoneticSupportEnabled},

    [switch]
    ${AsJob})

}
function Set-PartnerApplication
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ApplicationIdentifier},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${LinkedAccount},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AcceptSecurityIdentifierInformation},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AccountType},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ActAsPermissions},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-PerimeterConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${GatewayIPAddresses},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-PhishFilterPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SpoofAllowBlockList},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-Place
{

param(
    [System.Object]
    ${PostalCode},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Phone},

    [System.Object]
    ${Identity},

    [System.Object]
    ${CountryOrRegion},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Street},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AudioDeviceName},

    [System.Object]
    ${DisplayDeviceName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Building},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${State},

    [System.Object]
    ${City},

    [System.Object]
    ${Floor},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${VideoDeviceName},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Tags},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${IsWheelChairAccessible},

    [System.Object]
    ${FloorLabel},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Capacity},

    [System.Object]
    ${Label},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${GeoCoordinates},

    [switch]
    ${AsJob})

}
function Set-PolicyTipConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Value},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-PopSubscription
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [switch]
    ${ResendVerification},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${LeaveOnServer},

    [System.Object]
    ${EmailAddress},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${IncomingServer},

    [System.Object]
    ${IncomingUserName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${IncomingSecurity},

    [System.Object]
    ${IncomingPort},

    [System.Object]
    ${IncomingPassword},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Mailbox},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ValidateSecret},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${Force},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${IncomingAuth},

    [switch]
    ${AsJob})

}
function Set-ProtectionServicePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-PublicFolder
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${IssueWarningQuota},

    [System.Object]
    ${Path},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${RetainDeletedItemsFor},

    [System.Object]
    ${Name},

    [System.Object]
    ${MailRecipientGuid},

    [System.Object]
    ${MaxItemSize},

    [System.Object]
    ${PerUserReadStateEnabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EformsLocaleId},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${MailEnabled},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ProhibitPostQuota},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AgeLimit},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-PublicFolderMailboxMigrationRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${SkipMerging},

    [System.Object]
    ${LargeItemLimit},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${BadItemLimit},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${SkipInitialConnectionValidation},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AcceptLargeDataLoss},

    [System.Object]
    ${SkippedItemApprovalTime},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-RemoteDomain
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AutoReplyEnabled},

    [System.Object]
    ${Identity},

    [System.Object]
    ${TNEFEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${DeliveryReportEnabled},

    [System.Object]
    ${RequiredCharsetCoverage},

    [System.Object]
    ${MeetingForwardNotificationEnabled},

    [System.Object]
    ${ContentType},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ByteEncoderTypeFor7BitCharsets},

    [System.Object]
    ${AutoForwardEnabled},

    [System.Object]
    ${Name},

    [System.Object]
    ${TrustedMailInboundEnabled},

    [System.Object]
    ${LineWrapSize},

    [System.Object]
    ${CharacterSet},

    [System.Object]
    ${PreferredInternetCodePageForShiftJis},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${NonMimeCharacterSet},

    [System.Object]
    ${NDREnabled},

    [System.Object]
    ${TargetDeliveryDomain},

    [System.Object]
    ${TrustedMailOutboundEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${DisplaySenderName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AllowedOOFType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${NDRDiagnosticInfoEnabled},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${IsInternal},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${UseSimpleDisplayName},

    [switch]
    ${AsJob})

}
function Set-ReportSchedule
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DlpRuleId},

    [System.Object]
    ${Direction},

    [switch]
    ${IncludeDLP},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ExpiryDate},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ScheduleName},

    [System.Object]
    ${ScheduleId},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ReportType},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RecipientAddress},

    [System.Object]
    ${SenderAddress},

    [System.Object]
    ${TransportRuleId},

    [System.Object]
    ${ReportFrequency},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${EncryptionType},

    [System.Object]
    ${StartDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${NotificationEmail},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${EncryptionTemplate},

    [switch]
    ${AsJob})

}
function Set-ReportSubmissionPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PreSubmitMessageTitle},

    [System.Object]
    ${PostSubmitMessage},

    [System.Object]
    ${EnableReportToMicrosoft},

    [System.Object]
    ${Identity},

    [System.Object]
    ${EnableCustomizedMsg},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PreSubmitMessage},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ReportPhishToCustomizedAddress},

    [System.Object]
    ${ReportJunkAddresses},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ReportNotJunkAddresses},

    [System.Object]
    ${ReportPhishAddresses},

    [System.Object]
    ${ReportJunkToCustomizedAddress},

    [System.Object]
    ${PostSubmitMessageTitle},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${EnableThirdPartyAddress},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ThirdPartyReportAddresses},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ReportNotJunkToCustomizedAddress},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-ResourceConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ResourcePropertySchema},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-RetentionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RetentionPolicyTagLinks},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RetentionId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${IsDefaultArbitrationMailbox},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${IsDefault},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-RetentionPolicyTag
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${MessageClass},

    [System.Object]
    ${Identity},

    [System.Object]
    ${MustDisplayCommentEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${OptionalInMailbox},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [System.Object]
    ${LocalizedRetentionPolicyTagName},

    [System.Object]
    ${LegacyManagedFolder},

    [System.Object]
    ${AgeLimitForRetention},

    [System.Object]
    ${RetentionAction},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${LocalizedComment},

    [System.Object]
    ${Comment},

    [System.Object]
    ${RetentionId},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${RetentionEnabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SystemTag},

    [System.Object]
    ${Name},

    [switch]
    ${AsJob})

}
function Set-RMSTemplate
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Type},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-RMSTrustedPublishingDomain
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ExtranetCertificationUrl},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${Default},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ExtranetLicensingUrl},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${IntranetLicensingUrl},

    [System.Object]
    ${IntranetCertificationUrl},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-RoleAssignmentPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${IsDefault},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-RoleGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${WellKnownObject},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ManagedBy},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-SharingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Domains},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${Default},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-SiteMailbox
{

param(
    [switch]
    ${Force},

    [System.Object]
    ${SyncEnabled},

    [System.Object]
    ${Owners},

    [System.Object]
    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ShowInMyClient},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${SharePointUrl},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${RemoveDuplicateMessages},

    [System.Object]
    ${Members},

    [System.Object]
    ${Active},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-SiteMailboxProvisioningPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AliasPrefix},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DefaultAliasPrefixEnabled},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-SmimeConfig
{

param(
    [System.Object]
    ${SMIMECertificateIssuingCA},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${OWACopyRecipientHeaders},

    [System.Object]
    ${Identity},

    [System.Object]
    ${OWAIncludeSMIMECapabilitiesInMessage},

    [System.Object]
    ${OWAEncryptionAlgorithms},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OWAAlwaysSign},

    [System.Object]
    ${OWAUseSecondaryProxiesWhenFindingCertificates},

    [System.Object]
    ${OWAAlwaysEncrypt},

    [System.Object]
    ${OWACheckCRLOnSend},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${OWADLExpansionTimeout},

    [System.Object]
    ${OWAUseKeyIdentifier},

    [System.Object]
    ${OWAOnlyUseSmartCard},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${OWAIncludeCertificateChainAndRootCertificate},

    [System.Object]
    ${OWAEncryptTemporaryBuffers},

    [System.Object]
    ${OWAIncludeCertificateChainWithoutRootCertificate},

    [System.Object]
    ${OWAForceSMIMEClientUpgrade},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${OWAAllowUserChoiceOfSigningCertificate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${OWASigningAlgorithms},

    [System.Object]
    ${OWADisableCRLCheck},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${OWABCCEncryptedEmailForking},

    [System.Object]
    ${OWATripleWrapSignedEncryptedMail},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OWACRLRetrievalTimeout},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${OWACRLConnectionTimeout},

    [System.Object]
    ${OWAClearSign},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${OWASenderCertificateAttributesToDisplay},

    [System.Object]
    ${OWASignedEmailCertificateInclusion},

    [switch]
    ${AsJob})

}
function Set-SweepRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Provider},

    [System.Object]
    ${SystemCategory},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${KeepLatest},

    [System.Object]
    ${ExceptIfFlagged},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SourceFolder},

    [System.Object]
    ${Mailbox},

    [System.Object]
    ${DestinationFolder},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ExceptIfPinned},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Sender},

    [System.Object]
    ${KeepForDays},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-SyncRequest
{

param(
    [System.Object]
    ${Password},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${IncrementalSyncInterval},

    [switch]
    ${AcceptUntrustedCertificates},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Priority},

    [System.Object]
    ${DisplayName},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Calendar},

    [System.Object]
    ${Contact},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${RemoteServerPort},

    [System.Object]
    ${Authentication},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SmtpPassword},

    [System.Object]
    ${SmtpUserName},

    [System.Object]
    ${IncludeFolders},

    [System.Object]
    ${LargeItemLimit},

    [System.Object]
    ${UserName},

    [switch]
    ${RemoteSendEnabled},

    [switch]
    ${StartDivergenceFixup},

    [System.Object]
    ${SmtpServerName},

    [System.Object]
    ${BatchName},

    [System.Object]
    ${SkippedItemApprovalTime},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${SkipInitialConnectionValidation},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${AcceptLargeDataLoss},

    [System.Object]
    ${RequestExpiryInterval},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${BadItemLimit},

    [System.Object]
    ${SmtpServerPort},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${StartHierarchyFixup},

    [System.Object]
    ${SkipMerging},

    [System.Object]
    ${Security},

    [System.Object]
    ${RefreshToken},

    [System.Object]
    ${ProviderArgs},

    [System.Object]
    ${CompletedRequestAgeLimit},

    [System.Object]
    ${RemoteServerName},

    [switch]
    ${AsJob})

}
function Set-TenantAnalyticsConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${MinRecipients},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Set-TextMessagingAccount
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CountryRegionId},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${MobileOperatorId},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${NotificationPhoneNumber},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-TransportConfig
{

param(
    [System.Object]
    ${InternalDelayDsnEnabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${InternalDsnSendHtml},

    [System.Object]
    ${ExternalDelayDsnEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${DSNConversionMode},

    [System.Object]
    ${SmtpClientAuthenticationDisabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [System.Object]
    ${InternalDsnLanguageDetectionEnabled},

    [System.Object]
    ${AddressBookPolicyRoutingEnabled},

    [System.Object]
    ${ExternalDsnLanguageDetectionEnabled},

    [System.Object]
    ${ExternalDsnSendHtml},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Rfc2231EncodingEnabled},

    [System.Object]
    ${HeaderPromotionModeSetting},

    [System.Object]
    ${VoicemailJournalingEnabled},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${JournalingReportNdrTo},

    [System.Object]
    ${ConvertDisclaimerWrapperToEml},

    [System.Object]
    ${InternalDsnReportingAuthority},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ExternalDsnReportingAuthority},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ExternalDsnDefaultLanguage},

    [System.Object]
    ${InternalDsnDefaultLanguage},

    [System.Object]
    ${ExternalPostmasterAddress},

    [System.Object]
    ${ClearCategories},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AsJob})

}
function Set-TransportRule
{

param(
    [System.Object]
    ${ActivationDate},

    [System.Object]
    ${AddToRecipients},

    [System.Object]
    ${ApplyHtmlDisclaimerFallbackAction},

    [System.Object]
    ${ExceptIfRecipientADAttributeContainsWords},

    [System.Object]
    ${RecipientADAttributeMatchesPatterns},

    [System.Object]
    ${AttachmentSizeOver},

    [System.Object]
    ${ExceptIfSenderADAttributeContainsWords},

    [System.Object]
    ${SetSCL},

    [System.Object]
    ${AnyOfToHeaderMemberOf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Disconnect},

    [System.Object]
    ${ExceptIfSentToMemberOf},

    [System.Object]
    ${ExceptIfAnyOfCcHeader},

    [System.Object]
    ${ExceptIfAttachmentMatchesPatterns},

    [System.Object]
    ${RecipientDomainIs},

    [System.Object]
    ${ManagerForEvaluatedUser},

    [System.Object]
    ${SmtpRejectMessageRejectStatusCode},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ExceptIfHeaderMatchesPatterns},

    [System.Object]
    ${ExceptIfFromScope},

    [System.Object]
    ${ADComparisonAttribute},

    [System.Object]
    ${ExceptIfHeaderContainsWords},

    [System.Object]
    ${HeaderMatchesPatterns},

    [System.Object]
    ${ExceptIfAttachmentIsPasswordProtected},

    [System.Object]
    ${DeleteMessage},

    [System.Object]
    ${HasSenderOverride},

    [System.Object]
    ${ExceptIfSubjectOrBodyMatchesPatterns},

    [System.Object]
    ${ExceptIfHasClassification},

    [System.Object]
    ${Quarantine},

    [System.Object]
    ${ExceptIfAnyOfRecipientAddressMatchesPatterns},

    [System.Object]
    ${RecipientAddressType},

    [System.Object]
    ${ExceptIfContentCharacterSetContainsWords},

    [System.Object]
    ${BlindCopyTo},

    [System.Object]
    ${ApplyHtmlDisclaimerLocation},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ExceptIfMessageTypeMatches},

    [System.Object]
    ${SenderIpRanges},

    [System.Object]
    ${ExceptIfMessageContainsDataClassifications},

    [System.Object]
    ${ModerateMessageByUser},

    [System.Object]
    ${HasNoClassification},

    [System.Object]
    ${ExceptIfSenderInRecipientList},

    [System.Object]
    ${HeaderContainsMessageHeader},

    [System.Object]
    ${RemoveHeader},

    [System.Object]
    ${HasClassification},

    [System.Object]
    ${MessageContainsDataClassifications},

    [System.Object]
    ${ExceptIfFromMemberOf},

    [System.Object]
    ${RuleSubType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SentToScope},

    [System.Object]
    ${AnyOfToCcHeaderMemberOf},

    [System.Object]
    ${From},

    [System.Object]
    ${ExceptIfAnyOfRecipientAddressContainsWords},

    [System.Object]
    ${ExceptIfWithImportance},

    [System.Object]
    ${ContentCharacterSetContainsWords},

    [System.Object]
    ${SubjectContainsWords},

    [System.Object]
    ${RejectMessageEnhancedStatusCode},

    [System.Object]
    ${SenderADAttributeMatchesPatterns},

    [System.Object]
    ${ExceptIfSenderADAttributeMatchesPatterns},

    [System.Object]
    ${IncidentReportContent},

    [System.Object]
    ${FromMemberOf},

    [System.Object]
    ${AttachmentContainsWords},

    [System.Object]
    ${ExceptIfSCLOver},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ExceptIfBetweenMemberOf1},

    [System.Object]
    ${GenerateNotification},

    [System.Object]
    ${NotifySender},

    [System.Object]
    ${ExceptIfAttachmentNameMatchesPatterns},

    [System.Object]
    ${ExceptIfSenderManagementRelationship},

    [System.Object]
    ${SetAuditSeverity},

    [System.Object]
    ${AttachmentPropertyContainsWords},

    [System.Object]
    ${ExceptIfAnyOfToHeader},

    [System.Object]
    ${ApplyRightsProtectionCustomizationTemplate},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RouteMessageOutboundRequireTls},

    [System.Object]
    ${WithImportance},

    [System.Object]
    ${RuleErrorAction},

    [System.Object]
    ${FromScope},

    [System.Object]
    ${AttachmentNameMatchesPatterns},

    [System.Object]
    ${SentTo},

    [System.Object]
    ${ExceptIfFromAddressMatchesPatterns},

    [System.Object]
    ${AnyOfCcHeaderMemberOf},

    [System.Object]
    ${ExceptIfAttachmentSizeOver},

    [System.Object]
    ${ExceptIfManagerForEvaluatedUser},

    [System.Object]
    ${RemoveOMEv2},

    [System.Object]
    ${ExceptIfFromAddressContainsWords},

    [System.Object]
    ${AttachmentHasExecutableContent},

    [System.Object]
    ${RouteMessageOutboundConnector},

    [System.Object]
    ${SubjectMatchesPatterns},

    [System.Object]
    ${ExceptIfRecipientDomainIs},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExceptIfSenderDomainIs},

    [System.Object]
    ${SenderManagementRelationship},

    [System.Object]
    ${ExceptIfBetweenMemberOf2},

    [System.Object]
    ${RedirectMessageTo},

    [System.Object]
    ${ApplyOME},

    [System.Object]
    ${AddManagerAsRecipientType},

    [System.Object]
    ${ExceptIfMessageSizeOver},

    [System.Object]
    ${RecipientInSenderList},

    [System.Object]
    ${SenderADAttributeContainsWords},

    [System.Object]
    ${MessageSizeOver},

    [System.Object]
    ${ExceptIfRecipientInSenderList},

    [System.Object]
    ${ExceptIfAttachmentHasExecutableContent},

    [System.Object]
    ${ExceptIfAttachmentIsUnsupported},

    [System.Object]
    ${RemoveOME},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${RejectMessageReasonText},

    [System.Object]
    ${RecipientAddressContainsWords},

    [System.Object]
    ${GenerateIncidentReport},

    [System.Object]
    ${FromAddressContainsWords},

    [System.Object]
    ${AnyOfRecipientAddressMatchesPatterns},

    [System.Object]
    ${ApplyHtmlDisclaimerText},

    [System.Object]
    ${RecipientAddressMatchesPatterns},

    [System.Object]
    ${ExceptIfSubjectContainsWords},

    [System.Object]
    ${ExceptIfFrom},

    [System.Object]
    ${AnyOfToCcHeader},

    [System.Object]
    ${ExceptIfSentToScope},

    [System.Object]
    ${ExceptIfAnyOfToCcHeaderMemberOf},

    [System.Object]
    ${ModerateMessageByManager},

    [System.Object]
    ${ADComparisonOperator},

    [System.Object]
    ${BetweenMemberOf2},

    [System.Object]
    ${SetHeaderName},

    [System.Object]
    ${AttachmentProcessingLimitExceeded},

    [System.Object]
    ${ExceptIfAnyOfCcHeaderMemberOf},

    [System.Object]
    ${ExceptIfSubjectMatchesPatterns},

    [System.Object]
    ${Name},

    [System.Object]
    ${ExceptIfRecipientAddressContainsWords},

    [System.Object]
    ${HeaderMatchesMessageHeader},

    [System.Object]
    ${AnyOfRecipientAddressContainsWords},

    [System.Object]
    ${HeaderContainsWords},

    [System.Object]
    ${Comments},

    [System.Object]
    ${SentToMemberOf},

    [System.Object]
    ${ExceptIfADComparisonAttribute},

    [System.Object]
    ${ExceptIfSentTo},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ExceptIfADComparisonOperator},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ExceptIfAnyOfToHeaderMemberOf},

    [System.Object]
    ${Mode},

    [System.Object]
    ${ExceptIfAnyOfToCcHeader},

    [System.Object]
    ${SubjectOrBodyMatchesPatterns},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExceptIfAttachmentExtensionMatchesWords},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SenderDomainIs},

    [System.Object]
    ${ExceptIfRecipientAddressMatchesPatterns},

    [System.Object]
    ${ExceptIfHasNoClassification},

    [System.Object]
    ${ExceptIfSenderIpRanges},

    [System.Object]
    ${ExceptIfRecipientADAttributeMatchesPatterns},

    [System.Object]
    ${RecipientADAttributeContainsWords},

    [System.Object]
    ${AttachmentIsUnsupported},

    [System.Object]
    ${ExpiryDate},

    [System.Object]
    ${AttachmentExtensionMatchesWords},

    [System.Object]
    ${ExceptIfSubjectOrBodyContainsWords},

    [System.Object]
    ${LogEventText},

    [System.Object]
    ${ExceptIfManagerAddresses},

    [System.Object]
    ${SenderInRecipientList},

    [System.Object]
    ${AttachmentMatchesPatterns},

    [System.Object]
    ${DlpPolicy},

    [System.Object]
    ${ManagerAddresses},

    [System.Object]
    ${SenderAddressLocation},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CopyTo},

    [System.Object]
    ${SubjectOrBodyContainsWords},

    [System.Object]
    ${ApplyClassification},

    [System.Object]
    ${SetHeaderValue},

    [System.Object]
    ${Priority},

    [System.Object]
    ${AttachmentIsPasswordProtected},

    [System.Object]
    ${BetweenMemberOf1},

    [System.Object]
    ${AnyOfCcHeader},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ExceptIfAttachmentProcessingLimitExceeded},

    [System.Object]
    ${FromAddressMatchesPatterns},

    [System.Object]
    ${ExceptIfHeaderMatchesMessageHeader},

    [System.Object]
    ${SmtpRejectMessageRejectText},

    [System.Object]
    ${ExceptIfAttachmentContainsWords},

    [System.Object]
    ${AnyOfToHeader},

    [System.Object]
    ${ExceptIfHasSenderOverride},

    [System.Object]
    ${SCLOver},

    [System.Object]
    ${PrependSubject},

    [System.Object]
    ${ApplyRightsProtectionTemplate},

    [System.Object]
    ${MessageTypeMatches},

    [System.Object]
    ${ExceptIfAttachmentPropertyContainsWords},

    [System.Object]
    ${StopRuleProcessing},

    [System.Object]
    ${ExceptIfHeaderContainsMessageHeader},

    [switch]
    ${AsJob})

}
function Set-TxpUserSettings
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CreateEventsFromEmailAsPrivate},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${FlightReservationProcessingLevel},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${FoodEstablishmentReservationProcessingLevel},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ServiceReservationProcessingLevel},

    [System.Object]
    ${EventReservationProcessingLevel},

    [System.Object]
    ${LodgingReservationProcessingLevel},

    [switch]
    ${ResetSettings},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ParcelDeliveryProcessingLevel},

    [System.Object]
    ${RentalCarReservationProcessingLevel},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${InvoiceProcessingLevel},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-UMAutoAttendant
{

param(
    [System.Object]
    ${AfterHoursMainMenuCustomPromptEnabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SpeechEnabled},

    [System.Object]
    ${AllowedInCountryOrRegionGroups},

    [System.Object]
    ${AfterHoursTransferToOperatorEnabled},

    [System.Object]
    ${Identity},

    [System.Object]
    ${BusinessLocation},

    [System.Object]
    ${TimeZoneName},

    [System.Object]
    ${BusinessHoursMainMenuCustomPromptFilename},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OperatorExtension},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${DTMFFallbackAutoAttendant},

    [System.Object]
    ${BusinessHoursTransferToOperatorEnabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AfterHoursKeyMappingEnabled},

    [System.Object]
    ${PilotIdentifierList},

    [System.Object]
    ${AllowExtensions},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${InfoAnnouncementEnabled},

    [System.Object]
    ${SendVoiceMsgEnabled},

    [System.Object]
    ${BusinessName},

    [System.Object]
    ${ContactScope},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ForceUpgrade},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${BusinessHoursMainMenuCustomPromptEnabled},

    [System.Object]
    ${AfterHoursKeyMapping},

    [System.Object]
    ${AllowedInternationalGroups},

    [System.Object]
    ${WeekStartDay},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${MatchedNameSelectionMethod},

    [System.Object]
    ${BusinessHoursWelcomeGreetingEnabled},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${CallSomeoneEnabled},

    [System.Object]
    ${ContactAddressList},

    [System.Object]
    ${BusinessHoursKeyMapping},

    [System.Object]
    ${InfoAnnouncementFilename},

    [System.Object]
    ${AfterHoursMainMenuCustomPromptFilename},

    [System.Object]
    ${BusinessHoursKeyMappingEnabled},

    [System.Object]
    ${NameLookupEnabled},

    [System.Object]
    ${AllowDialPlanSubscribers},

    [System.Object]
    ${AfterHoursWelcomeGreetingFilename},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ContactRecipientContainer},

    [System.Object]
    ${BusinessHoursSchedule},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AfterHoursWelcomeGreetingEnabled},

    [System.Object]
    ${Language},

    [System.Object]
    ${HolidaySchedule},

    [System.Object]
    ${BusinessHoursWelcomeGreetingFilename},

    [System.Object]
    ${Name},

    [System.Object]
    ${TimeZone},

    [switch]
    ${AsJob})

}
function Set-UMCallAnsweringRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${CallerIds},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${CallersCanInterruptGreeting},

    [System.Object]
    ${ScheduleStatus},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${TimeOfDay},

    [System.Object]
    ${CheckAutomaticReplies},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExtensionsDialed},

    [System.Object]
    ${KeyMappings},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-UMDialPlan
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NationalNumberPrefix},

    [System.Object]
    ${InternationalNumberFormat},

    [System.Object]
    ${AllowedInCountryOrRegionGroups},

    [System.Object]
    ${AutomaticSpeechRecognitionEnabled},

    [System.Object]
    ${Identity},

    [System.Object]
    ${OutsideLineAccessCode},

    [System.Object]
    ${AllowDialPlanSubscribers},

    [System.Object]
    ${AudioCodec},

    [System.Object]
    ${AllowHeuristicADCallingLineIdResolution},

    [System.Object]
    ${EquivalentDialPlanPhoneContexts},

    [System.Object]
    ${OperatorExtension},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${TUIPromptEditingEnabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${DefaultLanguage},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${PilotIdentifierList},

    [System.Object]
    ${AllowExtensions},

    [System.Object]
    ${LegacyPromptPublishingPoint},

    [System.Object]
    ${InfoAnnouncementEnabled},

    [System.Object]
    ${SendVoiceMsgEnabled},

    [System.Object]
    ${ContactScope},

    [System.Object]
    ${MaxRecordingDuration},

    [System.Object]
    ${WelcomeGreetingEnabled},

    [switch]
    ${ForceUpgrade},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowedInternationalGroups},

    [System.Object]
    ${Extension},

    [System.Object]
    ${MaxCallDuration},

    [System.Object]
    ${WelcomeGreetingFilename},

    [System.Object]
    ${InternationalAccessCode},

    [System.Object]
    ${InfoAnnouncementFilename},

    [System.Object]
    ${NumberingPlanFormats},

    [System.Object]
    ${CallSomeoneEnabled},

    [System.Object]
    ${ContactAddressList},

    [System.Object]
    ${AccessTelephoneNumbers},

    [System.Object]
    ${CountryOrRegionCode},

    [System.Object]
    ${LogonFailuresBeforeDisconnect},

    [System.Object]
    ${FaxEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ContactRecipientContainer},

    [System.Object]
    ${UMAutoAttendant},

    [System.Object]
    ${ConfiguredInternationalGroups},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ConfiguredInCountryOrRegionGroups},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${CallAnsweringRulesEnabled},

    [System.Object]
    ${DialByNamePrimary},

    [System.Object]
    ${DialByNameSecondary},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Name},

    [System.Object]
    ${RecordingIdleTimeout},

    [System.Object]
    ${InputFailuresBeforeDisconnect},

    [System.Object]
    ${InCountryOrRegionNumberFormat},

    [System.Object]
    ${MatchedNameSelectionMethod},

    [switch]
    ${AsJob})

}
function Set-UMIPGateway
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${DelayedSourcePartyInfoEnabled},

    [System.Object]
    ${IPAddressFamily},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${OutcallsAllowed},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Address},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Simulator},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Status},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${MessageWaitingIndicatorAllowed},

    [System.Object]
    ${Port},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-UMMailbox
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UMSMSNotificationOption},

    [System.Object]
    ${AutomaticSpeechRecognitionEnabled},

    [System.Object]
    ${Identity},

    [System.Object]
    ${PinlessAccessToVoiceMailEnabled},

    [System.Object]
    ${PlayOnPhoneEnabled},

    [System.Object]
    ${AnonymousCallersCanLeaveMessages},

    [System.Object]
    ${Name},

    [System.Object]
    ${UMMailboxPolicy},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${TUIAccessToEmailEnabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AllowUMCallsFromNonUsers},

    [System.Object]
    ${CallAnsweringAudioCodec},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${OperatorNumber},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${FaxEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${TUIAccessToCalendarEnabled},

    [System.Object]
    ${ImListMigrationCompleted},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${CallAnsweringRulesEnabled},

    [System.Object]
    ${MissedCallNotificationEnabled},

    [System.Object]
    ${SubscriberAccessEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${VoiceMailAnalysisEnabled},

    [switch]
    ${AsJob})

}
function Set-UMMailboxConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${FolderToReadEmailsFrom},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SentVoiceMailPreviewEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ReadOldestUnreadVoiceMessagesFirst},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ReceivedVoiceMailPreviewEnabled},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DefaultPlayOnPhoneNumber},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Greeting},

    [switch]
    ${AsJob})

}
function Set-UMMailboxPIN
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${LockedOut},

    [System.Object]
    ${SendEmail},

    [System.Object]
    ${PinExpired},

    [System.Object]
    ${NotifyEmail},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Pin},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-UMMailboxPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${VoiceMailPreviewPartnerAssignedID},

    [System.Object]
    ${AllowVoiceResponseToOtherMessageTypes},

    [System.Object]
    ${AllowCommonPatterns},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AllowDialPlanSubscribers},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${UMDialPlan},

    [System.Object]
    ${AllowPinlessVoiceMailAccess},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${LogonFailuresBeforePINReset},

    [System.Object]
    ${VoiceMailPreviewPartnerAddress},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AllowedInCountryOrRegionGroups},

    [System.Object]
    ${MaxGreetingDuration},

    [System.Object]
    ${AllowAutomaticSpeechRecognition},

    [System.Object]
    ${PINHistoryCount},

    [System.Object]
    ${AllowExtensions},

    [System.Object]
    ${AllowPlayOnPhone},

    [System.Object]
    ${ResetPINText},

    [System.Object]
    ${AllowVoiceMailAnalysis},

    [System.Object]
    ${FaxServerURI},

    [System.Object]
    ${InformCallerOfVoiceMailAnalysis},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AllowFax},

    [System.Object]
    ${FaxMessageText},

    [System.Object]
    ${VoiceMailPreviewPartnerMaxMessageDuration},

    [System.Object]
    ${AllowedInternationalGroups},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowMissedCallNotifications},

    [System.Object]
    ${ProtectedVoiceMailText},

    [System.Object]
    ${AllowSMSNotification},

    [System.Object]
    ${AllowTUIAccessToEmail},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AllowMessageWaitingIndicator},

    [System.Object]
    ${SourceForestPolicyNames},

    [System.Object]
    ${PINLifetime},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${VoiceMailText},

    [System.Object]
    ${ProtectAuthenticatedVoiceMail},

    [System.Object]
    ${MinPINLength},

    [switch]
    ${ForceUpgrade},

    [System.Object]
    ${AllowSubscriberAccess},

    [System.Object]
    ${UMEnabledText},

    [System.Object]
    ${AllowVoiceMailPreview},

    [System.Object]
    ${ProtectUnauthenticatedVoiceMail},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${VoiceMailPreviewPartnerMaxDeliveryDelay},

    [System.Object]
    ${AllowTUIAccessToCalendar},

    [System.Object]
    ${AllowCallAnsweringRules},

    [System.Object]
    ${AllowTUIAccessToDirectory},

    [System.Object]
    ${RequireProtectedPlayOnPhone},

    [System.Object]
    ${AllowTUIAccessToPersonalContacts},

    [System.Object]
    ${MaxLogonAttempts},

    [switch]
    ${AsJob})

}
function Set-UnifiedAuditSetting
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-UnifiedGroup
{

param(
    [System.Object]
    ${EmailAddresses},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AcceptMessagesOnlyFromSendersOrMembers},

    [System.Object]
    ${CustomAttribute12},

    [System.Object]
    ${CustomAttribute10},

    [System.Object]
    ${Language},

    [System.Object]
    ${CustomAttribute8},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CustomAttribute5},

    [switch]
    ${UnifiedGroupWelcomeMessageEnabled},

    [System.Object]
    ${MailTip},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${GrantSendOnBehalfTo},

    [System.Object]
    ${Classification},

    [switch]
    ${AutoSubscribeNewMembers},

    [System.Object]
    ${AuditLogAgeLimit},

    [switch]
    ${HiddenFromExchangeClientsEnabled},

    [System.Object]
    ${MaxReceiveSize},

    [System.Object]
    ${ExtensionCustomAttribute5},

    [System.Object]
    ${CustomAttribute15},

    [System.Object]
    ${RejectMessagesFromSendersOrMembers},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Alias},

    [System.Object]
    ${DisplayName},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${CustomAttribute1},

    [System.Object]
    ${CustomAttribute7},

    [switch]
    ${SubscriptionEnabled},

    [switch]
    ${ForceUpgrade},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AccessType},

    [System.Object]
    ${MailboxRegion},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ExtensionCustomAttribute1},

    [System.Object]
    ${Notes},

    [System.Object]
    ${CustomAttribute14},

    [System.Object]
    ${RequireSenderAuthenticationEnabled},

    [System.Object]
    ${CustomAttribute9},

    [System.Object]
    ${CustomAttribute6},

    [System.Object]
    ${DataEncryptionPolicy},

    [System.Object]
    ${ExtensionCustomAttribute4},

    [System.Object]
    ${SensitivityLabelId},

    [switch]
    ${AlwaysSubscribeMembersToCalendarEvents},

    [System.Object]
    ${ExtensionCustomAttribute2},

    [System.Object]
    ${CustomAttribute13},

    [System.Object]
    ${CustomAttribute2},

    [System.Object]
    ${PrimarySmtpAddress},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${CalendarMemberReadOnly},

    [System.Object]
    ${MaxSendSize},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${HiddenFromAddressListsEnabled},

    [System.Object]
    ${MailTipTranslations},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CustomAttribute4},

    [System.Object]
    ${ExtensionCustomAttribute3},

    [switch]
    ${ConnectorsEnabled},

    [System.Object]
    ${ModerationEnabled},

    [System.Object]
    ${CustomAttribute3},

    [System.Object]
    ${CustomAttribute11},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-User
{

param(
    [System.Object]
    ${Company},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Phone},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Office},

    [System.Object]
    ${CountryOrRegion},

    [System.Object]
    ${AuthenticationPolicy},

    [System.Object]
    ${OtherTelephone},

    [System.Object]
    ${Pager},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${PhoneticDisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Fax},

    [switch]
    ${Force},

    [System.Object]
    ${LastName},

    [System.Object]
    ${StsRefreshTokensValidFrom},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${RemoveMailboxProvisioningConstraint},

    [System.Object]
    ${ResetPasswordOnNextLogon},

    [System.Object]
    ${BlockCloudCache},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${SeniorityIndex},

    [System.Object]
    ${City},

    [System.Object]
    ${AllowUMCallsFromNonUsers},

    [System.Object]
    ${Title},

    [System.Object]
    ${MobilePhone},

    [System.Object]
    ${AssistantName},

    [System.Object]
    ${CreateDTMFMap},

    [System.Object]
    ${VIP},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StateOrProvince},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Initials},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${WebPage},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${PublicFolder},

    [switch]
    ${PermanentlyClearPreviousMailboxInfo},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Manager},

    [System.Object]
    ${HomePhone},

    [System.Object]
    ${OtherFax},

    [System.Object]
    ${SimpleDisplayName},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Department},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OtherHomePhone},

    [System.Object]
    ${FirstName},

    [System.Object]
    ${UMDtmfMap},

    [System.Object]
    ${WindowsEmailAddress},

    [System.Object]
    ${StreetAddress},

    [System.Object]
    ${Notes},

    [System.Object]
    ${RemotePowerShellEnabled},

    [System.Object]
    ${Name},

    [System.Object]
    ${GeoCoordinates},

    [System.Object]
    ${PostOfficeBox},

    [System.Object]
    ${PostalCode},

    [switch]
    ${AsJob})

}
function Set-UserAnalyticsConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${PrivacyMode},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-UserPhoto
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PictureData},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Cancel},

    [System.Object]
    ${PictureStream},

    [switch]
    ${Save},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PhotoType},

    [switch]
    ${Preview},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Start-AuditAssistant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Start-HistoricalSearch
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MessageID},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Url},

    [System.Object]
    ${CompressFile},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${TransportRule},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ReportTitle},

    [System.Object]
    ${NetworkMessageID},

    [System.Object]
    ${ReportType},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RecipientAddress},

    [System.Object]
    ${SenderAddress},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DLPPolicy},

    [System.Object]
    ${DeliveryStatus},

    [System.Object]
    ${EncryptionType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${StartDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OriginalClientIP},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${NotifyAddress},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EncryptionTemplate},

    [System.Object]
    ${Locale},

    [switch]
    ${AsJob})

}
function Start-ManagedFolderAssistant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${StopHoldCleanup},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${DataGovernance},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${ComplianceJob},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${FullCrawl},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${InactiveMailbox},

    [switch]
    ${HoldCleanup},

    [switch]
    ${AggMailboxCleanup},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Start-MigrationBatch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Start-MigrationUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Start-UMPhoneSession
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${DefaultVoicemailGreeting},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${CallAnsweringRuleId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PhoneNumber},

    [System.Object]
    ${UMMailbox},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AwayVoicemailGreeting},

    [switch]
    ${AsJob})

}
function Stop-HistoricalSearch
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${JobId},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Stop-MigrationBatch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Stop-MigrationUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Stop-UMPhoneSession
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Suspend-MailboxRestoreRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SuspendComment},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Suspend-MoveRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ProxyToMailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SuspendComment},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Suspend-PublicFolderMailboxMigrationRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SuspendComment},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Suspend-SyncRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-ApplicationAccessPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${AppId},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-ClientAccessRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AuthenticationType},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${RemotePort},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [System.Object]
    ${Protocol},

    [System.Object]
    ${OAuthClaims},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RemoteAddress},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-DataClassification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${TestTextExtractionResults},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TextToClassify},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ClassificationNames},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-DataEncryptionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-InformationBarrierPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-IRMConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${RMSOnline},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Recipient},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Sender},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-MAPIConnectivity
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Archive},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-MigrationServerAvailability
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Endpoint},

    [switch]
    ${AcceptUntrustedCertificates},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${ExchangeRemoteMove},

    [System.Object]
    ${EmailAddress},

    [System.Object]
    ${ServiceAccountKeyFileData},

    [switch]
    ${PublicFolder},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${TestMailbox},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ExchangeServer},

    [System.Object]
    ${Authentication},

    [switch]
    ${ExchangeOutlookAnywhere},

    [switch]
    ${Gmail},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Compliance},

    [System.Object]
    ${Port},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PublicFolderToUnifiedGroup},

    [System.Object]
    ${RemoteServer},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${MailboxPermission},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SourceMailboxLegacyDN},

    [switch]
    ${Imap},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${Autodiscover},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Credentials},

    [System.Object]
    ${PublicFolderDatabaseServerLegacyDN},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Security},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RPCProxyServer},

    [switch]
    ${AsJob})

}
function Test-OAuthConnectivity
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${OrganizationDomain},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${AppOnly},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${UseCachedToken},

    [System.Object]
    ${Mailbox},

    [System.Object]
    ${TargetUri},

    [switch]
    ${ReloadConfig},

    [System.Object]
    ${Service},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-OrganizationRelationship
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${UserIdentity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-SiteMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${UseAppTokenOnly},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${RequestorIdentity},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassOwnerCheck},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-TextExtraction
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Troubleshoot-AgendaMail
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Undo-SoftDeletedMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${SoftDeletedObject},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [System.Object]
    ${WindowsLiveID},

    [switch]
    ${PublicFolder},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Password},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Undo-SoftDeletedUnifiedGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${SoftDeletedObject},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Update-DistributionGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Members},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Update-HybridConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${SuppressOAuthWarning},

    [switch]
    ${ForceUpgrade},

    [System.Object]
    ${OnPremisesCredentials},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${TenantCredentials},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Update-PublicFolderMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ForceOnlineSync},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${CreateAssociatedDumpster},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${InvokeSynchronizer},

    [switch]
    ${SuppressStatus},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ReconcileFolders},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${FullSync},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${FolderId},

    [System.Object]
    ${Identity},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Update-Recipient
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Update-RoleGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Members},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Update-SiteMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Target},

    [switch]
    ${FullSync},

    [switch]
    ${BypassOwnerCheck},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Upgrade-DistributionGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${DlIdentities},

    [System.Object]
    ${ExecutingUser},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ActionType},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Validate-OutboundConnector
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Recipients},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Validate-RetentionRuleQuery
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${KqlQueryString},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Validate-ShadowCalendar
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${End},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CompareProperties},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CalendarId},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Start},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ReturnItemDetails},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Write-AdminAuditLog
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
#endregion
#region MicrosoftTeams
#endregion
#region PnP
function Connect-PnPHubSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The site to connect to the hubsite')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
    ${Site},

    [Parameter(Mandatory=$true, HelpMessage='The hubsite to connect the site to')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
    ${HubSite},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Disconnect-PnPHubSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The site to disconnect from its hubsite')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
    ${Site},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Ensure-PnPFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${SiteRelativePath},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        ${Web},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function Execute-PnPQuery
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Number of times to retry in case of throttling. Defaults to 10.')]
    [int]
    ${RetryCount},

    [Parameter(HelpMessage='Delay in seconds. Defaults to 1.')]
    [int]
    ${RetryWait},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Invoke-PnPSearchQuery
{
    [CmdletBinding(DefaultParameterSetName='Limit')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Search query in Keyword Query Language (KQL).')]
    [string]
    ${Query},

    [Parameter(ParameterSetName='Limit', HelpMessage='Search result item to start returning the results from. Useful for paging. Leave at 0 to return all results.')]
    [int]
    ${StartRow},

    [Parameter(ParameterSetName='Limit', HelpMessage='Maximum amount of search results to return. Default and max per page is 500 search results.')]
    [ValidateRange(0, 500)]
    [int]
    ${MaxResults},

    [Parameter(ParameterSetName='All', HelpMessage='Automatically page results until the end to get more than 500. Use with caution!')]
    [switch]
    ${All},

    [Parameter(HelpMessage='Specifies whether near duplicate items should be removed from the search results.')]
    [bool]
    ${TrimDuplicates},

    [Parameter(HelpMessage='Extra query properties. Can for example be used for Office Graph queries.')]
    [hashtable]
    ${Properties},

    [Parameter(HelpMessage='The list of refiners to be returned in a search result.')]
    [string]
    ${Refiners},

    [Parameter(HelpMessage='The locale for the query.')]
    [int]
    ${Culture},

    [Parameter(HelpMessage='Specifies the query template that is used at run time to transform the query based on user input.')]
    [string]
    ${QueryTemplate},

    [Parameter(HelpMessage='The list of properties to return in the search results.')]
    [string[]]
    ${SelectProperties},

    [Parameter(HelpMessage='The set of refinement filters used.')]
    [string[]]
    ${RefinementFilters},

    [Parameter(HelpMessage='The list of properties by which the search results are ordered.')]
    [hashtable]
    ${SortList},

    [Parameter(HelpMessage='The identifier (ID) of the ranking model to use for the query.')]
    [string]
    ${RankingModelId},

    [Parameter(HelpMessage='Specifies the name of the client which issued the query.')]
    [string]
    ${ClientType},

    [Parameter(HelpMessage='Limit the number of items per the collapse specification. See https://docs.microsoft.com/en-us/sharepoint/dev/general-development/customizing-search-results-in-sharepoint#collapse-similar-search-results-using-the-collapsespecification-property for more information.')]
    [string]
    ${CollapseSpecification},

    [Parameter(HelpMessage='The keyword query’’s hidden constraints.')]
    [string]
    ${HiddenConstraints},

    [Parameter(HelpMessage='The identifier for the search query time zone.')]
    [int]
    ${TimeZoneId},

    [Parameter(HelpMessage='Specifies whether the phonetic forms of the query terms are used to find matches.')]
    [bool]
    ${EnablePhonetic},

    [Parameter(HelpMessage='Specifies whether stemming is enabled.')]
    [bool]
    ${EnableStemming},

    [Parameter(HelpMessage='Specifies whether Query Rules are enabled for this query.')]
    [bool]
    ${EnableQueryRules},

    [Parameter(HelpMessage='Specifies the identifier (ID or name) of the result source to be used to run the query.')]
    [guid]
    ${SourceId},

    [Parameter(HelpMessage='Determines whether Best Bets are enabled.')]
    [bool]
    ${ProcessBestBets},

    [Parameter(HelpMessage='Determines whether personal favorites data is processed or not.')]
    [bool]
    ${ProcessPersonalFavorites},

    [Parameter(HelpMessage='Specifies whether only relevant results are returned')]
    [switch]
    ${RelevantResults},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Load-PnPProvisioningTemplate
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='By Path', Mandatory=$true, Position=0, HelpMessage='Filename to read from, optionally including full path.')]
    [string]
    ${Path},

    [Parameter(ParameterSetName='By XML', Mandatory=$true, Position=1, HelpMessage='Variable to read from, containing the valid XML of a provisioning template.')]
    [string]
    ${Xml},

    [Parameter(HelpMessage='Allows you to specify ITemplateProviderExtension to execute while loading the template.')]
    [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
    ${TemplateProviderExtensions})

}
function Add-PnPAlert
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The ID, Title or Url of the list.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='Alert title')]
    [string]
    ${Title},

    [Parameter(HelpMessage='User to create the alert for (User ID, login name or actual User object). Skip this parameter to create an alert for the current user. Note: Only site owners can create alerts for other users.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.UserPipeBind]
    ${User},

    [Parameter(HelpMessage='Alert delivery method')]
    [Microsoft.SharePoint.Client.AlertDeliveryChannel]
    ${DeliveryMethod},

    [Parameter(HelpMessage='Alert change type')]
    [Microsoft.SharePoint.Client.AlertEventType]
    ${ChangeType},

    [Parameter(HelpMessage='Alert frequency')]
    [Microsoft.SharePoint.Client.AlertFrequency]
    ${Frequency},

    [Parameter(HelpMessage='Alert filter')]
    [SharePointPnP.PowerShell.Commands.Enums.AlertFilter]
    ${Filter},

    [Parameter(HelpMessage='Alert time (if frequency is not immediate)')]
    [datetime]
    ${Time},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPApp
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='Add only', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Specifies the Id or an actual app metadata instance')]
    [Parameter(ParameterSetName='Add and Publish', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Specifies the Id or an actual app metadata instance')]
    [string]
    ${Path},

    [Parameter(HelpMessage='Defines which app catalog to use. Defaults to Tenant')]
    [OfficeDevPnP.Core.Enums.AppCatalogScope]
    ${Scope},

    [Parameter(ParameterSetName='Add and Publish', Mandatory=$true, HelpMessage='This will deploy/trust an app into the app catalog')]
    [switch]
    ${Publish},

    [Parameter(ParameterSetName='Add and Publish')]
    [switch]
    ${SkipFeatureDeployment},

    [Parameter(HelpMessage='Overwrites the existing app package if it already exists')]
    [switch]
    ${Overwrite},

    [Parameter(HelpMessage='Specifies the timeout in seconds. Defaults to 200.')]
    [int]
    ${Timeout},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPApplicationCustomizer
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='The title of the application customizer')]
    [string]
    ${Title},

    [Parameter(HelpMessage='The description of the application customizer')]
    [string]
    ${Description},

    [Parameter(HelpMessage='Sequence of this application customizer being injected. Use when you have a specific sequence with which to have multiple application customizers being added to the page.')]
    [int]
    ${Sequence},

    [Parameter(HelpMessage='The scope of the CustomAction to add to. Either Web or Site; defaults to Web. ''All'' is not valid for this command.')]
    [SharePointPnP.PowerShell.Commands.Enums.CustomActionScope]
    ${Scope},

    [Parameter(Mandatory=$true, HelpMessage='The Client Side Component Id of the SharePoint Framework client side extension application customizer found in the manifest')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${ClientSideComponentId},

    [Parameter(HelpMessage='The Client Side Component Properties of the application customizer. Specify values as a json string : "{Property1 : ''Value1'', Property2: ''Value2''}"')]
    [string]
    ${ClientSideComponentProperties},

    [Parameter(HelpMessage='The Client Side Host Properties of the application customizer. Specify values as a json string : "{''preAllocatedApplicationCustomizerTopHeight'': ''50'', ''preAllocatedApplicationCustomizerBottomHeight'': ''50''}"')]
    [string]
    ${ClientSideHostProperties},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPClientSidePage
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, HelpMessage='Specifies the name of the page.')]
    [string]
    ${Name},

    [Parameter(HelpMessage='Specifies the layout type of the page.')]
    [OfficeDevPnP.Core.Pages.ClientSidePageLayoutType]
    ${LayoutType},

    [Parameter(HelpMessage='Allows to promote the page for a specific purpose (HomePage | NewsPage)')]
    [SharePointPnP.PowerShell.Commands.ClientSidePages.ClientSidePagePromoteType]
    ${PromoteAs},

    [Parameter(HelpMessage='Specify either the name, ID or an actual content type.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
    ${ContentType},

    [Parameter(HelpMessage='Enables or Disables the comments on the page')]
    [switch]
    ${CommentsEnabled},

    [Parameter(HelpMessage='Publishes the page once it is saved. Applicable to libraries set to create major and minor versions.')]
    [switch]
    ${Publish},

    [Parameter(HelpMessage='Type of layout used for the header')]
    [OfficeDevPnP.Core.Pages.ClientSidePageHeaderLayoutType]
    ${HeaderLayoutType},

    [Parameter(HelpMessage='Sets the message for publishing the page.')]
    [Obsolete('This parameter will be ignored')]
    [string]
    ${PublishMessage},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPClientSidePageSection
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The name of the page')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
    ${Page},

    [Parameter(Mandatory=$true, HelpMessage='Specifies the columns template to use for the section.')]
    [OfficeDevPnP.Core.Pages.CanvasSectionTemplate]
    ${SectionTemplate},

    [Parameter(HelpMessage='Sets the order of the section. (Default = 1)')]
    [int]
    ${Order},

    [Parameter(HelpMessage='Sets the background of the section (default = 0)')]
    [int]
    ${ZoneEmphasis},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPClientSideText
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='Default', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The name of the page.')]
    [Parameter(ParameterSetName='Positioned', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The name of the page.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
    ${Page},

    [Parameter(ParameterSetName='Default', Mandatory=$true, HelpMessage='Specifies the text to display in the text area.')]
    [Parameter(ParameterSetName='Positioned', Mandatory=$true, HelpMessage='Specifies the text to display in the text area.')]
    [string]
    ${Text},

    [Parameter(ParameterSetName='Default', HelpMessage='Sets the order of the text control. (Default = 1)')]
    [Parameter(ParameterSetName='Positioned', HelpMessage='Sets the order of the text control. (Default = 1)')]
    [int]
    ${Order},

    [Parameter(ParameterSetName='Positioned', Mandatory=$true, HelpMessage='Sets the section where to insert the text control.')]
    [int]
    ${Section},

    [Parameter(ParameterSetName='Positioned', Mandatory=$true, HelpMessage='Sets the column where to insert the text control.')]
    [int]
    ${Column},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPClientSideWebPart
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='Default with built-in web part', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The name of the page.')]
    [Parameter(ParameterSetName='Default with 3rd party web part', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The name of the page.')]
    [Parameter(ParameterSetName='Positioned with built-in web part', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The name of the page.')]
    [Parameter(ParameterSetName='Positioned with 3rd party web part', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The name of the page.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
    ${Page},

    [Parameter(ParameterSetName='Default with built-in web part', Mandatory=$true, HelpMessage='Defines a default web part type to insert.')]
    [Parameter(ParameterSetName='Positioned with built-in web part', Mandatory=$true, HelpMessage='Defines a default web part type to insert.')]
    [OfficeDevPnP.Core.Pages.DefaultClientSideWebParts]
    ${DefaultWebPartType},

    [Parameter(ParameterSetName='Default with 3rd party web part', Mandatory=$true, HelpMessage='Specifies the component instance or Id to add.')]
    [Parameter(ParameterSetName='Positioned with 3rd party web part', Mandatory=$true, HelpMessage='Specifies the component instance or Id to add.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ClientSideComponentPipeBind]
    ${Component},

    [Parameter(ParameterSetName='Default with built-in web part', HelpMessage='The properties of the web part')]
    [Parameter(ParameterSetName='Default with 3rd party web part', HelpMessage='The properties of the web part')]
    [Parameter(ParameterSetName='Positioned with built-in web part', HelpMessage='The properties of the web part')]
    [Parameter(ParameterSetName='Positioned with 3rd party web part', HelpMessage='The properties of the web part')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.PropertyBagPipeBind]
    ${WebPartProperties},

    [Parameter(ParameterSetName='Default with built-in web part', HelpMessage='Sets the order of the web part control. (Default = 1)')]
    [Parameter(ParameterSetName='Default with 3rd party web part', HelpMessage='Sets the order of the web part control. (Default = 1)')]
    [Parameter(ParameterSetName='Positioned with built-in web part', HelpMessage='Sets the order of the web part control. (Default = 1)')]
    [Parameter(ParameterSetName='Positioned with 3rd party web part', HelpMessage='Sets the order of the web part control. (Default = 1)')]
    [int]
    ${Order},

    [Parameter(ParameterSetName='Positioned with built-in web part', Mandatory=$true, HelpMessage='Sets the section where to insert the web part control.')]
    [Parameter(ParameterSetName='Positioned with 3rd party web part', Mandatory=$true, HelpMessage='Sets the section where to insert the web part control.')]
    [int]
    ${Section},

    [Parameter(ParameterSetName='Positioned with built-in web part', Mandatory=$true, HelpMessage='Sets the column where to insert the web part control.')]
    [Parameter(ParameterSetName='Positioned with 3rd party web part', Mandatory=$true, HelpMessage='Sets the column where to insert the web part control.')]
    [int]
    ${Column},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPContentType
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Specify the name of the new content type')]
    [string]
    ${Name},

    [Parameter(HelpMessage='If specified, in the format of 0x0100233af432334r434343f32f3, will create a content type with the specific ID')]
    [string]
    ${ContentTypeId},

    [Parameter(HelpMessage='Specifies the description of the new content type')]
    [string]
    ${Description},

    [Parameter(HelpMessage='Specifies the group of the new content type')]
    [string]
    ${Group},

    [Parameter(HelpMessage='Specifies the parent of the new content type')]
    [Microsoft.SharePoint.Client.ContentType]
    ${ParentContentType},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPContentTypeToDocumentSet
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The content type object, name or id to add. Either specify name, an id, or a content type object.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind[]]
    ${ContentType},

    [Parameter(Mandatory=$true, HelpMessage='The document set object or id to add the content type to. Either specify a name, a document set template object, an id, or a content type object')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.DocumentSetPipeBind]
    ${DocumentSet},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPContentTypeToList
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Specifies the list to which the content type needs to be added')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Mandatory=$true, HelpMessage='Specifies the content type that needs to be added to the list')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
    ${ContentType},

    [Parameter(HelpMessage='Specify if the content type needs to be the default content type or not')]
    [switch]
    ${DefaultContentType},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPCustomAction
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='Default', Mandatory=$true, HelpMessage='The name of the custom action')]
    [Parameter(ParameterSetName='Client Side Component Id', Mandatory=$true, HelpMessage='The name of the custom action')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='Default', Mandatory=$true, HelpMessage='The title of the custom action')]
    [Parameter(ParameterSetName='Client Side Component Id', Mandatory=$true, HelpMessage='The title of the custom action')]
    [string]
    ${Title},

    [Parameter(ParameterSetName='Default', Mandatory=$true, HelpMessage='The description of the custom action')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='Default', Mandatory=$true, HelpMessage='The group where this custom action needs to be added like ''SiteActions''')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='Default', Mandatory=$true, HelpMessage='The actual location where this custom action need to be added like ''CommandUI.Ribbon''')]
    [Parameter(ParameterSetName='Client Side Component Id', Mandatory=$true, HelpMessage='The actual location where this custom action need to be added like ''CommandUI.Ribbon''')]
    [string]
    ${Location},

    [Parameter(ParameterSetName='Default', HelpMessage='Sequence of this CustomAction being injected. Use when you have a specific sequence with which to have multiple CustomActions being added to the page.')]
    [Parameter(ParameterSetName='Client Side Component Id', HelpMessage='Optional activation sequence order for the extensions. Used if multiple extensions are activated on a same scope.')]
    [int]
    ${Sequence},

    [Parameter(ParameterSetName='Default', HelpMessage='The URL, URI or ECMAScript (JScript, JavaScript) function associated with the action')]
    [string]
    ${Url},

    [Parameter(ParameterSetName='Default', HelpMessage='The URL of the image associated with the custom action')]
    [string]
    ${ImageUrl},

    [Parameter(ParameterSetName='Default', HelpMessage='XML fragment that determines user interface properties of the custom action')]
    [string]
    ${CommandUIExtension},

    [Parameter(ParameterSetName='Default', HelpMessage='The identifier of the object associated with the custom action.')]
    [Parameter(ParameterSetName='Client Side Component Id', HelpMessage='The identifier of the object associated with the custom action.')]
    [string]
    ${RegistrationId},

    [Parameter(ParameterSetName='Default', HelpMessage='A string array that contain the permissions needed for the custom action')]
    [Microsoft.SharePoint.Client.PermissionKind[]]
    ${Rights},

    [Parameter(ParameterSetName='Default', HelpMessage='Specifies the type of object associated with the custom action')]
    [Parameter(ParameterSetName='Client Side Component Id', HelpMessage='Specifies the type of object associated with the custom action')]
    [Microsoft.SharePoint.Client.UserCustomActionRegistrationType]
    ${RegistrationType},

    [Parameter(ParameterSetName='Default', HelpMessage='The scope of the CustomAction to add to. Either Web or Site; defaults to Web. ''All'' is not valid for this command.')]
    [Parameter(ParameterSetName='Client Side Component Id', HelpMessage='The scope of the CustomAction to add to. Either Web or Site; defaults to Web. ''All'' is not valid for this command.')]
    [SharePointPnP.PowerShell.Commands.Enums.CustomActionScope]
    ${Scope},

    [Parameter(ParameterSetName='Client Side Component Id', Mandatory=$true, HelpMessage='The Client Side Component Id of the custom action')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${ClientSideComponentId},

    [Parameter(ParameterSetName='Client Side Component Id', HelpMessage='The Client Side Component Properties of the custom action. Specify values as a json string : "{Property1 : ''Value1'', Property2: ''Value2''}"')]
    [string]
    ${ClientSideComponentProperties},

    [Parameter(ParameterSetName='Client Side Component Id', HelpMessage='The Client Side Host Properties of the custom action. Specify values as a json string : "{''preAllocatedApplicationCustomizerTopHeight'': ''50'', ''preAllocatedApplicationCustomizerBottomHeight'': ''50''}"')]
    [string]
    ${ClientSideHostProperties},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPDataRowsToProvisioningTemplate
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, HelpMessage='Filename of the .PNP Open XML site template to read from, optionally including full path.')]
    [string]
    ${Path},

    [Parameter(Mandatory=$true, HelpMessage='The list to query')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='The CAML query to execute against the list. Defaults to all items.')]
    [string]
    ${Query},

    [Parameter(HelpMessage='The fields to retrieve. If not specified all fields will be loaded in the returned list object.')]
    [string[]]
    ${Fields},

    [Parameter(Position=5, HelpMessage='A switch to include ObjectSecurity information.')]
    [switch]
    ${IncludeSecurity},

    [Parameter(Position=4, HelpMessage='Allows you to specify ITemplateProviderExtension to execute while loading the template.')]
    [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
    ${TemplateProviderExtensions},

    [Parameter(HelpMessage='If set, this switch will try to tokenize the values with web and site related tokens')]
    [switch]
    ${TokenizeUrls},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPDocumentSet
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The name of the list, its ID or an actual list object from where the document set needs to be added')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Mandatory=$true, HelpMessage='The name of the document set')]
    [string]
    ${Name},

    [Parameter(Mandatory=$true, HelpMessage='The name of the content type, its ID or an actual content object referencing to the document set')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
    ${ContentType},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPEventReceiver
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='The list object or name where the remote event receiver needs to be added. If omitted, the remote event receiver will be added to the web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Mandatory=$true, HelpMessage='The name of the remote event receiver')]
    [string]
    ${Name},

    [Parameter(Mandatory=$true, HelpMessage='The URL of the remote event receiver web service')]
    [string]
    ${Url},

    [Parameter(Mandatory=$true, HelpMessage='The type of the event receiver like ItemAdded, ItemAdding. See https://msdn.microsoft.com/en-us/library/microsoft.sharepoint.client.eventreceivertype.aspx for the full list of available types.')]
    [Alias('Type')]
    [Microsoft.SharePoint.Client.EventReceiverType]
    ${EventReceiverType},

    [Parameter(Mandatory=$true, HelpMessage='The synchronization type: Asynchronous or Synchronous')]
    [Alias('Sync')]
    [Microsoft.SharePoint.Client.EventReceiverSynchronization]
    ${Synchronization},

    [Parameter(HelpMessage='The sequence number where this remote event receiver should be placed')]
    [int]
    ${SequenceNumber},

    [Parameter(HelpMessage='Overwrites the output file if it exists.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPField
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        ${List},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
        ${Field},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.String]
        ${InternalName},

        [Parameter()]
        [Microsoft.SharePoint.Client.FieldType]
        ${Type},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        ${Id},

        [Parameter()]
        [System.String]
        ${Group},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        ${ClientSideComponentId},

        [Parameter()]
        [System.String]
        ${ClientSideComponentProperties},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        ${Web},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function Add-PnPFieldFromXml
{
    [CmdletBinding()]
param(
    [Parameter(ValueFromPipeline=$true, HelpMessage='The name of the list, its ID or an actual list object where this field needs to be added')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Mandatory=$true, Position=0, HelpMessage='CAML snippet containing the field definition. See http://msdn.microsoft.com/en-us/library/office/ms437580(v=office.15).aspx')]
    [string]
    ${FieldXml},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPFieldToContentType
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Specifies the field that needs to be added to the content type')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
    ${Field},

    [Parameter(Mandatory=$true, HelpMessage='Specifies which content type a field needs to be added to')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
    ${ContentType},

    [Parameter(HelpMessage='Specifies whether the field is required or not')]
    [switch]
    ${Required},

    [Parameter(HelpMessage='Specifies whether the field should be hidden or not')]
    [switch]
    ${Hidden},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPFile
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='Upload file', Mandatory=$true, HelpMessage='The local file path.')]
    [string]
    ${Path},

    [Parameter(Mandatory=$true, HelpMessage='The destination folder in the site')]
    [string]
    ${Folder},

    [Parameter(ParameterSetName='Upload file from stream', Mandatory=$true, HelpMessage='Name for file')]
    [string]
    ${FileName},

    [Parameter(ParameterSetName='Upload file', HelpMessage='Filename to give the file on SharePoint')]
    [string]
    ${NewFileName},

    [Parameter(ParameterSetName='Upload file from stream', Mandatory=$true, HelpMessage='Stream with the file contents')]
    [System.IO.Stream]
    ${Stream},

    [Parameter(HelpMessage='If versioning is enabled, this will check out the file first if it exists, upload the file, then check it in again.')]
    [switch]
    ${Checkout},

    [Parameter(HelpMessage='The comment added to the checkin.')]
    [string]
    ${CheckInComment},

    [Parameter(HelpMessage='Will auto approve the uploaded file.')]
    [switch]
    ${Approve},

    [Parameter(HelpMessage='The comment added to the approval.')]
    [string]
    ${ApproveComment},

    [Parameter(HelpMessage='Will auto publish the file.')]
    [switch]
    ${Publish},

    [Parameter(HelpMessage='The comment added to the publish action.')]
    [string]
    ${PublishComment},

    [switch]
    ${UseWebDav},

    [Parameter(HelpMessage='Use the internal names of the fields when specifying field names.Single line of text: -Values @{"Title" = "Title New"}Multiple lines of text: -Values @{"MultiText" = "New text\n\nMore text"}Rich text: -Values @{"MultiText" = "<strong>New</strong> text"}Choice: -Values @{"Choice" = "Value 1"}Number: -Values @{"Number" = "10"}Currency: -Values @{"Number" = "10"}Currency: -Values @{"Currency" = "10"}Date and Time: -Values @{"DateAndTime" = "03/10/2015 14:16"}Lookup (id of lookup value): -Values @{"Lookup" = "2"}Multi value lookup (id of lookup values as array 1): -Values @{"MultiLookupField" = "1","2"}Multi value lookup (id of lookup values as array 2): -Values @{"MultiLookupField" = 1,2}Multi value lookup (id of lookup values as string): -Values @{"MultiLookupField" = "1,2"}Yes/No: -Values @{"YesNo" = $false}Person/Group (id of user/group in Site User Info List or email of the user, separate multiple values with a comma): -Values @{"Person" = "user1@domain.com","21"}Managed Metadata (single value with path to term): -Values @{"MetadataField" = "CORPORATE|DEPARTMENTS|FINANCE"}Managed Metadata (single value with id of term): -Values @{"MetadataField" = "fe40a95b-2144-4fa2-b82a-0b3d0299d818"} with Id of termManaged Metadata (multiple values with paths to terms): -Values @{"MetadataField" = "CORPORATE|DEPARTMENTS|FINANCE","CORPORATE|DEPARTMENTS|HR"}Managed Metadata (multiple values with ids of terms): -Values @{"MetadataField" = "fe40a95b-2144-4fa2-b82a-0b3d0299d818","52d88107-c2a8-4bf0-adfa-04bc2305b593"}Hyperlink or Picture: -Values @{"Hyperlink" = "https://github.com/OfficeDev/, OfficePnp"}')]
    [hashtable]
    ${Values},

    [Parameter(HelpMessage='Use to assign a ContentType to the file.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
    ${ContentType},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPFileToProvisioningTemplate
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, HelpMessage='Filename of the .PNP Open XML site template to read from, optionally including full path.')]
    [string]
    ${Path},

    [Parameter(ParameterSetName='Local File', Mandatory=$true, Position=1, HelpMessage='The file to add to the in-memory template, optionally including full path.')]
    [string]
    ${Source},

    [Parameter(ParameterSetName='Remove File', Mandatory=$true, Position=1, HelpMessage='The file to add to the in-memory template, specifying its url in the current connected Web.')]
    [string]
    ${SourceUrl},

    [Parameter(ParameterSetName='Local File', Mandatory=$true, Position=2, HelpMessage='The target Folder for the file to add to the in-memory template.')]
    [string]
    ${Folder},

    [Parameter(Position=3, HelpMessage='The target Container for the file to add to the in-memory template, optional argument.')]
    [string]
    ${Container},

    [Parameter(Position=4, HelpMessage='The level of the files to add. Defaults to Published')]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.FileLevel]
    ${FileLevel},

    [Parameter(Position=5, HelpMessage='Set to overwrite in site, Defaults to true')]
    [switch]
    ${FileOverwrite},

    [Parameter(Position=4, HelpMessage='Allows you to specify ITemplateProviderExtension to execute while loading the template.')]
    [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
    ${TemplateProviderExtensions},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPFolder
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The folder name')]
    [string]
    ${Name},

    [Parameter(Mandatory=$true, HelpMessage='The parent folder in the site')]
    [string]
    ${Folder},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPHtmlPublishingPageLayout
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Path to the file which will be uploaded')]
    [string]
    ${SourceFilePath},

    [Parameter(Mandatory=$true, HelpMessage='Title for the page layout')]
    [string]
    ${Title},

    [Parameter(Mandatory=$true, HelpMessage='Description for the page layout')]
    [string]
    ${Description},

    [Parameter(Mandatory=$true, HelpMessage='Associated content type ID')]
    [string]
    ${AssociatedContentTypeID},

    [Parameter(HelpMessage='Folder hierarchy where the HTML page layouts will be deployed')]
    [string]
    ${DestinationFolderHierarchy},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPHubSiteAssociation
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The site to connect to the hubsite')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
    ${Site},

    [Parameter(Mandatory=$true, HelpMessage='The hubsite to connect the site to')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
    ${HubSite},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPIndexedProperty
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, HelpMessage='Key of the property bag value to be indexed')]
    [string]
    ${Key},

    [Parameter(ValueFromPipeline=$true, HelpMessage='The list object or name where to set the indexed property')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPJavaScriptBlock
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The name of the script block. Can be used to identify the script with other cmdlets or coded solutions')]
    [Alias('Key')]
    [string]
    ${Name},

    [Parameter(Mandatory=$true, HelpMessage='The javascript block to add to the specified scope')]
    [string]
    ${Script},

    [Parameter(HelpMessage='A sequence number that defines the order on the page')]
    [int]
    ${Sequence},

    [Alias('AddToSite')]
    [Obsolete('Use Scope instead')]
    [switch]
    ${SiteScoped},

    [Parameter(HelpMessage='The scope of the script to add to. Either Web or Site, defaults to Web. ''All'' is not valid for this command.')]
    [SharePointPnP.PowerShell.Commands.Enums.CustomActionScope]
    ${Scope},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPJavaScriptLink
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Name under which to register the JavaScriptLink')]
    [Alias('Key')]
    [string]
    ${Name},

    [Parameter(Mandatory=$true, HelpMessage='URL to the JavaScript file to inject')]
    [string[]]
    ${Url},

    [Parameter(HelpMessage='Sequence of this JavaScript being injected. Use when you have a specific sequence with which to have JavaScript files being added to the page. I.e. jQuery library first and then jQueryUI.')]
    [int]
    ${Sequence},

    [Alias('AddToSite')]
    [Obsolete('Use Scope')]
    [switch]
    ${SiteScoped},

    [Parameter(HelpMessage='Defines if this JavaScript file will be injected to every page within the current site collection or web. All is not allowed in for this command. Default is web.')]
    [SharePointPnP.PowerShell.Commands.Enums.CustomActionScope]
    ${Scope},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPListFoldersToProvisioningTemplate
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, HelpMessage='Filename of the .PNP Open XML site template to read from, optionally including full path.')]
    [string]
    ${Path},

    [Parameter(Mandatory=$true, Position=2, HelpMessage='The list to query')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Position=4, HelpMessage='A switch parameter to include all folders in the list, or just top level folders.')]
    [switch]
    ${Recursive},

    [Parameter(Position=5, HelpMessage='A switch to include ObjectSecurity information.')]
    [switch]
    ${IncludeSecurity},

    [Parameter(Position=6, HelpMessage='Allows you to specify ITemplateProviderExtension to execute while loading the template.')]
    [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
    ${TemplateProviderExtensions},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPListItem
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The ID, Title or Url of the list.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='Specify either the name, ID or an actual content type.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
    ${ContentType},

    [Parameter(HelpMessage='Use the internal names of the fields when specifying field names.Single line of text: -Values @{"Title" = "Title New"}Multiple lines of text: -Values @{"MultiText" = "New text\n\nMore text"}Rich text: -Values @{"MultiText" = "<strong>New</strong> text"}Choice: -Values @{"Choice" = "Value 1"}Number: -Values @{"Number" = "10"}Currency: -Values @{"Number" = "10"}Currency: -Values @{"Currency" = "10"}Date and Time: -Values @{"DateAndTime" = "03/13/2015 14:16"}Lookup (id of lookup value): -Values @{"Lookup" = "2"}Multi value lookup (id of lookup values as array 1): -Values @{"MultiLookupField" = "1","2"}Multi value lookup (id of lookup values as array 2): -Values @{"MultiLookupField" = 1,2}Multi value lookup (id of lookup values as string): -Values @{"MultiLookupField" = "1,2"}Yes/No: -Values @{"YesNo" = $false}Person/Group (id of user/group in Site User Info List or email of the user, separate multiple values with a comma): -Values @{"Person" = "user1@domain.com","21"}Managed Metadata (single value with path to term): -Values @{"MetadataField" = "CORPORATE|DEPARTMENTS|FINANCE"}Managed Metadata (single value with id of term): -Values @{"MetadataField" = "fe40a95b-2144-4fa2-b82a-0b3d0299d818"} with Id of termManaged Metadata (multiple values with paths to terms): -Values @{"MetadataField" = "CORPORATE|DEPARTMENTS|FINANCE","CORPORATE|DEPARTMENTS|HR"}Managed Metadata (multiple values with ids of terms): -Values @{"MetadataField" = "fe40a95b-2144-4fa2-b82a-0b3d0299d818","52d88107-c2a8-4bf0-adfa-04bc2305b593"}Hyperlink or Picture: -Values @{"Hyperlink" = "https://github.com/OfficeDev/, OfficePnp"}')]
    [hashtable]
    ${Values},

    [Parameter(HelpMessage='The list relative URL of a folder. E.g. "MyFolder" for a folder located in the root of the list, or "MyFolder/SubFolder" for a folder located in the MyFolder folder which is located in the root of the list.')]
    [string]
    ${Folder},

    [Parameter(HelpMessage='The name of the retention label.')]
    [string]
    ${Label},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPMasterPage
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Path to the file which will be uploaded')]
    [string]
    ${SourceFilePath},

    [Parameter(Mandatory=$true, HelpMessage='Title for the Masterpage')]
    [string]
    ${Title},

    [Parameter(Mandatory=$true, HelpMessage='Description for the Masterpage')]
    [string]
    ${Description},

    [Parameter(HelpMessage='Folder hierarchy where the MasterPage will be deployed')]
    [string]
    ${DestinationFolderHierarchy},

    [Parameter(HelpMessage='UIVersion of the Masterpage. Default = 15')]
    [string]
    ${UIVersion},

    [Parameter(HelpMessage='Default CSS file for the MasterPage, this Url is SiteRelative')]
    [string]
    ${DefaultCssFile},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPNavigationNode
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The location of the node to add. Either TopNavigationBar, QuickLaunch, SearchNav')]
    [OfficeDevPnP.Core.Enums.NavigationType]
    ${Location},

    [Parameter(Mandatory=$true, HelpMessage='The title of the node to add')]
    [string]
    ${Title},

    [Parameter(HelpMessage='The url to navigate to when clicking the new menu item. This can either be absolute or relative to the Web. Fragments are not supported.')]
    [string]
    ${Url},

    [Parameter(HelpMessage='The key of the parent. Leave empty to add to the top level')]
    [System.Nullable[int]]
    ${Parent},

    [Parameter(HelpMessage='Optional value of a header entry to add the menu item to.')]
    [Obsolete('Use Parent instead')]
    [string]
    ${Header},

    [Parameter(HelpMessage='Add the new menu item to beginning of the collection.')]
    [switch]
    ${First},

    [Parameter(HelpMessage='Indicates the destination URL is outside of the site collection.')]
    [switch]
    ${External},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPOffice365GroupToSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Url of the site to be connected to an Office 365 Group.')]
    [string]
    ${Url},

    [Parameter(Mandatory=$true, HelpMessage='Specifies the alias of the group. Cannot contain spaces.')]
    [string]
    ${Alias},

    [Parameter(HelpMessage='The optional description of the group.')]
    [string]
    ${Description},

    [Parameter(Mandatory=$true, HelpMessage='The display name of the group.')]
    [string]
    ${DisplayName},

    [Parameter(HelpMessage='Specifies the classification of the group.')]
    [string]
    ${Classification},

    [Parameter(HelpMessage='Specifies if the group is public. Defaults to false.')]
    [switch]
    ${IsPublic},

    [Parameter(HelpMessage='Specifies if the current site home page is kept. Defaults to false.')]
    [switch]
    ${KeepOldHomePage},

    [Parameter(HelpMessage='If specified the site will be associated to the hubsite as identified by this id')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${HubSiteId},

    [Parameter(HelpMessage='The array UPN values of the group''s owners.')]
    [string[]]
    ${Owners},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPOrgAssetsLibrary
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The full url of the document library to be marked as one of organization''s assets sources')]
    [string]
    ${LibraryUrl},

    [Parameter(HelpMessage='The full url to an image that should be used as a thumbnail for showing this source. The image must reside in the same site as the document library you specify.')]
    [string]
    ${ThumbnailUrl},

    [Parameter(HelpMessage='Indicates what type of Office 365 CDN source the document library will be added to')]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
    ${CdnType},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPOrgNewsSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The url of the site to be marked as one of organization''s news sites')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
    ${OrgNewsSiteUrl},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPProvisioningTemplate
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, HelpMessage='The template to add to the tenant template')]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningTemplate]
    ${SiteTemplate},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The tenant template to add the template to')]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningHierarchy]
    ${TenantTemplate})

}
function Add-PnPPublishingImageRendition
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The display name of the Image Rendition.')]
    [string]
    ${Name},

    [Parameter(Mandatory=$true, HelpMessage='The width of the Image Rendition.')]
    [int]
    ${Width},

    [Parameter(Mandatory=$true, HelpMessage='The height of the Image Rendition.')]
    [int]
    ${Height},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPPublishingPage
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The name of the page to be added as an aspx file')]
    [Alias('Name')]
    [string]
    ${PageName},

    [Parameter(HelpMessage='The site relative folder path of the page to be added')]
    [Alias('Folder')]
    [string]
    ${FolderPath},

    [Parameter(Mandatory=$true, HelpMessage='The name of the page layout you want to use. Specify without the .aspx extension. So ''ArticleLeft'' or ''BlankWebPartPage''')]
    [string]
    ${PageTemplateName},

    [Parameter(ParameterSetName='WithTitle', HelpMessage='The title of the page')]
    [string]
    ${Title},

    [Parameter(HelpMessage='Publishes the page. Also Approves it if moderation is enabled on the Pages library.')]
    [switch]
    ${Publish},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPPublishingPageLayout
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Path to the file which will be uploaded')]
    [string]
    ${SourceFilePath},

    [Parameter(Mandatory=$true, HelpMessage='Title for the page layout')]
    [string]
    ${Title},

    [Parameter(Mandatory=$true, HelpMessage='Description for the page layout')]
    [string]
    ${Description},

    [Parameter(Mandatory=$true, HelpMessage='Associated content type ID')]
    [string]
    ${AssociatedContentTypeID},

    [Parameter(HelpMessage='Folder hierarchy where the html page layouts will be deployed')]
    [string]
    ${DestinationFolderHierarchy},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPRoleDefinition
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='Name of new permission level.')]
    [string]
    ${RoleName},

    [Parameter(HelpMessage='An existing permission level or the name of an permission level to clone as base template.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.RoleDefinitionPipeBind]
    ${Clone},

    [Parameter(HelpMessage='Specifies permission flags(s) to enable. Please visit https://docs.microsoft.com/previous-versions/office/sharepoint-csom/ee536458(v%3Doffice.15) for the PermissionKind enum')]
    [Microsoft.SharePoint.Client.PermissionKind[]]
    ${Include},

    [Parameter(HelpMessage='Specifies permission flags(s) to disable. Please visit https://docs.microsoft.com/previous-versions/office/sharepoint-csom/ee536458(v%3Doffice.15) for the PermissionKind enum')]
    [Microsoft.SharePoint.Client.PermissionKind[]]
    ${Exclude},

    [Parameter(HelpMessage='Optional description for the new permission level.')]
    [string]
    ${Description},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPSiteClassification
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [System.Collections.Generic.List[string]]
    ${Classifications})

}
function Add-PnPSiteCollectionAdmin
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='Specifies owner(s) to add as site collection administrators. They will be added as additional site collection administrators to the site in the current context. Existing administrators will stay. Can be both users and groups.')]
    [System.Collections.Generic.List[SharePointPnP.PowerShell.Commands.Base.PipeBinds.UserPipeBind]]
    ${Owners},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPSiteCollectionAppCatalog
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Url of the site to add the app catalog to.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
    ${Site},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPSiteDesign
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, HelpMessage='The title of the site design')]
    [string]
    ${Title},

    [Parameter(Mandatory=$true, HelpMessage='An array of guids of site scripts')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind[]]
    ${SiteScriptIds},

    [Parameter(HelpMessage='The description of the site design')]
    [string]
    ${Description},

    [Parameter(HelpMessage='Specifies if the site design is a default site design')]
    [switch]
    ${IsDefault},

    [Parameter(HelpMessage='Sets the text for the preview image')]
    [string]
    ${PreviewImageAltText},

    [Parameter(HelpMessage='Sets the url to the preview image')]
    [string]
    ${PreviewImageUrl},

    [Parameter(Mandatory=$true, HelpMessage='Specifies the type of site to which this design applies')]
    [SharePointPnP.PowerShell.Commands.Enums.SiteWebTemplate]
    ${WebTemplate},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPSiteDesignTask
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, HelpMessage='The ID of the site design to apply.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${SiteDesignId},

    [Parameter(HelpMessage='The URL of the site collection where the site design will be applied. If not specified the design will be applied to the site you connected to with Connect-PnPOnline.')]
    [string]
    ${WebUrl},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPSiteScript
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, HelpMessage='The title of the site script')]
    [string]
    ${Title},

    [Parameter(HelpMessage='The description of the site script')]
    [string]
    ${Description},

    [Parameter(Mandatory=$true, HelpMessage='A JSON string containing the site script')]
    [string]
    ${Content},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPStoredCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The credential to set')]
    [string]
    ${Name},

    [Parameter(Mandatory=$true)]
    [string]
    ${Username},

    [Parameter(HelpMessage='If not specified you will be prompted to enter your password.
If you want to specify this value use ConvertTo-SecureString -String ''YourPassword'' -AsPlainText -Force')]
    [securestring]
    ${Password})

}
function Add-PnPTaxonomyField
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='The list object or name where this field needs to be added')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Mandatory=$true, HelpMessage='The display name of the field')]
    [string]
    ${DisplayName},

    [Parameter(Mandatory=$true, HelpMessage='The internal name of the field')]
    [string]
    ${InternalName},

    [Parameter(ParameterSetName='Path', Mandatory=$true, HelpMessage='The path to the term that this needs to be bound')]
    [string]
    ${TermSetPath},

    [Parameter(ParameterSetName='Id', HelpMessage='The ID of the Taxonomy item')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${TaxonomyItemId},

    [Parameter(ParameterSetName='Path', HelpMessage='The path delimiter to be used, by default this is ''|''')]
    [string]
    ${TermPathDelimiter},

    [Parameter(HelpMessage='The group name to where this field belongs to')]
    [string]
    ${Group},

    [Parameter(HelpMessage='The ID for the field, must be unique')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${Id},

    [Parameter(HelpMessage='Switch Parameter if this field must be added to the default view')]
    [switch]
    ${AddToDefaultView},

    [Parameter(HelpMessage='Switch Parameter if this Taxonomy field can hold multiple values')]
    [switch]
    ${MultiValue},

    [Parameter(HelpMessage='Switch Parameter if the field is a required field')]
    [switch]
    ${Required},

    [Parameter(HelpMessage='Specifies the control settings while adding a field. See https://msdn.microsoft.com/en-us/library/microsoft.sharepoint.client.addfieldoptions.aspx for details')]
    [Microsoft.SharePoint.Client.AddFieldOptions]
    ${FieldOptions},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPTeamsTeam
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPTenantCdnOrigin
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Specifies a path to the doc library to be configured. It can be provided in two ways: relative path, or a mask.

Relative-Relative path depends on the OriginScope. If the originScope is Tenant, a path must be a relative path under the tenant root. If the originScope is Site, a path must be a relative path under the given Site. The path must point to the valid Document Library or a folder with a document library.')]
    [string]
    ${OriginUrl},

    [Parameter(Mandatory=$true, HelpMessage='Specifies the CDN type. The valid values are: public or private.')]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
    ${CdnType},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPTenantSequence
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, HelpMessage='The template to add the sequence to')]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningHierarchy]
    ${Template},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='Optional Id of the sequence')]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningSequence]
    ${Sequence})

}
function Add-PnPTenantSequenceSite
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ProvisioningSitePipeBind]
    ${Site},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The sequence to add the site to')]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningSequence]
    ${Sequence})

}
function Add-PnPTenantSequenceSubSite
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, HelpMessage='The subsite to add')]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.TeamNoGroupSubSite]
    ${SubSite},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The site to add the subsite to')]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.SiteCollection]
    ${Site})

}
function Add-PnPTenantTheme
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='If a theme is already present, specifying this will overwrite the existing theme')]
    [switch]
    ${Overwrite},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The name of the theme to add or update')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ThemePipeBind]
    ${Identity},

    [Parameter(Mandatory=$true, HelpMessage='The palette to add. See examples for more information.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ThemePalettePipeBind]
    ${Palette},

    [Parameter(Mandatory=$true, HelpMessage='If the theme is inverted or not')]
    [bool]
    ${IsInverted},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPUserToGroup
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='Internal', Mandatory=$true, HelpMessage='The login name of the user')]
    [string]
    ${LoginName},

    [Parameter(ParameterSetName='Internal', Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The group id, group name or group object to add the user to.')]
    [Parameter(ParameterSetName='External', Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The group id, group name or group object to add the user to.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
    ${Identity},

    [Parameter(ParameterSetName='External', Mandatory=$true, HelpMessage='The email address of the user')]
    [string]
    ${EmailAddress},

    [Parameter(ParameterSetName='External')]
    [switch]
    ${SendEmail},

    [Parameter(ParameterSetName='External')]
    [string]
    ${EmailBody},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPView
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The ID or Url of the list.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Mandatory=$true, HelpMessage='The title of the view.')]
    [string]
    ${Title},

    [Parameter(HelpMessage='A valid CAML Query.')]
    [string]
    ${Query},

    [Parameter(Mandatory=$true, HelpMessage='A list of fields to add.')]
    [string[]]
    ${Fields},

    [Parameter(HelpMessage='The type of view to add.')]
    [Microsoft.SharePoint.Client.ViewType]
    ${ViewType},

    [Parameter(HelpMessage='The row limit for the view. Defaults to 30.')]
    [uint32]
    ${RowLimit},

    [Parameter(HelpMessage='If specified, a personal view will be created.')]
    [switch]
    ${Personal},

    [Parameter(HelpMessage='If specified, the view will be set as the default view for the list.')]
    [switch]
    ${SetAsDefault},

    [Parameter(HelpMessage='If specified, the view will have paging.')]
    [switch]
    ${Paged},

    [Parameter(HelpMessage='A valid XML fragment containing one or more Aggregations')]
    [string]
    ${Aggregations},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPWebhookSubscription
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='The list object or name where the Webhook subscription will be added to')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Mandatory=$true, HelpMessage='The URL of the Webhook endpoint that will be notified of the change')]
    [string]
    ${NotificationUrl},

    [Parameter(HelpMessage='The date at which the Webhook subscription will expire. (Default: 6 months from today)')]
    [datetime]
    ${ExpirationDate},

    [Parameter(HelpMessage='A client state information that will be passed through notifications')]
    [string]
    ${ClientState},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPWebPartToWebPartPage
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Server Relative Url of the page to add the web part to.')]
    [Alias('PageUrl')]
    [string]
    ${ServerRelativePageUrl},

    [Parameter(ParameterSetName='XML', Mandatory=$true, HelpMessage='A string containing the XML for the web part.')]
    [string]
    ${Xml},

    [Parameter(ParameterSetName='FILE', Mandatory=$true, HelpMessage='A path to a web part file on a the file system.')]
    [string]
    ${Path},

    [Parameter(Mandatory=$true, HelpMessage='The Zone Id where the web part must be placed')]
    [string]
    ${ZoneId},

    [Parameter(Mandatory=$true, HelpMessage='The Zone Index where the web part must be placed')]
    [int]
    ${ZoneIndex},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPWebPartToWikiPage
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Full server relative url of the web part page, e.g. /sites/demo/sitepages/home.aspx')]
    [Alias('PageUrl')]
    [string]
    ${ServerRelativePageUrl},

    [Parameter(ParameterSetName='XML', Mandatory=$true, HelpMessage='A string containing the XML for the web part.')]
    [string]
    ${Xml},

    [Parameter(ParameterSetName='FILE', Mandatory=$true, HelpMessage='A path to a web part file on a the file system.')]
    [string]
    ${Path},

    [Parameter(Mandatory=$true, HelpMessage='Row number where the web part must be placed')]
    [int]
    ${Row},

    [Parameter(Mandatory=$true, HelpMessage='Column number where the web part must be placed')]
    [int]
    ${Column},

    [Parameter(HelpMessage='Must there be a extra space between the web part')]
    [switch]
    ${AddSpace},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPWikiPage
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The server relative page URL')]
    [Alias('PageUrl')]
    [string]
    ${ServerRelativePageUrl},

    [Parameter(ParameterSetName='WithContent', Mandatory=$true)]
    [string]
    ${Content},

    [Parameter(ParameterSetName='WithLayout', Mandatory=$true)]
    [OfficeDevPnP.Core.WikiPageLayout]
    ${Layout},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPWorkflowDefinition
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The workflow definition to add.')]
    [Microsoft.SharePoint.Client.WorkflowServices.WorkflowDefinition]
    ${Definition},

    [Parameter(HelpMessage='Overrides the default behavior, which is to publish workflow definitions.')]
    [switch]
    ${DoNotPublish},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Add-PnPWorkflowSubscription
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The name of the subscription')]
    [string]
    ${Name},

    [Parameter(Mandatory=$true, HelpMessage='The name of the workflow definition')]
    [string]
    ${DefinitionName},

    [Parameter(Mandatory=$true, HelpMessage='The list to add the workflow to')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='Switch if the workflow should be started manually, default value is ''true''')]
    [switch]
    ${StartManually},

    [Parameter(HelpMessage='Should the workflow run when an new item is created')]
    [switch]
    ${StartOnCreated},

    [Parameter(HelpMessage='Should the workflow run when an item is changed')]
    [switch]
    ${StartOnChanged},

    [Parameter(Mandatory=$true, HelpMessage='The name of the History list')]
    [string]
    ${HistoryListName},

    [Parameter(Mandatory=$true, HelpMessage='The name of the task list')]
    [string]
    ${TaskListName},

    [System.Collections.Generic.Dictionary[string,string]]
    ${AssociationValues},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Apply-PnPProvisioningTemplate
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='Path', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true, HelpMessage='Path to the xml or pnp file containing the provisioning template.')]
    [string]
    ${Path},

    [Parameter(HelpMessage='ID of the template to use from the xml file containing the provisioning template. If not specified and multiple ProvisioningTemplate elements exist, the last one will be used.')]
    [string]
    ${TemplateId},

    [Parameter(HelpMessage='Root folder where resources/files that are being referenced in the template are located. If not specified the same folder as where the provisioning template is located will be used.')]
    [string]
    ${ResourceFolder},

    [Parameter(HelpMessage='Specify this parameter if you want to overwrite and/or create properties that are known to be system entries (starting with vti_, dlc_, etc.)')]
    [switch]
    ${OverwriteSystemPropertyBagValues},

    [Parameter(HelpMessage='Ignore duplicate data row errors when the data row in the template already exists.')]
    [switch]
    ${IgnoreDuplicateDataRowErrors},

    [Parameter(HelpMessage='If set content types will be provisioned if the target web is a subweb.')]
    [switch]
    ${ProvisionContentTypesToSubWebs},

    [Parameter(HelpMessage='If set fields will be provisioned if the target web is a subweb.')]
    [switch]
    ${ProvisionFieldsToSubWebs},

    [Parameter(HelpMessage='Override the RemoveExistingNodes attribute in the Navigation elements of the template. If you specify this value the navigation nodes will always be removed before adding the nodes in the template')]
    [switch]
    ${ClearNavigation},

    [Parameter(HelpMessage='Allows you to specify parameters that can be referred to in the template by means of the {parameter:<Key>} token. See examples on how to use this parameter.')]
    [hashtable]
    ${Parameters},

    [Parameter(HelpMessage='Allows you to only process a specific part of the template. Notice that this might fail, as some of the handlers require other artifacts in place if they are not part of what your applying. Visit https://docs.microsoft.com/dotnet/api/officedevpnp.core.framework.provisioning.model.handlers for possible values.')]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.Handlers]
    ${Handlers},

    [Parameter(HelpMessage='Allows you to run all handlers, excluding the ones specified.')]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.Handlers]
    ${ExcludeHandlers},

    [Parameter(HelpMessage='Allows you to specify ExtensbilityHandlers to execute while applying a template')]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.ExtensibilityHandler[]]
    ${ExtensibilityHandlers},

    [Parameter(HelpMessage='Allows you to specify ITemplateProviderExtension to execute while applying a template.')]
    [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
    ${TemplateProviderExtensions},

    [Parameter(ParameterSetName='Instance', HelpMessage='Allows you to provide an in-memory instance of the ProvisioningTemplate type of the PnP Core Component. When using this parameter, the -Path parameter refers to the path of any supporting file for the template.')]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningTemplate]
    ${InputInstance},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Apply-PnPTenantTemplate
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='By Path', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true, HelpMessage='Path to the xml or pnp file containing the tenant template.')]
    [string]
    ${Path},

    [Parameter(ParameterSetName='By Object', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningHierarchy]
    ${Template},

    [string]
    ${SequenceId},

    [Parameter(HelpMessage='Root folder where resources/files that are being referenced in the template are located. If not specified the same folder as where the tenant template is located will be used.')]
    [string]
    ${ResourceFolder},

    [Parameter(HelpMessage='Allows you to only process a specific part of the template. Notice that this might fail, as some of the handlers require other artifacts in place if they are not part of what your applying.')]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.Handlers]
    ${Handlers},

    [Parameter(HelpMessage='Allows you to run all handlers, excluding the ones specified.')]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.Handlers]
    ${ExcludeHandlers},

    [Parameter(HelpMessage='Allows you to specify ExtensbilityHandlers to execute while applying a template')]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.ExtensibilityHandler[]]
    ${ExtensibilityHandlers},

    [Parameter(HelpMessage='Allows you to specify ITemplateProviderExtension to execute while applying a template.')]
    [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
    ${TemplateProviderExtensions},

    [Parameter(HelpMessage='Allows you to specify parameters that can be referred to in the tenant template by means of the {parameter:<Key>} token. See examples on how to use this parameter.')]
    [hashtable]
    ${Parameters},

    [Parameter(HelpMessage='Specify this parameter if you want to overwrite and/or create properties that are known to be system entries (starting with vti_, dlc_, etc.)')]
    [switch]
    ${OverwriteSystemPropertyBagValues},

    [Parameter(HelpMessage='Ignore duplicate data row errors when the data row in the template already exists.')]
    [switch]
    ${IgnoreDuplicateDataRowErrors},

    [Parameter(HelpMessage='If set content types will be provisioned if the target web is a subweb.')]
    [switch]
    ${ProvisionContentTypesToSubWebs},

    [Parameter(HelpMessage='If set fields will be provisioned if the target web is a subweb.')]
    [switch]
    ${ProvisionFieldsToSubWebs},

    [Parameter(HelpMessage='Override the RemoveExistingNodes attribute in the Navigation elements of the template. If you specify this value the navigation nodes will always be removed before adding the nodes in the template')]
    [switch]
    ${ClearNavigation},

    [Parameter(HelpMessage='Specify a JSON configuration file to configure the extraction progress.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ApplyConfigurationPipeBind]
    ${Configuration},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Approve-PnPTenantServicePrincipalPermissionRequest
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${RequestId},

    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Clear-PnPDefaultColumnValues
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The ID, Name or Url of the list.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Mandatory=$true, HelpMessage='The internal name, id or a reference to a field')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
    ${Field},

    [Parameter(HelpMessage='A library relative folder path, if not specified it will set the default column values on the root folder of the library (''/'')')]
    [string]
    ${Folder},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Clear-PnPListItemAsRecord
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The ID, Title or Url of the list.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The ID of the listitem, or actual ListItem object')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
    ${Identity},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Clear-PnPRecycleBinItem
{
    [CmdletBinding(DefaultParameterSetName='All')]
param(
    [Parameter(ParameterSetName='Identity', Mandatory=$true, ValueFromPipeline=$true, HelpMessage='Id of the recycle bin item or the recycle bin item itself to permanently delete')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.RecycleBinItemPipeBind]
    ${Identity},

    [Parameter(ParameterSetName='All', HelpMessage='Clears all items')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='All', HelpMessage='If provided, only all the items in the second stage recycle bin will be cleared')]
    [switch]
    ${SecondStageOnly},

    [Parameter(HelpMessage='If provided, no confirmation will be asked to permanently delete the recycle bin item')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Clear-PnPTenantAppCatalogUrl
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Clear-PnPTenantRecycleBinItem
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Url of the site collection to permanently delete from the tenant recycle bin')]
    [string]
    ${Url},

    [Parameter(HelpMessage='If provided, the PowerShell execution will halt until the operation has completed')]
    [switch]
    ${Wait},

    [Parameter(HelpMessage='If provided, no confirmation will be asked to permanently delete the site collection from the tenant recycle bin')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Connect-PnPOnline
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='Main', ValueFromPipeline=$true, HelpMessage='Returns the connection for use with the -Connection parameter on cmdlets.')]
    [Parameter(ParameterSetName='Token', ValueFromPipeline=$true, HelpMessage='Returns the connection for use with the -Connection parameter on cmdlets.')]
    [Parameter(ParameterSetName='WebLogin', ValueFromPipeline=$true, HelpMessage='Returns the connection for use with the -Connection parameter on cmdlets.')]
    [Parameter(ParameterSetName='Azure Active Directory', ValueFromPipeline=$true, HelpMessage='Returns the connection for use with the -Connection parameter on cmdlets.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory', ValueFromPipeline=$true, HelpMessage='Returns the connection for use with the -Connection parameter on cmdlets.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate as PEM strings', ValueFromPipeline=$true, HelpMessage='Returns the connection for use with the -Connection parameter on cmdlets.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate from certificate store by thumbprint', ValueFromPipeline=$true, HelpMessage='Returns the connection for use with the -Connection parameter on cmdlets.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using X502 certificates', ValueFromPipeline=$true, HelpMessage='Returns the connection for use with the -Connection parameter on cmdlets.')]
    [Parameter(ParameterSetName='SPO Management Shell Credentials', ValueFromPipeline=$true, HelpMessage='Returns the connection for use with the -Connection parameter on cmdlets.')]
    [Parameter(ParameterSetName='Access Token', ValueFromPipeline=$true, HelpMessage='Returns the connection for use with the -Connection parameter on cmdlets.')]
    [Parameter(ParameterSetName='PnP O365 Management Shell / DeviceLogin', ValueFromPipeline=$true, HelpMessage='Returns the connection for use with the -Connection parameter on cmdlets.')]
    [switch]
    ${ReturnConnection},

    [Parameter(ParameterSetName='Main', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The Url of the site collection to connect to.')]
    [Parameter(ParameterSetName='Token', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The Url of the site collection to connect to.')]
    [Parameter(ParameterSetName='WebLogin', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The Url of the site collection to connect to.')]
    [Parameter(ParameterSetName='Azure Active Directory', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The Url of the site collection to connect to.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The Url of the site collection to connect to.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate as PEM strings', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The Url of the site collection to connect to.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using X502 certificates', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The Url of the site collection to connect to.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate from certificate store by thumbprint', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The Url of the site collection to connect to.')]
    [Parameter(ParameterSetName='SPO Management Shell Credentials', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The Url of the site collection to connect to.')]
    [Parameter(ParameterSetName='Access Token', Position=0, ValueFromPipeline=$true, HelpMessage='The Url of the site collection to connect to.')]
    [Parameter(ParameterSetName='PnP O365 Management Shell / DeviceLogin', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The Url of the site collection to connect to.')]
    [string]
    ${Url},

    [Parameter(ParameterSetName='Main', HelpMessage='Credentials of the user to connect with. Either specify a PSCredential object or a string. In case of a string value a lookup will be done to the Generic Credentials section of the Windows Credentials in the Windows Credential Manager for the correct credentials.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.CredentialPipeBind]
    ${Credentials},

    [Parameter(ParameterSetName='Main', HelpMessage='If you want to connect with the current user credentials')]
    [switch]
    ${CurrentCredentials},

    [Parameter(ParameterSetName='Main', HelpMessage='If you want to connect to your on-premises SharePoint farm using ADFS')]
    [switch]
    ${UseAdfs},

    [Parameter(ParameterSetName='Main', HelpMessage='If you want to connect to your SharePoint farm using ADFS with Certificate Authentication')]
    [switch]
    ${UseAdfsCert},

    [Parameter(ParameterSetName='Main', HelpMessage='Authenticate using Kerberos to an on-premises ADFS instance.')]
    [switch]
    ${Kerberos},

    [Parameter(ParameterSetName='Main', HelpMessage='The name of the ADFS trusted login provider')]
    [string]
    ${LoginProviderName},

    [Parameter(ParameterSetName='Main', HelpMessage='Specifies a minimal server healthscore before any requests are executed.')]
    [Parameter(ParameterSetName='Token', HelpMessage='Specifies a minimal server healthscore before any requests are executed.')]
    [Parameter(ParameterSetName='WebLogin', HelpMessage='Specifies a minimal server healthscore before any requests are executed.')]
    [Parameter(ParameterSetName='Azure Active Directory', HelpMessage='Specifies a minimal server healthscore before any requests are executed.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory', HelpMessage='Specifies a minimal server healthscore before any requests are executed.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate as PEM strings', HelpMessage='Specifies a minimal server healthscore before any requests are executed.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate from certificate store by thumbprint', HelpMessage='Specifies a minimal server healthscore before any requests are executed.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using X502 certificates', HelpMessage='Specifies a minimal server healthscore before any requests are executed.')]
    [Parameter(ParameterSetName='SPO Management Shell Credentials', HelpMessage='Specifies a minimal server healthscore before any requests are executed.')]
    [Parameter(ParameterSetName='Access Token', HelpMessage='Specifies a minimal server healthscore before any requests are executed.')]
    [int]
    ${MinimalHealthScore},

    [Parameter(ParameterSetName='Main', HelpMessage='Defines how often a retry should be executed if the server healthscore is not sufficient. Default is 10 times.')]
    [Parameter(ParameterSetName='Token', HelpMessage='Defines how often a retry should be executed if the server healthscore is not sufficient. Default is 10 times.')]
    [Parameter(ParameterSetName='WebLogin', HelpMessage='Defines how often a retry should be executed if the server healthscore is not sufficient. Default is 10 times.')]
    [Parameter(ParameterSetName='Azure Active Directory', HelpMessage='Defines how often a retry should be executed if the server healthscore is not sufficient. Default is 10 times.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory', HelpMessage='Defines how often a retry should be executed if the server healthscore is not sufficient. Default is 10 times.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate as PEM strings', HelpMessage='Defines how often a retry should be executed if the server healthscore is not sufficient. Default is 10 times.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate from certificate store by thumbprint', HelpMessage='Defines how often a retry should be executed if the server healthscore is not sufficient. Default is 10 times.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using X502 certificates', HelpMessage='Defines how often a retry should be executed if the server healthscore is not sufficient. Default is 10 times.')]
    [Parameter(ParameterSetName='SPO Management Shell Credentials', HelpMessage='Defines how often a retry should be executed if the server healthscore is not sufficient. Default is 10 times.')]
    [Parameter(ParameterSetName='Access Token', HelpMessage='Defines how often a retry should be executed if the server healthscore is not sufficient. Default is 10 times.')]
    [int]
    ${RetryCount},

    [Parameter(ParameterSetName='Main', HelpMessage='Defines how many seconds to wait before each retry. Default is 1 second.')]
    [Parameter(ParameterSetName='Token', HelpMessage='Defines how many seconds to wait before each retry. Default is 1 second.')]
    [Parameter(ParameterSetName='WebLogin', HelpMessage='Defines how many seconds to wait before each retry. Default is 1 second.')]
    [Parameter(ParameterSetName='Azure Active Directory', HelpMessage='Defines how many seconds to wait before each retry. Default is 1 second.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory', HelpMessage='Defines how many seconds to wait before each retry. Default is 1 second.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate as PEM strings', HelpMessage='Defines how many seconds to wait before each retry. Default is 1 second.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate from certificate store by thumbprint', HelpMessage='Defines how many seconds to wait before each retry. Default is 1 second.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using X502 certificates', HelpMessage='Defines how many seconds to wait before each retry. Default is 1 second.')]
    [Parameter(ParameterSetName='SPO Management Shell Credentials', HelpMessage='Defines how many seconds to wait before each retry. Default is 1 second.')]
    [Parameter(ParameterSetName='Access Token', HelpMessage='Defines how many seconds to wait before each retry. Default is 1 second.')]
    [int]
    ${RetryWait},

    [Parameter(ParameterSetName='Main', HelpMessage='The request timeout. Default is 1800000')]
    [Parameter(ParameterSetName='Token', HelpMessage='The request timeout. Default is 1800000')]
    [Parameter(ParameterSetName='WebLogin', HelpMessage='The request timeout. Default is 1800000')]
    [Parameter(ParameterSetName='Azure Active Directory', HelpMessage='The request timeout. Default is 1800000')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory', HelpMessage='The request timeout. Default is 1800000')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate as PEM strings', HelpMessage='The request timeout. Default is 1800000')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate from certificate store by thumbprint', HelpMessage='The request timeout. Default is 1800000')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using X502 certificates', HelpMessage='The request timeout. Default is 180000')]
    [Parameter(ParameterSetName='SPO Management Shell Credentials', HelpMessage='The request timeout. Default is 1800000')]
    [Parameter(ParameterSetName='Access Token', HelpMessage='The request timeout. Default is 1800000')]
    [int]
    ${RequestTimeout},

    [Parameter(ParameterSetName='Token', HelpMessage='Authentication realm. If not specified will be resolved from the url specified.')]
    [string]
    ${Realm},

    [Parameter(ParameterSetName='Token', Mandatory=$true, HelpMessage='The Application Client ID to use.')]
    [Parameter(ParameterSetName='Microsoft Graph using Azure Active Directory', Mandatory=$true, HelpMessage='The client id of the app which gives you access to the Microsoft Graph API.')]
    [string]
    ${AppId},

    [Parameter(ParameterSetName='Token', Mandatory=$true, HelpMessage='The Application Client Secret to use.')]
    [Parameter(ParameterSetName='Microsoft Graph using Azure Active Directory', Mandatory=$true, HelpMessage='The app key of the app which gives you access to the Microsoft Graph API.')]
    [string]
    ${AppSecret},

    [Parameter(ParameterSetName='WebLogin', Mandatory=$true, HelpMessage='If you want to connect to SharePoint with browser based login. This is required when you have multi-factor authentication (MFA) enabled.')]
    [switch]
    ${UseWebLogin},

    [Parameter(ParameterSetName='Main', HelpMessage='Specify to use for instance use forms based authentication (FBA)')]
    [Microsoft.SharePoint.Client.ClientAuthenticationMode]
    ${AuthenticationMode},

    [Parameter(ParameterSetName='Main', HelpMessage='If you want to create a PSDrive connected to the URL')]
    [Parameter(ParameterSetName='Token', HelpMessage='If you want to create a PSDrive connected to the URL')]
    [Parameter(ParameterSetName='WebLogin', HelpMessage='If you want to create a PSDrive connected to the URL')]
    [Parameter(ParameterSetName='Azure Active Directory', HelpMessage='If you want to create a PSDrive connected to the URL')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory', HelpMessage='If you want to create a PSDrive connected to the URL')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate as PEM strings', HelpMessage='If you want to create a PSDrive connected to the URL')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate from certificate store by thumbprint', HelpMessage='If you want to create a PSDrive connected to the URL')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using X502 certificates', HelpMessage='If you want to create a PSDrive connected to the URL')]
    [Parameter(ParameterSetName='SPO Management Shell Credentials', HelpMessage='If you want to create a PSDrive connected to the URL')]
    [Parameter(ParameterSetName='Access Token', HelpMessage='If you want to create a PSDrive connected to the URL')]
    [switch]
    ${CreateDrive},

    [Parameter(ParameterSetName='Main', HelpMessage='Name of the PSDrive to create (default: SPO)')]
    [Parameter(ParameterSetName='Token', HelpMessage='Name of the PSDrive to create (default: SPO)')]
    [Parameter(ParameterSetName='WebLogin', HelpMessage='Name of the PSDrive to create (default: SPO)')]
    [Parameter(ParameterSetName='Azure Active Directory', HelpMessage='Name of the PSDrive to create (default: SPO)')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory', HelpMessage='Name of the PSDrive to create (default: SPO)')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate as PEM strings', HelpMessage='Name of the PSDrive to create (default: SPO)')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate from certificate store by thumbprint', HelpMessage='Name of the PSDrive to create (default: SPO)')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using X502 certificates', HelpMessage='Name of the PSDrive to create (default: SPO)')]
    [Parameter(ParameterSetName='SPO Management Shell Credentials', HelpMessage='Name of the PSDrive to create (default: SPO)')]
    [Parameter(ParameterSetName='Access Token', HelpMessage='Name of the PSDrive to create (default: SPO)')]
    [string]
    ${DriveName},

    [Parameter(ParameterSetName='SPO Management Shell Credentials', Mandatory=$true, HelpMessage='Log in using the SharePoint Online Management Shell application')]
    [switch]
    ${SPOManagementShell},

    [Parameter(ParameterSetName='PnP O365 Management Shell / DeviceLogin', Mandatory=$true, HelpMessage='Log in using the PnP O365 Management Shell application. You will be asked to consent to:

* Read and write managed metadata
* Have full control of all site collections
* Read user profiles
* Invite guest users to the organization
* Read and write all groups
* Read and write directory data
* Read and write identity providers
* Access the directory as you')]
    [switch]
    ${PnPO365ManagementShell},

    [Parameter(ParameterSetName='PnP O365 Management Shell / DeviceLogin', HelpMessage='Launch a browser automatically and copy the code to enter to the clipboard')]
    [Parameter(ParameterSetName='PnP Office 365 Management Shell to the Microsoft Graph', HelpMessage='Launch a browser automatically and copy the code to enter to the clipboard')]
    [switch]
    ${LaunchBrowser},

    [Parameter(ParameterSetName='PnP Office 365 Management Shell to the Microsoft Graph', Mandatory=$true, HelpMessage='Log in using the PnP O365 Management Shell application towards the Graph. You will be asked to consent to:

* Read and write managed metadata
* Have full control of all site collections
* Read user profiles
* Invite guest users to the organization
* Read and write all groups
* Read and write directory data
* Read and write identity providers
* Access the directory as you
')]
    [switch]
    ${Graph},

    [Parameter(ParameterSetName='Azure Active Directory', Mandatory=$true, HelpMessage='The Client ID of the Azure AD Application')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory', Mandatory=$true, HelpMessage='The Client ID of the Azure AD Application')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate as PEM strings', Mandatory=$true, HelpMessage='The Client ID of the Azure AD Application')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate from certificate store by thumbprint', Mandatory=$true, HelpMessage='The Client ID of the Azure AD Application')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using X502 certificates', Mandatory=$true, HelpMessage='The Client ID of the Azure AD Application')]
    [string]
    ${ClientId},

    [Parameter(ParameterSetName='Azure Active Directory', Mandatory=$true, HelpMessage='The Redirect URI of the Azure AD Application')]
    [string]
    ${RedirectUri},

    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate as PEM strings', Mandatory=$true, HelpMessage='The Azure AD Tenant name,e.g. mycompany.onmicrosoft.com')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate from certificate store by thumbprint', Mandatory=$true, HelpMessage='The Azure AD Tenant name,e.g. mycompany.onmicrosoft.com')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory', Mandatory=$true, HelpMessage='The Azure AD Tenant name,e.g. mycompany.onmicrosoft.com')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using X502 certificates', Mandatory=$true, HelpMessage='The Azure AD Tenant name,e.g. mycompany.onmicrosoft.com')]
    [string]
    ${Tenant},

    [Parameter(ParameterSetName='App-Only with Azure Active Directory', HelpMessage='Path to the certificate containing the private key (*.pfx)')]
    [string]
    ${CertificatePath},

    [Parameter(ParameterSetName='App-Only with Azure Active Directory', HelpMessage='Base64 Encoded X509Certificate2 certificate containing the private key to authenticate the requests to SharePoint Online such as retrieved in Azure Functions from Azure KeyVault')]
    [string]
    ${CertificateBase64Encoded},

    [Parameter(ParameterSetName='App-Only with Azure Active Directory', HelpMessage='X509Certificate2 reference containing the private key to authenticate the requests to SharePoint Online')]
    [System.Security.Cryptography.X509Certificates.X509Certificate2]
    ${Certificate},

    [Parameter(ParameterSetName='App-Only with Azure Active Directory', HelpMessage='Password to the certificate (*.pfx)')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate as PEM strings', HelpMessage='Password to the certificate (*.pfx)')]
    [securestring]
    ${CertificatePassword},

    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate as PEM strings', Mandatory=$true, HelpMessage='PEM encoded certificate')]
    [string]
    ${PEMCertificate},

    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate as PEM strings', Mandatory=$true, HelpMessage='PEM encoded private key for the certificate')]
    [string]
    ${PEMPrivateKey},

    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate from certificate store by thumbprint', Mandatory=$true, HelpMessage='Certificate thumbprint')]
    [string]
    ${Thumbprint},

    [Parameter(ParameterSetName='Azure Active Directory', HelpMessage='Clears the token cache.')]
    [Parameter(ParameterSetName='SPO Management Shell Credentials', HelpMessage='Clears the token cache.')]
    [switch]
    ${ClearTokenCache},

    [Parameter(ParameterSetName='Azure Active Directory', HelpMessage='The Azure environment to use for authentication, the defaults to ''Production'' which is the main Azure environment.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory', HelpMessage='The Azure environment to use for authentication, the defaults to ''Production'' which is the main Azure environment.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate as PEM strings', HelpMessage='The Azure environment to use for authentication, the defaults to ''Production'' which is the main Azure environment.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate from certificate store by thumbprint', HelpMessage='The Azure environment to use for authentication, the defaults to ''Production'' which is the main Azure environment.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using X502 certificates', HelpMessage='The Azure environment to use for authentication, the defaults to ''Production'' which is the main Azure environment.')]
    [Parameter(ParameterSetName='Token', HelpMessage='The Azure environment to use for authentication, the defaults to ''Production'' which is the main Azure environment.')]
    [OfficeDevPnP.Core.AzureEnvironment]
    ${AzureEnvironment},

    [Parameter(ParameterSetName='Main', HelpMessage='The array of permission scopes for the Microsoft Graph API.')]
    [Parameter(ParameterSetName='Token', HelpMessage='The array of permission scopes for the Microsoft Graph API.')]
    [Parameter(ParameterSetName='WebLogin', HelpMessage='The array of permission scopes for the Microsoft Graph API.')]
    [Parameter(ParameterSetName='Azure Active Directory', HelpMessage='The array of permission scopes for the Microsoft Graph API.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory', HelpMessage='The array of permission scopes for the Microsoft Graph API.')]
    [Parameter(ParameterSetName='SPO Management Shell Credentials', HelpMessage='The array of permission scopes for the Microsoft Graph API.')]
    [Parameter(ParameterSetName='Microsoft Graph using Scopes', Mandatory=$true, HelpMessage='The array of permission scopes for the Microsoft Graph API.')]
    [string[]]
    ${Scopes},

    [Parameter(ParameterSetName='Microsoft Graph using Azure Active Directory', Mandatory=$true, HelpMessage='The AAD where the O365 app is registered. Eg.: contoso.com, or contoso.onmicrosoft.com.')]
    [string]
    ${AADDomain},

    [Parameter(ParameterSetName='Access Token', Mandatory=$true, HelpMessage='Connect with an existing Access Token')]
    [string]
    ${AccessToken},

    [Parameter(ParameterSetName='Main', HelpMessage='The url to the Tenant Admin site. If not specified, the cmdlets will assume to connect automatically to https://<tenantname>-admin.sharepoint.com where appropriate.')]
    [Parameter(ParameterSetName='Token', HelpMessage='The url to the Tenant Admin site. If not specified, the cmdlets will assume to connect automatically to https://<tenantname>-admin.sharepoint.com where appropriate.')]
    [Parameter(ParameterSetName='WebLogin', HelpMessage='The url to the Tenant Admin site. If not specified, the cmdlets will assume to connect automatically to https://<tenantname>-admin.sharepoint.com where appropriate.')]
    [Parameter(ParameterSetName='Azure Active Directory', HelpMessage='The url to the Tenant Admin site. If not specified, the cmdlets will assume to connect automatically to https://<tenantname>-admin.sharepoint.com where appropriate.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory', HelpMessage='The url to the Tenant Admin site. If not specified, the cmdlets will assume to connect automatically to https://<tenantname>-admin.sharepoint.com where appropriate.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate as PEM strings', HelpMessage='The url to the Tenant Admin site. If not specified, the cmdlets will assume to connect automatically to https://<tenantname>-admin.sharepoint.com where appropriate.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate from certificate store by thumbprint', HelpMessage='The url to the Tenant Admin site. If not specified, the cmdlets will assume to connect automatically to https://<tenantname>-admin.sharepoint.com where appropriate.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using X502 certificates', HelpMessage='The url to the Tenant Admin site. If not specified, the cmdlets will assume to connect automatically to https://<tenantname>-admin.sharepoint.com where appropriate.')]
    [Parameter(ParameterSetName='SPO Management Shell Credentials', HelpMessage='The url to the Tenant Admin site. If not specified, the cmdlets will assume to connect automatically to https://<tenantname>-admin.sharepoint.com where appropriate.')]
    [string]
    ${TenantAdminUrl},

    [Parameter(ParameterSetName='Main', HelpMessage='Should we skip the check if this site is the Tenant admin site. Default is false')]
    [Parameter(ParameterSetName='Token', HelpMessage='Should we skip the check if this site is the Tenant admin site. Default is false')]
    [Parameter(ParameterSetName='WebLogin', HelpMessage='Should we skip the check if this site is the Tenant admin site. Default is false')]
    [Parameter(ParameterSetName='Azure Active Directory', HelpMessage='Should we skip the check if this site is the Tenant admin site. Default is false')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory', HelpMessage='Should we skip the check if this site is the Tenant admin site. Default is false')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate as PEM strings', HelpMessage='Should we skip the check if this site is the Tenant admin site. Default is false')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate from certificate store by thumbprint', HelpMessage='Should we skip the check if this site is the Tenant admin site. Default is false')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using X502 certificates', HelpMessage='Should we skip the check if this site is the Tenant admin site. Default is false')]
    [Parameter(ParameterSetName='SPO Management Shell Credentials', HelpMessage='Should we skip the check if this site is the Tenant admin site. Default is false')]
    [Parameter(ParameterSetName='Access Token', HelpMessage='Should we skip the check if this site is the Tenant admin site. Default is false')]
    [switch]
    ${SkipTenantAdminCheck},

    [Parameter(ParameterSetName='Main', HelpMessage='Ignores any SSL errors. To be used i.e. when connecting to a SharePoint farm using self signed certificates or using a certificate authority not trusted by this machine.')]
    [Parameter(ParameterSetName='Token', HelpMessage='Ignores any SSL errors. To be used i.e. when connecting to a SharePoint farm using self signed certificates or using a certificate authority not trusted by this machine.')]
    [Parameter(ParameterSetName='WebLogin', HelpMessage='Ignores any SSL errors. To be used i.e. when connecting to a SharePoint farm using self signed certificates or using a certificate authority not trusted by this machine.')]
    [Parameter(ParameterSetName='Azure Active Directory', HelpMessage='Ignores any SSL errors. To be used i.e. when connecting to a SharePoint farm using self signed certificates or using a certificate authority not trusted by this machine.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory', HelpMessage='Ignores any SSL errors. To be used i.e. when connecting to a SharePoint farm using self signed certificates or using a certificate authority not trusted by this machine.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate as PEM strings', HelpMessage='Ignores any SSL errors. To be used i.e. when connecting to a SharePoint farm using self signed certificates or using a certificate authority not trusted by this machine.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using certificate from certificate store by thumbprint', HelpMessage='Ignores any SSL errors. To be used i.e. when connecting to a SharePoint farm using self signed certificates or using a certificate authority not trusted by this machine.')]
    [Parameter(ParameterSetName='App-Only with Azure Active Directory using X502 certificates', HelpMessage='Ignores any SSL errors. To be used i.e. when connecting to a SharePoint farm using self signed certificates or using a certificate authority not trusted by this machine.')]
    [Parameter(ParameterSetName='Microsoft Graph using Azure Active Directory', HelpMessage='Ignores any SSL errors. To be used i.e. when connecting through a proxy to the Microsoft Graph API which has SSL interception enabled.')]
    [Parameter(ParameterSetName='Microsoft Graph using Scopes', HelpMessage='Ignores any SSL errors. To be used i.e. when connecting through a proxy to the Microsoft Graph API which has SSL interception enabled.')]
    [Parameter(ParameterSetName='PnP Office 365 Management Shell to the Microsoft Graph', HelpMessage='Ignores any SSL errors. To be used i.e. when connecting through a proxy to the Microsoft Graph API which has SSL interception enabled.')]
    [Parameter(ParameterSetName='SPO Management Shell Credentials', HelpMessage='Ignores any SSL errors. To be used i.e. when connecting to a SharePoint farm using self signed certificates or using a certificate authority not trusted by this machine.')]
    [switch]
    ${IgnoreSslErrors},

    [Parameter(HelpMessage='In order to help to make PnP PowerShell better, we can track anonymous telemetry. We track the version of the cmdlets you are using, which cmdlet you are executing and which version of SharePoint you are connecting to. Use Disable-PnPPowerShellTelemetry to turn this off in general or use the -NoTelemetry switch to turn it off for that session.')]
    [switch]
    ${NoTelemetry})

}
function Convert-PnPFolderToProvisioningTemplate
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, HelpMessage='Filename to write to, optionally including full path.')]
    [string]
    ${Out},

    [Parameter(Position=1, HelpMessage='Folder to process. If not specified the current folder will be used.')]
    [string]
    ${Folder},

    [Parameter(HelpMessage='Overwrites the output file if it exists.')]
    [switch]
    ${Force})

}
function Convert-PnPProvisioningTemplate
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true, HelpMessage='Path to the xml file containing the site template')]
    [string]
    ${Path},

    [Parameter(HelpMessage='Filename to write to, optionally including full path')]
    [string]
    ${Out},

    [Parameter(Position=1, HelpMessage='The schema of the output to use, defaults to the latest schema')]
    [OfficeDevPnP.Core.Framework.Provisioning.Providers.Xml.XMLPnPSchemaVersion]
    ${ToSchema},

    [Parameter(HelpMessage='The encoding type of the XML file, Unicode is default')]
    [System.Text.Encoding]
    ${Encoding},

    [Parameter(HelpMessage='Overwrites the output file if it exists')]
    [switch]
    ${Force})

}
function ConvertTo-PnPClientSidePage
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The name of the page to convert')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.PagePipeBind]
    ${Identity},

    [Parameter(Position=0, ValueFromPipeline=$true, HelpMessage='The name of the library containing the page. If SitePages then please omit this parameter')]
    [string]
    ${Library},

    [Parameter(Position=0, ValueFromPipeline=$true, HelpMessage='The folder to load the provided page from. If not provided all folders are searched')]
    [string]
    ${Folder},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true, HelpMessage='Path and name of the web part mapping file driving the transformation')]
    [string]
    ${WebPartMappingFile},

    [Parameter(HelpMessage='Overwrites page if already existing')]
    [switch]
    ${Overwrite},

    [Parameter(HelpMessage='Created client side page takes name from previous classic page. Classic page gets renamed to previous_<Page>.aspx')]
    [switch]
    ${TakeSourcePageName},

    [Parameter(HelpMessage='Replaces a home page with a default stock modern home page')]
    [switch]
    ${ReplaceHomePageWithDefault},

    [Parameter(HelpMessage='Adds the page accept banner web part. The actual web part is specified in webpartmapping.xml file')]
    [switch]
    ${AddPageAcceptBanner},

    [Parameter(HelpMessage='By default the item level permissions on a page are copied to the created client side page. Use this switch to prevent the copy')]
    [switch]
    ${SkipItemLevelPermissionCopyToClientSidePage},

    [Parameter(HelpMessage='If transforming cross site then by default urls in html and summarylinks are rewritten for the target site. Set this flag to prevent that')]
    [switch]
    ${SkipUrlRewriting},

    [Parameter(HelpMessage='Set this flag to prevent the default URL rewriting while you still want to do URL rewriting using a custom URL mapping file')]
    [switch]
    ${SkipDefaultUrlRewriting},

    [Parameter(HelpMessage='File holding custom URL mapping definitions')]
    [string]
    ${UrlMappingFile},

    [Parameter(HelpMessage='Clears the cache. Can be needed if you''ve installed a new web part to the site and want to use that in a custom webpartmapping file. Restarting your PS session has the same effect')]
    [switch]
    ${ClearCache},

    [Parameter(HelpMessage='Copies the page metadata to the created modern page')]
    [switch]
    ${CopyPageMetadata},

    [Parameter(HelpMessage='When an image lives inside a table/list then it''s also created as separate image web part underneath that table/list by default. Use this switch set to $false to change that')]
    [switch]
    ${AddTableListImageAsImageWebPart},

    [Parameter(HelpMessage='Uses the community script editor (https://github.com/SharePoint/sp-dev-fx-webparts/tree/master/samples/react-script-editor) as replacement for the classic script editor web part')]
    [switch]
    ${UseCommunityScriptEditor},

    [Parameter(HelpMessage='By default summarylinks web parts are replaced by QuickLinks, but you can transform to plain html by setting this switch')]
    [switch]
    ${SummaryLinksToHtml},

    [Parameter(HelpMessage='Url of the target web that will receive the modern page. Defaults to null which means in-place transformation')]
    [string]
    ${TargetWebUrl},

    [Parameter(HelpMessage='Allows to generate a transformation log (File | SharePoint)')]
    [SharePointPnP.PowerShell.Commands.ClientSidePages.ClientSidePageTransformatorLogType]
    ${LogType},

    [Parameter(HelpMessage='Folder in where the log file will be created (if LogType==File)')]
    [string]
    ${LogFolder},

    [Parameter(HelpMessage='By default each cmdlet invocation will result in a log file, use the -SkipLogFlush to delay the log flushing. The first call without -SkipLogFlush will then write all log entries to a single log')]
    [switch]
    ${LogSkipFlush},

    [Parameter(HelpMessage='Configure logging to include verbose log entries')]
    [switch]
    ${LogVerbose},

    [Parameter(HelpMessage='Don''t publish the created modern page')]
    [switch]
    ${DontPublish},

    [Parameter(HelpMessage='Keep the author, editor, created and modified information from the source page (when source page lives in SPO)')]
    [switch]
    ${KeepPageCreationModificationInformation},

    [Parameter(HelpMessage='Set''s the author of the source page as author in the modern page header (when source page lives in SPO)')]
    [switch]
    ${SetAuthorInPageHeader},

    [Parameter(HelpMessage='Post the created, and published, modern page as news')]
    [switch]
    ${PostAsNews},

    [Parameter(HelpMessage='Disable comments for the created modern page')]
    [switch]
    ${DisablePageComments},

    [Parameter(HelpMessage='I''m transforming a publishing page')]
    [switch]
    ${PublishingPage},

    [Parameter(HelpMessage='I''m transforming a blog page')]
    [switch]
    ${BlogPage},

    [Parameter(HelpMessage='I''m transforming a Delve blog page')]
    [switch]
    ${DelveBlogPage},

    [Parameter(HelpMessage='Transform the possible sub title as topic header on the modern page')]
    [switch]
    ${DelveKeepSubTitle},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true, HelpMessage='Path and name of the page layout mapping file driving the publishing page transformation')]
    [string]
    ${PageLayoutMapping},

    [Parameter(HelpMessage='Name for the target page (only applies to publishing page transformation)')]
    [string]
    ${PublishingTargetPageName},

    [Parameter(HelpMessage='Name for the target page (only applies when doing cross site page transformation)')]
    [string]
    ${TargetPageName},

    [Parameter(HelpMessage='Folder to create the target page in (will be used in conjunction with auto-generated folders that ensure page name uniqueness)')]
    [string]
    ${TargetPageFolder},

    [Parameter(HelpMessage='When setting a target page folder then the target page folder overrides possibly default folder path (e.g. in the source page lived in a folder) instead of being appended to it')]
    [switch]
    ${TargetPageFolderOverridesDefaultFolder},

    [Parameter(HelpMessage='Remove empty sections and columns after transformation of the page')]
    [switch]
    ${RemoveEmptySectionsAndColumns},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${TargetConnection},

    [Parameter(HelpMessage='Disables user mapping during transformation')]
    [switch]
    ${SkipUserMapping},

    [Parameter(HelpMessage='Specifies a user mapping file')]
    [string]
    ${UserMappingFile},

    [Parameter(HelpMessage='Specifies a taxonomy term mapping file')]
    [string]
    ${TermMappingFile},

    [Parameter(HelpMessage='Disables term mapping during transformation')]
    [switch]
    ${SkipTermStoreMapping},

    [Parameter(HelpMessage='Specifies a LDAP connection string e.g. LDAP://OU=Users,DC=Contoso,DC=local')]
    [string]
    ${LDAPConnectionString},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Copy-PnPFile
{
    [CmdletBinding(DefaultParameterSetName='SOURCEURL', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='SERVER', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Server relative Url specifying the file or folder to copy.')]
    [Obsolete('Use SourceUrl instead.')]
    [string]
    ${ServerRelativeUrl},

    [Parameter(ParameterSetName='SOURCEURL', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Site relative Url specifying the file or folder to copy.')]
    [Alias('SiteRelativeUrl')]
    [string]
    ${SourceUrl},

    [Parameter(Mandatory=$true, Position=1, HelpMessage='Server relative Url where to copy the file or folder to.')]
    [string]
    ${TargetUrl},

    [Parameter(HelpMessage='If provided, if a file already exists at the TargetUrl, it will be overwritten. If omitted, the copy operation will be canceled if the file already exists at the TargetUrl location.')]
    [switch]
    ${OverwriteIfAlreadyExists},

    [Parameter(HelpMessage='If provided, no confirmation will be requested and the action will be performed')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='If the source is a folder, the source folder name will not be created, only the contents within it.')]
    [switch]
    ${SkipSourceFolderName},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Copy-PnPItemProxy
{
    [CmdletBinding(DefaultParameterSetName='Path', SupportsShouldProcess=$true, ConfirmImpact='Medium', SupportsTransactions=$true)]
param(
    [switch]
    ${Recurse},

    [Parameter(ParameterSetName='Path', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string[]]
    ${Path},

    [Parameter(ParameterSetName='LiteralPath', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('PSPath')]
    [string[]]
    ${LiteralPath},

    [Parameter(Position=1, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Destination},

    [switch]
    ${Container},

    [switch]
    ${Force},

    [string]
    ${Filter},

    [string[]]
    ${Include},

    [string[]]
    ${Exclude},

    [switch]
    ${PassThru},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [pscredential]
    [System.Management.Automation.CredentialAttribute()]
    ${Credential})

}
function Deny-PnPTenantServicePrincipalPermissionRequest
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${RequestId},

    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Disable-PnPFeature
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, HelpMessage='The id of the feature to disable.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Specifies whether to continue if an error occurs when deactivating the feature.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Specify the scope of the feature to deactivate, either Web or Site. Defaults to Web.')]
    [SharePointPnP.PowerShell.Commands.Enums.FeatureScope]
    ${Scope},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Disable-PnPInPlaceRecordsManagementForSite
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Disable-PnPPowerShellTelemetry
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question.')]
    [switch]
    ${Force})

}
function Disable-PnPResponsiveUI
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Disable-PnPSiteClassification
{
    [CmdletBinding()]
param()

}
function Disable-PnPTenantServicePrincipal
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Disconnect-PnPOnline
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Connection to be used by cmdlet')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Enable-PnPCommSite
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true, HelpMessage='The id (guid) of the design package to apply: 96c933ac-3698-44c7-9f4a-5fd17d71af9e (Topic = default), 6142d2a0-63a5-4ba0-aede-d9fefca2c767 (Showcase) or f6cc5403-0d63-442e-96c0-285923709ffc (Blank)')]
    [string]
    ${DesignPackageId},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Enable-PnPFeature
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The id of the feature to enable.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Specifies whether to overwrite an existing feature with the same feature identifier. This parameter is ignored if there are no errors.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Specify the scope of the feature to activate, either Web or Site. Defaults to Web.')]
    [SharePointPnP.PowerShell.Commands.Enums.FeatureScope]
    ${Scope},

    [Parameter(HelpMessage='Specify this parameter if the feature you''re trying to activate is part of a sandboxed solution.')]
    [switch]
    ${Sandboxed},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Enable-PnPInPlaceRecordsManagementForSite
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Enable-PnPPowerShellTelemetry
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question.')]
    [switch]
    ${Force})

}
function Enable-PnPResponsiveUI
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='A full URL pointing to an infrastructure site. If specified, it will add a custom action pointing to the responsive UI JS code in that site.')]
    [string]
    ${InfrastructureSiteUrl},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Enable-PnPSiteClassification
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [System.Collections.Generic.List[string]]
    ${Classifications},

    [Parameter(Mandatory=$true)]
    [string]
    ${DefaultClassification},

    [string]
    ${UsageGuidelinesUrl})

}
function Enable-PnPTenantServicePrincipal
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Export-PnPClientSidePage
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The name of the page')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
    ${Identity},

    [Parameter(HelpMessage='If specified referenced files will be exported to the current folder.')]
    [switch]
    ${PersistBrandingFiles},

    [Parameter(HelpMessage='If specified the template will be saved to the file specified with this parameter.')]
    [string]
    ${Out},

    [Parameter(HelpMessage='Specify to override the question to overwrite a file if it already exists.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Specify a JSON configuration file to configure the extraction progress.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ExtractConfigurationPipeBind]
    ${Configuration},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Export-PnPClientSidePageMapping
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Exports the builtin web part mapping file')]
    [switch]
    ${BuiltInWebPartMapping},

    [Parameter(HelpMessage='Exports the builtin pagelayout mapping file (only needed for publishing page transformation)')]
    [switch]
    ${BuiltInPageLayoutMapping},

    [Parameter(HelpMessage='Analyzes the pagelayouts in the current publishing portal and exports them as a pagelayout mapping file')]
    [switch]
    ${CustomPageLayoutMapping},

    [Parameter(Position=0, ValueFromPipeline=$true, HelpMessage='The name of the publishing page to export a page layout mapping file for')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.PagePipeBind]
    ${PublishingPage},

    [Parameter(HelpMessage='Set this flag if you also want to analyze the OOB page layouts...typically these are covered via the default mapping, but if you''ve updated these page layouts you might want to analyze them again')]
    [switch]
    ${AnalyzeOOBPageLayouts},

    [Parameter(HelpMessage='The folder to created the mapping file(s) in')]
    [string]
    ${Folder},

    [Parameter(HelpMessage='Overwrites existing mapping files')]
    [switch]
    ${Overwrite},

    [Parameter(HelpMessage='Outputs analyser logging to the console')]
    [switch]
    ${Logging},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Export-PnPListToProvisioningTemplate
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, HelpMessage='Specify the lists to extract, either providing their ID or their Title.')]
    [System.Collections.Generic.List[string]]
    ${List},

    [Parameter(Position=0, HelpMessage='Filename to write to, optionally including full path')]
    [string]
    ${Out},

    [Parameter(Position=1, HelpMessage='The schema of the output to use, defaults to the latest schema')]
    [OfficeDevPnP.Core.Framework.Provisioning.Providers.Xml.XMLPnPSchemaVersion]
    ${Schema},

    [Parameter(HelpMessage='Overwrites the output file if it exists.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Returns the template as an in-memory object, which is an instance of the ProvisioningTemplate type of the PnP Core Component. It cannot be used together with the -Out parameter.')]
    [switch]
    ${OutputInstance},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Export-PnPTaxonomy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='TermSet', HelpMessage='If specified, will export the specified termset only')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${TermSetId},

    [Parameter(HelpMessage='If specified will include the ids of the taxonomy items in the output. Format: <label>;#<guid>')]
    [switch]
    ${IncludeID},

    [Parameter(HelpMessage='File to export the data to.')]
    [string]
    ${Path},

    [Parameter(ParameterSetName='TermSet', HelpMessage='Term store to export; if not specified the default term store is used.')]
    [string]
    ${TermStoreName},

    [Parameter(HelpMessage='Overwrites the output file if it exists.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='The path delimiter to be used, by default this is ''|''')]
    [string]
    ${Delimiter},

    [Parameter(ParameterSetName='TermSet', HelpMessage='Specify the language code for the exported terms')]
    [int]
    ${Lcid},

    [Parameter(HelpMessage='Defaults to Unicode')]
    [SharePointPnP.PowerShell.Commands.Enums.Encoding]
    ${Encoding},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Export-PnPTermGroupToXml
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(ValueFromPipeline=$true, HelpMessage='The ID or name of the termgroup')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.TermGroupPipeBind]
    ${Identity},

    [Parameter(HelpMessage='File to export the data to.')]
    [string]
    ${Out},

    [Parameter(HelpMessage='If specified, a full provisioning template structure will be returned')]
    [switch]
    ${FullTemplate},

    [Parameter(HelpMessage='Defaults to Unicode')]
    [System.Text.Encoding]
    ${Encoding},

    [Parameter(HelpMessage='Overwrites the output file if it exists.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Find-PnPFile
{
    [CmdletBinding(DefaultParameterSetName='Web')]
param(
    [Parameter(ParameterSetName='Web', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Wildcard query')]
    [Parameter(ParameterSetName='List', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Wildcard query')]
    [Parameter(ParameterSetName='Folder', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Wildcard query')]
    [string]
    ${Match},

    [Parameter(ParameterSetName='List', Mandatory=$true, HelpMessage='List title, url or an actual List object to query')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(ParameterSetName='Folder', Mandatory=$true, HelpMessage='Folder object or relative url of a folder to query')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.FolderPipeBind]
    ${Folder},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPAccessToken
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Returns the access token in a decoded manner')]
    [switch]
    ${Decoded})

}
function Get-PnPAlert
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true, HelpMessage='The ID, Title or Url of the list.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='User to retrieve the alerts for (User ID, login name or actual User object). Skip this parameter to retrieve the alerts for the current user. Note: Only site owners can retrieve alerts for other users.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.UserPipeBind]
    ${User},

    [Parameter(HelpMessage='Retrieve alerts with this title. Title comparison is case sensitive.')]
    [string]
    ${Title},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPApp
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true, HelpMessage='Specifies the Id of an app which is available in the app catalog')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Defines which app catalog to use. Defaults to Tenant')]
    [OfficeDevPnP.Core.Enums.AppCatalogScope]
    ${Scope},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPAppAuthAccessToken
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPAppInstance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.AppPipeBind]
        ${Identity},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        ${Web},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function Get-PnPApplicationCustomizer
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        ${Identity},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        ${ClientSideComponentId},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Enums.CustomActionScope]
        ${Scope},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        ${Web},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function Get-PnPAuditing
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPAuthenticationRealm
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true, HelpMessage='Specifies the URL of the site')]
    [string]
    ${Url},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPAvailableClientSideComponents
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The name of the page.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
    ${Page},

    [Parameter(HelpMessage='Specifies the component instance or Id to look for.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ClientSideComponentPipeBind]
    ${Component},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPAzureCertificate
{
    [CmdletBinding(DefaultParameterSetName='SELF')]
param(
    [Parameter(Mandatory=$true, HelpMessage='Path to the certificate (*.pfx)')]
    [string]
    ${CertificatePath},

    [Parameter(HelpMessage='Password to the certificate (*.pfx)')]
    [securestring]
    ${CertificatePassword})

}
function Get-PnPClientSideComponent
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The name of the page')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
    ${Page},

    [Parameter(ValueFromPipeline=$true, HelpMessage='The instance id of the component')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${InstanceId},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPClientSidePage
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The name of the page')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
    ${Identity},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPConnection
{
    [CmdletBinding()]
param()

}
function Get-PnPContentType
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true, HelpMessage='Name or ID of the content type to retrieve')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
    ${Identity},

    [Parameter(ValueFromPipeline=$true, HelpMessage='List to query')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='Search site hierarchy for content types')]
    [switch]
    ${InSiteHierarchy},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPContentTypePublishingHubUrl
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPContext
{
    [CmdletBinding()]
param()

}
function Get-PnPCustomAction
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        ${Identity},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Enums.CustomActionScope]
        ${Scope},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        ${Web},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function Get-PnPDefaultColumnValues
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The ID, Name or Url of the list.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPDeletedUnifiedGroup
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='The Identity of the Office 365 Group.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.UnifiedGroupPipeBind]
    ${Identity})

}
function Get-PnPDocumentSetTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.DocumentSetPipeBind]
        ${Identity},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        ${Web},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function Get-PnPEventReceiver
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        ${List},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.EventReceiverPipeBind]
        ${Identity},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        ${Web},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function Get-PnPException
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Show all exceptions')]
    [switch]
    ${All})

}
function Get-PnPFeature
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.FeaturePipeBind]
        ${Identity},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Enums.FeatureScope]
        ${Scope},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        ${Web},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function Get-PnPField
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        ${List},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
        ${Identity},

        [Parameter()]
        [System.String]
        ${Group},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        ${Web},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function Get-PnPFile
{
    [CmdletBinding(DefaultParameterSetName='Return as file object')]
param(
    [Parameter(ParameterSetName='Return as file object', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The URL (server or site relative) to the file')]
    [Parameter(ParameterSetName='Return as list item', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The URL (server or site relative) to the file')]
    [Parameter(ParameterSetName='Save to local path', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The URL (server or site relative) to the file')]
    [Parameter(ParameterSetName='Return as string', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The URL (server or site relative) to the file')]
    [Alias('ServerRelativeUrl','SiteRelativeUrl')]
    [string]
    ${Url},

    [Parameter(ParameterSetName='Save to local path', HelpMessage='Local path where the file should be saved')]
    [string]
    ${Path},

    [Parameter(ParameterSetName='Save to local path', HelpMessage='Name for the local file')]
    [string]
    ${Filename},

    [Parameter(ParameterSetName='Save to local path', Mandatory=$true)]
    [switch]
    ${AsFile},

    [Parameter(ParameterSetName='Return as list item', HelpMessage='Returns the file as a listitem showing all its properties')]
    [switch]
    ${AsListItem},

    [Parameter(ParameterSetName='Return as list item', HelpMessage='If provided in combination with -AsListItem, a System.ArgumentException will be thrown if the file specified in the -Url argument does not exist. Otherwise it will return nothing instead.')]
    [switch]
    ${ThrowExceptionIfFileNotFound},

    [Parameter(ParameterSetName='Return as string', HelpMessage='Retrieve the file contents as a string')]
    [switch]
    ${AsString},

    [Parameter(ParameterSetName='Save to local path', HelpMessage='Overwrites the file if it exists.')]
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Return as file object', HelpMessage='Retrieve the file contents as a file object.')]
    [switch]
    ${AsFileObject},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Url},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        ${List},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        ${Web},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function Get-PnPFolderItem
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='Folder via url', Position=0, ValueFromPipeline=$true, HelpMessage='The site relative URL of the folder to retrieve')]
    [string]
    ${FolderSiteRelativeUrl},

    [Parameter(ParameterSetName='Folder via pipebind', Position=0, HelpMessage='A folder instance to the folder to retrieve')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.FolderPipeBind]
    ${Identity},

    [Parameter(HelpMessage='The type of contents to retrieve, either File, Folder or All (default)')]
    [ValidateSet('Folder','File','All')]
    [string]
    ${ItemType},

    [Parameter(HelpMessage='Optional name of the item to retrieve')]
    [string]
    ${ItemName},

    [Parameter(Position=4, HelpMessage='A switch parameter to include contents of all subfolders in the specified folder')]
    [switch]
    ${Recursive},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        ${Identity},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        ${Web},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function Get-PnPGroupMembers
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='A group object, an ID or a name of a group')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
    ${Identity},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPGroupPermissions
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Get the permissions of a specific group by name')]
    [Alias('Name')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
    ${Identity},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPHealthScore
{
    [CmdletBinding()]
param(
    [Parameter(ValueFromPipeline=$true, HelpMessage='The url of the WebApplication to retrieve the health score from')]
    [string]
    ${Url})

}
function Get-PnPHideDefaultThemes
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPHomePage
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPHomeSite
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPHubSite
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true)]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.HubSitePipeBind]
    ${Identity},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPHubSiteChild
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The URL of the hubsite for which to receive the sites refering to it')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.HubSitePipeBind]
    ${Identity},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPIndexedPropertyKeys
{
    [CmdletBinding()]
param(
    [Parameter(ValueFromPipeline=$true, HelpMessage='The list object or name from where to get the indexed properties')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPInPlaceRecordsManagement
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPJavaScriptLink
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true, HelpMessage='Name of the Javascript link. Omit this parameter to retrieve all script links')]
    [Alias('Key')]
    [string]
    ${Name},

    [Parameter(HelpMessage='Scope of the action, either Web, Site or All to return both, defaults to Web')]
    [SharePointPnP.PowerShell.Commands.Enums.CustomActionScope]
    ${Scope},

    [Parameter(HelpMessage='Switch parameter if an exception should be thrown if the requested JavaScriptLink does not exist (true) or if omitted, nothing will be returned in case the JavaScriptLink does not exist')]
    [switch]
    ${ThrowExceptionIfJavaScriptLinkNotFound},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPLabel
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The ID or Url of the list.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        ${Identity},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        ${Web},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function Get-PnPListInformationRightsManagement
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPListItem
{
    [CmdletBinding(DefaultParameterSetName='All Items')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The list to query')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(ParameterSetName='By Id', HelpMessage='The ID of the item to retrieve')]
    [int]
    ${Id},

    [Parameter(ParameterSetName='By Unique Id', HelpMessage='The unique id (GUID) of the item to retrieve')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${UniqueId},

    [Parameter(ParameterSetName='By Query', HelpMessage='The CAML query to execute against the list')]
    [string]
    ${Query},

    [Parameter(ParameterSetName='All Items', HelpMessage='The fields to retrieve. If not specified all fields will be loaded in the returned list object.')]
    [Parameter(ParameterSetName='By Id', HelpMessage='The fields to retrieve. If not specified all fields will be loaded in the returned list object.')]
    [Parameter(ParameterSetName='By Unique Id', HelpMessage='The fields to retrieve. If not specified all fields will be loaded in the returned list object.')]
    [string[]]
    ${Fields},

    [Parameter(ParameterSetName='All Items', HelpMessage='The number of items to retrieve per page request.')]
    [Parameter(ParameterSetName='By Query', HelpMessage='The number of items to retrieve per page request.')]
    [int]
    ${PageSize},

    [Parameter(ParameterSetName='All Items', HelpMessage='The script block to run after every page request.')]
    [Parameter(ParameterSetName='By Query', HelpMessage='The script block to run after every page request.')]
    [scriptblock]
    ${ScriptBlock},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPListRecordDeclaration
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The list to retrieve the record declaration settings for')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPManagementApiAccessToken
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The Tenant ID to connect to the Office 365 Management API')]
    [string]
    ${TenantId},

    [Parameter(Mandatory=$true, HelpMessage='The App\Client ID of the app which gives you access to the Office 365 Management API')]
    [string]
    ${ClientId},

    [Parameter(Mandatory=$true, HelpMessage='The Client Secret of the app which gives you access to the Office 365 Management API')]
    [string]
    ${ClientSecret})

}
function Get-PnPMasterPage
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPNavigationNode
{
    [CmdletBinding(DefaultParameterSetName='All nodes by location')]
param(
    [Parameter(ParameterSetName='All nodes by location', HelpMessage='The location of the nodes to retrieve. Either TopNavigationBar, QuickLaunch')]
    [OfficeDevPnP.Core.Enums.NavigationType]
    ${Location},

    [Parameter(ParameterSetName='A single node by ID', HelpMessage='The Id of the node to retrieve')]
    [int]
    ${Id},

    [Parameter(HelpMessage='Show a tree view of all navigation nodes')]
    [switch]
    ${Tree},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPOrgAssetsLibrary
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPOrgNewsSite
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPPowerShellTelemetryEnabled
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPProperty
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, HelpMessage='Specifies the object where the properties of should be retrieved')]
    [Microsoft.SharePoint.Client.ClientObject]
    ${ClientObject},

    [Parameter(Mandatory=$true, Position=1, HelpMessage='The properties to load. If one property is specified its value will be returned to the output.')]
    [string[]]
    ${Property},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPPropertyBag
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true, HelpMessage='Key that should be looked up')]
    [string]
    ${Key},

    [Parameter(HelpMessage='Site relative url of the folder. See examples for use.')]
    [string]
    ${Folder},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPProvisioningTemplate
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Position=0, HelpMessage='Filename to write to, optionally including full path')]
    [string]
    ${Out},

    [Parameter(Position=1, HelpMessage='The schema of the output to use, defaults to the latest schema')]
    [OfficeDevPnP.Core.Framework.Provisioning.Providers.Xml.XMLPnPSchemaVersion]
    ${Schema},

    [Parameter(HelpMessage='If specified, all term groups will be included. Overrides IncludeSiteCollectionTermGroup.')]
    [switch]
    ${IncludeAllTermGroups},

    [Parameter(HelpMessage='If specified, all the site collection term groups will be included. Overridden by IncludeAllTermGroups.')]
    [switch]
    ${IncludeSiteCollectionTermGroup},

    [Parameter(HelpMessage='If specified all site groups will be included.')]
    [switch]
    ${IncludeSiteGroups},

    [Parameter(HelpMessage='If specified all the managers and contributors of term groups will be included.')]
    [switch]
    ${IncludeTermGroupsSecurity},

    [Parameter(HelpMessage='If specified the template will contain the current search configuration of the site.')]
    [switch]
    ${IncludeSearchConfiguration},

    [Parameter(HelpMessage='If specified the files used for masterpages, sitelogo, alternate CSS and the files that make up the composed look will be saved.')]
    [switch]
    ${PersistBrandingFiles},

    [Parameter(HelpMessage='If specified the files making up the composed look (background image, font file and color file) will be saved.')]
    [Obsolete('Use PersistBrandingFiles instead.')]
    [switch]
    ${PersistComposedLookFiles},

    [Parameter(HelpMessage='If specified the files used for the publishing feature will be saved.')]
    [switch]
    ${PersistPublishingFiles},

    [Parameter(HelpMessage='If specified, out of the box / native publishing files will be saved.')]
    [switch]
    ${IncludeNativePublishingFiles},

    [Parameter(HelpMessage='If specified hidden lists will be included in the template')]
    [switch]
    ${IncludeHiddenLists},

    [Parameter(HelpMessage='If specified all client side pages will be included')]
    [switch]
    ${IncludeAllClientSidePages},

    [Parameter(HelpMessage='During extraction the version of the server will be checked for certain actions. If you specify this switch, this check will be skipped.')]
    [switch]
    ${SkipVersionCheck},

    [Parameter(HelpMessage='If specified, resource values for applicable artifacts will be persisted to a resource file')]
    [switch]
    ${PersistMultiLanguageResources},

    [Parameter(HelpMessage='If specified, resource files will be saved with the specified prefix instead of using the template name specified. If no template name is specified the files will be called PnP-Resources.<language>.resx. See examples for more info.')]
    [string]
    ${ResourceFilePrefix},

    [Parameter(HelpMessage='Allows you to only process a specific type of artifact in the site. Notice that this might result in a non-working template, as some of the handlers require other artifacts in place if they are not part of what your extracting. For possible values for this parameter visit https://docs.microsoft.com/dotnet/api/officedevpnp.core.framework.provisioning.model.handlers')]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.Handlers]
    ${Handlers},

    [Parameter(HelpMessage='Allows you to run all handlers, excluding the ones specified.')]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.Handlers]
    ${ExcludeHandlers},

    [Parameter(HelpMessage='Allows you to specify ExtensibilityHandlers to execute while extracting a template.')]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.ExtensibilityHandler[]]
    ${ExtensibilityHandlers},

    [Parameter(HelpMessage='Allows you to specify ITemplateProviderExtension to execute while extracting a template.')]
    [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
    ${TemplateProviderExtensions},

    [Parameter(HelpMessage='Allows you to specify from which content type group(s) the content types should be included into the template.')]
    [string[]]
    ${ContentTypeGroups},

    [Parameter(HelpMessage='Overwrites the output file if it exists.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Exports the template without the use of a base template, causing all OOTB artifacts to be included. Using this switch is generally not required/recommended.')]
    [Obsolete('Use of this method is generally not required/recommended')]
    [switch]
    ${NoBaseTemplate},

    [Parameter(HelpMessage='The encoding type of the XML file, Unicode is default')]
    [System.Text.Encoding]
    ${Encoding},

    [Parameter(HelpMessage='It can be used to specify the DisplayName of the template file that will be extracted.')]
    [string]
    ${TemplateDisplayName},

    [Parameter(HelpMessage='It can be used to specify the ImagePreviewUrl of the template file that will be extracted.')]
    [string]
    ${TemplateImagePreviewUrl},

    [Parameter(HelpMessage='It can be used to specify custom Properties for the template file that will be extracted.')]
    [hashtable]
    ${TemplateProperties},

    [Parameter(HelpMessage='Returns the template as an in-memory object, which is an instance of the ProvisioningTemplate type of the PnP Core Component. It cannot be used together with the -Out parameter.')]
    [switch]
    ${OutputInstance},

    [Parameter(HelpMessage='Specify whether or not content types issued from a content hub should be exported. By default, these content types are included.')]
    [switch]
    ${ExcludeContentTypesFromSyndication},

    [Parameter(HelpMessage='Specify the lists to extract, either providing their ID or their Title.')]
    [System.Collections.Generic.List[string]]
    ${ListsToExtract},

    [Parameter(HelpMessage='Specify a JSON configuration file to configure the extraction progress.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ExtractConfigurationPipeBind]
    ${Configuration},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPPublishingImageRendition
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true, HelpMessage='Id or name of an existing image rendition')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ImageRenditionPipeBind]
    ${Identity},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPRecycleBinItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        ${Identity},

        [Parameter()]
        [System.Int32]
        ${RowLimit},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function Get-PnPRequestAccessEmails
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPRoleDefinition
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true, HelpMessage='The name of a role definition to retrieve.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.RoleDefinitionPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPSearchConfiguration
{
    [CmdletBinding(DefaultParameterSetName='Xml')]
param(
    [Parameter(HelpMessage='Scope to use. Either Web, Site, or Subscription. Defaults to Web')]
    [SharePointPnP.PowerShell.Commands.Enums.SearchConfigurationScope]
    ${Scope},

    [Parameter(ParameterSetName='Xml', HelpMessage='Local path where the search configuration will be saved')]
    [string]
    ${Path},

    [Parameter(ParameterSetName='OutputFormat', HelpMessage='Output format for of the configuration. Defaults to complete XML')]
    [SharePointPnP.PowerShell.Commands.Search.OutputFormat]
    ${OutputFormat},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPSearchCrawlLog
{
    [CmdletBinding(DefaultParameterSetName='Xml')]
param(
    [Parameter(HelpMessage='Filter what log entries to return (All, Success, Warning, Error). Defaults to All')]
    [SharePointPnP.PowerShell.Commands.Search.LogLevel]
    ${LogLevel},

    [Parameter(HelpMessage='Number of entries to return. Defaults to 100.')]
    [int]
    ${RowLimit},

    [Parameter(HelpMessage='Filter to limit what is being returned. Has to be a URL prefix for SharePoint content, and part of a user principal name for user profiles. Wildcard characters are not supported.')]
    [string]
    ${Filter},

    [Parameter(HelpMessage='Content to retrieve (Sites, User Profiles). Defaults to Sites.')]
    [SharePointPnP.PowerShell.Commands.Search.ContentSource]
    ${ContentSource},

    [Parameter(HelpMessage='Start date to start getting entries from. Defaults to start of time.')]
    [datetime]
    ${StartDate},

    [Parameter(HelpMessage='End date to stop getting entries from. Default to current time.')]
    [datetime]
    ${EndDate},

    [Parameter(HelpMessage='Show raw crawl log data')]
    [switch]
    ${RawFormat},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPSearchSettings
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function Get-PnPSiteClassification
{
    [CmdletBinding()]
param()

}
function Get-PnPSiteClosure
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPSiteCollectionAdmin
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPSiteCollectionTermStore
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPSiteDesign
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Position=0, ValueFromPipeline=$true, HelpMessage='If specified will retrieve the specified site design')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPSiteDesignRights
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The ID of the Site Design to receive the rights for')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPSiteDesignRun
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(HelpMessage='The ID of the site design to apply.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${SiteDesignId},

    [Parameter(HelpMessage='The URL of the site collection where the site design will be applied. If not specified the design will be applied to the site you connected to with Connect-PnPOnline.')]
    [string]
    ${WebUrl},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPSiteDesignRunStatus
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, HelpMessage='The site design run for the desired set of script action details.')]
    [Microsoft.Online.SharePoint.TenantAdministration.TenantSiteDesignRun]
    ${Run},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPSiteDesignTask
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='The ID of the site design to apply.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignTaskPipeBind]
    ${Identity},

    [Parameter(HelpMessage='The URL of the site collection where the site design will be applied. If not specified the design will be applied to the site you connected to with Connect-PnPOnline.')]
    [string]
    ${WebUrl},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPSitePolicy
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Retrieve all available site policies')]
    [switch]
    ${AllAvailable},

    [Parameter(HelpMessage='Retrieves a site policy with a specific name')]
    [string]
    ${Name},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPSiteScript
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Position=0, ValueFromPipeline=$true, HelpMessage='If specified will retrieve the specified site script')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.TenantSiteScriptPipeBind]
    ${Identity},

    [Parameter(Position=0, ValueFromPipeline=$true, HelpMessage='If specified will retrieve the site scripts for this design')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
    ${SiteDesign},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPSiteScriptFromList
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='Specifies the URL of the list to generate a Site Script from')]
    [string]
    ${Url},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPSiteScriptFromWeb
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='Specifies the URL of the site to generate a Site Script from')]
    [string]
    ${Url},

    [Parameter(HelpMessage='Allows specifying one or more site relative URLs of lists that should be included into the Site Script, i.e. "Shared Documents","List\MyList"')]
    [string[]]
    ${Lists},

    [Parameter(ParameterSetName='All components', HelpMessage='If specified will include all supported components into the Site Script')]
    [switch]
    ${IncludeAll},

    [Parameter(ParameterSetName='Specific components', HelpMessage='If specified will include the branding of the site into the Site Script')]
    [switch]
    ${IncludeBranding},

    [Parameter(ParameterSetName='Specific components', HelpMessage='If specified will include navigation links into the Site Script')]
    [switch]
    ${IncludeLinksToExportedItems},

    [Parameter(ParameterSetName='Specific components', HelpMessage='If specified will include the regional settings into the Site Script')]
    [switch]
    ${IncludeRegionalSettings},

    [Parameter(ParameterSetName='Specific components', HelpMessage='If specified will include the external sharing configuration into the Site Script')]
    [switch]
    ${IncludeSiteExternalSharingCapability},

    [Parameter(ParameterSetName='Specific components', HelpMessage='If specified will include the branding of the site into the Site Script')]
    [switch]
    ${IncludeTheme},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPSiteSearchQueryResults
{
    [CmdletBinding(DefaultParameterSetName='Limit')]
param(
    [Parameter(Position=0, ValueFromPipeline=$true, HelpMessage='Search query in Keyword Query Language (KQL) to execute to refine the returned sites. If omitted, all indexed sites will be returned.')]
    [string]
    ${Query},

    [Parameter(ParameterSetName='Limit', HelpMessage='Search result item to start returning the results from. Useful for paging. Leave at 0 to return all results.')]
    [int]
    ${StartRow},

    [Parameter(ParameterSetName='Limit', HelpMessage='Maximum amount of search results to return. Default and max is 500 search results.')]
    [ValidateRange(0, 500)]
    [int]
    ${MaxResults},

    [Parameter(ParameterSetName='All', HelpMessage='Automatically page results until the end to get more than 500 sites. Use with caution!')]
    [switch]
    ${All},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPStorageEntity
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(HelpMessage='The key of the value to retrieve.')]
    [string]
    ${Key},

    [Parameter(HelpMessage='Defines the scope of the storage entity. Defaults to Tenant.')]
    [SharePointPnP.PowerShell.Commands.Enums.StorageEntityScope]
    ${Scope},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPStoredCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The credential to retrieve.')]
    [string]
    ${Name},

    [Parameter(HelpMessage='The object type of the credential to return from the Credential Manager. Possible values are ''O365'', ''OnPrem'' or ''PSCredential''')]
    [SharePointPnP.PowerShell.Commands.Enums.CredentialType]
    ${Type})

}
function Get-PnPSubWebs
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        ${Identity},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        ${Web},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function Get-PnPTaxonomyItem
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The path, delimited by | of the taxonomy item to retrieve, alike GROUPLABEL|TERMSETLABEL|TERMLABEL')]
    [Alias('Term')]
    [string]
    ${TermPath},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPTaxonomySession
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPTenant
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPTenantAppCatalogUrl
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPTenantCdnEnabled
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The type of cdn to retrieve the origins from')]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
    ${CdnType},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPTenantCdnOrigin
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The type of cdn to retrieve the origins from')]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
    ${CdnType},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPTenantCdnPolicies
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The type of cdn to retrieve the policies from')]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
    ${CdnType},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPTenantId
{
    [CmdletBinding()]
param(
    [string]
    ${TenantUrl})

}
function Get-PnPTenantRecycleBinItem
{
    [CmdletBinding(DefaultParameterSetName='All')]
param(
    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPTenantSequence
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, HelpMessage='The template to retrieve the sequence from')]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningHierarchy]
    ${Template},

    [Parameter(ValueFromPipeline=$true, HelpMessage='Optional Id of the sequence')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ProvisioningSequencePipeBind]
    ${Identity})

}
function Get-PnPTenantSequenceSite
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, HelpMessage='The sequence to retrieve the site from')]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningSequence]
    ${Sequence},

    [Parameter(ValueFromPipeline=$true, HelpMessage='Optional Id of the site')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ProvisioningSitePipeBind]
    ${Identity})

}
function Get-PnPTenantServicePrincipal
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPTenantServicePrincipalPermissionGrants
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPTenantServicePrincipalPermissionRequests
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPTenantSite
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Position=0, ValueFromPipeline=$true, HelpMessage='The URL of the site')]
    [Alias('Identity')]
    [string]
    ${Url},

    [Parameter(HelpMessage='By default, all sites will be returned. Specify a template value alike "STS#0" here to filter on the template')]
    [string]
    ${Template},

    [Parameter(HelpMessage='By default, not all returned attributes are populated. This switch populates all attributes. It can take several seconds to run. Without this, some attributes will show default values that may not be correct.')]
    [switch]
    ${Detailed},

    [Parameter(HelpMessage='By default, the OneDrives are not returned. This switch includes all OneDrives.')]
    [switch]
    ${IncludeOneDriveSites},

    [Parameter(HelpMessage='When the switch IncludeOneDriveSites is used, this switch ignores the question shown that the command can take a long time to execute')]
    [Obsolete()]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Limit results to a specific web template name')]
    [Obsolete('Use Template')]
    [string]
    ${WebTemplate},

    [Parameter(HelpMessage='Specifies the script block of the server-side filter to apply. See https://technet.microsoft.com/en-us/library/fp161380.aspx')]
    [string]
    ${Filter},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPTenantTemplate
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Extract a template to a file')]
    [Parameter(ParameterSetName='Extract a template as an object')]
    [string]
    ${SiteUrl},

    [Parameter(ParameterSetName='Extract a template to a file', Mandatory=$true, Position=0, HelpMessage='Filename to write to, optionally including full path')]
    [string]
    ${Out},

    [Parameter(ParameterSetName='Extract a template to a file', HelpMessage='Overwrites the output file if it exists.')]
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Extract a template as an object', Mandatory=$true, HelpMessage='Returns the template as an in-memory object, which is an instance of the ProvisioningHierarchy type of the PnP Core Component. It cannot be used together with the -Out parameter.')]
    [switch]
    ${AsInstance},

    [Parameter(ParameterSetName='Extract a template to a file', HelpMessage='Specify a JSON configuration file to configure the extraction progress.')]
    [Parameter(ParameterSetName='Extract a template as an object', HelpMessage='Specify a JSON configuration file to configure the extraction progress.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ExtractConfigurationPipeBind]
    ${Configuration},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPTenantTheme
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true, HelpMessage='The name of the theme to retrieve')]
    [string]
    ${Name},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPTerm
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermSet]]
        ${Identity},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.TaxonomyItemPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermSet]]
        ${TermSet},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.TermGroupPipeBind]
        ${TermGroup},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermStore]]
        ${TermStore},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function Get-PnPTermGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.TaxonomyItemPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermGroup]]
        ${Identity},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermStore]]
        ${TermStore},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function Get-PnPTermSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermSet]]
        ${Identity},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.TermGroupPipeBind]
        ${TermGroup},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermStore]]
        ${TermStore},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function Get-PnPTheme
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Specify this switch to not use the PnP Provisioning engine based composed look information but try to detect the current composed look as is.')]
    [switch]
    ${DetectCurrentComposedLook},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPTimeZoneId
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, HelpMessage='A string to search for like ''Stockholm''')]
    [string]
    ${Match})

}
function Get-PnPUnifiedAuditLog
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Content type of logs to be retrieved, should be one of the following: AzureActiveDirectory, Exchange, SharePoint, General, DLP.')]
    [Parameter(ParameterSetName='Logs by date', HelpMessage='Content type of logs to be retreived, should be one of the following: AzureActiveDirectory, Exchange, SharePoint, General, DLP.')]
    [SharePointPnP.PowerShell.Commands.Enums.AuditContentType]
    ${ContentType},

    [Parameter(ParameterSetName='Logs by date', HelpMessage='Start time of logs to be retrieved. Start time and end time must both be specified (or both omitted) and must be less than or equal to 24 hours apart, with the start time prior to end time and start time no more than 7 days in the past.')]
    [datetime]
    ${StartTime},

    [Parameter(ParameterSetName='Logs by date', HelpMessage='End time of logs to be retrieved. Start time and end time must both be specified (or both omitted) and must be less than or equal to 24 hours apart.')]
    [datetime]
    ${EndTime})

}
function Get-PnPUnifiedGroup
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='The Identity of the Office 365 Group.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.UnifiedGroupPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Exclude fetching the site URL for Office 365 Groups. This speeds up large listings.')]
    [switch]
    ${ExcludeSiteUrl},

    [Parameter(HelpMessage='Include Classification value of Office 365 Groups.')]
    [switch]
    ${IncludeClassification})

}
function Get-PnPUnifiedGroupMembers
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The Identity of the Office 365 Group.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.UnifiedGroupPipeBind]
    ${Identity})

}
function Get-PnPUnifiedGroupOwners
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The Identity of the Office 365 Group.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.UnifiedGroupPipeBind]
    ${Identity})

}
function Get-PnPUPABulkImportStatus
{
    [CmdletBinding()]
param(
    [Parameter(ValueFromPipeline=$true, HelpMessage='The instance id of the job')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${JobId},

    [Parameter(ValueFromPipeline=$true, HelpMessage='Include error log details')]
    [switch]
    ${IncludeErrorDetails},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPUser
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true, HelpMessage='User ID or login name')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.UserPipeBind]
    ${Identity},

    [Parameter(Position=1, HelpMessage='If provided, only users that currently have any kinds of access rights assigned to the current site collection will be returned. Otherwise all users, even those who previously had rights assigned, but not anymore at the moment, will be returned as the information is pulled from the User Information List. Only works if you don''t provide an -Identity.')]
    [switch]
    ${WithRightsAssigned},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPUserProfileProperty
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, HelpMessage='The account of the user, formatted either as a login name, or as a claims identity, e.g. i:0#.f|membership|user@domain.com')]
    [string[]]
    ${Account},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPView
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        ${List},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ViewPipeBind]
        ${Identity},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        ${Web},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function Get-PnPWeb
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        ${Identity},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function Get-PnPWebhookSubscriptions
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='The list object or name to get the Webhook subscriptions from')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPWebPart
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Full server relative URL of the web part page, e.g. /sites/mysite/sitepages/home.aspx')]
    [Alias('PageUrl')]
    [string]
    ${ServerRelativePageUrl},

    [Parameter(ValueFromPipeline=$true, HelpMessage='The identity of the web part, this can be the web part guid or a web part object')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPartPipeBind]
    ${Identity},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPWebPartProperty
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Full server relative URL of the web part page, e.g. /sites/mysite/sitepages/home.aspx')]
    [Alias('PageUrl')]
    [string]
    ${ServerRelativePageUrl},

    [Parameter(Mandatory=$true, HelpMessage='The id of the web part')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Name of a single property to be returned')]
    [string]
    ${Key},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPWebPartXml
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Full server relative url of the web part page, e.g. /sites/mysite/sitepages/home.aspx')]
    [Alias('PageUrl')]
    [string]
    ${ServerRelativePageUrl},

    [Parameter(Mandatory=$true, HelpMessage='Id or title of the web part. Use Get-PnPWebPart to retrieve all web part Ids')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPartPipeBind]
    ${Identity},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPWebTemplates
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='The language ID. For instance: 1033 for English')]
    [uint32]
    ${Lcid},

    [Parameter(HelpMessage='The version of SharePoint')]
    [int]
    ${CompatibilityLevel},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPWikiPageContent
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true, HelpMessage='The server relative URL for the wiki page')]
    [Alias('PageUrl')]
    [string]
    ${ServerRelativePageUrl},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPWorkflowDefinition
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, HelpMessage='The name of the workflow')]
    [string]
    ${Name},

    [Parameter(HelpMessage='Return only the published workflows')]
    [switch]
    ${PublishedOnly},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPWorkflowInstance
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, HelpMessage='The List for which workflow instances should be retrieved')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Mandatory=$true, Position=1, HelpMessage='The List Item for which workflow instances should be retrieved')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
    ${ListItem},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Get-PnPWorkflowSubscription
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, HelpMessage='The name of the workflow')]
    [string]
    ${Name},

    [Parameter(Position=1, HelpMessage='A list to search the association for')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Grant-PnPHubSiteRights
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The Hub Site to set the permissions on to associate another site with this Hub Site')]
    [Alias('HubSite')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.HubSitePipeBind]
    ${Identity},

    [Parameter(Mandatory=$true, HelpMessage='One or more usernames that will be given or revoked the permission to associate a site with this Hub Site. It does not replace permissions given out before but adds to the already existing permissions.')]
    [string[]]
    ${Principals},

    [Parameter(HelpMessage='Provide Join to give permissions to associate a site with this Hub Site or use None to revoke the permissions for the user(s) specified with the Principals argument')]
    [Obsolete('Use Revoke-PnPHubSiteRights to revoke rights and Grant-PnPHubSiteRights without the -Rights parameter to grant rights')]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOHubSiteUserRights]
    ${Rights},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Grant-PnPSiteDesignRights
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The site design to use.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
    ${Identity},

    [Parameter(Mandatory=$true, HelpMessage='One or more principals to grant rights to.')]
    [string[]]
    ${Principals},

    [Parameter(HelpMessage='The rights to set. Defaults to ''View''')]
    [Microsoft.Online.SharePoint.TenantAdministration.TenantSiteDesignPrincipalRights]
    ${Rights},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Grant-PnPTenantServicePrincipalPermission
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The scope to grant the permission for')]
    [string]
    ${Scope},

    [Parameter(Mandatory=$true, HelpMessage='The resource to grant the permission for')]
    [string]
    ${Resource},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Import-PnPAppPackage
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Path pointing to the .app file')]
    [string]
    ${Path},

    [Parameter(HelpMessage='Will forcibly install the app by activating the addin sideloading feature, installing the addin, and deactivating the sideloading feature')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Will only upload the addin, but not install it')]
    [switch]
    ${LoadOnly},

    [Parameter(HelpMessage='Will install the addin for the specified locale')]
    [int]
    ${Locale},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Import-PnPTaxonomy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Direct', ValueFromPipeline=$true, HelpMessage='An array of strings describing termgroup, termset, term, subterms using a default delimiter of ''|''.')]
    [string[]]
    ${Terms},

    [Parameter(ParameterSetName='File', Mandatory=$true, HelpMessage='Specifies a file containing terms per line, in the format as required by the Terms parameter.')]
    [string]
    ${Path},

    [int]
    ${Lcid},

    [Parameter(HelpMessage='Term store to import to; if not specified the default term store is used.')]
    [string]
    ${TermStoreName},

    [Parameter(HelpMessage='The path delimiter to be used, by default this is ''|''')]
    [string]
    ${Delimiter},

    [Parameter(HelpMessage='If specified, terms that exist in the termset, but are not in the imported data, will be removed.')]
    [switch]
    ${SynchronizeDeletions},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Import-PnPTermGroupFromXml
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='XML', Position=0, ValueFromPipeline=$true, HelpMessage='The XML to process')]
    [string]
    ${Xml},

    [Parameter(ParameterSetName='File', HelpMessage='The XML File to import the data from')]
    [string]
    ${Path},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Import-PnPTermSet
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Group to import the term set to; an error is returned if the group does not exist.')]
    [string]
    ${GroupName},

    [Parameter(Mandatory=$true, HelpMessage='Local path to the file containing the term set to import, in the standard format (as the ''sample import file'' available in the Term Store Administration).')]
    [string]
    ${Path},

    [Parameter(HelpMessage='GUID to use for the term set; if not specified, or the empty GUID, a random GUID is generated and used.')]
    [guid]
    ${TermSetId},

    [Parameter(HelpMessage='If specified, the import will remove any terms (and children) previously in the term set but not in the import file; default is to leave them.')]
    [switch]
    ${SynchronizeDeletions},

    [Parameter(HelpMessage='Whether the term set should be marked open; if not specified, then the existing setting is not changed.')]
    [System.Nullable[bool]]
    ${IsOpen},

    [Parameter(HelpMessage='Contact for the term set; if not specified, the existing setting is retained.')]
    [string]
    ${Contact},

    [Parameter(HelpMessage='Owner for the term set; if not specified, the existing setting is retained.')]
    [string]
    ${Owner},

    [Parameter(HelpMessage='Term store to import into; if not specified the default term store is used.')]
    [string]
    ${TermStoreName},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Install-PnPApp
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Specifies the Id or an actual app metadata instance')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Defines which app catalog to use. Defaults to Tenant')]
    [OfficeDevPnP.Core.Enums.AppCatalogScope]
    ${Scope},

    [Parameter(HelpMessage='If specified the execution will pause until the app has been installed in the site.')]
    [switch]
    ${Wait},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Install-PnPSolution
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='ID of the solution, from the solution manifest')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${PackageId},

    [Parameter(Mandatory=$true, HelpMessage='Path to the sandbox solution package (.WSP) file')]
    [string]
    ${SourceFilePath},

    [Parameter(HelpMessage='Optional major version of the solution, defaults to 1')]
    [int]
    ${MajorVersion},

    [Parameter(HelpMessage='Optional minor version of the solution, defaults to 0')]
    [int]
    ${MinorVersion},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Invoke-PnPQuery
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Number of times to retry in case of throttling. Defaults to 10.')]
    [int]
    ${RetryCount},

    [Parameter(HelpMessage='Delay in seconds. Defaults to 1.')]
    [int]
    ${RetryWait},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Invoke-PnPSiteDesign
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The Site Design Id or an actual Site Design object to apply')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
    ${Identity},

    [Parameter(HelpMessage='The URL of the web to apply the site design to. If not specified it will default to the current web based upon the URL specified with Connect-PnPOnline.')]
    [string]
    ${WebUrl},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Invoke-PnPSPRestMethod
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, HelpMessage='The Http method to execute. Defaults to GET.')]
    [SharePointPnP.PowerShell.Commands.Enums.HttpRequestMethod]
    ${Method},

    [Parameter(Mandatory=$true, Position=0, HelpMessage='The url to execute.')]
    [string]
    ${Url},

    [Parameter(HelpMessage='A string or object to send')]
    [System.Object]
    ${Content},

    [Parameter(HelpMessage='The content type of the object to send. Defaults to ''application/json''')]
    [string]
    ${ContentType},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Invoke-PnPWebAction
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(HelpMessage='Name of list if you only want to handle one specific list and its list items')]
    [string]
    ${ListName},

    [Parameter(HelpMessage='Webs you want to process (for example different site collections), will use Web parameter if not specified')]
    [Microsoft.SharePoint.Client.Web[]]
    ${Webs},

    [Parameter(HelpMessage='Function to be executed on the web. There is one input parameter of type Web')]
    [System.Action[Microsoft.SharePoint.Client.Web]]
    ${WebAction},

    [Parameter(HelpMessage='Function to be executed on the web that would determine if WebAction should be invoked, There is one input parameter of type Web and the function should return a boolean value')]
    [System.Func[Microsoft.SharePoint.Client.Web,bool]]
    ${ShouldProcessWebAction},

    [Parameter(HelpMessage='Function to be executed on the web, this will trigger after lists and list items have been processed. There is one input parameter of type Web')]
    [System.Action[Microsoft.SharePoint.Client.Web]]
    ${PostWebAction},

    [Parameter(HelpMessage='Function to be executed on the web that would determine if PostWebAction should be invoked, There is one input parameter of type Web and the function should return a boolean value')]
    [System.Func[Microsoft.SharePoint.Client.Web,bool]]
    ${ShouldProcessPostWebAction},

    [Parameter(HelpMessage='The properties to load for web.')]
    [string[]]
    ${WebProperties},

    [Parameter(HelpMessage='Function to be executed on the list. There is one input parameter of type List')]
    [System.Action[Microsoft.SharePoint.Client.List]]
    ${ListAction},

    [Parameter(HelpMessage='Function to be executed on the web that would determine if ListAction should be invoked, There is one input parameter of type List and the function should return a boolean value')]
    [System.Func[Microsoft.SharePoint.Client.List,bool]]
    ${ShouldProcessListAction},

    [Parameter(HelpMessage='Function to be executed on the list, this will trigger after list items have been processed. There is one input parameter of type List')]
    [System.Action[Microsoft.SharePoint.Client.List]]
    ${PostListAction},

    [Parameter(HelpMessage='Function to be executed on the web that would determine if PostListAction should be invoked, There is one input parameter of type List and the function should return a boolean value')]
    [System.Func[Microsoft.SharePoint.Client.List,bool]]
    ${ShouldProcessPostListAction},

    [Parameter(HelpMessage='The properties to load for list.')]
    [string[]]
    ${ListProperties},

    [Parameter(HelpMessage='Function to be executed on the list item. There is one input parameter of type ListItem')]
    [System.Action[Microsoft.SharePoint.Client.ListItem]]
    ${ListItemAction},

    [Parameter(HelpMessage='Function to be executed on the web that would determine if ListItemAction should be invoked, There is one input parameter of type ListItem and the function should return a boolean value')]
    [System.Func[Microsoft.SharePoint.Client.ListItem,bool]]
    ${ShouldProcessListItemAction},

    [Parameter(HelpMessage='The properties to load for list items.')]
    [string[]]
    ${ListItemProperties},

    [Parameter(HelpMessage='Specify if sub webs will be processed')]
    [switch]
    ${SubWebs},

    [Parameter(HelpMessage='Will not output statistics after the operation')]
    [switch]
    ${DisableStatisticsOutput},

    [Parameter(HelpMessage='Will skip the counting process; by doing this you will not get an estimated time remaining')]
    [switch]
    ${SkipCounting},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Measure-PnPList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        ${Identity},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        ${Web},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function Measure-PnPResponseTime
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true)]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.DiagnosticEndpointPipeBind]
    ${Url},

    [Parameter(HelpMessage='Number of probe requests to send')]
    [uint32]
    ${Count},

    [Parameter(HelpMessage='Number of warm up requests to send before start calculating statistics')]
    [uint32]
    ${WarmUp},

    [Parameter(HelpMessage='Idle timeout between requests to avoid request throttling')]
    [uint32]
    ${Timeout},

    [Parameter(HelpMessage='Number of buckets in histogram in output statistics')]
    [uint32]
    ${Histogram},

    [Parameter(HelpMessage='Response time measurement mode. RoundTrip - measures full request round trip. SPRequestDuration - measures server processing time only, based on SPRequestDuration HTTP header. Latency - difference between RoundTrip and SPRequestDuration')]
    [SharePointPnP.PowerShell.Commands.Diagnostic.MeasureResponseTimeMode]
    ${Mode},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Measure-PnPWeb
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true)]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Iterate all sub webs recursively')]
    [switch]
    ${Recursive},

    [Parameter(HelpMessage='Include hidden lists in statistics calculation')]
    [switch]
    ${IncludeHiddenList},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Move-PnPClientSideComponent
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The name of the page')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
    ${Page},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The instance id of the control. Use Get-PnPClientSideControl retrieve the instance ids.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${InstanceId},

    [Parameter(ParameterSetName='Move to other section', Mandatory=$true, HelpMessage='The section to move the web part to')]
    [Parameter(ParameterSetName='Move to other section and column', Mandatory=$true, HelpMessage='The section to move the web part to')]
    [int]
    ${Section},

    [Parameter(ParameterSetName='Move to other column', Mandatory=$true, HelpMessage='The column to move the web part to')]
    [Parameter(ParameterSetName='Move to other section and column', Mandatory=$true, HelpMessage='The column to move the web part to')]
    [int]
    ${Column},

    [Parameter(ParameterSetName='Move to other column', HelpMessage='Change to order of the web part in the column')]
    [Parameter(ParameterSetName='Move to other section', HelpMessage='Change to order of the web part in the column')]
    [Parameter(ParameterSetName='Move to other section and column', HelpMessage='Change to order of the web part in the column')]
    [Parameter(ParameterSetName='Move within a column', Mandatory=$true, HelpMessage='Change to order of the web part in the column')]
    [int]
    ${Position},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Move-PnPFile
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Server Relative', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Server relative Url specifying the file to move. Must include the file name.')]
    [string]
    ${ServerRelativeUrl},

    [Parameter(ParameterSetName='Site Relative', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Site relative Url specifying the file to move. Must include the file name.')]
    [string]
    ${SiteRelativeUrl},

    [Parameter(Mandatory=$true, Position=1, HelpMessage='Server relative Url where to move the file to. Must include the file name.')]
    [string]
    ${TargetUrl},

    [Parameter(HelpMessage='If provided, if a file already exists at the TargetUrl, it will be overwritten. If omitted, the move operation will be canceled if the file already exists at the TargetUrl location.')]
    [switch]
    ${OverwriteIfAlreadyExists},

    [Parameter(HelpMessage='If provided, no confirmation will be requested and the action will be performed')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Move-PnPFolder
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The folder to move')]
    [string]
    ${Folder},

    [Parameter(Mandatory=$true, HelpMessage='The new parent location to which the folder should be moved to')]
    [string]
    ${TargetFolder},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Move-PnPItemProxy
{
    [CmdletBinding(DefaultParameterSetName='Path', SupportsShouldProcess=$true, ConfirmImpact='Medium', SupportsTransactions=$true)]
param(
    [Parameter(ParameterSetName='Path', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string[]]
    ${Path},

    [Parameter(ParameterSetName='LiteralPath', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('PSPath')]
    [string[]]
    ${LiteralPath},

    [Parameter(Position=1, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Destination},

    [switch]
    ${Container},

    [switch]
    ${Force},

    [string]
    ${Filter},

    [string[]]
    ${Include},

    [string[]]
    ${Exclude},

    [switch]
    ${PassThru},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [pscredential]
    [System.Management.Automation.CredentialAttribute()]
    ${Credential})

}
function Move-PnPListItemToRecycleBin
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The ID, Title or Url of the list.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Mandatory=$true, HelpMessage='The ID of the listitem, or actual ListItem object')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Move-PnPRecycleBinItem
{
    [CmdletBinding()]
param(
    [Parameter(ValueFromPipeline=$true, HelpMessage='If provided, moves the item with the specific ID to the second stage recycle bin')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.RecycleBinItemPipeBind]
    ${Identity},

    [Parameter(HelpMessage='If provided, no confirmation will be asked to move the first stage recycle bin items to the second stage')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function New-PnPAzureCertificate
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, HelpMessage='Common Name (e.g. server FQDN or YOUR name) [pnp.contoso.com]')]
    [string]
    ${CommonName},

    [Parameter(Position=1, HelpMessage='Country Name (2 letter code)')]
    [string]
    ${Country},

    [Parameter(Position=2, HelpMessage='State or Province Name (full name)')]
    [string]
    ${State},

    [Parameter(Position=3, HelpMessage='Locality Name (eg, city)')]
    [string]
    ${Locality},

    [Parameter(Position=4, HelpMessage='Organization Name (eg, company)')]
    [string]
    ${Organization},

    [Parameter(Position=5, HelpMessage='Organizational Unit Name (eg, section)')]
    [string]
    ${OrganizationUnit},

    [Parameter(Position=6, HelpMessage='Filename to write to, optionally including full path (.pfx)')]
    [Obsolete('Use OutPfx parameter')]
    [string]
    ${Out},

    [Parameter(Position=6, HelpMessage='Filename to write to, optionally including full path (.pfx)')]
    [string]
    ${OutPfx},

    [Parameter(Position=6, HelpMessage='Filename to write to, optionally including full path (.cer)')]
    [string]
    ${OutCert},

    [Parameter(Position=7, HelpMessage='Number of years until expiration (default is 10, max is 30)')]
    [int]
    ${ValidYears},

    [Parameter(Position=8, HelpMessage='Optional certificate password')]
    [securestring]
    ${CertificatePassword})

}
function New-PnPExtensibilityHandlerObject
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The full assembly name of the handler')]
    [string]
    ${Assembly},

    [Parameter(Mandatory=$true, HelpMessage='The type of the handler')]
    [string]
    ${Type},

    [Parameter(HelpMessage='Any configuration data you want to send to the handler')]
    [string]
    ${Configuration},

    [Parameter(HelpMessage='If set, the handler will be disabled')]
    [switch]
    ${Disabled})

}
function New-PnPGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The Title of the group')]
    [string]
    ${Title},

    [Parameter(HelpMessage='The description for the group')]
    [string]
    ${Description},

    [Parameter(HelpMessage='The owner for the group, which can be a user or another group')]
    [string]
    ${Owner},

    [Parameter(HelpMessage='A switch parameter that specifies whether to allow users to request membership in the group and to allow users to request to leave the group')]
    [switch]
    ${AllowRequestToJoinLeave},

    [Parameter(HelpMessage='A switch parameter that specifies whether users are automatically added or removed when they make a request')]
    [switch]
    ${AutoAcceptRequestToJoinLeave},

    [Parameter(HelpMessage='A switch parameter that specifies whether group members can modify membership in the group')]
    [switch]
    ${AllowMembersEditMembership},

    [Parameter(HelpMessage='A switch parameter that specifies whether only group members are allowed to view the list of members in the group')]
    [Obsolete('This is done by default. Use DisallowMembersViewMembership to disallow group members viewing membership')]
    [switch]
    ${OnlyAllowMembersViewMembership},

    [Parameter(HelpMessage='A switch parameter that disallows group members to view membership.')]
    [switch]
    ${DisallowMembersViewMembership},

    [Parameter(HelpMessage='The e-mail address to which membership requests are sent')]
    [string]
    ${RequestToJoinEmail},

    [Obsolete('Use Set-PnPGroup.')]
    [SharePointPnP.PowerShell.Commands.Enums.AssociatedGroupType]
    ${SetAssociatedGroup},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function New-PnPList
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The Title of the list')]
    [string]
    ${Title},

    [Parameter(Mandatory=$true, HelpMessage='The type of list to create.')]
    [Microsoft.SharePoint.Client.ListTemplateType]
    ${Template},

    [Parameter(HelpMessage='If set, will override the url of the list.')]
    [string]
    ${Url},

    [Parameter(HelpMessage='Switch parameter if list should be hidden from the SharePoint UI')]
    [switch]
    ${Hidden},

    [Parameter(HelpMessage='Switch parameter if versioning should be enabled')]
    [switch]
    ${EnableVersioning},

    [Parameter(HelpMessage='Obsolete')]
    [Obsolete('Not in use, use OnQuickLaunch parameter instead')]
    [Microsoft.SharePoint.Client.QuickLaunchOptions]
    ${QuickLaunchOptions},

    [Parameter(HelpMessage='Switch parameter if content types should be enabled on this list')]
    [switch]
    ${EnableContentTypes},

    [Parameter(HelpMessage='Switch parameter if this list should be visible on the QuickLaunch')]
    [switch]
    ${OnQuickLaunch},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function New-PnPPersonalSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, HelpMessage='The UserPrincipalName (UPN) of the users')]
    [string[]]
    ${Email},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function New-PnPProvisioningTemplate
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param()

}
function New-PnPProvisioningTemplateFromFolder
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, HelpMessage='Filename to write to, optionally including full path.')]
    [string]
    ${Out},

    [Parameter(Position=0, HelpMessage='Folder to process. If not specified the current folder will be used.')]
    [string]
    ${Folder},

    [Parameter(Position=1, HelpMessage='Target folder to provision to files to. If not specified, the current folder name will be used.')]
    [string]
    ${TargetFolder},

    [Parameter(HelpMessage='Optional wildcard pattern to match filenames against. If empty all files will be included.')]
    [string]
    ${Match},

    [Parameter(HelpMessage='An optional content type to use.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
    ${ContentType},

    [Parameter(HelpMessage='Additional properties to set for every file entry in the generated template.')]
    [hashtable]
    ${Properties},

    [Parameter(Position=1, HelpMessage='The schema of the output to use, defaults to the latest schema')]
    [OfficeDevPnP.Core.Framework.Provisioning.Providers.Xml.XMLPnPSchemaVersion]
    ${Schema},

    [Parameter(HelpMessage='If specified, the output will only contain the <pnp:Files> element. This allows the output to be included in another template.')]
    [switch]
    ${AsIncludeFile},

    [Parameter(HelpMessage='Overwrites the output file if it exists.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='The encoding type of the XML file, Unicode is default')]
    [System.Text.Encoding]
    ${Encoding},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function New-PnPSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Enums.SiteType]
        ${Type},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        ${HubSiteId},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function New-PnPTenantSequence
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(HelpMessage='Optional Id of the sequence')]
    [string]
    ${Id})

}
function New-PnPTenantSequenceCommunicationSite
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${Url},

    [Parameter(Mandatory=$true)]
    [string]
    ${Title},

    [uint32]
    ${Language},

    [string]
    ${Owner},

    [string]
    ${Description},

    [string]
    ${Classification},

    [string]
    ${SiteDesignId},

    [switch]
    ${HubSite},

    [switch]
    ${AllowFileSharingForGuestUsers},

    [string[]]
    ${TemplateIds})

}
function New-PnPTenantSequenceTeamNoGroupSite
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${Url},

    [Parameter(Mandatory=$true)]
    [string]
    ${Title},

    [Parameter(Mandatory=$true)]
    [uint32]
    ${TimeZoneId},

    [uint32]
    ${Language},

    [string]
    ${Owner},

    [string]
    ${Description},

    [switch]
    ${HubSite},

    [string[]]
    ${TemplateIds})

}
function New-PnPTenantSequenceTeamNoGroupSubSite
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${Url},

    [Parameter(Mandatory=$true)]
    [string]
    ${Title},

    [Parameter(Mandatory=$true)]
    [uint32]
    ${TimeZoneId},

    [uint32]
    ${Language},

    [string]
    ${Description},

    [string[]]
    ${TemplateIds},

    [switch]
    ${QuickLaunchDisabled},

    [switch]
    ${UseDifferentPermissionsFromParentSite})

}
function New-PnPTenantSequenceTeamSite
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${Alias},

    [Parameter(Mandatory=$true)]
    [string]
    ${Title},

    [string]
    ${Description},

    [string]
    ${DisplayName},

    [string]
    ${Classification},

    [switch]
    ${Public},

    [switch]
    ${HubSite},

    [string[]]
    ${TemplateIds})

}
function New-PnPTenantSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Specifies the title of the new site collection')]
    [string]
    ${Title},

    [Parameter(Mandatory=$true, HelpMessage='Specifies the full URL of the new site collection. It must be in a valid managed path in the company''s site. For example, for company contoso, valid managed paths are https://contoso.sharepoint.com/sites and https://contoso.sharepoint.com/teams.')]
    [string]
    ${Url},

    [Parameter(HelpMessage='Specifies the description of the new site collection. Setting a value for this parameter will override the Wait parameter as we have to set the description after the site has been created.')]
    [Obsolete('This parameter is currently ignored due to server side API issues when setting this value.')]
    [string]
    ${Description},

    [Parameter(Mandatory=$true, HelpMessage='Specifies the user name of the site collection''s primary owner. The owner must be a user instead of a security group or an email-enabled security group.')]
    [string]
    ${Owner},

    [Parameter(HelpMessage='Specifies the language of this site collection. For more information, see Locale IDs Assigned by Microsoft: https://msdn.microsoft.com/en-us/library/microsoft.sharepoint.splanguage.lcid.aspx. To get the list of supported languages use: (Get-PnPWeb -Includes RegionalSettings.InstalledLanguages).RegionalSettings.InstalledLanguages ')]
    [uint32]
    ${Lcid},

    [Parameter(HelpMessage='Specifies the site collection template type. Use the Get-PnPWebTemplates cmdlet to get the list of valid templates. If no template is specified, one can be added later. The Template and LocaleId parameters must be a valid combination as returned from the Get-PnPWebTemplates cmdlet.')]
    [string]
    ${Template},

    [Parameter(Mandatory=$true, HelpMessage='Use Get-PnPTimeZoneId to retrieve possible timezone values')]
    [int]
    ${TimeZone},

    [Parameter(HelpMessage='Specifies the quota for this site collection in Sandboxed Solutions units. This value must not exceed the company''s aggregate available Sandboxed Solutions quota. The default value is 0. For more information, see Resource Usage Limits on Sandboxed Solutions in SharePoint 2010 : http://msdn.microsoft.com/en-us/library/gg615462.aspx.')]
    [double]
    ${ResourceQuota},

    [Parameter(HelpMessage='Specifies the warning level for the resource quota. This value must not exceed the value set for the ResourceQuota parameter')]
    [double]
    ${ResourceQuotaWarningLevel},

    [Parameter(HelpMessage='Specifies the storage quota for this site collection in megabytes. This value must not exceed the company''s available quota.')]
    [long]
    ${StorageQuota},

    [Parameter(HelpMessage='Specifies the warning level for the storage quota in megabytes. This value must not exceed the values set for the StorageQuota parameter')]
    [long]
    ${StorageQuotaWarningLevel},

    [Parameter(HelpMessage='Specifies if any existing site with the same URL should be removed from the recycle bin')]
    [switch]
    ${RemoveDeletedSite},

    [switch]
    ${Wait},

    [Parameter(HelpMessage='Do not ask for confirmation.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function New-PnPTenantTemplate
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [string]
    ${Author},

    [string]
    ${Description},

    [string]
    ${DisplayName},

    [string]
    ${Generator})

}
function New-PnPTerm
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The name of the term.')]
    [string]
    ${Name},

    [Parameter(HelpMessage='The Id to use for the term; if not specified, or the empty GUID, a random GUID is generated and used.')]
    [guid]
    ${Id},

    [Parameter(HelpMessage='The locale id to use for the term. Defaults to the current locale id.')]
    [int]
    ${Lcid},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The termset to add the term to.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.TaxonomyItemPipeBind[Microsoft.SharePoint.Client.Taxonomy.TermSet]]
    ${TermSet},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The termgroup to create the term in.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.TermGroupPipeBind]
    ${TermGroup},

    [Parameter(HelpMessage='Descriptive text to help users understand the intended use of this term.')]
    [string]
    ${Description},

    [Parameter(HelpMessage='Custom Properties')]
    [hashtable]
    ${CustomProperties},

    [Parameter(HelpMessage='Custom Properties')]
    [hashtable]
    ${LocalCustomProperties},

    [Parameter(HelpMessage='Term store to check; if not specified the default term store is used.')]
    [Alias('TermStoreName')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind[Microsoft.SharePoint.Client.Taxonomy.TermStore]]
    ${TermStore},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function New-PnPTermGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='Name of the taxonomy term group to create.')]
    [Alias('GroupName')]
    [string]
    ${Name},

    [Parameter(HelpMessage='GUID to use for the term group; if not specified, or the empty GUID, a random GUID is generated and used.')]
    [Alias('GroupId')]
    [guid]
    ${Id},

    [Parameter(HelpMessage='Description to use for the term group.')]
    [string]
    ${Description},

    [Parameter(HelpMessage='Term store to add the group to; if not specified the default term store is used.')]
    [Alias('TermStoreName')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind[Microsoft.SharePoint.Client.Taxonomy.TermStore]]
    ${TermStore},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function New-PnPTermLabel
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The term to add the localized label to')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.TaxonomyItemPipeBind[Microsoft.SharePoint.Client.Taxonomy.Term]]
    ${Term},

    [Parameter(Mandatory=$true, HelpMessage='The localized name of the term')]
    [string]
    ${Name},

    [Parameter(Mandatory=$true, HelpMessage='The locale id to use for the localized term')]
    [int]
    ${Lcid},

    [Parameter(HelpMessage='Makes this new label the default label')]
    [switch]
    ${IsDefault},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function New-PnPTermSet
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The name of the termset.')]
    [string]
    ${Name},

    [Parameter(HelpMessage='The Id to use for the term set; if not specified, or the empty GUID, a random GUID is generated and used.')]
    [guid]
    ${Id},

    [Parameter(HelpMessage='The locale id to use for the term set. Defaults to the current locale id.')]
    [int]
    ${Lcid},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='Name, id or actually termgroup to create the termset in.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.TermGroupPipeBind]
    ${TermGroup},

    [Parameter(HelpMessage='An e-mail address for term suggestion and feedback. If left blank the suggestion feature will be disabled.')]
    [string]
    ${Contact},

    [Parameter(HelpMessage='Descriptive text to help users understand the intended use of this term set.')]
    [string]
    ${Description},

    [Parameter(HelpMessage='When a term set is closed, only metadata managers can add terms to this term set. When it is open, users can add terms from a tagging application. Not specifying this switch will make the term set closed.')]
    [switch]
    ${IsOpenForTermCreation},

    [Parameter(HelpMessage='By default a term set is available to be used by end users and content editors of sites consuming this term set. Specify this switch to turn this off')]
    [switch]
    ${IsNotAvailableForTagging},

    [Parameter(HelpMessage='The primary user or group of this term set.')]
    [string]
    ${Owner},

    [Parameter(HelpMessage='People and groups in the organization that should be notified before major changes are made to the term set. You can enter multiple users or groups.')]
    [string[]]
    ${StakeHolders},

    [hashtable]
    ${CustomProperties},

    [Parameter(HelpMessage='Term store to check; if not specified the default term store is used.')]
    [Alias('TermStoreName')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind[Microsoft.SharePoint.Client.Taxonomy.TermStore]]
    ${TermStore},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function New-PnPUnifiedGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The Display Name of the Office 365 Group.')]
    [string]
    ${DisplayName},

    [Parameter(Mandatory=$true, HelpMessage='The Description of the Office 365 Group.')]
    [string]
    ${Description},

    [Parameter(Mandatory=$true, HelpMessage='The Mail Nickname of the Office 365 Group. Cannot contain spaces.')]
    [string]
    ${MailNickname},

    [Parameter(HelpMessage='The array UPN values of the group''s owners.')]
    [string[]]
    ${Owners},

    [Parameter(HelpMessage='The array UPN values of the group''s members.')]
    [string[]]
    ${Members},

    [Parameter(HelpMessage='Makes the group private when selected.')]
    [switch]
    ${IsPrivate},

    [Parameter(HelpMessage='The path to the logo file of to set.')]
    [string]
    ${GroupLogoPath},

    [Parameter(HelpMessage='Creates a MS Teams team associated with created group.')]
    [switch]
    ${CreateTeam},

    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question.')]
    [switch]
    ${Force})

}
function New-PnPUPABulkImportJob
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, HelpMessage='Site or server relative URL of the folder to where you want to store the import job file.')]
    [string]
    ${Folder},

    [Parameter(Mandatory=$true, Position=1, HelpMessage='The local file path.')]
    [string]
    ${Path},

    [Parameter(Mandatory=$true, Position=2, HelpMessage='Specify user profile property mapping between the import file and UPA property names.')]
    [hashtable]
    ${UserProfilePropertyMapping},

    [Parameter(Mandatory=$true, Position=3, HelpMessage='The name of the identifying property in your file.')]
    [string]
    ${IdProperty},

    [Parameter(Position=4, HelpMessage='The type of profile identifier (Email/CloudId/PrincipalName). Defaults to Email.')]
    [Microsoft.Online.SharePoint.TenantManagement.ImportProfilePropertiesUserIdType]
    ${IdType},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function New-PnPUser
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The users login name (user@company.com)')]
    [Alias('LogonName')]
    [string]
    ${LoginName},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function New-PnPWeb
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The title of the new web')]
    [string]
    ${Title},

    [Parameter(Mandatory=$true, HelpMessage='The URL of the new web')]
    [string]
    ${Url},

    [Parameter(HelpMessage='The description of the new web')]
    [string]
    ${Description},

    [Parameter(HelpMessage='The language id of the new web. default = 1033 for English')]
    [int]
    ${Locale},

    [Parameter(Mandatory=$true, HelpMessage='The site definition template to use for the new web, e.g. STS#0. Use Get-PnPWebTemplates to fetch a list of available templates')]
    [string]
    ${Template},

    [Parameter(HelpMessage='By default the subweb will inherit its security from its parent, specify this switch to break this inheritance')]
    [switch]
    ${BreakInheritance},

    [Parameter(HelpMessage='Specifies whether the site inherits navigation.')]
    [switch]
    ${InheritNavigation},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Publish-PnPApp
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Specifies the Id of the app')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
    ${Identity},

    [switch]
    ${SkipFeatureDeployment},

    [Parameter(HelpMessage='Defines which app catalog to use. Defaults to Tenant')]
    [OfficeDevPnP.Core.Enums.AppCatalogScope]
    ${Scope},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Read-PnPProvisioningTemplate
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='By Path', Mandatory=$true, Position=0, HelpMessage='Filename to read from, optionally including full path.')]
    [string]
    ${Path},

    [Parameter(ParameterSetName='By XML', Mandatory=$true, Position=1, HelpMessage='Variable to read from, containing the valid XML of a provisioning template.')]
    [string]
    ${Xml},

    [Parameter(HelpMessage='Allows you to specify ITemplateProviderExtension to execute while loading the template.')]
    [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
    ${TemplateProviderExtensions})

}
function Read-PnPTenantTemplate
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, HelpMessage='Filename to read from, optionally including full path.')]
    [string]
    ${Path},

    [Parameter(HelpMessage='Allows you to specify ITemplateProviderExtension to execute while loading the template.')]
    [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
    ${TemplateProviderExtensions})

}
function Register-PnPHubSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The site to register as a hubsite')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
    ${Site},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPAlert
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='User to remove the alert for (User ID, login name or actual User object). Skip this parameter to use the current user. Note: Only site owners can remove alerts for other users.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.UserPipeBind]
    ${User},

    [Parameter(Mandatory=$true, HelpMessage='The alert id, or the actual alert object to remove.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.AlertPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPApp
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Specifies the Id of the Addin Instance')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Defines which app catalog to use. Defaults to Tenant')]
    [OfficeDevPnP.Core.Enums.AppCatalogScope]
    ${Scope},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPApplicationCustomizer
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(ParameterSetName='Custom Action Id', Position=0, ValueFromPipeline=$true, HelpMessage='The id or name of the CustomAction representing the client side extension registration that needs to be removed or a CustomAction instance itself')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.UserCustomActionPipeBind]
    ${Identity},

    [Parameter(ParameterSetName='Client Side Component Id', Mandatory=$true, HelpMessage='The Client Side Component Id of the SharePoint Framework client side extension application customizer found in the manifest for which existing custom action(s) should be removed')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${ClientSideComponentId},

    [Parameter(HelpMessage='Define if the CustomAction representing the client side extension registration is to be found at the web or site collection scope. Specify All to allow deletion from either web or site collection (default).')]
    [SharePointPnP.PowerShell.Commands.Enums.CustomActionScope]
    ${Scope},

    [Parameter(HelpMessage='Use the -Force flag to bypass the confirmation question')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPClientSideComponent
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The name of the page')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
    ${Page},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The instance id of the component')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${InstanceId},

    [Parameter(HelpMessage='If specified you will not receive the confirmation question')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPClientSidePage
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The name of the page')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
    ${Identity},

    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPContentType
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The name or ID of the content type to remove')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
    ${Identity},

    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPContentTypeFromDocumentSet
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The content type to remove. Either specify name, an id, or a content type object.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
    ${ContentType},

    [Parameter(Mandatory=$true, HelpMessage='The document set to remove the content type from. Either specify a name, a document set template object, an id, or a content type object')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.DocumentSetPipeBind]
    ${DocumentSet},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPContentTypeFromList
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The name of the list, its ID or an actual list object from where the content type needs to be removed from')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Mandatory=$true, HelpMessage='The name of a content type, its ID or an actual content type object that needs to be removed from the specified list.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
    ${ContentType},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPCustomAction
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Position=0, ValueFromPipeline=$true, HelpMessage='The id or name of the CustomAction that needs to be removed or a CustomAction instance itself')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.UserCustomActionPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Define if the CustomAction is to be found at the web or site collection scope. Specify All to allow deletion from either web or site collection.')]
    [SharePointPnP.PowerShell.Commands.Enums.CustomActionScope]
    ${Scope},

    [Parameter(HelpMessage='Use the -Force flag to bypass the confirmation question')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPDeletedUnifiedGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The Identity of the deleted Office 365 Group')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.UnifiedGroupPipeBind]
    ${Identity})

}
function Remove-PnPEventReceiver
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The Guid of the event receiver on the list')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.EventReceiverPipeBind]
    ${Identity},

    [Parameter(ParameterSetName='List', HelpMessage='The list object from where to remove the event receiver object')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPField
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The field object or name to remove')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
    ${Identity},

    [Parameter(Position=1, ValueFromPipeline=$true, HelpMessage='The list object or name where to remove the field from')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPFieldFromContentType
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The field to remove')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
    ${Field},

    [Parameter(Mandatory=$true, HelpMessage='The content type where the field is to be removed from')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
    ${ContentType},

    [Parameter(HelpMessage='If specified, inherited content types will not be updated')]
    [switch]
    ${DoNotUpdateChildren},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPFile
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Server Relative', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Server relative URL to the file')]
    [string]
    ${ServerRelativeUrl},

    [Parameter(ParameterSetName='Site Relative', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Site relative URL to the file')]
    [string]
    ${SiteRelativeUrl},

    [switch]
    ${Recycle},

    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPFileFromProvisioningTemplate
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, HelpMessage='Filename to read the template from, optionally including full path.')]
    [string]
    ${Path},

    [Parameter(Mandatory=$true, Position=1, HelpMessage='The relative File Path of the file to remove from the in-memory template')]
    [string]
    ${FilePath},

    [Parameter(Position=2, HelpMessage='Allows you to specify ITemplateProviderExtension to execute while saving the template.')]
    [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
    ${TemplateProviderExtensions})

}
function Remove-PnPFolder
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The folder name')]
    [string]
    ${Name},

    [Parameter(Mandatory=$true, HelpMessage='The parent folder in the site')]
    [string]
    ${Folder},

    [switch]
    ${Recycle},

    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPGroup
{
    [CmdletBinding(DefaultParameterSetName='All')]
param(
    [Parameter(Position=0, ValueFromPipeline=$true, HelpMessage='A group object, an ID or a name of a group to remove')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPHomeSite
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPHubSiteAssociation
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The site to disconnect from its hubsite')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
    ${Site},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPIndexedProperty
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, HelpMessage='Key of the property bag value to be removed from indexing')]
    [string]
    ${Key},

    [Parameter(ValueFromPipeline=$true, HelpMessage='The list object or name from where to remove the indexed properties')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPJavaScriptLink
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Position=0, ValueFromPipeline=$true, HelpMessage='Name or id of the JavaScriptLink to remove. Omit if you want to remove all JavaScript Links.')]
    [Alias('Key','Name')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.UserCustomActionPipeBind]
    ${Identity},

    [Obsolete('Use Scope parameter')]
    [switch]
    ${FromSite},

    [Parameter(HelpMessage='Use the -Force flag to bypass the confirmation question')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Define if the JavaScriptLink is to be found at the web or site collection scope. Specify All to allow deletion from either web or site collection.')]
    [SharePointPnP.PowerShell.Commands.Enums.CustomActionScope]
    ${Scope},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPList
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The ID or Title of the list.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Defines if the list should be moved to recycle bin or directly deleted.')]
    [switch]
    ${Recycle},

    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPListItem
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The ID, Title or Url of the list.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Mandatory=$true, HelpMessage='The ID of the listitem, or actual ListItem object')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
    ${Identity},

    [switch]
    ${Recycle},

    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPNavigationNode
{
    [CmdletBinding(DefaultParameterSetName='Remove a node by ID', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Remove a node by ID', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The Id or node object to delete')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.NavigationNodePipeBind]
    ${Identity},

    [Parameter(ParameterSetName='Remove node by Title', Mandatory=$true, Position=0, HelpMessage='The location from where to remove the node (QuickLaunch, TopNavigationBar')]
    [Obsolete('Use -Identity with an Id instead.')]
    [OfficeDevPnP.Core.Enums.NavigationType]
    ${Location},

    [Parameter(ParameterSetName='Remove node by Title', Mandatory=$true, HelpMessage='The title of the node that needs to be removed')]
    [Obsolete('Use -Identity with an Id instead.')]
    [string]
    ${Title},

    [Parameter(ParameterSetName='Remove node by Title', HelpMessage='The header where the node is located')]
    [Obsolete('Use -Identity with an Id instead.')]
    [string]
    ${Header},

    [Parameter(ParameterSetName='All Nodes', Mandatory=$true, HelpMessage='Specifying the All parameter will remove all the nodes from specified Location.')]
    [switch]
    ${All},

    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPOrgAssetsLibrary
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The server relative url of the document library flagged as organizational asset which you want to remove, i.e. "sites/branding/logos"')]
    [string]
    ${LibraryUrl},

    [Parameter(HelpMessage='Boolean indicating if the document library that will no longer be flagged as an organizational asset also needs to be removed as an Office 365 CDN source')]
    [bool]
    ${ShouldRemoveFromCdn},

    [Parameter(HelpMessage='Indicates what type of Office 365 CDN source the document library that will no longer be flagged as an organizational asset was of')]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
    ${CdnType},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPOrgNewsSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The site to be removed from list of organization''s news sites')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
    ${OrgNewsSiteUrl},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPPropertyBagValue
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Key of the property bag value to be removed')]
    [string]
    ${Key},

    [Parameter(HelpMessage='Site relative url of the folder. See examples for use.')]
    [string]
    ${Folder},

    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPPublishingImageRendition
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The display name or id of the Image Rendition.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ImageRenditionPipeBind]
    ${Identity},

    [Parameter(HelpMessage='If provided, no confirmation will be asked to remove the Image Rendition.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPRoleDefinition
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The identity of the role definition, either a RoleDefinition object or a the name of roledefinition')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.RoleDefinitionPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Do not ask for confirmation to delete the role definition')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPSearchConfiguration
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='Config', Mandatory=$true, HelpMessage='Search configuration string')]
    [string]
    ${Configuration},

    [Parameter(ParameterSetName='Path', Mandatory=$true, HelpMessage='Path to a search configuration')]
    [string]
    ${Path},

    [SharePointPnP.PowerShell.Commands.Enums.SearchConfigurationScope]
    ${Scope},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPSiteClassification
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [System.Collections.Generic.List[string]]
    ${Classifications},

    [Parameter(HelpMessage='Specifying the Confirm parameter will allow the confirmation question to be skipped')]
    [switch]
    ${Confirm})

}
function Remove-PnPSiteCollectionAdmin
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='Specifies owner(s) to remove as site collection administrators. Can be both users and groups.')]
    [System.Collections.Generic.List[SharePointPnP.PowerShell.Commands.Base.PipeBinds.UserPipeBind]]
    ${Owners},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPSiteCollectionAppCatalog
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Url of the site to remove the app catalog from.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
    ${Site},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPSiteDesign
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The ID of the site design to remove')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
    ${Identity},

    [Parameter(HelpMessage='If specified you will not be asked to confirm removing the specified Site Design')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPSiteDesignTask
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The ID of the site design to remove')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignTaskPipeBind]
    ${Identity},

    [Parameter(HelpMessage='If specified you will not be asked to confirm removing the specified Site Design')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPSiteScript
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The ID of the Site Script to remove')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.TenantSiteScriptPipeBind]
    ${Identity},

    [Parameter(HelpMessage='If specified you will not be asked to confirm removing the specified Site Script')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPStorageEntity
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, HelpMessage='The key of the value to remove.')]
    [string]
    ${Key},

    [Parameter(HelpMessage='Defines the scope of the storage entity. Defaults to Tenant.')]
    [SharePointPnP.PowerShell.Commands.Enums.StorageEntityScope]
    ${Scope},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPStoredCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The credential to remove')]
    [string]
    ${Name},

    [Parameter(HelpMessage='If specified you will not be asked for confirmation')]
    [switch]
    ${Force})

}
function Remove-PnPTaxonomyItem
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The path, delimited by | of the taxonomy item to remove, alike GROUPLABEL|TERMSETLABEL|TERMLABEL')]
    [Alias('Term')]
    [string]
    ${TermPath},

    [switch]
    ${Force},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPTenantCdnOrigin
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The origin to remove.')]
    [string]
    ${OriginUrl},

    [Parameter(Mandatory=$true, HelpMessage='The cdn type to remove the origin from.')]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
    ${CdnType},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPTenantSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Specifies the full URL of the site collection that needs to be deleted')]
    [string]
    ${Url},

    [Parameter(HelpMessage='Do not add to the tenant scoped recycle bin when selected.')]
    [Alias('SkipTrash')]
    [switch]
    ${SkipRecycleBin},

    [Parameter(HelpMessage='OBSOLETE: If true, will wait for the site to be deleted before processing continues')]
    [Obsolete('The cmdlet will always wait for the site to be deleted first')]
    [switch]
    ${Wait},

    [Parameter(HelpMessage='If specified, will search for the site in the Recycle Bin and remove it from there.')]
    [Obsolete('Use Clear-PnPTenantRecycleBinItem instead.')]
    [switch]
    ${FromRecycleBin},

    [Parameter(HelpMessage='Do not ask for confirmation.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPTenantTheme
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The name of the theme to retrieve')]
    [Alias('Name')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ThemePipeBind]
    ${Identity},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPTermGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Name of the taxonomy term group to delete.')]
    [string]
    ${GroupName},

    [Parameter(HelpMessage='Term store to use; if not specified the default term store is used.')]
    [string]
    ${TermStoreName},

    [switch]
    ${Force},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPUnifiedGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The Identity of the Office 365 Group')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.UnifiedGroupPipeBind]
    ${Identity})

}
function Remove-PnPUser
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='User ID or login name')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.UserPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Specifying the Confirm parameter will allow the confirmation question to be skipped')]
    [switch]
    ${Confirm},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPUserFromGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='A valid login name of a user (user@company.com)')]
    [Alias('LogonName')]
    [string]
    ${LoginName},

    [Parameter(Mandatory=$true, HelpMessage='A group object, an ID or a name of a group')]
    [Alias('GroupName')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
    ${Identity},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPView
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The ID or Title of the view.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ViewPipeBind]
    ${Identity},

    [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true, HelpMessage='The ID or Url of the list.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPWeb
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='ByUrl', Mandatory=$true, HelpMessage='The site relative url of the web, e.g. ''Subweb1''')]
    [string]
    ${Url},

    [Parameter(ParameterSetName='ByIdentity', Mandatory=$true, ValueFromPipeline=$true, HelpMessage='Identity/Id/Web object to delete')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Do not ask for confirmation to delete the subweb')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPWebhookSubscription
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The identity of the Webhook subscription to remove')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebhookSubscriptionPipeBind]
    ${Identity},

    [Parameter(HelpMessage='The list object or name which the Webhook subscription will be removed from')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPWebPart
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='ID', Mandatory=$true, HelpMessage='The Guid of the web part')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${Identity},

    [Parameter(ParameterSetName='NAME', Mandatory=$true, HelpMessage='The name of the web part')]
    [Alias('Name')]
    [string]
    ${Title},

    [Parameter(Mandatory=$true, HelpMessage='Server relative url of the web part page, e.g. /sites/demo/sitepages/home.aspx')]
    [Alias('PageUrl')]
    [string]
    ${ServerRelativePageUrl},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPWikiPage
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='SERVER', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Alias('PageUrl')]
    [string]
    ${ServerRelativePageUrl},

    [Parameter(ParameterSetName='SITE', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [string]
    ${SiteRelativePageUrl},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPWorkflowDefinition
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, HelpMessage='The definition to remove')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WorkflowDefinitionPipeBind]
    ${Identity},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Remove-PnPWorkflowSubscription
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, HelpMessage='The subscription to remove')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WorkflowSubscriptionPipeBind]
    ${Identity},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Rename-PnPFile
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='SERVER', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Server relative Url specifying the file to rename. Must include the file name.')]
    [string]
    ${ServerRelativeUrl},

    [Parameter(ParameterSetName='SITE', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Site relative Url specifying the file to rename. Must include the file name.')]
    [string]
    ${SiteRelativeUrl},

    [Parameter(Mandatory=$true, Position=1, HelpMessage='File name to rename the file to. Should only be the file name and not include the path to its location. Use Move-PnPFile to move the file to another location.')]
    [string]
    ${TargetFileName},

    [Parameter(HelpMessage='If provided, if a file already exist with the provided TargetFileName, it will be overwritten. If omitted, the rename operation will be canceled if a file already exists with the TargetFileName file name.')]
    [switch]
    ${OverwriteIfAlreadyExists},

    [Parameter(HelpMessage='If provided, no confirmation will be requested and the action will be performed')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Rename-PnPFolder
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The folder to rename')]
    [string]
    ${Folder},

    [Parameter(Mandatory=$true, HelpMessage='The new folder name')]
    [string]
    ${TargetFolderName},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Request-PnPAccessToken
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='The Azure Application Client Id to use to retrieve the token. Defaults to the PnP Office 365 Management Shell')]
    [string]
    ${ClientId},

    [Parameter(HelpMessage='The scopes to retrieve the token for. Defaults to AllSites.FullControl')]
    [string]
    ${Resource},

    [Parameter(HelpMessage='The scopes to retrieve the token for. Defaults to AllSites.FullControl')]
    [System.Collections.Generic.List[string]]
    ${Scopes},

    [Parameter(HelpMessage='Returns the token in a decoded / human readible manner')]
    [switch]
    ${Decoded},

    [Parameter(HelpMessage='Set this token as the current token to use when performing Azure AD based authentication requests with PnP PowerShell')]
    [switch]
    ${SetAsCurrent},

    [Parameter(HelpMessage='Optional credentials to use when retrieving the access token. If not present you need to connect first with Connect-PnPOnline.')]
    [pscredential]
    ${Credentials},

    [Parameter(HelpMessage='Optional tenant URL to use when retrieving the access token. The Url should be in the shape of https://yourtenant.sharepoint.com. See examples for more info.')]
    [string]
    ${TenantUrl})

}
function Request-PnPReIndexList
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The ID, Title or Url of the list.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${Identity},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Request-PnPReIndexWeb
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Reset-PnPFileVersion
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The server relative URL of the file.')]
    [string]
    ${ServerRelativeUrl},

    [Parameter(HelpMessage='The check in type to use. Defaults to Major.')]
    [Microsoft.SharePoint.Client.CheckinType]
    ${CheckinType},

    [Parameter(HelpMessage='The comment added to the checkin. Defaults to ''Restored to previous version''.')]
    [string]
    ${CheckInComment},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Reset-PnPLabel
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The ID or Url of the list')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='Reset label on existing items in the library')]
    [bool]
    ${SyncToItems},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Resolve-PnPFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${SiteRelativePath},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        ${Web},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function Restore-PnPDeletedUnifiedGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The Identity of the deleted Office 365 Group')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.UnifiedGroupPipeBind]
    ${Identity})

}
function Restore-PnPRecycleBinItem
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='Identity', Mandatory=$true, ValueFromPipeline=$true, HelpMessage='Id of the recycle bin item or the recycle bin item object itself to restore')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.RecycleBinItemPipeBind]
    ${Identity},

    [Parameter(ParameterSetName='All', Mandatory=$true, ValueFromPipeline=$true, HelpMessage='If provided all items will be stored ')]
    [switch]
    ${All},

    [Parameter(HelpMessage='If provided, no confirmation will be asked to restore the recycle bin item')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Restore-PnPTenantRecycleBinItem
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Url of the site collection to restore from the tenant recycle bin')]
    [string]
    ${Url},

    [Parameter(HelpMessage='If provided, the PowerShell execution will halt until the site restore process has completed')]
    [switch]
    ${Wait},

    [Parameter(HelpMessage='If provided, no confirmation will be asked to restore the site collection from the tenant recycle bin')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Resume-PnPWorkflowInstance
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, HelpMessage='The instance to resume')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WorkflowInstancePipeBind]
    ${Identity},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Revoke-PnPHubSiteRights
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The Hub Site to revoke the permissions on to associate another site with this Hub Site')]
    [Alias('HubSite')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.HubSitePipeBind]
    ${Identity},

    [Parameter(Mandatory=$true, HelpMessage='One or more usernames that will be revoked the permission to associate a site with this Hub Site.')]
    [string[]]
    ${Principals},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Revoke-PnPSiteDesignRights
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The site design to use.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
    ${Identity},

    [Parameter(Mandatory=$true, HelpMessage='One or more principals to revoke.')]
    [string[]]
    ${Principals},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Revoke-PnPTenantServicePrincipalPermission
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${ObjectId},

    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Save-PnPClientSidePageConversionLog
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Save-PnPProvisioningTemplate
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Allows you to provide an in-memory instance of the ProvisioningTemplate type of the PnP Core Component. When using this parameter, the -Out parameter refers to the path for saving the template and storing any supporting file for the template.')]
    [Alias('InputInstance')]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningTemplate]
    ${Template},

    [Parameter(Mandatory=$true, Position=0, HelpMessage='Filename to write to, optionally including full path.')]
    [string]
    ${Out},

    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='Allows you to specify the ITemplateProviderExtension to execute while saving a template.')]
    [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
    ${TemplateProviderExtensions})

}
function Save-PnPTenantTemplate
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Allows you to provide an in-memory instance of a Tenant Template. When using this parameter, the -Out parameter refers to the path for saving the template and storing any supporting file for the template.')]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningHierarchy]
    ${Template},

    [Parameter(Mandatory=$true, Position=0, HelpMessage='Filename to write to, optionally including full path.')]
    [string]
    ${Out},

    [Parameter(HelpMessage='Specifying the Force parameter will skip the confirmation question.')]
    [switch]
    ${Force})

}
function Send-PnPMail
{
    [CmdletBinding()]
param(
    [string]
    ${Server},

    [Parameter(HelpMessage='If using from address, you also have to provide a password')]
    [string]
    ${From},

    [Parameter(HelpMessage='If using a password, you also have to provide the associated from address')]
    [string]
    ${Password},

    [Parameter(Mandatory=$true, HelpMessage='List of recipients')]
    [string[]]
    ${To},

    [Parameter(HelpMessage='List of recipients on CC')]
    [string[]]
    ${Cc},

    [Parameter(Mandatory=$true, HelpMessage='Subject of the email')]
    [string]
    ${Subject},

    [Parameter(Mandatory=$true, HelpMessage='Body of the email')]
    [string]
    ${Body},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPApplicationCustomizer
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(ParameterSetName='Custom Action Id', Position=0, ValueFromPipeline=$true, HelpMessage='The id or name of the CustomAction representing the client side extension registration that needs to be updated or a CustomAction instance itself')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.UserCustomActionPipeBind]
    ${Identity},

    [Parameter(ParameterSetName='Client Side Component Id', HelpMessage='The Client Side Component Id of the SharePoint Framework client side extension application customizer found in the manifest for which existing custom action(s) should be updated')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${ClientSideComponentId},

    [Parameter(HelpMessage='Define if the CustomAction representing the client side extension registration is to be found at the web or site collection scope. Specify All to update the component on both web and site collection level.')]
    [SharePointPnP.PowerShell.Commands.Enums.CustomActionScope]
    ${Scope},

    [Parameter(HelpMessage='The title of the application customizer. Omit to not update this property.')]
    [string]
    ${Title},

    [Parameter(HelpMessage='The description of the application customizer. Omit to not update this property.')]
    [string]
    ${Description},

    [Parameter(HelpMessage='Sequence of this application customizer being injected. Use when you have a specific sequence with which to have multiple application customizers being added to the page. Omit to not update this property.')]
    [System.Nullable[int]]
    ${Sequence},

    [Parameter(HelpMessage='The Client Side Component Properties of the application customizer to update. Specify values as a json string : "{Property1 : ''Value1'', Property2: ''Value2''}". Omit to not update this property.')]
    [string]
    ${ClientSideComponentProperties},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPAppSideLoading
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='On', Mandatory=$true)]
    [switch]
    ${On},

    [Parameter(ParameterSetName='Off', Mandatory=$true)]
    [switch]
    ${Off},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPAuditing
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='Enable all', Mandatory=$true, HelpMessage='Enable all audit flags')]
    [switch]
    ${EnableAll},

    [Parameter(ParameterSetName='Disable All', Mandatory=$true, HelpMessage='Disable all audit flags')]
    [switch]
    ${DisableAll},

    [Parameter(ParameterSetName='Specific flags', HelpMessage='Set the retention time')]
    [Parameter(ParameterSetName='Enable all', HelpMessage='Set the retention time')]
    [int]
    ${RetentionTime},

    [Parameter(ParameterSetName='Specific flags', HelpMessage='Trim the audit log')]
    [Parameter(ParameterSetName='Enable all', HelpMessage='Trim the audit log')]
    [switch]
    ${TrimAuditLog},

    [Parameter(ParameterSetName='Specific flags', HelpMessage='Audit editing items')]
    [switch]
    ${EditItems},

    [Parameter(ParameterSetName='Specific flags', HelpMessage='Audit checking out or checking in items')]
    [switch]
    ${CheckOutCheckInItems},

    [Parameter(ParameterSetName='Specific flags', HelpMessage='Audit moving or copying items to another location in the site.')]
    [switch]
    ${MoveCopyItems},

    [Parameter(ParameterSetName='Specific flags', HelpMessage='Audit deleting or restoring items')]
    [switch]
    ${DeleteRestoreItems},

    [Parameter(ParameterSetName='Specific flags', HelpMessage='Audit editing content types and columns')]
    [switch]
    ${EditContentTypesColumns},

    [Parameter(ParameterSetName='Specific flags', HelpMessage='Audit searching site content')]
    [switch]
    ${SearchContent},

    [Parameter(ParameterSetName='Specific flags', HelpMessage='Audit editing users and permissions')]
    [switch]
    ${EditUsersPermissions},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPAvailablePageLayouts
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='SPECIFIC', Mandatory=$true, HelpMessage='An array of page layout files to set as available page layouts for the site.')]
    [string[]]
    ${PageLayouts},

    [Parameter(ParameterSetName='ALL', Mandatory=$true, HelpMessage='An array of page layout files to set as available page layouts for the site.')]
    [switch]
    ${AllowAllPageLayouts},

    [Parameter(ParameterSetName='INHERIT', Mandatory=$true, HelpMessage='Set the available page layouts to inherit from the parent site.')]
    [switch]
    ${InheritPageLayouts},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPClientSidePage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        ${Identity},

        [Parameter()]
        [System.String]
        ${Name},

        [Parameter()]
        [System.String]
        ${Title},

        [Parameter()]
        [OfficeDevPnP.Core.Pages.ClientSidePageLayoutType]
        ${LayoutType},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.ClientSidePages.ClientSidePagePromoteType]
        ${PromoteAs},

        [Parameter()]
        [OfficeDevPnP.Core.Pages.ClientSidePageHeaderType]
        ${HeaderType},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        ${ContentType},

        [Parameter()]
        [System.String]
        ${ThumbnailUrl},

        [Parameter()]
        [System.String]
        ${PublishMessage},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        ${Web},

        [Parameter()]
        [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
        ${Connection}
    )
}
function Set-PnPClientSideText
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The name of the page')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
    ${Page},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The instance id of the text component')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${InstanceId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='Text to set')]
    [string]
    ${Text},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPClientSideWebPart
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The name of the page')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
    ${Page},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The identity of the web part. This can be the web part instance id or the title of a web part')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ClientSideWebPartPipeBind]
    ${Identity},

    [Parameter(ValueFromPipeline=$true, HelpMessage='Sets the internal title of the web part. Notice that this will NOT set a visible title.')]
    [string]
    ${Title},

    [Parameter(ValueFromPipeline=$true, HelpMessage='Sets the properties as a JSON string.')]
    [string]
    ${PropertiesJson},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPContext
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true, HelpMessage='The ClientContext to set')]
    [Microsoft.SharePoint.Client.ClientContext]
    ${Context})

}
function Set-PnPDefaultColumnValues
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The ID, Name or Url of the list.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Mandatory=$true, HelpMessage='The internal name, id or a reference to a field')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
    ${Field},

    [Parameter(Mandatory=$true, HelpMessage='A list of values. In case of a text field the values will be concatenated, separated by a semi-colon. In case of a taxonomy field multiple values will added. In case of people field multiple values will be added.')]
    [string[]]
    ${Value},

    [Parameter(HelpMessage='A library relative folder path, if not specified it will set the default column values on the root folder of the library (''/'')')]
    [string]
    ${Folder},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPDefaultContentTypeToList
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The name of a list, an ID or the actual list object to update')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Mandatory=$true, HelpMessage='The content type object that needs to be set as the default content type on the list. Content Type needs to be present on the list.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
    ${ContentType},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPDefaultPageLayout
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='TITLE', Mandatory=$true, HelpMessage='Title of the page layout')]
    [string]
    ${Title},

    [Parameter(ParameterSetName='INHERIT', Mandatory=$true, HelpMessage='Set the default page layout to be inherited from the parent site.')]
    [switch]
    ${InheritFromParentSite},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPDocumentSetField
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The document set in which to set the field. Either specify a name, a document set template object, an id, or a content type object')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.DocumentSetPipeBind]
    ${DocumentSet},

    [Parameter(Mandatory=$true, HelpMessage='The field to set. The field needs to be available in one of the available content types. Either specify a name, an id or a field object')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
    ${Field},

    [Parameter(HelpMessage='Set the field as a Shared Field')]
    [switch]
    ${SetSharedField},

    [Parameter(HelpMessage='Set the field as a Welcome Page field')]
    [switch]
    ${SetWelcomePageField},

    [Parameter(HelpMessage='Removes the field as a Shared Field')]
    [switch]
    ${RemoveSharedField},

    [Parameter(HelpMessage='Removes the field as a Welcome Page Field')]
    [switch]
    ${RemoveWelcomePageField},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPField
{
    [CmdletBinding()]
param(
    [Parameter(ValueFromPipeline=$true, HelpMessage='The list object, name or id where to update the field. If omitted the field will be updated on the web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The field object, internal field name (case sensitive) or field id to update')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
    ${Identity},

    [Parameter(Mandatory=$true, HelpMessage='Hashtable of properties to update on the field. Use the syntax @{property1="value";property2="value"}.')]
    [hashtable]
    ${Values},

    [Parameter(HelpMessage='If provided, the field will be updated on existing lists that use it as well. If not provided or set to $false, existing lists using the field will remain unchanged but new lists will get the updated field.')]
    [switch]
    ${UpdateExistingLists},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPFileCheckedIn
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The server relative url of the file to check in')]
    [string]
    ${Url},

    [Parameter(HelpMessage='The check in type to use. Defaults to Major')]
    [Microsoft.SharePoint.Client.CheckinType]
    ${CheckinType},

    [Parameter(HelpMessage='The check in comment')]
    [string]
    ${Comment},

    [Parameter(HelpMessage='Approve file')]
    [switch]
    ${Approve},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPFileCheckedOut
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The server relative url of the file to check out')]
    [string]
    ${Url},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPFolderPermission
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(Mandatory=$true, Position=0, HelpMessage='The ID, Title or Url of the list the folder is part of')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The ID of the folder, the server relative URL to the folder or actual Folder object')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.FolderPipeBind]
    ${Identity},

    [Parameter(ParameterSetName='Group', Mandatory=$true)]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
    ${Group},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [string]
    ${User},

    [Parameter(ParameterSetName='User', HelpMessage='The role that must be assigned to the group or user')]
    [Parameter(ParameterSetName='Group', HelpMessage='The role that must be assigned to the group or user')]
    [string]
    ${AddRole},

    [Parameter(ParameterSetName='User', HelpMessage='The role that must be removed from the group or user')]
    [Parameter(ParameterSetName='Group', HelpMessage='The role that must be removed from the group or user')]
    [string]
    ${RemoveRole},

    [Parameter(ParameterSetName='User', HelpMessage='Clear all existing permissions')]
    [Parameter(ParameterSetName='Group', HelpMessage='Clear all existing permissions')]
    [switch]
    ${ClearExisting},

    [Parameter(ParameterSetName='Inherit', HelpMessage='Inherit permissions from the parent, removing unique permissions')]
    [switch]
    ${InheritPermissions},

    [Parameter(HelpMessage='Update the folder permissions without creating a new version or triggering MS Flow.')]
    [switch]
    ${SystemUpdate},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='A group object, an ID or a name of a group')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
    ${Identity},

    [Parameter(HelpMessage='One of the associated group types (Visitors, Members, Owners')]
    [SharePointPnP.PowerShell.Commands.Enums.AssociatedGroupType]
    ${SetAssociatedGroup},

    [Parameter(HelpMessage='Name of the permission set to add to this SharePoint group')]
    [string]
    ${AddRole},

    [Parameter(HelpMessage='Name of the permission set to remove from this SharePoint group')]
    [string]
    ${RemoveRole},

    [Parameter(HelpMessage='The title for the group')]
    [string]
    ${Title},

    [Parameter(HelpMessage='The owner for the group, which can be a user or another group')]
    [string]
    ${Owner},

    [Parameter(HelpMessage='The description for the group')]
    [string]
    ${Description},

    [Parameter(HelpMessage='A switch parameter that specifies whether to allow users to request membership in the group and to allow users to request to leave the group')]
    [bool]
    ${AllowRequestToJoinLeave},

    [Parameter(HelpMessage='A switch parameter that specifies whether users are automatically added or removed when they make a request')]
    [bool]
    ${AutoAcceptRequestToJoinLeave},

    [Parameter(HelpMessage='A switch parameter that specifies whether group members can modify membership in the group')]
    [bool]
    ${AllowMembersEditMembership},

    [Parameter(HelpMessage='A switch parameter that specifies whether only group members are allowed to view the list of members in the group')]
    [bool]
    ${OnlyAllowMembersViewMembership},

    [Parameter(HelpMessage='The e-mail address to which membership requests are sent')]
    [string]
    ${RequestToJoinEmail},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPGroupPermissions
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Get the permissions of a specific group by name')]
    [Alias('Name')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
    ${Identity},

    [Parameter(HelpMessage='The list to apply the command to.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='Name of the permission set to add to this SharePoint group')]
    [string[]]
    ${AddRole},

    [Parameter(HelpMessage='Name of the permission set to remove from this SharePoint group')]
    [string[]]
    ${RemoveRole},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPHideDefaultThemes
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Defines if the default themes should be visible or hidden')]
    [bool]
    ${HideDefaultThemes},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPHomePage
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The root folder relative url of the homepage, e.g. ''sitepages/home.aspx''')]
    [Alias('Path')]
    [string]
    ${RootFolderRelativeUrl},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPHomeSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The url of the site to set as the home site')]
    [string]
    ${Url},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPHubSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The Id or Url of a hub site to configure')]
    [Alias('HubSite')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.HubSitePipeBind]
    ${Identity},

    [Parameter(HelpMessage='The title to set on the hub which will be shown in the hub navigation bar')]
    [string]
    ${Title},

    [Parameter(HelpMessage='Full url to the image to use for the hub site logo. Can either be a logo hosted on SharePoint or outside of SharePoint and must be an absolute URL to the image.')]
    [string]
    ${LogoUrl},

    [Parameter(HelpMessage='The description of the hub site')]
    [string]
    ${Description},

    [Parameter(HelpMessage='GUID of the SharePoint Site Design which should be applied when a site joins the hub site')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${SiteDesignId},

    [switch]
    ${HideNameInNavigation},

    [switch]
    ${RequiresJoinApproval},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPIndexedProperties
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [System.Collections.Generic.List[string]]
    ${Keys},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPInPlaceRecordsManagement
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='Enable or Disable', Mandatory=$true)]
    [bool]
    ${Enabled},

    [Parameter(ParameterSetName='On', Mandatory=$true, Position=0, HelpMessage='Turn records management on')]
    [Obsolete('Use -Enabled $true')]
    [switch]
    ${On},

    [Parameter(ParameterSetName='Off', Mandatory=$true, Position=0, HelpMessage='Turn records management off')]
    [Obsolete('Use -Enabled $false')]
    [switch]
    ${Off},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPLabel
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The ID or Url of the list.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Mandatory=$true, HelpMessage='The name of the label.')]
    [string]
    ${Label},

    [Parameter(HelpMessage='Apply label to existing items in the library.')]
    [bool]
    ${SyncToItems},

    [Parameter(HelpMessage='Block deletion of items in the library.')]
    [bool]
    ${BlockDeletion},

    [Parameter(HelpMessage='Block editing of items in the library.')]
    [bool]
    ${BlockEdit},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPList
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The ID, Title or Url of the list.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Set to $true to enable content types, set to $false to disable content types')]
    [bool]
    ${EnableContentTypes},

    [Parameter(HelpMessage='If used the security inheritance is broken for this list')]
    [switch]
    ${BreakRoleInheritance},

    [Parameter(HelpMessage='If used the security inheritance is reset for this list (inherited from parent)')]
    [switch]
    ${ResetRoleInheritance},

    [Parameter(HelpMessage='If used the roles are copied from the parent web')]
    [switch]
    ${CopyRoleAssignments},

    [Parameter(HelpMessage='If used the unique permissions are cleared from child objects and they can inherit role assignments from this object')]
    [switch]
    ${ClearSubscopes},

    [Parameter(HelpMessage='The title of the list')]
    [string]
    ${Title},

    [Parameter(HelpMessage='The description of the list')]
    [string]
    ${Description},

    [Parameter(HelpMessage='Hide the list from the SharePoint UI. Set to $true to hide, $false to show.')]
    [bool]
    ${Hidden},

    [Parameter(HelpMessage='Enable or disable force checkout. Set to $true to enable, $false to disable.')]
    [bool]
    ${ForceCheckout},

    [Parameter(HelpMessage='Set the list experience: Auto, NewExperience or ClassicExperience')]
    [Microsoft.SharePoint.Client.ListExperience]
    ${ListExperience},

    [Parameter(HelpMessage='Enable or disable attachments. Set to $true to enable, $false to disable.')]
    [bool]
    ${EnableAttachments},

    [Parameter(HelpMessage='Enable or disable folder creation. Set to $true to enable, $false to disable.')]
    [bool]
    ${EnableFolderCreation},

    [Parameter(HelpMessage='Enable or disable versioning. Set to $true to enable, $false to disable.')]
    [bool]
    ${EnableVersioning},

    [Parameter(HelpMessage='Enable or disable minor versions versioning. Set to $true to enable, $false to disable.')]
    [bool]
    ${EnableMinorVersions},

    [Parameter(HelpMessage='Maximum major versions to keep')]
    [uint32]
    ${MajorVersions},

    [Parameter(HelpMessage='Maximum minor versions to keep')]
    [uint32]
    ${MinorVersions},

    [Parameter(HelpMessage='Enable or disable whether content approval is enabled for the list. Set to $true to enable, $false to disable.')]
    [bool]
    ${EnableModeration},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPListInformationRightsManagement
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The list to set Information Rights Management (IRM) settings for.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='Specifies whether Information Rights Management (IRM) is enabled for the list.')]
    [System.Nullable[bool]]
    ${Enable},

    [Parameter(HelpMessage='Specifies whether Information Rights Management (IRM) expiration is enabled for the list.')]
    [System.Nullable[bool]]
    ${EnableExpiration},

    [Parameter(HelpMessage='Specifies whether Information Rights Management (IRM) rejection is enabled for the list.')]
    [System.Nullable[bool]]
    ${EnableRejection},

    [Parameter(HelpMessage='Sets a value indicating whether the viewer can print the downloaded document.')]
    [System.Nullable[bool]]
    ${AllowPrint},

    [Parameter(HelpMessage='Sets a value indicating whether the viewer can run a script on the downloaded document.')]
    [System.Nullable[bool]]
    ${AllowScript},

    [Parameter(HelpMessage='Sets a value indicating whether the viewer can write on a copy of the downloaded document.')]
    [System.Nullable[bool]]
    ${AllowWriteCopy},

    [Parameter(HelpMessage='Sets a value indicating whether to block Office Web Application Companion applications (WACs) from showing this document.')]
    [System.Nullable[bool]]
    ${DisableDocumentBrowserView},

    [Parameter(HelpMessage='Sets the number of days after which the downloaded document will expire.')]
    [System.Nullable[int]]
    ${DocumentAccessExpireDays},

    [Parameter(HelpMessage='Sets the date after which the Information Rights Management (IRM) protection of this document library will stop.')]
    [System.Nullable[datetime]]
    ${DocumentLibraryProtectionExpireDate},

    [Parameter(HelpMessage='Sets a value indicating whether the downloaded document will expire.')]
    [System.Nullable[bool]]
    ${EnableDocumentAccessExpire},

    [Parameter(HelpMessage='Sets a value indicating whether to enable Office Web Application Companion applications (WACs) to publishing view.')]
    [System.Nullable[bool]]
    ${EnableDocumentBrowserPublishingView},

    [Parameter(HelpMessage='Sets a value indicating whether the permission of the downloaded document is applicable to a group.')]
    [System.Nullable[bool]]
    ${EnableGroupProtection},

    [Parameter(HelpMessage='Sets whether a user must verify their credentials after some interval.')]
    [System.Nullable[bool]]
    ${EnableLicenseCacheExpire},

    [Parameter(HelpMessage='Sets the number of days that the application that opens the document caches the IRM license. When these elapse, the application will connect to the IRM server to validate the license.')]
    [System.Nullable[int]]
    ${LicenseCacheExpireDays},

    [Parameter(HelpMessage='Sets the group name (email address) that the permission is also applicable to.')]
    [string]
    ${GroupName},

    [Parameter(HelpMessage='Sets the permission policy description.')]
    [string]
    ${PolicyDescription},

    [Parameter(HelpMessage='Sets the permission policy title.')]
    [string]
    ${PolicyTitle},

    [string]
    ${TemplateId},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPListItem
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The ID, Title or Url of the list.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The ID of the listitem, or actual ListItem object')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Specify either the name, ID or an actual content type')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
    ${ContentType},

    [Parameter(HelpMessage='Use the internal names of the fields when specifying field names.Single line of text: -Values @{"TextField" = "Title New"}Multiple lines of text: -Values @{"MultiTextField" = "New text\n\nMore text"}Rich text: -Values @{"MultiTextField" = "<strong>New</strong> text"}Choice: -Values @{"ChoiceField" = "Value 1"}Number: -Values @{"NumberField" = "10"}Currency: -Values @{"NumberField" = "10"}Currency: -Values @{"CurrencyField" = "10"}Date and Time: -Values @{"DateAndTimeField" = "03/13/2015 14:16"}Lookup (id of lookup value): -Values @{"LookupField" = "2"}Multi value lookup (id of lookup values as array 1): -Values @{"MultiLookupField" = "1","2"}Multi value lookup (id of lookup values as array 2): -Values @{"MultiLookupField" = 1,2}Multi value lookup (id of lookup values as string): -Values @{"MultiLookupField" = "1,2"}Yes/No: -Values @{"YesNoField" = $false}Person/Group (id of user/group in Site User Info List or email of the user, separate multiple values with a comma): -Values @{"PersonField" = "user1@domain.com","21"}Managed Metadata (single value with path to term): -Values @{"MetadataField" = "CORPORATE|DEPARTMENTS|FINANCE"}Managed Metadata (single value with id of term): -Values @{"MetadataField" = "fe40a95b-2144-4fa2-b82a-0b3d0299d818"} with Id of termManaged Metadata (multiple values with paths to terms): -Values @{"MetadataField" = ("CORPORATE|DEPARTMENTS|FINANCE","CORPORATE|DEPARTMENTS|HR")}Managed Metadata (multiple values with ids of terms): -Values @{"MetadataField" = ("fe40a95b-2144-4fa2-b82a-0b3d0299d818","52d88107-c2a8-4bf0-adfa-04bc2305b593")}Hyperlink or Picture: -Values @{"HyperlinkField" = "https://github.com/OfficeDev/, OfficePnp"}')]
    [hashtable]
    ${Values},

    [Parameter(HelpMessage='Update the item without creating a new version.')]
    [switch]
    ${SystemUpdate},

    [Parameter(HelpMessage='The name of the retention label.')]
    [string]
    ${Label},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPListItemAsRecord
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The ID, Title or Url of the list.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The ID of the listitem, or actual ListItem object')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
    ${Identity},

    [Parameter(HelpMessage='The declaration date')]
    [datetime]
    ${DeclarationDate},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPListItemPermission
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The ID, Title or Url of the list.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The ID of the listitem, or actual ListItem object')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
    ${Identity},

    [Parameter(ParameterSetName='Group', Mandatory=$true)]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
    ${Group},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [string]
    ${User},

    [Parameter(ParameterSetName='User', HelpMessage='The role that must be assigned to the group or user')]
    [Parameter(ParameterSetName='Group', HelpMessage='The role that must be assigned to the group or user')]
    [string]
    ${AddRole},

    [Parameter(ParameterSetName='User', HelpMessage='The role that must be removed from the group or user')]
    [Parameter(ParameterSetName='Group', HelpMessage='The role that must be removed from the group or user')]
    [string]
    ${RemoveRole},

    [Parameter(ParameterSetName='User', HelpMessage='Clear all existing permissions')]
    [Parameter(ParameterSetName='Group', HelpMessage='Clear all existing permissions')]
    [switch]
    ${ClearExisting},

    [Parameter(ParameterSetName='Inherit', HelpMessage='Inherit permissions from the list, removing unique permissions')]
    [switch]
    ${InheritPermissions},

    [Parameter(HelpMessage='Update the item permissions without creating a new version or triggering MS Flow.')]
    [switch]
    ${SystemUpdate},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPListPermission
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The ID or Title of the list.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${Identity},

    [Parameter(ParameterSetName='Group', Mandatory=$true)]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
    ${Group},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [string]
    ${User},

    [Parameter(HelpMessage='The role that must be assigned to the group or user')]
    [string]
    ${AddRole},

    [Parameter(HelpMessage='The role that must be removed from the group or user')]
    [string]
    ${RemoveRole},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPListRecordDeclaration
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The List to set the manual record declaration settings for')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='Defines the manual record declaration setting for the lists')]
    [System.Nullable[OfficeDevPnP.Core.EcmListManualRecordDeclaration]]
    ${ManualRecordDeclaration},

    [Parameter(HelpMessage='Defines if you want to set auto record declaration on the list')]
    [System.Nullable[bool]]
    ${AutoRecordDeclaration},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPMasterPage
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='Server Relative', HelpMessage='Specifies the Master page URL based on the server relative URL')]
    [Alias('MasterPageUrl')]
    [string]
    ${MasterPageServerRelativeUrl},

    [Parameter(ParameterSetName='Server Relative', HelpMessage='Specifies the custom Master page URL based on the server relative URL')]
    [Alias('CustomMasterPageUrl')]
    [string]
    ${CustomMasterPageServerRelativeUrl},

    [Parameter(ParameterSetName='Site Relative', HelpMessage='Specifies the Master page URL based on the site relative URL')]
    [string]
    ${MasterPageSiteRelativeUrl},

    [Parameter(ParameterSetName='Site Relative', HelpMessage='Specifies the custom Master page URL based on the site relative URL')]
    [string]
    ${CustomMasterPageSiteRelativeUrl},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPMinimalDownloadStrategy
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='On', Mandatory=$true, HelpMessage='Turn minimal download strategy on')]
    [switch]
    ${On},

    [Parameter(ParameterSetName='Off', Mandatory=$true, HelpMessage='Turn minimal download strategy off')]
    [switch]
    ${Off},

    [Parameter(HelpMessage='Specifies whether to overwrite (when activating) or continue (when deactivating) an existing feature with the same feature identifier. This parameter is ignored if there are no errors.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPPropertyBagValue
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='Web', Mandatory=$true)]
    [Parameter(ParameterSetName='Folder', Mandatory=$true)]
    [string]
    ${Key},

    [Parameter(ParameterSetName='Web', Mandatory=$true)]
    [Parameter(ParameterSetName='Folder', Mandatory=$true)]
    [Parameter(Mandatory=$true)]
    [string]
    ${Value},

    [Parameter(ParameterSetName='Web', Mandatory=$true)]
    [switch]
    ${Indexed},

    [Parameter(ParameterSetName='Folder', HelpMessage='Site relative url of the folder. See examples for use.')]
    [string]
    ${Folder},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPProvisioningTemplateMetadata
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true, HelpMessage='Path to the xml or pnp file containing the site template.')]
    [string]
    ${Path},

    [Parameter(HelpMessage='It can be used to specify the DisplayName of the template file that will be updated.')]
    [string]
    ${TemplateDisplayName},

    [Parameter(HelpMessage='It can be used to specify the ImagePreviewUrl of the template file that will be updated.')]
    [string]
    ${TemplateImagePreviewUrl},

    [Parameter(HelpMessage='It can be used to specify custom Properties for the template file that will be updated.')]
    [hashtable]
    ${TemplateProperties},

    [Parameter(HelpMessage='Allows you to specify ITemplateProviderExtension to execute while extracting a template.')]
    [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
    ${TemplateProviderExtensions},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPRequestAccessEmails
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Email address to send the access requests to')]
    [string[]]
    ${Emails},

    [Parameter(HelpMessage='Enables or disables access to be requested')]
    [switch]
    ${Disabled},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPSearchConfiguration
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='Config', Mandatory=$true, HelpMessage='Search configuration string')]
    [string]
    ${Configuration},

    [Parameter(ParameterSetName='Path', Mandatory=$true, HelpMessage='Path to a search configuration')]
    [string]
    ${Path},

    [SharePointPnP.PowerShell.Commands.Enums.SearchConfigurationScope]
    ${Scope},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPSearchSettings
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Set the scope of which the suite bar search box shows. Possible values: Inherit, AllPages, ModernOnly, Hidden')]
    [System.Nullable[Microsoft.SharePoint.Client.SearchBoxInNavBarType]]
    ${SearchBoxInNavBar},

    [Parameter(HelpMessage='Set the URL where the search box should redirect to.')]
    [string]
    ${SearchPageUrl},

    [Parameter(HelpMessage='Set the search scope of the suite bar search box. Possible values: DefaultScope, Tenant, Hub, Site')]
    [System.Nullable[Microsoft.SharePoint.Client.SearchScopeType]]
    ${SearchScope},

    [Parameter(HelpMessage='Scope to apply the setting to. Possible values: Web (default), Site\r\n\r\nFor a root site, the scope does not matter.')]
    [SharePointPnP.PowerShell.Commands.Enums.SearchSettingsScope]
    ${Scope},

    [Parameter(HelpMessage='Do not ask for confirmation.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPSite
{
    [CmdletBinding()]
param(
    [Alias('Url')]
    [string]
    ${Identity},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='The classification to set')]
    [string]
    ${Classification},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Disables Microsoft Flow for this site')]
    [System.Nullable[switch]]
    ${DisableFlows},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Sets the logo of the site if it concerns a modern team site. Provide a full path to a local image file on your disk which you want to use as the site logo. The logo will be uploaded automatically to SharePoint. If you want to set the logo for a classic site, use Set-PnPWeb -SiteLogoUrl.')]
    [string]
    ${LogoFilePath},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies what the sharing capabilities are for the site. Possible values: Disabled, ExternalUserSharingOnly, ExternalUserAndGuestSharing, ExistingExternalUserSharingOnly')]
    [System.Nullable[Microsoft.Online.SharePoint.TenantManagement.SharingCapabilities]]
    ${Sharing},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies the storage quota for this site collection in megabytes. This value must not exceed the company''s available quota.')]
    [System.Nullable[long]]
    ${StorageMaximumLevel},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies the warning level for the storage quota in megabytes. This value must not exceed the values set for the StorageMaximumLevel parameter')]
    [System.Nullable[long]]
    ${StorageWarningLevel},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies the quota for this site collection in Sandboxed Solutions units. This value must not exceed the company''s aggregate available Sandboxed Solutions quota. The default value is 0. For more information, see Resource Usage Limits on Sandboxed Solutions in SharePoint 2010 : http://msdn.microsoft.com/en-us/library/gg615462.aspx.')]
    [Obsolete('Sandboxed solution code has been deprecated')]
    [System.Nullable[double]]
    ${UserCodeMaximumLevel},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies the warning level for the resource quota. This value must not exceed the value set for the UserCodeMaximumLevel parameter')]
    [Obsolete('Sandboxed solution code has been deprecated')]
    [System.Nullable[double]]
    ${UserCodeWarningLevel},

    [Parameter(ParameterSetName='Set Lock State', HelpMessage='Sets the lockstate of a site')]
    [System.Nullable[OfficeDevPnP.Core.SiteLockState]]
    ${LockState},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies if the site administrator can upgrade the site collection')]
    [System.Nullable[switch]]
    ${AllowSelfServiceUpgrade},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies if a site allows custom script or not. See https://support.office.com/en-us/article/Turn-scripting-capabilities-on-or-off-1f2c515f-5d7e-448a-9fd7-835da935584f for more information.')]
    [Alias('DenyAndAddCustomizePages')]
    [System.Nullable[switch]]
    ${NoScriptSite},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies owner(s) to add as site collection administrators. They will be added as additional site collection administrators. Existing administrators will stay. Can be both users and groups.')]
    [System.Collections.Generic.List[string]]
    ${Owners},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies if comments on site pages are enabled or disabled')]
    [System.Nullable[switch]]
    ${CommentsOnSitePagesDisabled},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies the default link permission for the site collection. None - Respect the organization default link permission. View - Sets the default link permission for the site to "view" permissions. Edit - Sets the default link permission for the site to "edit" permissions')]
    [System.Nullable[Microsoft.Online.SharePoint.TenantManagement.SharingPermissionType]]
    ${DefaultLinkPermission},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies the default link type for the site collection. None - Respect the organization default sharing link type. AnonymousAccess - Sets the default sharing link for this site to an Anonymous Access or Anyone link. Internal - Sets the default sharing link for this site to the "organization" link or company shareable link. Direct - Sets the default sharing link for this site to the "Specific people" link')]
    [System.Nullable[Microsoft.Online.SharePoint.TenantManagement.SharingLinkType]]
    ${DefaultSharingLinkType},

    [Parameter(ParameterSetName='Set Properties')]
    [System.Nullable[Microsoft.Online.SharePoint.TenantAdministration.AppViewsPolicy]]
    ${DisableAppViews},

    [Parameter(ParameterSetName='Set Properties')]
    [System.Nullable[Microsoft.Online.SharePoint.TenantAdministration.CompanyWideSharingLinksPolicy]]
    ${DisableCompanyWideSharingLinks},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies to prevent non-owners from inviting new users to the site')]
    [switch]
    ${DisableSharingForNonOwners},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies the language of this site collection.')]
    [System.Nullable[uint32]]
    ${LocaleId},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies the new URL for this site collection.')]
    [Obsolete('NewUrl is deprecated')]
    [string]
    ${NewUrl},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies the Geo/Region restrictions of this site.')]
    [System.Nullable[Microsoft.Online.SharePoint.TenantAdministration.RestrictedToRegion]]
    ${RestrictedToGeo},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Disables or enables the Social Bar for Site Collection.')]
    [System.Nullable[switch]]
    ${SocialBarOnSitePagesDisabled},

    [Parameter(ParameterSetName='Set Lock State', HelpMessage='Wait for the operation to complete')]
    [switch]
    ${Wait},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPSiteClosure
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The state of the site')]
    [SharePointPnP.PowerShell.Commands.InformationManagement.ClosureState]
    ${State},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPSiteDesign
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, HelpMessage='The guid or an object representing the site design')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
    ${Identity},

    [Parameter(HelpMessage='The title of the site design')]
    [string]
    ${Title},

    [Parameter(HelpMessage='An array of guids of site scripts')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind[]]
    ${SiteScriptIds},

    [Parameter(HelpMessage='The description of the site design')]
    [string]
    ${Description},

    [Parameter(HelpMessage='Specifies if the site design is a default site design')]
    [switch]
    ${IsDefault},

    [Parameter(HelpMessage='Sets the text for the preview image')]
    [string]
    ${PreviewImageAltText},

    [Parameter(HelpMessage='Sets the url to the preview image')]
    [string]
    ${PreviewImageUrl},

    [Parameter(HelpMessage='Specifies the type of site to which this design applies')]
    [SharePointPnP.PowerShell.Commands.Enums.SiteWebTemplate]
    ${WebTemplate},

    [Parameter(HelpMessage='Specifies the version of the design')]
    [int]
    ${Version},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPSitePolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The name of the site policy to apply')]
    [string]
    ${Name},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPSiteScript
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, HelpMessage='The guid or an object representing the site script')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.TenantSiteScriptPipeBind]
    ${Identity},

    [Parameter(HelpMessage='The title of the site script')]
    [string]
    ${Title},

    [Parameter(HelpMessage='The description of the site script')]
    [string]
    ${Description},

    [Parameter(HelpMessage='A JSON string containing the site script')]
    [string]
    ${Content},

    [Parameter(HelpMessage='Specifies the version of the site script')]
    [int]
    ${Version},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPStorageEntity
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, HelpMessage='The key of the value to set.')]
    [string]
    ${Key},

    [Parameter(Mandatory=$true, HelpMessage='The value to set.')]
    [string]
    ${Value},

    [Parameter(HelpMessage='The comment to set.')]
    [AllowNull()]
    [string]
    ${Comment},

    [Parameter(HelpMessage='The description to set.')]
    [AllowNull()]
    [string]
    ${Description},

    [Parameter(HelpMessage='Defines the scope of the storage entity. Defaults to Tenant.')]
    [SharePointPnP.PowerShell.Commands.Enums.StorageEntityScope]
    ${Scope},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPTaxonomyFieldValue
{
    [CmdletBinding(DefaultParameterSetName='ITEM')]
param(
    [Parameter(Mandatory=$true, HelpMessage='The list item to set the field value to')]
    [Microsoft.SharePoint.Client.ListItem]
    ${ListItem},

    [Parameter(Mandatory=$true, HelpMessage='The internal name of the field')]
    [string]
    ${InternalFieldName},

    [Parameter(ParameterSetName='ITEM', Mandatory=$true, HelpMessage='The Id of the Term')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${TermId},

    [Parameter(ParameterSetName='ITEM', HelpMessage='The Label value of the term')]
    [string]
    ${Label},

    [Parameter(ParameterSetName='PATH', Mandatory=$true, HelpMessage='A path in the form of GROUPLABEL|TERMSETLABEL|TERMLABEL')]
    [string]
    ${TermPath},

    [Parameter(ParameterSetName='ITEMS', HelpMessage='Allows you to specify terms with key value pairs that can be referred to in the template by means of the {id:label} token. See examples on how to use this parameter.')]
    [hashtable]
    ${Terms},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPTenant
{
    [CmdletBinding(DefaultParameterSetName='__AllParameterSets')]
param(
    [Parameter(HelpMessage='Permits the use of special characters in file and folder names in SharePoint Online and OneDrive for Business document libraries.

Note:
The only two characters that can be managed at this time are the # and % characters.

The following are the valid values:

NoPreference- Support for feature will be enabled by Microsoft on your Office 365 tenant.

Allowed- Lets the # and % characters in file and folder names in SharePoint Online and OneDrive for Business document libraries.

Disallowed- Disallows the # and % characters in file and folder names in SharePoint Online and OneDrive for Business document libraries.')]
    [System.Nullable[Microsoft.Online.SharePoint.TenantManagement.SpecialCharactersState]]
    ${SpecialCharactersStateInFileFolderNames},

    [Parameter(HelpMessage='Specifies the lower bound on the compatibility level for new sites.')]
    [int]
    ${MinCompatibilityLevel},

    [Parameter(HelpMessage='Specifies the upper bound on the compatibility level for new sites.')]
    [int]
    ${MaxCompatibilityLevel},

    [Parameter(HelpMessage='Enables external services for a tenant.
External services are defined as services that are not in the Office 365 datacenters.

The valid values are:
True (default) - External services are enabled for the tenant.
False - External services that are outside of the Office 365 datacenters cannot interact with SharePoint.')]
    [System.Nullable[bool]]
    ${ExternalServicesEnabled},

    [Parameter(HelpMessage='Specifies the URL of the redirected site for those site collections which have the locked state "NoAccess"

The valid values are:
""(default) - Blank by default, this will also remove or clear any value that has been set.
Full URL - Example: https://contoso.sharepoint.com/Pages/Locked.aspx')]
    [string]
    ${NoAccessRedirectUrl},

    [Parameter(HelpMessage='Determines what level of sharing is available for the site.

The valid values are:
ExternalUserAndGuestSharing (default) - External user sharing (share by email) and guest link sharing are both enabled. Disabled - External user sharing (share by email) and guest link sharing are both disabled.
ExternalUserSharingOnly - External user sharing (share by email) is enabled, but guest link sharing is disabled.

For more information about sharing, see Manage external sharing for your SharePoint online environment (http://office.microsoft.com/en-us/office365-sharepoint-online-enterprise-help/manage-external-sharing-for-your-sharepoint-online-environment-HA102849864.aspx).')]
    [System.Nullable[Microsoft.Online.SharePoint.TenantManagement.SharingCapabilities]]
    ${SharingCapability},

    [Parameter(HelpMessage='Determines whether tenant users see the Start a Site menu option.

The valid values are:
True (default) - Tenant users will see the Start a Site menu option.
False - Start a Site is hidden from the menu.')]
    [System.Nullable[bool]]
    ${DisplayStartASiteOption},

    [Parameter(HelpMessage='Specifies URL of the form to load in the Start a Site dialog.

The valid values are:
"" (default) - Blank by default, this will also remove or clear any value that has been set.
Full URL - Example: "https://contoso.sharepoint.com/path/to/form"')]
    [string]
    ${StartASiteFormUrl},

    [Parameter(HelpMessage='Enables the administrator to hide the Everyone claim in the People Picker.
When users share an item with Everyone, it is accessible to all authenticated users in the tenant''s Azure Active Directory, including any active external users who have previously accepted invitations.

Note, that some SharePoint system resources such as templates and pages are required to be shared to Everyone and this type of sharing does not expose any user data or metadata.

The valid values are:
True (default) - The Everyone claim group is displayed in People Picker.
False - The Everyone claim group is hidden from the People Picker.')]
    [System.Nullable[bool]]
    ${ShowEveryoneClaim},

    [Parameter(HelpMessage='Enables the administrator to hide the All Users claim groups in People Picker.

When users share an item with "All Users (x)", it is accessible to all organization members in the tenant''s Azure Active Directory who have authenticated with via this method. When users share an item with "All Users (x)" it is accessible to all organization members in the tenant that used NTLM to authentication with SharePoint.

Note, the All Users(authenticated) group is equivalent to the Everyone claim, and shows as Everyone.To change this, see - ShowEveryoneClaim.

The valid values are:
True(default) - The All Users claim groups are displayed in People Picker.
False - The All Users claim groups are hidden in People Picker.')]
    [System.Nullable[bool]]
    ${ShowAllUsersClaim},

    [Parameter(HelpMessage='Enables the administrator to hide the "Everyone except external users" claim in the People Picker.
When users share an item with "Everyone except external users", it is accessible to all organization members in the tenant''s Azure Active Directory, but not to any users who have previously accepted invitations.

The valid values are:
True(default) - The Everyone except external users is displayed in People Picker.
False - The Everyone except external users claim is not visible in People Picker.')]
    [System.Nullable[bool]]
    ${ShowEveryoneExceptExternalUsersClaim},

    [Parameter(HelpMessage='Removes the search capability from People Picker. Note, recently resolved names will still appear in the list until browser cache is cleared or expired.

SharePoint Administrators will still be able to use starts with or partial name matching when enabled.

The valid values are:
False (default) - Starts with / partial name search functionality is available.
True - Disables starts with / partial name search functionality for all SharePoint users, except SharePoint Admins.')]
    [System.Nullable[bool]]
    ${SearchResolveExactEmailOrUPN},

    [Parameter(HelpMessage='When set to true this will disable the ability to use Modern Authentication that leverages ADAL across the tenant.

The valid values are:
False (default) - Modern Authentication is enabled/allowed.
True - Modern Authentication via ADAL is disabled.')]
    [System.Nullable[bool]]
    ${OfficeClientADALDisabled},

    [Parameter(HelpMessage='By default this value is set to $true.

Setting this parameter prevents Office clients using non-modern authentication protocols from accessing SharePoint Online resources.

A value of $true - Enables Office clients using non-modern authentication protocols(such as, Forms-Based Authentication (FBA) or Identity Client Runtime Library (IDCRL)) to access SharePoint resources.

A value of $false - Prevents Office clients using non-modern authentication protocols from accessing SharePoint Online resources.

Note:
This may also prevent third-party apps from accessing SharePoint Online resources.Also, this will also block apps using the SharePointOnlineCredentials class to access SharePoint Online resources.For additional information about SharePointOnlineCredentials, see SharePointOnlineCredentials class.')]
    [System.Nullable[bool]]
    ${LegacyAuthProtocolsEnabled},

    [Parameter(HelpMessage='Ensures that an external user can only accept an external sharing invitation with an account matching the invited email address.

Administrators who desire increased control over external collaborators should consider enabling this feature.

Note, this only applies to new external users accepting new sharing invitations. Also, the resource owner must share with an organizational or Microsoft account or the external user will be unable to access the resource.

The valid values are:
False (default) - When a document is shared with an external user, bob@contoso.com, it can be accepted by any user with access to the invitation link in the original e-mail.
True - User must accept this invitation with bob@contoso.com.')]
    [System.Nullable[bool]]
    ${RequireAcceptingAccountMatchInvitedAccount},

    [Parameter(HelpMessage='Creates a Shared with Everyone folder in every user''s new OneDrive for Business document library.

The valid values are:
True (default) - The Shared with Everyone folder is created.
False - No folder is created when the site and OneDrive for Business document library is created.

The default behavior of the Shared with Everyone folder changed in August 2015.
For additional information about the change, see Provision the Shared with Everyone folder in OneDrive for Business (https://support.office.com/en-us/article/Provision-the-Shared-with-Everyone-folder-in-OneDrive-for-Business-6bb02c91-fd0b-42ba-9457-3921cb6dc5b2?ui=en-US&rs=en-US&ad=US)')]
    [System.Nullable[bool]]
    ${ProvisionSharedWithEveryoneFolder},

    [Parameter(HelpMessage='Specifies the home realm discovery value to be sent to Azure Active Directory (AAD) during the user sign-in process.

When the organization uses a third-party identity provider, this prevents the user from seeing the Azure Active Directory Home Realm Discovery web page and ensures the user only sees their company''s Identity Provider''s portal.
This value can also be used with Azure Active Directory Premium to customize the Azure Active Directory login page.

Acceleration will not occur on site collections that are shared externally.

This value should be configured with the login domain that is used by your company (that is, example@contoso.com).

If your company has multiple third-party identity providers, configuring the sign-in acceleration value will break sign-in for your organization.

The valid values are:
"" (default) - Blank by default, this will also remove or clear any value that has been set.
Login Domain - For example: "contoso.com"')]
    [string]
    ${SignInAccelerationDomain},

    [Parameter(HelpMessage='Accelerates guest-enabled site collections as well as member-only site collections when the SignInAccelerationDomain parameter is set.

Note:
If enabled, your identity provider must be capable of authenticating guest users. If it is not, guest users will be unable to log in and access content that was shared with them.')]
    [System.Nullable[bool]]
    ${EnableGuestSignInAcceleration},

    [Parameter(HelpMessage='Lets SharePoint issue a special cookie that will allow this feature to work even when "Keep Me Signed In" is not selected.

"Open with Explorer" requires persisted cookies to operate correctly.
When the user does not select "Keep Me Signed in" at the time of sign -in, "Open with Explorer" will fail.

This special cookie expires after 30 minutes and cannot be cleared by closing the browser or signing out of SharePoint Online.To clear this cookie, the user must log out of their Windows session.

The valid values are:
False(default) - No special cookie is generated and the normal Office 365 sign -in length / timing applies.
True - Generates a special cookie that will allow "Open with Explorer" to function if the "Keep Me Signed In" box is not checked at sign -in.')]
    [System.Nullable[bool]]
    ${UsePersistentCookiesForExplorerView},

    [Parameter(HelpMessage='When the feature is enabled, all external sharing invitations that are sent will blind copy the e-mail messages listed in the BccExternalSharingInvitationsList.

The valid values are:
False (default) - BCC for external sharing is disabled.
True - All external sharing invitations that are sent will blind copy the e-mail messages listed in the BccExternalSharingInvitationsList.')]
    [System.Nullable[bool]]
    ${BccExternalSharingInvitations},

    [Parameter(HelpMessage='Specifies a list of e-mail addresses to be BCC''d when the BCC for External Sharing feature is enabled.
Multiple addresses can be specified by creating a comma separated list with no spaces.

The valid values are:
"" (default) - Blank by default, this will also clear any value that has been set.
Single or Multiple e-mail addresses - joe@contoso.com or joe@contoso.com,bob@contoso.com')]
    [string]
    ${BccExternalSharingInvitationsList},

    [System.Nullable[bool]]
    ${UserVoiceForFeedbackEnabled},

    [System.Nullable[bool]]
    ${PublicCdnEnabled},

    [string]
    ${PublicCdnAllowedFileTypes},

    [Parameter(HelpMessage='Specifies all anonymous links that have been created (or will be created) will expire after the set number of days .

To remove the expiration requirement, set the value to zero (0).')]
    [System.Nullable[int]]
    ${RequireAnonymousLinksExpireInDays},

    [Parameter(HelpMessage='Specifies a list of email domains that is allowed for sharing with the external collaborators. Use the space character as the delimiter for entering multiple values. For example, "contoso.com fabrikam.com".

For additional information about how to restrict a domain sharing, see Restricted Domains Sharing in Office 365 SharePoint Online and OneDrive for Business')]
    [string]
    ${SharingAllowedDomainList},

    [Parameter(HelpMessage='Specifies a list of email domains that is blocked or prohibited for sharing with the external collaborators. Use space character as the delimiter for entering multiple values. For example, "contoso.com fabrikam.com".

For additional information about how to restrict a domain sharing, see Restricted Domains Sharing in Office 365 SharePoint Online and OneDrive for Business')]
    [string]
    ${SharingBlockedDomainList},

    [Parameter(HelpMessage='Specifies the external sharing mode for domains.

The following values are: None AllowList BlockList

For additional information about how to restrict a domain sharing, see Restricted Domains Sharing in Office 365 SharePoint Online and OneDrive for Business.')]
    [System.Nullable[Microsoft.Online.SharePoint.TenantManagement.SharingDomainRestrictionModes]]
    ${SharingDomainRestrictionMode},

    [Parameter(HelpMessage='Sets a default OneDrive for Business storage quota for the tenant. It will be used for new OneDrive for Business sites created.

A typical use will be to reduce the amount of storage associated with OneDrive for Business to a level below what the License entitles the users. For example, it could be used to set the quota to 10 gigabytes (GB) by default.

If value is set to 0, the parameter will have no effect.

If the value is set larger than the Maximum allowed OneDrive for Business quota, it will have no effect.')]
    [System.Nullable[long]]
    ${OneDriveStorageQuota},

    [Parameter(HelpMessage='Lets OneDrive for Business creation for administrator managed guest users. Administrator managed Guest users use credentials in the resource tenant to access the resources.

The valid values are the following:

$true-Administrator managed Guest users can be given OneDrives, provided needed licenses are assigned.

$false- Administrator managed Guest users can''t be given OneDrives as functionality is turned off.')]
    [System.Nullable[bool]]
    ${OneDriveForGuestsEnabled},

    [Parameter(HelpMessage='Allows access from network locations that are defined by an administrator.

The values are $true and $false. The default value is $false which means the setting is disabled.

Before the IPAddressEnforcement parameter is set, make sure you add a valid IPv4 or IPv6 address to the IPAddressAllowList parameter.')]
    [System.Nullable[bool]]
    ${IPAddressEnforcement},

    [Parameter(HelpMessage='Configures multiple IP addresses or IP address ranges (IPv4 or IPv6).

Use commas to separate multiple IP addresses or IP address ranges. Verify there are no overlapping IP addresses and ensure IP ranges use Classless Inter-Domain Routing (CIDR) notation. For example, 172.16.0.0, 192.168.1.0/27.

Note:
The IPAddressAllowList parameter only lets administrators set IP addresses or ranges that are recognized as trusted. To only grant access from these IP addresses or ranges, set the IPAddressEnforcement parameter to $true.')]
    [string]
    ${IPAddressAllowList},

    [System.Nullable[int]]
    ${IPAddressWACTokenLifetime},

    [Parameter(HelpMessage='Note:
When set to $true, users aren''t able to share with security groups or SharePoint groups.')]
    [System.Nullable[bool]]
    ${UseFindPeopleInPeoplePicker},

    [Parameter(HelpMessage='Lets administrators choose what type of link appears is selected in the “Get a link” sharing dialog box in OneDrive for Business and SharePoint Online.

For additional information about how to change the default link type, see Change the default link type when users get links for sharing.

Note:
Setting this value to “none” will default “get a link” to the most permissive link available (that is, if anonymous links are enabled, the default link will be anonymous access; if they are disabled then the default link will be internal.

The values are: None Direct Internal AnonymousAccess')]
    [System.Nullable[Microsoft.Online.SharePoint.TenantManagement.SharingLinkType]]
    ${DefaultSharingLinkType},

    [Parameter(HelpMessage='Lets administrators set policy on re-sharing behavior in OneDrive for Business.

Values:

On- Users with edit permissions can re-share.

Off- Only OneDrive for Business owner can share. The value of ODBAccessRequests defines whether a request to share gets sent to the owner.

Unspecified- Let each OneDrive for Business owner enable or disable re-sharing behavior on their OneDrive.')]
    [System.Nullable[Microsoft.SharePoint.Client.SharingState]]
    ${ODBMembersCanShare},

    [Parameter(HelpMessage='Lets administrators set policy on access requests and requests to share in OneDrive for Business.

Values:

On- Users without permission to share can trigger sharing requests to the OneDrive for Business owner when they attempt to share. Also, users without permission to a file or folder can trigger access requests to the OneDrive for Business owner when they attempt to access an item they do not have permissions to.

Off- Prevent access requests and requests to share on OneDrive for Business.

Unspecified- Let each OneDrive for Business owner enable or disable access requests and requests to share on their OneDrive.')]
    [System.Nullable[Microsoft.SharePoint.Client.SharingState]]
    ${ODBAccessRequests},

    [System.Nullable[bool]]
    ${PreventExternalUsersFromResharing},

    [System.Nullable[bool]]
    ${ShowPeoplePickerSuggestionsForGuestUsers},

    [System.Nullable[Microsoft.SharePoint.Client.AnonymousLinkType]]
    ${FileAnonymousLinkType},

    [System.Nullable[Microsoft.SharePoint.Client.AnonymousLinkType]]
    ${FolderAnonymousLinkType},

    [Parameter(HelpMessage='When this parameter is set to $true and another user re-shares a document from a user’’s OneDrive for Business, the OneDrive for Business owner is notified by e-mail.

For additional information about how to configure notifications for external sharing, see Configure notifications for external sharing for OneDrive for Business.

The values are $true and $false.')]
    [System.Nullable[bool]]
    ${NotifyOwnersWhenItemsReshared},

    [Parameter(HelpMessage='When this parameter is set to $true and when an external user accepts an invitation to a resource in a user’’s OneDrive for Business, the OneDrive for Business owner is notified by e-mail.

For additional information about how to configure notifications for external sharing, see Configure notifications for external sharing for OneDrive for Business.

The values are $true and $false.')]
    [System.Nullable[bool]]
    ${NotifyOwnersWhenInvitationsAccepted},

    [System.Nullable[bool]]
    ${NotificationsInOneDriveForBusinessEnabled},

    [System.Nullable[bool]]
    ${NotificationsInSharePointEnabled},

    [System.Nullable[bool]]
    ${OwnerAnonymousNotification},

    [System.Nullable[bool]]
    ${CommentsOnSitePagesDisabled},

    [System.Nullable[bool]]
    ${SocialBarOnSitePagesDisabled},

    [Parameter(HelpMessage='Specifies the number of days after a user''s Active Directory account is deleted that their OneDrive for Business content will be deleted.

The value range is in days, between 30 and 3650. The default value is 30.')]
    [System.Nullable[int]]
    ${OrphanedPersonalSitesRetentionPeriod},

    [Parameter(HelpMessage='Prevents the Download button from being displayed on the Virus Found warning page.

Accepts a value of true (enabled) to hide the Download button or false (disabled) to display the Download button. By default this feature is set to false.

')]
    [System.Nullable[bool]]
    ${DisallowInfectedFileDownload},

    [System.Nullable[Microsoft.Online.SharePoint.TenantManagement.SharingPermissionType]]
    ${DefaultLinkPermission},

    [System.Nullable[Microsoft.Online.SharePoint.TenantManagement.SPOConditionalAccessPolicyType]]
    ${ConditionalAccessPolicy},

    [System.Nullable[bool]]
    ${AllowDownloadingNonWebViewableFiles},

    [System.Nullable[bool]]
    ${AllowEditing},

    [System.Nullable[bool]]
    ${ApplyAppEnforcedRestrictionsToAdHocRecipients},

    [System.Nullable[bool]]
    ${FilePickerExternalImageSearchEnabled},

    [System.Nullable[bool]]
    ${EmailAttestationRequired},

    [System.Nullable[int]]
    ${EmailAttestationReAuthDays},

    [Parameter(HelpMessage='Defines if the default themes are visible or hidden')]
    [System.Nullable[bool]]
    ${HideDefaultThemes},

    [Parameter(HelpMessage='Guids of out of the box modern web part id''s to hide')]
    [guid[]]
    ${DisabledWebPartIds},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPTenantAppCatalogUrl
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, HelpMessage='The url of the site to set as the tenant scoped app catalog')]
    [string]
    ${Url},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPTenantCdnEnabled
{
    [CmdletBinding()]
param(
    [switch]
    ${NoDefaultOrigins},

    [Parameter(Mandatory=$true, HelpMessage='Specify to enable or disable')]
    [bool]
    ${Enable},

    [Parameter(Mandatory=$true, HelpMessage='The type of cdn to enable or disable')]
    [SharePointPnP.PowerShell.Commands.Enums.CdnType]
    ${CdnType},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPTenantCdnPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The type of cdn to retrieve the policies from')]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
    ${CdnType},

    [Parameter(Mandatory=$true, HelpMessage='The type of the policy to set')]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnPolicyType]
    ${PolicyType},

    [Parameter(Mandatory=$true, HelpMessage='The value of the policy to set')]
    [string]
    ${PolicyValue},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPTenantSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Specifies the URL of the site')]
    [string]
    ${Url},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies the title of the site')]
    [string]
    ${Title},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies what the sharing capabilities are for the site. Possible values: Disabled, ExternalUserSharingOnly, ExternalUserAndGuestSharing, ExistingExternalUserSharingOnly')]
    [Alias('Sharing')]
    [Microsoft.Online.SharePoint.TenantManagement.SharingCapabilities]
    ${SharingCapability},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Determines whether the Add And Customize Pages right is denied on the site collection. For more information about permission levels, see User permissions and permission levels in SharePoint.')]
    [Alias('NoScriptSite')]
    [switch]
    ${DenyAddAndCustomizePages},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies the language of this site collection. For more information, see Locale IDs Assigned by Microsoft (https://go.microsoft.com/fwlink/p/?LinkId=242911).')]
    [uint32]
    ${LocaleId},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies the storage quota for this site collection in megabytes. This value must not exceed the company''s available quota.')]
    [long]
    ${StorageMaximumLevel},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies the warning level for the storage quota in megabytes. This value must not exceed the values set for the StorageMaximumLevel parameter')]
    [long]
    ${StorageWarningLevel},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies the quota for this site collection in Sandboxed Solutions units. This value must not exceed the company''s aggregate available Sandboxed Solutions quota. The default value is 0. For more information, see Resource Usage Limits on Sandboxed Solutions in SharePoint 2010 : http://msdn.microsoft.com/en-us/library/gg615462.aspx.')]
    [Obsolete('Sandboxed solutions are obsolete')]
    [double]
    ${UserCodeMaximumLevel},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies the warning level for the resource quota. This value must not exceed the value set for the UserCodeMaximumLevel parameter')]
    [Obsolete('Sandboxed solutions are obsolete')]
    [double]
    ${UserCodeWarningLevel},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies if the site administrator can upgrade the site collection')]
    [switch]
    ${AllowSelfServiceUpgrade},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies owner(s) to add as site collection administrators. They will be added as additional site collection administrators. Existing administrators will stay. Can be both users and groups.')]
    [System.Collections.Generic.List[string]]
    ${Owners},

    [Parameter(ParameterSetName='Set Lock State', HelpMessage='Sets the lockstate of a site')]
    [System.Nullable[OfficeDevPnP.Core.SiteLockState]]
    ${LockState},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies the default link permission for the site collection. None - Respect the organization default link permission. View - Sets the default link permission for the site to "view" permissions. Edit - Sets the default link permission for the site to "edit" permissions')]
    [Microsoft.Online.SharePoint.TenantManagement.SharingPermissionType]
    ${DefaultLinkPermission},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies the default link type for the site collection. None - Respect the organization default sharing link type. AnonymousAccess - Sets the default sharing link for this site to an Anonymous Access or Anyone link. Internal - Sets the default sharing link for this site to the "organization" link or company shareable link. Direct - Sets the default sharing link for this site to the "Specific people" link')]
    [Microsoft.Online.SharePoint.TenantManagement.SharingLinkType]
    ${DefaultSharingLinkType},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies a list of email domains that is allowed for sharing with the external collaborators. Use the space character as the delimiter for entering multiple values. For example, "contoso.com fabrikam.com".')]
    [string]
    ${SharingAllowedDomainList},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies a list of email domains that is blocked for sharing with the external collaborators. Use the space character as the delimiter for entering multiple values. For example, "contoso.com fabrikam.com".')]
    [string]
    ${SharingBlockedDomainList},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies if non web viewable files can be downloaded.')]
    [switch]
    ${BlockDownloadOfNonViewableFiles},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies the external sharing mode for domains.')]
    [Microsoft.Online.SharePoint.TenantManagement.SharingDomainRestrictionModes]
    ${SharingDomainRestrictionMode},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='Specifies if comments on site pages are enabled')]
    [switch]
    ${CommentsOnSitePagesDisabled},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='-')]
    [Microsoft.Online.SharePoint.TenantAdministration.AppViewsPolicy]
    ${DisableAppViews},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='-')]
    [Microsoft.Online.SharePoint.TenantAdministration.CompanyWideSharingLinksPolicy]
    ${DisableCompanyWideSharingLinks},

    [Parameter(ParameterSetName='Set Properties', HelpMessage='-')]
    [Microsoft.Online.SharePoint.TenantAdministration.FlowsPolicy]
    ${DisableFlows},

    [Parameter(HelpMessage='Wait for the operation to complete')]
    [switch]
    ${Wait},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPTheme
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Specifies the Color Palette Url based on the site or server relative url')]
    [string]
    ${ColorPaletteUrl},

    [Parameter(HelpMessage='Specifies the Font Scheme Url based on the site or server relative url')]
    [string]
    ${FontSchemeUrl},

    [Parameter(HelpMessage='Specifies the Background Image Url based on the site or server relative url')]
    [string]
    ${BackgroundImageUrl},

    [Parameter(HelpMessage='true if the generated theme files should be placed in the root web, false to store them in this web. Default is false')]
    [Obsolete('This parameter is obsolete and its usage has no effect. Generated theme files will be placed in the root web by default.')]
    [switch]
    ${ShareGenerated},

    [Parameter(HelpMessage='Resets subwebs to inherit the theme from the rootweb')]
    [switch]
    ${ResetSubwebsToInherit},

    [Parameter(HelpMessage='Updates only the rootweb, even if subwebs are set to inherit the theme.')]
    [switch]
    ${UpdateRootWebOnly},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPTraceLog
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='On', Mandatory=$true, HelpMessage='Turn on tracing to log file')]
    [switch]
    ${On},

    [Parameter(ParameterSetName='On', HelpMessage='The path and filename of the file to write the trace log to.')]
    [string]
    ${LogFile},

    [Parameter(ParameterSetName='On', HelpMessage='Turn on console trace output.')]
    [switch]
    ${WriteToConsole},

    [Parameter(ParameterSetName='On', HelpMessage='The level of events to capture. Possible values are ''Debug'', ''Error'', ''Warning'', ''Information''. Defaults to ''Information''.')]
    [OfficeDevPnP.Core.Diagnostics.LogLevel]
    ${Level},

    [Parameter(ParameterSetName='On', HelpMessage='If specified the trace log entries will be delimited with this value.')]
    [string]
    ${Delimiter},

    [Parameter(ParameterSetName='On', HelpMessage='Indents in the tracelog will be with this amount of characters. Defaults to 4.')]
    [int]
    ${IndentSize},

    [Parameter(ParameterSetName='On', HelpMessage='Auto flush the trace log. Defaults to true.')]
    [bool]
    ${AutoFlush},

    [Parameter(ParameterSetName='Off', Mandatory=$true, HelpMessage='Turn off tracing to log file.')]
    [switch]
    ${Off})

}
function Set-PnPUnifiedGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The Identity of the Office 365 Group.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.UnifiedGroupPipeBind]
    ${Identity},

    [Parameter(HelpMessage='The DisplayName of the group to set.')]
    [string]
    ${DisplayName},

    [Parameter(HelpMessage='The Description of the group to set.')]
    [string]
    ${Description},

    [Parameter(HelpMessage='The array UPN values of owners to set to the group. Note: Will replace owners.')]
    [string[]]
    ${Owners},

    [Parameter(HelpMessage='The array UPN values of members to set to the group. Note: Will replace members.')]
    [string[]]
    ${Members},

    [Parameter(HelpMessage='Makes the group private when selected.')]
    [switch]
    ${IsPrivate},

    [Parameter(HelpMessage='The path to the logo file of to set.')]
    [string]
    ${GroupLogoPath},

    [Parameter(HelpMessage='Creates a MS Teams team associated with created group.')]
    [switch]
    ${CreateTeam})

}
function Set-PnPUserProfileProperty
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The account of the user, formatted either as a login name, or as a claims identity, e.g. i:0#.f|membership|user@domain.com')]
    [string]
    ${Account},

    [Parameter(Mandatory=$true, HelpMessage='The property to set, for instance SPS-Skills or SPS-Location')]
    [string]
    ${PropertyName},

    [Parameter(ParameterSetName='Single', Mandatory=$true, HelpMessage='The value to set in the case of a single value property')]
    [AllowEmptyString()]
    [AllowNull()]
    [string]
    ${Value},

    [Parameter(ParameterSetName='Multi', Mandatory=$true, HelpMessage='The values set in the case of a multi value property, e.g. "Value 1","Value 2"')]
    [AllowEmptyString()]
    [AllowNull()]
    [string[]]
    ${Values},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPView
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, HelpMessage='The Id, Title or Url of the list')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The Id, Title or instance of the view')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ViewPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Hashtable of properties to update on the view. Use the syntax @{property1="value";property2="value"}.')]
    [hashtable]
    ${Values},

    [Parameter(HelpMessage='An array of fields to use in the view. Notice that specifying this value will remove the existing fields')]
    [string[]]
    ${Fields},

    [Parameter(HelpMessage='A valid XML fragment containing one or more Aggregations')]
    [string]
    ${Aggregations},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPWeb
{
    [CmdletBinding()]
param(
    [Parameter(HelpMessage='Sets the logo of the web to the current url. If you want to set the logo to a modern team site, use Set-PnPSite -LogoFilePath.')]
    [string]
    ${SiteLogoUrl},

    [string]
    ${AlternateCssUrl},

    [string]
    ${Title},

    [string]
    ${Description},

    [string]
    ${MasterUrl},

    [string]
    ${CustomMasterUrl},

    [Microsoft.SharePoint.Client.HeaderLayoutType]
    ${HeaderLayout},

    [Microsoft.SharePoint.Client.SPVariantThemeType]
    ${HeaderEmphasis},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPWebhookSubscription
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The identity of the Webhook subscription to update')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebhookSubscriptionPipeBind]
    ${Subscription},

    [Parameter(HelpMessage='The list object or name from which the Webhook subscription will be modified')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(HelpMessage='The URL of the Webhook endpoint that will be notified of the change')]
    [string]
    ${NotificationUrl},

    [Parameter(HelpMessage='The date at which the Webhook subscription will expire. (Default: 6 months from today)')]
    [datetime]
    ${ExpirationDate},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPWebPartProperty
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Full server relative url of the web part page, e.g. /sites/demo/sitepages/home.aspx')]
    [Alias('PageUrl')]
    [string]
    ${ServerRelativePageUrl},

    [Parameter(Mandatory=$true, HelpMessage='The Guid of the web part')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${Identity},

    [Parameter(Mandatory=$true, HelpMessage='Name of a single property to be set')]
    [string]
    ${Key},

    [Parameter(Mandatory=$true, HelpMessage='Value of the property to be set')]
    [psobject]
    ${Value},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPWebPermission
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='GroupByWebIdentity', Mandatory=$true, ValueFromPipeline=$true, HelpMessage='Identity/Id/Web object')]
    [Parameter(ParameterSetName='UserByWebIdentity', Mandatory=$true, ValueFromPipeline=$true, HelpMessage='Identity/Id/Web object')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Identity},

    [Parameter(ParameterSetName='GroupByWebUrl', Mandatory=$true, HelpMessage='The site relative url of the web, e.g. ''Subweb1''')]
    [Parameter(ParameterSetName='UserByWebUrl', Mandatory=$true, HelpMessage='The site relative url of the web, e.g. ''Subweb1''')]
    [string]
    ${Url},

    [Parameter(ParameterSetName='Group', Mandatory=$true)]
    [Parameter(ParameterSetName='GroupByWebIdentity', Mandatory=$true)]
    [Parameter(ParameterSetName='GroupByWebUrl', Mandatory=$true)]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
    ${Group},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='UserByWebIdentity', Mandatory=$true)]
    [Parameter(ParameterSetName='UserByWebUrl', Mandatory=$true)]
    [string]
    ${User},

    [Parameter(HelpMessage='The role that must be assigned to the group or user')]
    [string[]]
    ${AddRole},

    [Parameter(HelpMessage='The role that must be removed from the group or user')]
    [string[]]
    ${RemoveRole},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPWebTheme
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true, HelpMessage='Specifies the Color Palette Url based on the site or server relative url')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ThemePipeBind]
    ${Theme},

    [Parameter(HelpMessage='The URL of the web to apply the theme to. If not specified it will default to the current web based upon the URL specified with Connect-PnPOnline.')]
    [string]
    ${WebUrl},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Set-PnPWikiPageContent
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='STRING', Mandatory=$true)]
    [string]
    ${Content},

    [Parameter(ParameterSetName='FILE', Mandatory=$true)]
    [string]
    ${Path},

    [Parameter(ParameterSetName='FILE', Mandatory=$true, HelpMessage='Site Relative Page Url')]
    [Parameter(ParameterSetName='STRING', Mandatory=$true, HelpMessage='Site Relative Page Url')]
    [Alias('PageUrl')]
    [string]
    ${ServerRelativePageUrl},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Start-PnPWorkflowInstance
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, HelpMessage='The workflow subscription to start')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WorkflowSubscriptionPipeBind]
    ${Subscription},

    [Parameter(Mandatory=$true, Position=1, HelpMessage='The list item to start the workflow against')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
    ${ListItem},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Stop-PnPWorkflowInstance
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, HelpMessage='The instance to stop')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WorkflowInstancePipeBind]
    ${Identity},

    [Parameter(HelpMessage='Forcefully terminate the workflow instead of cancelling. Works on errored and non-responsive workflows. Deletes all created tasks. Does not notify participants.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Submit-PnPSearchQuery
{
    [CmdletBinding(DefaultParameterSetName='Limit')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Search query in Keyword Query Language (KQL).')]
    [string]
    ${Query},

    [Parameter(ParameterSetName='Limit', HelpMessage='Search result item to start returning the results from. Useful for paging. Leave at 0 to return all results.')]
    [int]
    ${StartRow},

    [Parameter(ParameterSetName='Limit', HelpMessage='Maximum amount of search results to return. Default and max per page is 500 search results.')]
    [ValidateRange(0, 500)]
    [int]
    ${MaxResults},

    [Parameter(ParameterSetName='All', HelpMessage='Automatically page results until the end to get more than 500. Use with caution!')]
    [switch]
    ${All},

    [Parameter(HelpMessage='Specifies whether near duplicate items should be removed from the search results.')]
    [bool]
    ${TrimDuplicates},

    [Parameter(HelpMessage='Extra query properties. Can for example be used for Office Graph queries.')]
    [hashtable]
    ${Properties},

    [Parameter(HelpMessage='The list of refiners to be returned in a search result.')]
    [string]
    ${Refiners},

    [Parameter(HelpMessage='The locale for the query.')]
    [int]
    ${Culture},

    [Parameter(HelpMessage='Specifies the query template that is used at run time to transform the query based on user input.')]
    [string]
    ${QueryTemplate},

    [Parameter(HelpMessage='The list of properties to return in the search results.')]
    [string[]]
    ${SelectProperties},

    [Parameter(HelpMessage='The set of refinement filters used.')]
    [string[]]
    ${RefinementFilters},

    [Parameter(HelpMessage='The list of properties by which the search results are ordered.')]
    [hashtable]
    ${SortList},

    [Parameter(HelpMessage='The identifier (ID) of the ranking model to use for the query.')]
    [string]
    ${RankingModelId},

    [Parameter(HelpMessage='Specifies the name of the client which issued the query.')]
    [string]
    ${ClientType},

    [Parameter(HelpMessage='Limit the number of items per the collapse specification. See https://docs.microsoft.com/en-us/sharepoint/dev/general-development/customizing-search-results-in-sharepoint#collapse-similar-search-results-using-the-collapsespecification-property for more information.')]
    [string]
    ${CollapseSpecification},

    [Parameter(HelpMessage='The keyword query’’s hidden constraints.')]
    [string]
    ${HiddenConstraints},

    [Parameter(HelpMessage='The identifier for the search query time zone.')]
    [int]
    ${TimeZoneId},

    [Parameter(HelpMessage='Specifies whether the phonetic forms of the query terms are used to find matches.')]
    [bool]
    ${EnablePhonetic},

    [Parameter(HelpMessage='Specifies whether stemming is enabled.')]
    [bool]
    ${EnableStemming},

    [Parameter(HelpMessage='Specifies whether Query Rules are enabled for this query.')]
    [bool]
    ${EnableQueryRules},

    [Parameter(HelpMessage='Specifies the identifier (ID or name) of the result source to be used to run the query.')]
    [guid]
    ${SourceId},

    [Parameter(HelpMessage='Determines whether Best Bets are enabled.')]
    [bool]
    ${ProcessBestBets},

    [Parameter(HelpMessage='Determines whether personal favorites data is processed or not.')]
    [bool]
    ${ProcessPersonalFavorites},

    [Parameter(HelpMessage='Specifies whether only relevant results are returned')]
    [switch]
    ${RelevantResults},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Sync-PnPAppToTeams
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Specifies the Id of the Addin Instance')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Test-PnPListItemIsRecord
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='The ID, Title or Url of the list.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
    ${List},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='The ID of the listitem, or actual ListItem object')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
    ${Identity},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Test-PnPOffice365GroupAliasIsUsed
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='Specifies the alias of the group. Cannot contain spaces.')]
    [string]
    ${Alias},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Test-PnPTenantTemplate
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, HelpMessage='The in-memory template to test')]
    [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningHierarchy]
    ${Template},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Uninstall-PnPApp
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Specifies the Id of the Addin Instance')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Defines which app catalog to use. Defaults to Tenant')]
    [OfficeDevPnP.Core.Enums.AppCatalogScope]
    ${Scope},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Uninstall-PnPAppInstance
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, HelpMessage='Appinstance or Id of the addin to remove.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.AppPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Do not ask for confirmation.')]
    [switch]
    ${Force},

    [Parameter(HelpMessage='This parameter allows you to optionally apply the cmdlet action to a subweb within the current web. In most situations this parameter is not required and you can connect to the subweb using Connect-PnPOnline instead. Specify the GUID, server relative url (i.e. /sites/team1) or web instance of the web to apply the command to. Omit this parameter to use the current web.')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
    ${Web},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Uninstall-PnPSolution
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='ID of the solution, from the solution manifest')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
    ${PackageId},

    [Parameter(Mandatory=$true, HelpMessage='Filename of the WSP file to uninstall')]
    [string]
    ${PackageName},

    [Parameter(HelpMessage='Optional major version of the solution, defaults to 1')]
    [int]
    ${MajorVersion},

    [Parameter(HelpMessage='Optional minor version of the solution, defaults to 0')]
    [int]
    ${MinorVersion},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Unpublish-PnPApp
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Specifies the Id of the Addin Instance')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Defines which app catalog to use. Defaults to Tenant')]
    [OfficeDevPnP.Core.Enums.AppCatalogScope]
    ${Scope},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Unregister-PnPHubSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, HelpMessage='The site to unregister as a hubsite')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
    ${Site},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Update-PnPApp
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, HelpMessage='Specifies the Id or an actual app metadata instance')]
    [SharePointPnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
    ${Identity},

    [Parameter(HelpMessage='Defines which app catalog to use. Defaults to Tenant')]
    [OfficeDevPnP.Core.Enums.AppCatalogScope]
    ${Scope},

    [Parameter(HelpMessage='Optional connection to be used by the cmdlet. Retrieve the value for this parameter by either specifying -ReturnConnection on Connect-PnPOnline or by executing Get-PnPConnection.')]
    [SharePointPnP.PowerShell.Commands.Base.SPOnlineConnection]
    ${Connection})

}
function Update-PnPSiteClassification
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='Settings', Mandatory=$true, HelpMessage='A settings object retrieved by Get-PnPSiteClassification')]
    [OfficeDevPnP.Core.Framework.Graph.Model.SiteClassificationsSettings]
    ${Settings},

    [Parameter(ParameterSetName='Specific', HelpMessage='A list of classifications, separated by commas. E.g. "HBI","LBI","Top Secret"')]
    [System.Collections.Generic.List[string]]
    ${Classifications},

    [Parameter(ParameterSetName='Specific', HelpMessage='The default classification to be used. The value needs to be present in the list of possible classifications')]
    [string]
    ${DefaultClassification},

    [Parameter(ParameterSetName='Specific', HelpMessage='The UsageGuidelinesUrl. Set to "" to clear.')]
    [string]
    ${UsageGuidelinesUrl})

}
#endregion
#region PowerPlatforms
function Add-AdminPowerAppsSyncUser
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${PrincipalObjectId},

    [Parameter(ParameterSetName='User')]
    [string]
    ${ApiVersion})

}
function Add-AllowedConsentPlans
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [ValidateSet('Internal','Viral')]
    [string[]]
    ${Types},

    [Parameter(Position=1)]
    [string]
    ${ApiVersion})

}
function Add-ConnectorToBusinessDataGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${PolicyName},

    [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(Position=2)]
    [string]
    ${EnvironmentName},

    [Parameter(Position=3)]
    [string]
    ${ApiVersion})

}
function Add-CustomConnectorToPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${PolicyName},

    [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(Mandatory=$true, Position=2, ValueFromPipelineByPropertyName=$true)]
    [ValidateSet('lbi','hbi')]
    [string]
    ${GroupName},

    [Parameter(Mandatory=$true, Position=3, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorId},

    [Parameter(Mandatory=$true, Position=4, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorType},

    [Parameter(Position=5)]
    [string]
    ${EnvironmentName},

    [Parameter(Position=6)]
    [string]
    ${ApiVersion})

}
function Add-PowerAppsAccount
{
    [CmdletBinding()]
param(
    [Parameter(Position=0)]
    [string]
    ${Audience},

    [Parameter(Position=1)]
    [ValidateSet('prod','preview','tip1','tip2','usgov','usgovhigh')]
    [string]
    ${Endpoint},

    [Parameter(Position=2)]
    [string]
    ${Username},

    [Parameter(Position=3)]
    [securestring]
    ${Password},

    [Parameter(Position=4)]
    [string]
    ${TenantID},

    [Parameter(Position=5)]
    [string]
    ${CertificateThumbprint},

    [Parameter(Position=6)]
    [string]
    ${ClientSecret},

    [Parameter(Position=7)]
    [string]
    ${ApplicationId})

}
function Clear-AdminPowerAppApisToBypassConsent
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='Name')]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${ApiVersion},

    [Parameter(ParameterSetName='Filter')]
    [bool]
    ${ForceLease})

}
function Clear-AdminPowerAppAsFeatured
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='Name')]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${ApiVersion},

    [Parameter(ParameterSetName='Filter')]
    [bool]
    ${ForceLease})

}
function Clear-AdminPowerAppAsHero
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='Name')]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${ApiVersion},

    [Parameter(ParameterSetName='Filter')]
    [bool]
    ${ForceLease})

}
function Disable-AdminFlow
{
    [CmdletBinding(DefaultParameterSetName='Flow')]
param(
    [Parameter(ParameterSetName='Flow', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Flow', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FlowName},

    [Parameter(ParameterSetName='Flow')]
    [string]
    ${ApiVersion})

}
function Enable-AdminFlow
{
    [CmdletBinding(DefaultParameterSetName='Flow')]
param(
    [Parameter(ParameterSetName='Flow', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Flow', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FlowName},

    [Parameter(ParameterSetName='Flow')]
    [string]
    ${ApiVersion})

}
function Get-AdminDeletedPowerAppsList
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(Position=1)]
    [string]
    ${ApiVersion})

}
function Get-AdminDlpPolicy
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Filter', Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='Filter', Position=1, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Name', Position=1, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${PolicyName},

    [string]
    ${CreatedBy},

    [Parameter(ParameterSetName='Name')]
    [Parameter(ParameterSetName='Filter')]
    [System.Object]
    ${ApiVersion})

}
function Get-AdminFlow
{
    [CmdletBinding(DefaultParameterSetName='Filter')]
param(
    [Parameter(ParameterSetName='Filter', Position=0)]
    [string[]]
    ${Filter},

    [Parameter(ParameterSetName='User', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Filter', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='App', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FlowName},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [string]
    ${CreatedBy},

    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='Filter')]
    [Parameter(ParameterSetName='App')]
    [string]
    ${ApiVersion})

}
function Get-AdminFlowOwnerRole
{
    [CmdletBinding(DefaultParameterSetName='Flow')]
param(
    [Parameter(ParameterSetName='Environment', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Flow', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Flow', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FlowName},

    [Parameter(ParameterSetName='Environment', Mandatory=$true)]
    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='Flow')]
    [string]
    ${Owner},

    [Parameter(ParameterSetName='Environment')]
    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='Flow')]
    [string]
    ${ApiVersion})

}
function Get-AdminFlowUserDetails
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${UserId},

    [Parameter(ParameterSetName='Name', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ApiVersion})

}
function Get-AdminPowerApp
{
    [CmdletBinding(DefaultParameterSetName='Filter')]
param(
    [Parameter(ParameterSetName='User', Position=0)]
    [Parameter(ParameterSetName='Filter', Position=0)]
    [string[]]
    ${Filter},

    [Parameter(ParameterSetName='User', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Filter', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${Owner},

    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='Filter')]
    [Parameter(ParameterSetName='App')]
    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppCdsAdditionalNotificationEmails
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${EnvironmentName},

    [Parameter(Position=1)]
    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppCdsDatabaseCurrencies
{
    [CmdletBinding()]
param(
    [Parameter(Position=0)]
    [string[]]
    ${Filter},

    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${LocationName},

    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppCdsDatabaseLanguages
{
    [CmdletBinding()]
param(
    [Parameter(Position=0)]
    [string[]]
    ${Filter},

    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${LocationName},

    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppCdsDatabaseTemplates
{
    [CmdletBinding()]
param(
    [Parameter(Position=0)]
    [string[]]
    ${Filter},

    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${LocationName},

    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppConnection
{
    [CmdletBinding(DefaultParameterSetName='Filter')]
param(
    [Parameter(ParameterSetName='User', Position=0)]
    [Parameter(ParameterSetName='Filter', Position=0)]
    [string[]]
    ${Filter},

    [Parameter(ParameterSetName='User', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Filter', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Connector', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Connector', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${CreatedBy},

    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='Filter')]
    [Parameter(ParameterSetName='Connector')]
    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppConnectionReferences
{
    [CmdletBinding(DefaultParameterSetName='Connector')]
param(
    [Parameter(ParameterSetName='Connector', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Connector', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName})

}
function Get-AdminPowerAppConnectionRoleAssignment
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectionName},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [string]
    ${PrincipalObjectId},

    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppConnector
{
    [CmdletBinding(DefaultParameterSetName='Filter')]
param(
    [Parameter(ParameterSetName='User', Position=0)]
    [Parameter(ParameterSetName='Filter', Position=0)]
    [string[]]
    ${Filter},

    [Parameter(ParameterSetName='User', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Filter', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Connector', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Connector', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${CreatedBy},

    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='Filter')]
    [Parameter(ParameterSetName='Connector')]
    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppConnectorRoleAssignment
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(Position=1, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(Position=2)]
    [string]
    ${PrincipalObjectId},

    [Parameter(Position=3)]
    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppEnvironment
{
    [CmdletBinding(DefaultParameterSetName='Filter')]
param(
    [Parameter(ParameterSetName='User', Position=0)]
    [Parameter(ParameterSetName='Filter', Position=0)]
    [string[]]
    ${Filter},

    [Parameter(ParameterSetName='Name', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Default')]
    [switch]
    ${Default},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${CreatedBy},

    [Parameter(ParameterSetName='Name')]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${ApiVersion},

    [Parameter(ParameterSetName='Name')]
    [Parameter(ParameterSetName='Filter')]
    [bool]
    ${ReturnCdsDatabaseType})

}
function Get-AdminPowerAppEnvironmentLocations
{
    [CmdletBinding()]
param(
    [Parameter(Position=0)]
    [string[]]
    ${Filter},

    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppEnvironmentRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='User', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Environment', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='Environment')]
    [string]
    ${UserId},

    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='Environment')]
    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppLicenses
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${OutputFilePath},

    [Parameter(Position=1)]
    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='Environment', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='Environment', Mandatory=$true)]
    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='App')]
    [string]
    ${UserId},

    [Parameter(ParameterSetName='Environment')]
    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='App')]
    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppSoftDeletedEnvironment
{
    [CmdletBinding(DefaultParameterSetName='Filter')]
param(
    [Parameter(ParameterSetName='Filter', Position=0)]
    [string[]]
    ${Filter},

    [Parameter(ParameterSetName='Name')]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppsUserDetails
{
    [CmdletBinding()]
param(
    [Parameter(Position=0)]
    [string]
    ${UserPrincipalName},

    [Parameter(Mandatory=$true, Position=1)]
    [string]
    ${OutputFilePath},

    [Parameter(Position=2)]
    [string]
    ${ApiVersion})

}
function Get-AdminRecoverDeletedPowerApp
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(Position=2)]
    [string]
    ${ApiVersion})

}
function Get-AllowedConsentPlans
{
    [CmdletBinding()]
param(
    [Parameter(Position=0)]
    [string]
    ${ApiVersion})

}
function Get-DlpPolicy
{

param()

}
function Get-JwtToken
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Audience})

}
function Get-TenantDetailsFromGraph
{

param(
    [string]
    ${GraphApiVersion})

}
function Get-TenantSettings
{
    [CmdletBinding()]
param(
    [Parameter(Position=0)]
    [string]
    ${ApiVersion})

}
function Get-UsersOrGroupsFromGraph
{
    [CmdletBinding(DefaultParameterSetName='Id')]
param(
    [Parameter(ParameterSetName='Id', Mandatory=$true)]
    [string]
    ${ObjectId},

    [Parameter(ParameterSetName='Search', Mandatory=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='Id')]
    [Parameter(ParameterSetName='Search')]
    [string]
    ${GraphApiVersion})

}
function InvokeApi
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Method},

    [Parameter(Mandatory=$true, Position=1)]
    [string]
    ${Route},

    [Parameter(Position=2)]
    [System.Object]
    ${Body},

    [switch]
    ${ThrowOnFailure},

    [Parameter(Position=3)]
    [string]
    ${ApiVersion})

}
function InvokeApiNoParseContent
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Method},

    [Parameter(Mandatory=$true, Position=1)]
    [string]
    ${Route},

    [Parameter(Position=2)]
    [System.Object]
    ${Body},

    [switch]
    ${ThrowOnFailure},

    [Parameter(Position=3)]
    [string]
    ${ApiVersion})

}
function New-AdminDlpPolicy
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='Name', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Name')]
    [bool]
    ${BlockNonBusinessDataGroup},

    [Parameter(ParameterSetName='Name')]
    [string]
    ${ApiVersion},

    [Parameter(ParameterSetName='Name')]
    [ValidateSet('2016-10-01-preview','2018-11-01')]
    [string]
    ${SchemaVersion})

}
function New-AdminPowerAppCdsDatabase
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${CurrencyName},

    [Parameter(Mandatory=$true, Position=2, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${LanguageName},

    [Parameter(Position=3)]
    [bool]
    ${WaitUntilFinished},

    [Parameter(Position=4)]
    [string[]]
    ${Templates},

    [Parameter(Position=5)]
    [string]
    ${SecurityGroupId},

    [Parameter(Position=6)]
    [string]
    ${DomainName},

    [Parameter(Position=7, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ApiVersion})

}
function New-AdminPowerAppEnvironment
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='Name')]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${LocationName},

    [Parameter(ParameterSetName='Name', Mandatory=$true)]
    [ValidateSet('Trial','Sandbox','Production')]
    [string]
    ${EnvironmentSku},

    [switch]
    ${ProvisionDatabase},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${CurrencyName},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${LanguageName},

    [string[]]
    ${Templates},

    [string]
    ${SecurityGroupId},

    [string]
    ${DomainName},

    [bool]
    ${WaitUntilFinished},

    [string]
    ${ApiVersion})

}
function New-DlpPolicy
{

param()

}
function Recover-AdminPowerAppEnvironment
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [bool]
    ${WaitUntilFinished},

    [Parameter(ParameterSetName='Name')]
    [string]
    ${ApiVersion})

}
function Remove-AdminDlpPolicy
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${PolicyName},

    [Parameter(ParameterSetName='Name')]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Name')]
    [string]
    ${ApiVersion})

}
function Remove-AdminFlow
{
    [CmdletBinding(DefaultParameterSetName='Flow')]
param(
    [Parameter(ParameterSetName='Flow', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Flow', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FlowName},

    [Parameter(ParameterSetName='Flow')]
    [string]
    ${ApiVersion})

}
function Remove-AdminFlowApprovals
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(Position=1)]
    [string]
    ${ApiVersion})

}
function Remove-AdminFlowOwnerRole
{
    [CmdletBinding(DefaultParameterSetName='Owner')]
param(
    [Parameter(ParameterSetName='Owner')]
    [string]
    ${ApiVersion},

    [Parameter(ParameterSetName='Owner', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FlowName},

    [Parameter(ParameterSetName='Owner', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Owner', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RoleId})

}
function Remove-AdminFlowUserDetails
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${UserId},

    [Parameter(ParameterSetName='Name', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ApiVersion})

}
function Remove-AdminPowerApp
{
    [CmdletBinding(DefaultParameterSetName='App')]
param(
    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='App')]
    [string]
    ${ApiVersion})

}
function Remove-AdminPowerAppConnection
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectionName},

    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Name')]
    [string]
    ${ApiVersion})

}
function Remove-AdminPowerAppConnectionRoleAssignment
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectionName},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RoleId},

    [string]
    ${ApiVersion})

}
function Remove-AdminPowerAppConnector
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Name')]
    [string]
    ${ApiVersion})

}
function Remove-AdminPowerAppConnectorRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RoleId},

    [Parameter(ParameterSetName='Tenant')]
    [Parameter(ParameterSetName='User')]
    [string]
    ${ApiVersion})

}
function Remove-AdminPowerAppEnvironment
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Name')]
    [string]
    ${ApiVersion})

}
function Remove-AdminPowerAppEnvironmentRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='App')]
param(
    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RoleId},

    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='App')]
    [string]
    ${ApiVersion})

}
function Remove-AdminPowerAppRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='App')]
param(
    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RoleId},

    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='App')]
    [string]
    ${ApiVersion})

}
function Remove-AllowedConsentPlans
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [ValidateSet('Internal','Viral')]
    [string[]]
    ${Types},

    [Parameter(Position=1)]
    [bool]
    ${Prompt},

    [Parameter(Position=2)]
    [string]
    ${ApiVersion})

}
function Remove-ConnectorFromBusinessDataGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${PolicyName},

    [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(Position=2)]
    [string]
    ${EnvironmentName},

    [Parameter(Position=3)]
    [string]
    ${ApiVersion})

}
function Remove-CustomConnectorFromPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${PolicyName},

    [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(Position=2)]
    [string]
    ${EnvironmentName},

    [Parameter(Position=3)]
    [string]
    ${ApiVersion})

}
function Remove-DlpPolicy
{

param()

}
function Remove-LegacyCDSDatabase
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${EnvironmentName},

    [Parameter(Mandatory=$true, Position=1)]
    [string]
    ${DatabaseId})

}
function Remove-PowerAppsAccount
{
    [CmdletBinding()]
param()

}
function ReplaceMacro
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [string]
    ${Input},

    [Parameter(Mandatory=$true, Position=1)]
    [string]
    ${Macro},

    [Parameter(Position=2)]
    [string]
    ${Value})

}
function Select-CurrentEnvironment
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Default', Mandatory=$true)]
    [switch]
    ${Default})

}
function Set-AdminDlpPolicy
{
    [CmdletBinding(DefaultParameterSetName='TenantPolicy')]
param(
    [Parameter(ParameterSetName='EnvironmentPolicy', Mandatory=$true)]
    [Parameter(ParameterSetName='TenantPolicy', Mandatory=$true)]
    [string]
    ${PolicyName},

    [Parameter(ParameterSetName='TenantPolicy')]
    [ValidateSet('None','Include','Exclude')]
    [string]
    ${FilterType},

    [Parameter(ParameterSetName='TenantPolicy')]
    [string]
    ${Environments},

    [Parameter(ParameterSetName='EnvironmentPolicy')]
    [Parameter(ParameterSetName='TenantPolicy')]
    [ValidateSet('hbi','lbi')]
    [string]
    ${DefaultGroup},

    [Parameter(ParameterSetName='EnvironmentPolicy', Mandatory=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='EnvironmentPolicy')]
    [Parameter(ParameterSetName='TenantPolicy')]
    [ValidateSet('Block','Unblock')]
    [string]
    ${SetNonBusinessDataGroupState},

    [string]
    ${ApiVersion},

    [ValidateSet('2016-11-01-preview','2018-11-01')]
    [string]
    ${SchemaVersion})

}
function Set-AdminFlowOwnerRole
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FlowName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [ValidateSet('User','Group')]
    [string]
    ${PrincipalType},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [ValidateSet('CanView','CanEdit')]
    [string]
    ${RoleName},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [string]
    ${PrincipalObjectId},

    [Parameter(ParameterSetName='User')]
    [string]
    ${ApiVersion})

}
function Set-AdminPowerAppApisToBypassConsent
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='Name')]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${ApiVersion},

    [Parameter(ParameterSetName='Filter')]
    [bool]
    ${ForceLease})

}
function Set-AdminPowerAppAsFeatured
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='Name')]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${ApiVersion},

    [Parameter(ParameterSetName='Filter')]
    [bool]
    ${ForceLease})

}
function Set-AdminPowerAppAsHero
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='Name')]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${ApiVersion},

    [Parameter(ParameterSetName='Filter')]
    [bool]
    ${ForceLease})

}
function Set-AdminPowerAppCdsAdditionalNotificationEmails
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${EnvironmentName},

    [Parameter(Mandatory=$true, Position=1)]
    [string[]]
    ${AdditionalNotificationEmails},

    [Parameter(Position=2)]
    [string]
    ${ApiVersion})

}
function Set-AdminPowerAppConnectionRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='User', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectionName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateSet('CanView','CanViewWithShare','CanEdit')]
    [string]
    ${RoleName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateSet('User','Group','Tenant')]
    [string]
    ${PrincipalType},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='Tenant')]
    [string]
    ${PrincipalObjectId},

    [Parameter(ParameterSetName='Tenant')]
    [Parameter(ParameterSetName='User')]
    [string]
    ${ApiVersion})

}
function Set-AdminPowerAppConnectorRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateSet('CanView','CanViewWithShare','CanEdit')]
    [string]
    ${RoleName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateSet('User','Group','Tenant')]
    [string]
    ${PrincipalType},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='Tenant')]
    [string]
    ${PrincipalObjectId},

    [Parameter(ParameterSetName='Tenant')]
    [Parameter(ParameterSetName='User')]
    [string]
    ${ApiVersion})

}
function Set-AdminPowerAppEnvironmentDisplayName
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Name', Mandatory=$true)]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='Name')]
    [string]
    ${ApiVersion})

}
function Set-AdminPowerAppEnvironmentRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateSet('EnvironmentAdmin','EnvironmentMaker')]
    [string]
    ${RoleName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateSet('User','Group','Tenant')]
    [string]
    ${PrincipalType},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='Tenant')]
    [string]
    ${PrincipalObjectId},

    [Parameter(ParameterSetName='Tenant')]
    [Parameter(ParameterSetName='User')]
    [string]
    ${ApiVersion})

}
function Set-AdminPowerAppOwner
{
    [CmdletBinding(DefaultParameterSetName='App')]
param(
    [Parameter(ParameterSetName='App')]
    [string]
    ${ApiVersion},

    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='App', Mandatory=$true)]
    [string]
    ${AppOwner})

}
function Set-AdminPowerAppRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true)]
    [ValidateSet('CanView','CanViewWithShare','CanEdit')]
    [string]
    ${RoleName},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true)]
    [ValidateSet('User','Group','Tenant')]
    [string]
    ${PrincipalType},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='Tenant')]
    [string]
    ${PrincipalObjectId},

    [Parameter(ParameterSetName='Tenant')]
    [Parameter(ParameterSetName='User')]
    [string]
    ${ApiVersion})

}
function Set-DlpPolicy
{

param()

}
function Set-TenantSettings
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [System.Object]
    ${RequestBody},

    [Parameter(Position=1)]
    [string]
    ${ApiVersion})

}
function Test-PowerAppsAccount
{
    [CmdletBinding()]
param()

}
#endregion
#region SecurityComplianceCenter
function Add-ComplianceCaseMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Case},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Member},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Add-eDiscoveryCaseAdmin
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Add-RoleGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Member},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Delete-QuarantineMessage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identities},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-ComplianceTagStorage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Execute-AzureAdLabelSync
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Execute-UnifiedPolicyCmdletBatch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${CmdletData},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ExecutionId},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MigrationId},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Export-FilePlanProperty
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Export-QuarantineMessage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identities},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ActivityAlert
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AdminAuditLogConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AuditConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DomainController},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AuditConfigurationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-AuditConfigurationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CaseHoldPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Case},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${IncludeBindings},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${DistributionDetail},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CaseHoldRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Policy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ComplianceCase
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CaseType},

    [System.Object]
    ${RoleGroup},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${RecentOnly},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ComplianceCaseMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Case},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${ShowCaseAdmin},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ComplianceCaseStatistics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CaseType},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ComplianceRetentionEvent
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${BeginDateTime},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${PreviewOnly},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${EndDateTime},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ComplianceRetentionEventType
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${LoadTag},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ComplianceSearch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Case},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ComplianceSearchAction
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Case},

    [switch]
    ${Purge},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${IncludeCredential},

    [switch]
    ${Details},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Export},

    [switch]
    ${Preview},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ComplianceSecurityFilter
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FilterName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ComplianceTag
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${IncludingLabelState},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ComplianceTagStorage
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DataRetentionReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceDetailsReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Expression},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${DeviceUserName},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DeviceComplianceStatus},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DevicePlatform},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DeviceCompliancePolicy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceDetailsReportFilter
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceCompliancePolicyInventory
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Expression},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceReportDate
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Expression},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceSummaryReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Expression},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${DeviceUserName},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DeviceComplianceStatus},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DevicePlatform},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DeviceCompliancePolicy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceUserInventory
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Expression},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceUserReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Expression},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DeviceId},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DeviceConditionalAccessPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceConditionalAccessRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${CompareToWorkload},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DeviceConfigurationPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceConfigurationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${CompareToWorkload},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DevicePolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceTenantPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceTenantRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DlpCompliancePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${DistributionDetail},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DlpComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Policy},

    [System.Object]
    ${IncludeExecutionRuleGuids},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DlpDetectionsReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Source},

    [System.Object]
    ${Page},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${DlpCompliancePolicy},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [System.Object]
    ${Expression},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DlpComplianceRule},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${SummarizeBy},

    [switch]
    ${AsJob})

}
function Get-DlpEdmSchema
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DlpKeywordDictionary
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DlpSensitiveInformationType
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DlpSensitiveInformationTypeConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DlpSensitiveInformationTypeRulePackage
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DlpSiDetectionsReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SensitiveType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-eDiscoveryCaseAdmin
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-FilePlanPropertyAuthority
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-FilePlanPropertyCategory
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-FilePlanPropertyCitation
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-FilePlanPropertyDepartment
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-FilePlanPropertyReferenceId
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-FilePlanPropertyStructure
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${IncludeAdditionalInfo},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-FilePlanPropertySubCategory
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-Group
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RecipientTypeDetails},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-HoldCompliancePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${DistributionDetail},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-HoldComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Policy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-InformationBarrierPoliciesApplicationStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${All},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-InformationBarrierPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExoPolicyId},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-InformationBarrierRecipientStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Identity2},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-InformationBarrierReportDetails
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Source},

    [System.Object]
    ${Page},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [System.Object]
    ${TargetUsers},

    [System.Object]
    ${InformationBarrierPolicy},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${InitiatingUser},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-InformationBarrierReportSummary
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Source},

    [System.Object]
    ${Page},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [System.Object]
    ${TargetUsers},

    [System.Object]
    ${InformationBarrierPolicy},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${InitiatingUser},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-InsiderRiskPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${DistributionDetail},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-Label
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-LabelPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-LabelPolicyRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Policy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-LongTermAuditItems
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Workload},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${LtaAddress},

    [System.Object]
    ${PageOffset},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${LabelId},

    [switch]
    ${AsJob})

}
function Get-LongTermAuditStats
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${LtaAddress},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-MailFilterListReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Expression},

    [System.Object]
    ${SelectionTarget},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Domain},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ManagementRole
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RoleType},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${CmdletParameters},

    [System.Object]
    ${ScriptParameters},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Cmdlet},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Script},

    [switch]
    ${GetChildren},

    [switch]
    ${Recurse},

    [switch]
    ${AsJob})

}
function Get-OrganizationSegment
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-PolicyConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ProtectionAlert
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-QuarantineMessage
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MessageId},

    [System.Object]
    ${Page},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Reported},

    [System.Object]
    ${Direction},

    [System.Object]
    ${QuarantineTypes},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EndReceivedDate},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${PageSize},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RecipientAddress},

    [System.Object]
    ${StartExpiresDate},

    [System.Object]
    ${SenderAddress},

    [System.Object]
    ${Subject},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${StartReceivedDate},

    [System.Object]
    ${Type},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${MyItems},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EndExpiresDate},

    [switch]
    ${AsJob})

}
function Get-QuarantineMessageHeader
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-Recipient
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${PropertySet},

    [System.Object]
    ${Properties},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SortBy},

    [System.Object]
    ${BookmarkDisplayName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AuthenticationType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RecipientType},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RecipientPreviewFilter},

    [System.Object]
    ${RecipientTypeDetails},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${IncludeBookmarkObject},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Capabilities},

    [System.Object]
    ${Filter},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-RetentionCompliancePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${TeamsPolicyOnly},

    [switch]
    ${ExcludeTeamsPolicy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${DistributionDetail},

    [switch]
    ${RetentionRuleTypes},

    [switch]
    ${AsJob})

}
function Get-RetentionComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Policy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-RoleGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [switch]
    ${ShowPartnerLinked},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-RoleGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SCInsights
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-SecurityPrincipal
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Types},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [switch]
    ${RoleGroupAssignable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewActivity
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PolicyId},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewOverallProgressReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewPolicyReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Policies},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewPolicyV2
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Policies},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Reviewers},

    [System.Object]
    ${StartDate},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Policy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewTopCasesReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-TeamsRetentionCompliancePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${DistributionDetail},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-TeamsRetentionComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Policy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UnifiedAuditLogRetentionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RetentionDuration},

    [System.Object]
    ${Operation},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${UserId},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RecordType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-User
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${PublicFolder},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RecipientTypeDetails},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Import-FilePlanProperty
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${ValidateOnly},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RawCsv},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Install-UnifiedCompliancePrerequisite
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${LoadOnly},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${ForceInitialize},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PolicyCenterSiteOwner},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Migrate-DlpFingerprint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ActivityAlert
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Threshold},

    [System.Object]
    ${Disabled},

    [System.Object]
    ${UserId},

    [System.Object]
    ${Operation},

    [System.Object]
    ${NotifyUser},

    [System.Object]
    ${RecordType},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Description},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${EmailCulture},

    [System.Object]
    ${Severity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TimeWindow},

    [System.Object]
    ${ScopeLevel},

    [System.Object]
    ${Category},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Condition},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Type},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Multiplier},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-AdminAuditLogSearch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${ObjectIds},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExternalAccess},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${StatusMailRecipients},

    [System.Object]
    ${Parameters},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Cmdlets},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${UserIds},

    [System.Object]
    ${StartDate},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-AuditConfigurationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Workload},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-AuditConfigurationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Workload},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AuditOperation},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CaseHoldPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${PublicFolderLocation},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Case},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ExchangeLocation},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SharePointLocation},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CaseHoldRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Disabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ContentMatchQuery},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Policy},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ComplianceCase
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CaseType},

    [System.Object]
    ${Description},

    [System.Object]
    ${SourceCaseType},

    [System.Object]
    ${Name},

    [System.Object]
    ${ExternalId},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SecondaryCaseType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ComplianceRetentionEvent
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${SharePointAssetIdQuery},

    [System.Object]
    ${Name},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${EventDateTime},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AssetId},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Comment},

    [switch]
    ${PreviewOnly},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EventTags},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${ExchangeAssetIdQuery},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ComplianceRetentionEventType
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ComplianceSearch
{

param(
    [System.Object]
    ${RefinerNames},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Description},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${IncludeUserAppContent},

    [System.Object]
    ${SharePointLocationExclusion},

    [System.Object]
    ${AllowNotFoundExchangeLocationsEnabled},

    [switch]
    ${Force},

    [System.Object]
    ${SharePointLocation},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ExchangeLocation},

    [System.Object]
    ${Case},

    [System.Object]
    ${PublicFolderLocation},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${IncludeOrgContent},

    [System.Object]
    ${HoldNames},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ExchangeLocationExclusion},

    [System.Object]
    ${Language},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ContentMatchQuery},

    [switch]
    ${AsJob})

}
function New-ComplianceSearchAction
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SearchName},

    [switch]
    ${IncludeCredential},

    [System.Object]
    ${IncludeSharePointDocumentVersions},

    [System.Object]
    ${ReferenceActionName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [System.Object]
    ${FileTypeExclusionsForUnindexedItems},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${RetryOnError},

    [System.Object]
    ${Version},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${JobOptions},

    [switch]
    ${RetentionReport},

    [switch]
    ${Purge},

    [System.Object]
    ${PurgeType},

    [switch]
    ${Report},

    [System.Object]
    ${Region},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${EnableDedupe},

    [System.Object]
    ${Scope},

    [System.Object]
    ${SearchNames},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ActionName},

    [switch]
    ${AsJob})

}
function New-ComplianceSecurityFilter
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Filters},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Users},

    [System.Object]
    ${FilterName},

    [System.Object]
    ${Region},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ComplianceTag
{

param(
    [System.Object]
    ${FilePlanProperty},

    [System.Object]
    ${RetentionDuration},

    [System.Object]
    ${IsRecordLabel},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Notes},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Comment},

    [System.Object]
    ${RetentionType},

    [System.Object]
    ${EventType},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ReviewerEmail},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${Force},

    [System.Object]
    ${RetentionAction},

    [switch]
    ${AsJob})

}
function New-DeviceConditionalAccessPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DeviceConditionalAccessRule
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CameraEnabled},

    [System.Object]
    ${AllowVideoConferencing},

    [System.Object]
    ${AntiVirusSignatureStatus},

    [System.Object]
    ${FirewallStatus},

    [System.Object]
    ${AllowAppStore},

    [System.Object]
    ${AllowAssistantWhileLocked},

    [System.Object]
    ${AppsRating},

    [System.Object]
    ${PasswordHistoryCount},

    [System.Object]
    ${PasswordQuality},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${PhoneMemoryEncrypted},

    [System.Object]
    ${EmailAddress},

    [System.Object]
    ${BluetoothEnabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AllowConvenienceLogon},

    [System.Object]
    ${MaxPasswordGracePeriod},

    [System.Object]
    ${AllowVoiceAssistant},

    [System.Object]
    ${AllowiCloudDocSync},

    [System.Object]
    ${AntiVirusStatus},

    [System.Object]
    ${Policy},

    [System.Object]
    ${TVShowsRating},

    [System.Object]
    ${AllowJailbroken},

    [System.Object]
    ${ForceAppStorePassword},

    [System.Object]
    ${AllowDiagnosticSubmission},

    [System.Object]
    ${AutoUpdateStatus},

    [System.Object]
    ${WLANEnabled},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowVoiceDialing},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AccountName},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${PasswordComplexity},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${PasswordTimeout},

    [System.Object]
    ${SmartScreenEnabled},

    [System.Object]
    ${AllowiCloudPhotoSync},

    [System.Object]
    ${AllowSimplePassword},

    [System.Object]
    ${AllowPassbookWhileLocked},

    [System.Object]
    ${PasswordMinimumLength},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${PasswordRequired},

    [System.Object]
    ${MaxPasswordAttemptsBeforeWipe},

    [System.Object]
    ${MoviesRating},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${WorkFoldersSyncUrl},

    [System.Object]
    ${PasswordExpirationDays},

    [System.Object]
    ${UserAccountControlStatus},

    [System.Object]
    ${RequireEmailProfile},

    [System.Object]
    ${ForceEncryptedBackup},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AccountUserName},

    [System.Object]
    ${AllowScreenshot},

    [System.Object]
    ${AllowiCloudBackup},

    [System.Object]
    ${TargetGroups},

    [System.Object]
    ${ExchangeActiveSyncHost},

    [System.Object]
    ${PasswordMinComplexChars},

    [System.Object]
    ${SystemSecurityTLS},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${RegionRatings},

    [System.Object]
    ${EnableRemovableStorage},

    [switch]
    ${AsJob})

}
function New-DeviceConfigurationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DeviceConfigurationRule
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CameraEnabled},

    [System.Object]
    ${AllowVideoConferencing},

    [System.Object]
    ${AntiVirusSignatureStatus},

    [System.Object]
    ${FirewallStatus},

    [System.Object]
    ${AllowAppStore},

    [System.Object]
    ${AllowAssistantWhileLocked},

    [System.Object]
    ${AppsRating},

    [System.Object]
    ${PasswordHistoryCount},

    [System.Object]
    ${PasswordQuality},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${PhoneMemoryEncrypted},

    [System.Object]
    ${EmailAddress},

    [System.Object]
    ${BluetoothEnabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AllowConvenienceLogon},

    [System.Object]
    ${MaxPasswordGracePeriod},

    [System.Object]
    ${AllowVoiceAssistant},

    [System.Object]
    ${AllowiCloudDocSync},

    [System.Object]
    ${AntiVirusStatus},

    [System.Object]
    ${Policy},

    [System.Object]
    ${TVShowsRating},

    [System.Object]
    ${ForceAppStorePassword},

    [System.Object]
    ${AllowDiagnosticSubmission},

    [System.Object]
    ${AutoUpdateStatus},

    [System.Object]
    ${WLANEnabled},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowVoiceDialing},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AccountName},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${PasswordComplexity},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${PasswordTimeout},

    [System.Object]
    ${SmartScreenEnabled},

    [System.Object]
    ${AllowiCloudPhotoSync},

    [System.Object]
    ${AllowSimplePassword},

    [System.Object]
    ${AllowPassbookWhileLocked},

    [System.Object]
    ${PasswordMinimumLength},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${PasswordRequired},

    [System.Object]
    ${MaxPasswordAttemptsBeforeWipe},

    [System.Object]
    ${MoviesRating},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${WorkFoldersSyncUrl},

    [System.Object]
    ${PasswordExpirationDays},

    [System.Object]
    ${UserAccountControlStatus},

    [System.Object]
    ${RequireEmailProfile},

    [System.Object]
    ${ForceEncryptedBackup},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AccountUserName},

    [System.Object]
    ${AllowScreenshot},

    [System.Object]
    ${AllowiCloudBackup},

    [System.Object]
    ${TargetGroups},

    [System.Object]
    ${ExchangeActiveSyncHost},

    [System.Object]
    ${PasswordMinComplexChars},

    [System.Object]
    ${SystemSecurityTLS},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${RegionRatings},

    [System.Object]
    ${EnableRemovableStorage},

    [switch]
    ${AsJob})

}
function New-DeviceTenantPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Enabled},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DeviceTenantRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${BlockUnsupportedDevices},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ApplyPolicyTo},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExclusionList},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DlpCompliancePolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [System.Object]
    ${SharePointLocation},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Priority},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${SharePointLocationException},

    [System.Object]
    ${ExchangeLocation},

    [System.Object]
    ${OneDriveLocationException},

    [System.Object]
    ${Comment},

    [System.Object]
    ${TeamsLocationException},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${OneDriveLocation},

    [System.Object]
    ${ExchangeSenderMemberOf},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ExchangeSenderMemberOfException},

    [System.Object]
    ${Mode},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${TeamsLocation},

    [switch]
    ${AsJob})

}
function New-DlpComplianceRule
{

param(
    [System.Object]
    ${DocumentNameMatchesPatterns},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExceptIfRecipientDomainIs},

    [System.Object]
    ${ExceptIfContentContainsSensitiveInformation},

    [System.Object]
    ${ExceptIfDocumentNameMatchesWords},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ExceptIfFromAddressContainsWords},

    [System.Object]
    ${ExceptIfProcessingLimitExceeded},

    [System.Object]
    ${AnyOfRecipientAddressMatchesPatterns},

    [System.Object]
    ${NotifyPolicyTipCustomText},

    [System.Object]
    ${DocumentNameMatchesWords},

    [System.Object]
    ${NotifyAllowOverride},

    [System.Object]
    ${NotifyUser},

    [System.Object]
    ${ProcessingLimitExceeded},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ExceptIfAnyOfRecipientAddressContainsWords},

    [System.Object]
    ${ExceptIfSenderIPRanges},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${FromAddressMatchesPatterns},

    [System.Object]
    ${DocumentIsPasswordProtected},

    [System.Object]
    ${GenerateAlert},

    [System.Object]
    ${ExceptIfSubjectMatchesPatterns},

    [System.Object]
    ${ContentExtensionMatchesWords},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ImmutableId},

    [System.Object]
    ${BlockAccessScope},

    [System.Object]
    ${AnyOfRecipientAddressContainsWords},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExceptIfFromAddressMatchesPatterns},

    [System.Object]
    ${ExceptIfAccessScope},

    [System.Object]
    ${RecipientDomainIs},

    [System.Object]
    ${IncidentReportContent},

    [System.Object]
    ${Comment},

    [System.Object]
    ${NotifyPolicyTipCustomTextTranslations},

    [System.Object]
    ${GenerateIncidentReport},

    [System.Object]
    ${From},

    [System.Object]
    ${AccessScope},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${RemoveHeader},

    [System.Object]
    ${ActivationDate},

    [System.Object]
    ${ExceptIfContentPropertyContainsWords},

    [System.Object]
    ${ExceptIfDocumentNameMatchesPatterns},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ExceptIfDocumentIsPasswordProtected},

    [System.Object]
    ${NotifyEmailCustomText},

    [System.Object]
    ${ExceptIfSubjectContainsWords},

    [System.Object]
    ${Priority},

    [System.Object]
    ${ExceptIfSentTo},

    [System.Object]
    ${Policy},

    [System.Object]
    ${SenderIPRanges},

    [System.Object]
    ${ContentContainsSensitiveInformation},

    [System.Object]
    ${FromMemberOf},

    [System.Object]
    ${BlockAccess},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${StopPolicyProcessing},

    [System.Object]
    ${Disabled},

    [System.Object]
    ${ReportSeverityLevel},

    [System.Object]
    ${ExceptIfDocumentIsUnsupported},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${RuleErrorAction},

    [System.Object]
    ${ContentPropertyContainsWords},

    [System.Object]
    ${SentTo},

    [System.Object]
    ${DocumentIsUnsupported},

    [System.Object]
    ${SubjectMatchesPatterns},

    [System.Object]
    ${SubjectContainsWords},

    [System.Object]
    ${ExpiryDate},

    [System.Object]
    ${ExceptIfContentExtensionMatchesWords},

    [System.Object]
    ${Name},

    [System.Object]
    ${FromAddressContainsWords},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${EncryptRMSTemplate},

    [System.Object]
    ${ExceptIfAnyOfRecipientAddressMatchesPatterns},

    [System.Object]
    ${SetHeader},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function New-DlpEdmSchema
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DlpFingerprint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DlpKeywordDictionary
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DlpSensitiveInformationType
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Locale},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Fingerprints},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DlpSensitiveInformationTypeRulePackage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${FileData},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MigrationId},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-FilePlanPropertyAuthority
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-FilePlanPropertyCategory
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-FilePlanPropertyCitation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${CitationUrl},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${CitationJurisdiction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-FilePlanPropertyDepartment
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-FilePlanPropertyReferenceId
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-FilePlanPropertySubCategory
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ParentId},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-HoldCompliancePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${PublicFolderLocation},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ExchangeLocation},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SharePointLocation},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-HoldComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ContentDateFrom},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${HoldContent},

    [System.Object]
    ${Disabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Comment},

    [System.Object]
    ${ContentMatchQuery},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Policy},

    [System.Object]
    ${ContentDateTo},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${HoldDurationDisplayHint},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-InformationBarrierPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SegmentsAllowed},

    [System.Object]
    ${AssignedSegment},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SegmentAllowedFilter},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${State},

    [System.Object]
    ${SegmentsBlocked},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-InsiderRiskPolicy
{

param(
    [System.Object]
    ${HistoricTimeSpan},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SensitivityLabels},

    [System.Object]
    ${Enabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExchangeLocation},

    [System.Object]
    ${PostTerminationActivity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Comment},

    [System.Object]
    ${TeamsSites},

    [System.Object]
    ${InsiderRiskScenario},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DlpPolicy},

    [System.Object]
    ${FutureTerminationWindow},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Indicators},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SharepointSites},

    [System.Object]
    ${TenantSetting},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${DlpSensitiveTypes},

    [System.Object]
    ${InScopeTimeSpan},

    [System.Object]
    ${SchemaVersion},

    [System.Object]
    ${PastTerminationWindow},

    [switch]
    ${AsJob})

}
function New-Label
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${LocaleSettings},

    [System.Object]
    ${ParentId},

    [System.Object]
    ${DisplayName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Setting},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${LabelActions},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Comment},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AdvancedSettings},

    [System.Object]
    ${Settings},

    [System.Object]
    ${Tooltip},

    [System.Object]
    ${Conditions},

    [System.Object]
    ${MigrationId},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-LabelPolicy
{

param(
    [System.Object]
    ${Labels},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ModernGroupLocationException},

    [System.Object]
    ${Settings},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AdvancedSettings},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [System.Object]
    ${SharePointLocation},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Setting},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ExchangeLocation},

    [System.Object]
    ${OneDriveLocationException},

    [System.Object]
    ${PublicFolderLocation},

    [System.Object]
    ${Comment},

    [System.Object]
    ${MigrationId},

    [System.Object]
    ${ModernGroupLocation},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ExchangeLocationException},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${OneDriveLocation},

    [System.Object]
    ${SkypeLocation},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SkypeLocationException},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SharePointLocationException},

    [switch]
    ${AsJob})

}
function New-OrganizationSegment
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${UserGroupFilter},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ProtectionAlert
{

param(
    [System.Object]
    ${NotificationEnabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NotifyUserThrottleWindow},

    [System.Object]
    ${Threshold},

    [System.Object]
    ${Description},

    [System.Object]
    ${Operation},

    [System.Object]
    ${NotifyUser},

    [System.Object]
    ${AlertBy},

    [System.Object]
    ${NotifyUserThrottleThreshold},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${NotificationCulture},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AggregationType},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Severity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${VolumeThreshold},

    [System.Object]
    ${TimeWindow},

    [System.Object]
    ${Comment},

    [System.Object]
    ${Category},

    [System.Object]
    ${AlertFor},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${LogicalOperationName},

    [System.Object]
    ${NotifyUserSuppressionExpiryDate},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Filter},

    [System.Object]
    ${NotifyUserOnFilterMatch},

    [System.Object]
    ${ThreatType},

    [System.Object]
    ${Disabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Name},

    [switch]
    ${AsJob})

}
function New-RetentionCompliancePolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${TeamsChannelLocation},

    [System.Object]
    ${ModernGroupLocationException},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [System.Object]
    ${SharePointLocation},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ExchangeLocation},

    [System.Object]
    ${OneDriveLocationException},

    [System.Object]
    ${PublicFolderLocation},

    [System.Object]
    ${Comment},

    [System.Object]
    ${ModernGroupLocation},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ExchangeLocationException},

    [System.Object]
    ${TeamsChatLocationException},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${TeamsChatLocation},

    [System.Object]
    ${OneDriveLocation},

    [System.Object]
    ${SkypeLocation},

    [System.Object]
    ${TeamsChannelLocationException},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SkypeLocationException},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SharePointLocationException},

    [System.Object]
    ${RestrictiveRetention},

    [switch]
    ${AsJob})

}
function New-RetentionComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RetentionDuration},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PublishComplianceTag},

    [System.Object]
    ${RetentionComplianceAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ContentMatchQuery},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ApplyComplianceTag},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ExpirationDateOption},

    [System.Object]
    ${Comment},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${MachineLearningModelIDs},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ExcludedItemClasses},

    [System.Object]
    ${ContentContainsSensitiveInformation},

    [System.Object]
    ${Policy},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RetentionDurationDisplayHint},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${AsJob})

}
function New-RoleGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Members},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${Force},

    [System.Object]
    ${Roles},

    [switch]
    ${AsJob})

}
function New-SupervisoryReviewPolicyV2
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Reviewers},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-SupervisoryReviewRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ContentSources},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ContentContainsSensitiveInformation},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Condition},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ContentMatchesDataModel},

    [System.Object]
    ${Policy},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${CcsiDataModelOperator},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SamplingRate},

    [switch]
    ${AsJob})

}
function New-TeamsRetentionCompliancePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TeamsChatLocationException},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${TeamsChannelLocationException},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${TeamsChatLocation},

    [System.Object]
    ${Comment},

    [System.Object]
    ${RestrictiveRetention},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${TeamsChannelLocation},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-TeamsRetentionComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RetentionDuration},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RetentionComplianceAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Policy},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-UnifiedAuditLogRetentionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RetentionDuration},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Operations},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${UserIds},

    [System.Object]
    ${RecordTypes},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Preview-QuarantineMessage
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Release-QuarantineMessage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${ReportFalsePositive},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${AllowSender},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${ReleaseToAll},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Identities},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ActivityAlert
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-AuditConfigurationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-AuditConfigurationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CaseHoldPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CaseHoldRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ComplianceCase
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ComplianceCaseMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Case},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Member},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ComplianceRetentionEvent
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${PreviewOnly},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ComplianceRetentionEventType
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ComplianceSearch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ComplianceSearchAction
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ComplianceSecurityFilter
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FilterName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ComplianceTag
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DeviceConditionalAccessPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DeviceConditionalAccessRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DeviceConfigurationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DeviceConfigurationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DeviceTenantPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DeviceTenantRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DlpCompliancePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DlpComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DlpEdmSchema
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DlpKeywordDictionary
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DlpSensitiveInformationType
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DlpSensitiveInformationTypeRulePackage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-eDiscoveryCaseAdmin
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-FilePlanPropertyAuthority
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-FilePlanPropertyCategory
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-FilePlanPropertyCitation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-FilePlanPropertyDepartment
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-FilePlanPropertyReferenceId
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-FilePlanPropertySubCategory
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-HoldCompliancePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-HoldComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-InformationBarrierPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-InsiderRiskPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-Label
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-LabelPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-OrganizationSegment
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ProtectionAlert
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RecordLabel
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${LabelName},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ItemUrl},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RetentionCompliancePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RetentionComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RoleGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RoleGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Member},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-SupervisoryReviewPolicyV2
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-TeamsRetentionCompliancePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-TeamsRetentionComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-UnifiedAuditLogRetentionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DomainController},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Search-AdminAuditLog
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${ObjectIds},

    [System.Object]
    ${StartIndex},

    [System.Object]
    ${ExternalAccess},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Parameters},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Cmdlets},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${UserIds},

    [System.Object]
    ${IsSuccess},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ActivityAlert
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Threshold},

    [System.Object]
    ${UserId},

    [System.Object]
    ${Operation},

    [System.Object]
    ${NotifyUser},

    [System.Object]
    ${Identity},

    [System.Object]
    ${RecordType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Description},

    [System.Object]
    ${EmailCulture},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Severity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TimeWindow},

    [System.Object]
    ${ScopeLevel},

    [System.Object]
    ${Category},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Condition},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Disabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Multiplier},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-AuditConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Workload},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Organization},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-AuditConfigurationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AuditOperation},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CaseHoldPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${RemoveExchangeLocation},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RemoveSharePointLocation},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AddExchangeLocation},

    [switch]
    ${UpdateStatistics},

    [System.Object]
    ${AddSharePointLocation},

    [switch]
    ${RetryDistribution},

    [System.Object]
    ${RemovePublicFolderLocation},

    [System.Object]
    ${Comment},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AddPublicFolderLocation},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Enabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CaseHoldRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Disabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ContentMatchQuery},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ComplianceCase
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CaseType},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [System.Object]
    ${ExternalId},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${Reopen},

    [System.Object]
    ${Identity},

    [switch]
    ${Close},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ComplianceRetentionEvent
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [System.Object]
    ${SharePointAssetIdQuery},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AssetId},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Comment},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EventTags},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${ExchangeAssetIdQuery},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ComplianceRetentionEventType
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ComplianceSearch
{

param(
    [System.Object]
    ${RefinerNames},

    [System.Object]
    ${ContentMatchQuery},

    [System.Object]
    ${Description},

    [System.Object]
    ${Identity},

    [System.Object]
    ${SharePointLocation},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AddSharePointLocation},

    [System.Object]
    ${AddExchangeLocationExclusion},

    [System.Object]
    ${IncludeUserAppContent},

    [System.Object]
    ${SharePointLocationExclusion},

    [System.Object]
    ${AllowNotFoundExchangeLocationsEnabled},

    [switch]
    ${Force},

    [System.Object]
    ${ExchangeLocationExclusion},

    [System.Object]
    ${AddSharePointLocationExclusion},

    [System.Object]
    ${RemovePublicFolderLocation},

    [System.Object]
    ${RemoveSharePointLocation},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ExchangeLocation},

    [System.Object]
    ${PublicFolderLocation},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RemoveSharePointLocationExclusion},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${IncludeOrgContent},

    [System.Object]
    ${RemoveExchangeLocationExclusion},

    [System.Object]
    ${HoldNames},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${RemoveExchangeLocation},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AddExchangeLocation},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Language},

    [System.Object]
    ${Name},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Set-ComplianceSearchAction
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${ChangeExportKey},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ComplianceSecurityFilter
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Filters},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Users},

    [System.Object]
    ${FilterName},

    [System.Object]
    ${Region},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ComplianceTag
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RetentionDuration},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${FilePlanProperty},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Notes},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Comment},

    [System.Object]
    ${Identity},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ReviewerEmail},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DeviceConditionalAccessPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${RetryDistribution},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DeviceConditionalAccessRule
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CameraEnabled},

    [System.Object]
    ${AllowVideoConferencing},

    [System.Object]
    ${AntiVirusSignatureStatus},

    [System.Object]
    ${FirewallStatus},

    [System.Object]
    ${AllowAppStore},

    [System.Object]
    ${AllowAssistantWhileLocked},

    [System.Object]
    ${AppsRating},

    [System.Object]
    ${PasswordHistoryCount},

    [System.Object]
    ${PasswordQuality},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${PhoneMemoryEncrypted},

    [System.Object]
    ${EmailAddress},

    [System.Object]
    ${BluetoothEnabled},

    [System.Object]
    ${Identity},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AllowConvenienceLogon},

    [System.Object]
    ${MaxPasswordGracePeriod},

    [System.Object]
    ${AllowVoiceAssistant},

    [System.Object]
    ${AllowiCloudDocSync},

    [System.Object]
    ${AntiVirusStatus},

    [System.Object]
    ${TVShowsRating},

    [System.Object]
    ${AllowJailbroken},

    [System.Object]
    ${ForceAppStorePassword},

    [System.Object]
    ${AllowDiagnosticSubmission},

    [System.Object]
    ${AutoUpdateStatus},

    [System.Object]
    ${WLANEnabled},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowVoiceDialing},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AccountName},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${PasswordComplexity},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${PasswordTimeout},

    [System.Object]
    ${SmartScreenEnabled},

    [System.Object]
    ${AllowiCloudPhotoSync},

    [System.Object]
    ${AllowSimplePassword},

    [System.Object]
    ${AllowPassbookWhileLocked},

    [System.Object]
    ${PasswordMinimumLength},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${PasswordRequired},

    [System.Object]
    ${MaxPasswordAttemptsBeforeWipe},

    [System.Object]
    ${MoviesRating},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${WorkFoldersSyncUrl},

    [System.Object]
    ${PasswordExpirationDays},

    [System.Object]
    ${UserAccountControlStatus},

    [System.Object]
    ${RequireEmailProfile},

    [System.Object]
    ${ForceEncryptedBackup},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AccountUserName},

    [System.Object]
    ${AllowScreenshot},

    [System.Object]
    ${AllowiCloudBackup},

    [System.Object]
    ${TargetGroups},

    [System.Object]
    ${ExchangeActiveSyncHost},

    [System.Object]
    ${PasswordMinComplexChars},

    [System.Object]
    ${SystemSecurityTLS},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${RegionRatings},

    [System.Object]
    ${EnableRemovableStorage},

    [switch]
    ${AsJob})

}
function Set-DeviceConfigurationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${RetryDistribution},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DeviceConfigurationRule
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CameraEnabled},

    [System.Object]
    ${AllowVideoConferencing},

    [System.Object]
    ${AntiVirusSignatureStatus},

    [System.Object]
    ${FirewallStatus},

    [System.Object]
    ${AllowAppStore},

    [System.Object]
    ${AllowAssistantWhileLocked},

    [System.Object]
    ${AppsRating},

    [System.Object]
    ${PasswordHistoryCount},

    [System.Object]
    ${PasswordQuality},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${PhoneMemoryEncrypted},

    [System.Object]
    ${EmailAddress},

    [System.Object]
    ${BluetoothEnabled},

    [System.Object]
    ${Identity},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AllowConvenienceLogon},

    [System.Object]
    ${MaxPasswordGracePeriod},

    [System.Object]
    ${AllowVoiceAssistant},

    [System.Object]
    ${AllowiCloudDocSync},

    [System.Object]
    ${AntiVirusStatus},

    [System.Object]
    ${TVShowsRating},

    [System.Object]
    ${ForceAppStorePassword},

    [System.Object]
    ${AllowDiagnosticSubmission},

    [System.Object]
    ${AutoUpdateStatus},

    [System.Object]
    ${WLANEnabled},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowVoiceDialing},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AccountName},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${PasswordComplexity},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${PasswordTimeout},

    [System.Object]
    ${SmartScreenEnabled},

    [System.Object]
    ${AllowiCloudPhotoSync},

    [System.Object]
    ${AllowSimplePassword},

    [System.Object]
    ${AllowPassbookWhileLocked},

    [System.Object]
    ${PasswordMinimumLength},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${PasswordRequired},

    [System.Object]
    ${MaxPasswordAttemptsBeforeWipe},

    [System.Object]
    ${MoviesRating},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${WorkFoldersSyncUrl},

    [System.Object]
    ${PasswordExpirationDays},

    [System.Object]
    ${UserAccountControlStatus},

    [System.Object]
    ${RequireEmailProfile},

    [System.Object]
    ${ForceEncryptedBackup},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AccountUserName},

    [System.Object]
    ${AllowScreenshot},

    [System.Object]
    ${AllowiCloudBackup},

    [System.Object]
    ${TargetGroups},

    [System.Object]
    ${ExchangeActiveSyncHost},

    [System.Object]
    ${PasswordMinComplexChars},

    [System.Object]
    ${SystemSecurityTLS},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${RegionRatings},

    [System.Object]
    ${EnableRemovableStorage},

    [switch]
    ${AsJob})

}
function Set-DeviceTenantPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${RetryDistribution},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DeviceTenantRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${BlockUnsupportedDevices},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ApplyPolicyTo},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExclusionList},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DlpCompliancePolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${RemoveOneDriveLocationException},

    [System.Object]
    ${AddSharePointLocation},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AddExchangeLocation},

    [System.Object]
    ${AddTeamsLocation},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Priority},

    [System.Object]
    ${RemoveSharePointLocation},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AddOneDriveLocationException},

    [System.Object]
    ${ExchangeSenderMemberOfException},

    [System.Object]
    ${Comment},

    [switch]
    ${RetryDistribution},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AddSharePointLocationException},

    [System.Object]
    ${AddTeamsLocationException},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RemoveSharePointLocationException},

    [System.Object]
    ${RemoveTeamsLocationException},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ExchangeSenderMemberOf},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${RemoveTeamsLocation},

    [System.Object]
    ${RemoveOneDriveLocation},

    [System.Object]
    ${AddOneDriveLocation},

    [System.Object]
    ${RemoveExchangeLocation},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Mode},

    [switch]
    ${AsJob})

}
function Set-DlpComplianceRule
{

param(
    [System.Object]
    ${DocumentNameMatchesPatterns},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExceptIfRecipientDomainIs},

    [System.Object]
    ${ExceptIfContentContainsSensitiveInformation},

    [System.Object]
    ${ExceptIfDocumentNameMatchesWords},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ExceptIfFromAddressContainsWords},

    [System.Object]
    ${ExceptIfProcessingLimitExceeded},

    [System.Object]
    ${AnyOfRecipientAddressMatchesPatterns},

    [System.Object]
    ${NotifyPolicyTipCustomText},

    [System.Object]
    ${DocumentNameMatchesWords},

    [System.Object]
    ${NotifyAllowOverride},

    [System.Object]
    ${NotifyUser},

    [System.Object]
    ${ProcessingLimitExceeded},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ExceptIfAnyOfRecipientAddressContainsWords},

    [System.Object]
    ${ExceptIfSenderIPRanges},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${FromAddressMatchesPatterns},

    [System.Object]
    ${DocumentIsPasswordProtected},

    [System.Object]
    ${GenerateAlert},

    [System.Object]
    ${ExceptIfSubjectMatchesPatterns},

    [System.Object]
    ${ContentExtensionMatchesWords},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${BlockAccessScope},

    [System.Object]
    ${AnyOfRecipientAddressContainsWords},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExceptIfFromAddressMatchesPatterns},

    [System.Object]
    ${ExceptIfAccessScope},

    [System.Object]
    ${RecipientDomainIs},

    [System.Object]
    ${IncidentReportContent},

    [System.Object]
    ${Comment},

    [System.Object]
    ${NotifyPolicyTipCustomTextTranslations},

    [System.Object]
    ${GenerateIncidentReport},

    [System.Object]
    ${From},

    [System.Object]
    ${AccessScope},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${RemoveHeader},

    [System.Object]
    ${ActivationDate},

    [System.Object]
    ${ExceptIfContentPropertyContainsWords},

    [System.Object]
    ${ExceptIfDocumentNameMatchesPatterns},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ExceptIfDocumentIsPasswordProtected},

    [System.Object]
    ${NotifyEmailCustomText},

    [System.Object]
    ${ExceptIfSubjectContainsWords},

    [System.Object]
    ${Priority},

    [System.Object]
    ${ExceptIfSentTo},

    [System.Object]
    ${SenderIPRanges},

    [System.Object]
    ${ContentContainsSensitiveInformation},

    [System.Object]
    ${FromMemberOf},

    [System.Object]
    ${BlockAccess},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${StopPolicyProcessing},

    [System.Object]
    ${Disabled},

    [System.Object]
    ${ReportSeverityLevel},

    [System.Object]
    ${ExceptIfDocumentIsUnsupported},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${RuleErrorAction},

    [System.Object]
    ${ContentPropertyContainsWords},

    [System.Object]
    ${SentTo},

    [System.Object]
    ${DocumentIsUnsupported},

    [System.Object]
    ${SubjectMatchesPatterns},

    [System.Object]
    ${SubjectContainsWords},

    [System.Object]
    ${ExpiryDate},

    [System.Object]
    ${ExceptIfContentExtensionMatchesWords},

    [System.Object]
    ${FromAddressContainsWords},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${EncryptRMSTemplate},

    [System.Object]
    ${ExceptIfAnyOfRecipientAddressMatchesPatterns},

    [System.Object]
    ${SetHeader},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-DlpEdmSchema
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DlpKeywordDictionary
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DlpSensitiveInformationType
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Locale},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Fingerprints},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DlpSensitiveInformationTypeConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${RegexGrammarLimit},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${FingerprintThreshold},

    [switch]
    ${AsJob})

}
function Set-DlpSensitiveInformationTypeRulePackage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-FilePlanPropertyAuthority
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-FilePlanPropertyCategory
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-FilePlanPropertyCitation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${CitationUrl},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${CitationJurisdiction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-FilePlanPropertyDepartment
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-FilePlanPropertyReferenceId
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-FilePlanPropertySubCategory
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-HoldCompliancePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RemoveExchangeLocation},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RemoveSharePointLocation},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AddExchangeLocation},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AddSharePointLocation},

    [switch]
    ${RetryDistribution},

    [System.Object]
    ${RemovePublicFolderLocation},

    [System.Object]
    ${Comment},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AddPublicFolderLocation},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Enabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-HoldComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ContentDateFrom},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${HoldContent},

    [System.Object]
    ${Disabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Comment},

    [System.Object]
    ${ContentMatchQuery},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ContentDateTo},

    [System.Object]
    ${HoldDurationDisplayHint},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-InformationBarrierPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SegmentsAllowed},

    [System.Object]
    ${SegmentAllowedFilter},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${State},

    [System.Object]
    ${SegmentsBlocked},

    [System.Object]
    ${Comment},

    [switch]
    ${AsJob})

}
function Set-InsiderRiskPolicy
{

param(
    [System.Object]
    ${HistoricTimeSpan},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SensitivityLabels},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Enabled},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PostTerminationActivity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Comment},

    [System.Object]
    ${TeamsSites},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DlpPolicy},

    [System.Object]
    ${FutureTerminationWindow},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RemoveExchangeLocation},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AddExchangeLocation},

    [System.Object]
    ${Indicators},

    [switch]
    ${RetryDistribution},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SharepointSites},

    [System.Object]
    ${TenantSetting},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DlpSensitiveTypes},

    [System.Object]
    ${InScopeTimeSpan},

    [System.Object]
    ${SchemaVersion},

    [System.Object]
    ${PastTerminationWindow},

    [switch]
    ${AsJob})

}
function Set-Label
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${Settings},

    [System.Object]
    ${AdvancedSettings},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Setting},

    [System.Object]
    ${ParentId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Conditions},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Comment},

    [System.Object]
    ${MigrationId},

    [System.Object]
    ${Tooltip},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Disabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${PreviousLabel},

    [System.Object]
    ${NextLabel},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${LabelActions},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${LocaleSettings},

    [switch]
    ${AsJob})

}
function Set-LabelPolicy
{

param(
    [System.Object]
    ${Settings},

    [System.Object]
    ${AddExchangeLocation},

    [System.Object]
    ${PreviousLabelPolicy},

    [System.Object]
    ${Setting},

    [System.Object]
    ${AddExchangeLocationException},

    [System.Object]
    ${Comment},

    [System.Object]
    ${Identity},

    [System.Object]
    ${RemoveExchangeLocationException},

    [System.Object]
    ${Enabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RemoveOneDriveLocationException},

    [System.Object]
    ${AddSharePointLocation},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AdvancedSettings},

    [System.Object]
    ${RemoveModernGroupLocation},

    [switch]
    ${Force},

    [System.Object]
    ${AddLabels},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${RemovePublicFolderLocation},

    [System.Object]
    ${RemoveModernGroupLocationException},

    [System.Object]
    ${AddModernGroupLocationException},

    [System.Object]
    ${RemoveSharePointLocation},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AddOneDriveLocationException},

    [System.Object]
    ${AddModernGroupLocation},

    [System.Object]
    ${AddSkypeLocation},

    [System.Object]
    ${AddPublicFolderLocation},

    [switch]
    ${RetryDistribution},

    [System.Object]
    ${MigrationId},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${AddSharePointLocationException},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${RemoveSkypeLocationException},

    [System.Object]
    ${RemoveSharePointLocationException},

    [System.Object]
    ${NextLabelPolicy},

    [System.Object]
    ${RemoveExchangeLocation},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${RemoveSkypeLocation},

    [System.Object]
    ${RemoveOneDriveLocation},

    [System.Object]
    ${AddOneDriveLocation},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AddSkypeLocationException},

    [System.Object]
    ${RemoveLabels},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Set-OrganizationSegment
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${UserGroupFilter},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-PolicyConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ProcessingLimitExceededSeverity},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ComplianceUrl},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${EnableLabelCoauth},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${RetentionForwardCrawl},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${OnPremisesWorkload},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EndpointDlpGlobalSettingsPsws},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DocumentIsUnsupportedSeverity},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SenderAddressLocation},

    [System.Object]
    ${RuleErrorAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ProtectionAlert
{

param(
    [System.Object]
    ${NotificationEnabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NotifyUserThrottleWindow},

    [System.Object]
    ${Threshold},

    [System.Object]
    ${Description},

    [System.Object]
    ${Operation},

    [System.Object]
    ${NotifyUser},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AlertBy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${AggregationType},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Severity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${VolumeThreshold},

    [System.Object]
    ${TimeWindow},

    [System.Object]
    ${Comment},

    [System.Object]
    ${Category},

    [System.Object]
    ${AlertFor},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Disabled},

    [System.Object]
    ${NotifyUserSuppressionExpiryDate},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Filter},

    [System.Object]
    ${NotifyUserOnFilterMatch},

    [System.Object]
    ${NotifyUserThrottleThreshold},

    [System.Object]
    ${NotificationCulture},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AsJob})

}
function Set-RetentionCompliancePolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AddExchangeLocation},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AddExchangeLocationException},

    [System.Object]
    ${Comment},

    [System.Object]
    ${Identity},

    [System.Object]
    ${RemoveTeamsChatLocation},

    [System.Object]
    ${RemoveExchangeLocationException},

    [System.Object]
    ${Enabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RemoveOneDriveLocationException},

    [System.Object]
    ${AddSharePointLocation},

    [System.Object]
    ${AddTeamsChatLocationException},

    [System.Object]
    ${AddSkypeLocation},

    [System.Object]
    ${RemoveModernGroupLocation},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${RemovePublicFolderLocation},

    [System.Object]
    ${RemoveModernGroupLocationException},

    [System.Object]
    ${AddModernGroupLocationException},

    [System.Object]
    ${AddTeamsChatLocation},

    [System.Object]
    ${RemoveSharePointLocation},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AddOneDriveLocationException},

    [System.Object]
    ${AddModernGroupLocation},

    [System.Object]
    ${AddTeamsChannelLocationException},

    [System.Object]
    ${AddPublicFolderLocation},

    [switch]
    ${RetryDistribution},

    [System.Object]
    ${RemoveTeamsChatLocationException},

    [System.Object]
    ${RemoveTeamsChannelLocationException},

    [System.Object]
    ${RemoveTeamsChannelLocation},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${AddSharePointLocationException},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AddTeamsChannelLocation},

    [System.Object]
    ${RemoveSkypeLocationException},

    [System.Object]
    ${RemoveSharePointLocationException},

    [System.Object]
    ${RemoveExchangeLocation},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${RemoveSkypeLocation},

    [System.Object]
    ${RemoveOneDriveLocation},

    [System.Object]
    ${AddOneDriveLocation},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AddSkypeLocationException},

    [System.Object]
    ${RestrictiveRetention},

    [switch]
    ${AsJob})

}
function Set-RetentionComplianceRule
{

param(
    [System.Object]
    ${ContentDateFrom},

    [System.Object]
    ${RetentionDuration},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ExcludedItemClasses},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RetentionComplianceAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ContentMatchQuery},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ApplyComplianceTag},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExpirationDateOption},

    [System.Object]
    ${Comment},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ContentContainsSensitiveInformation},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ContentDateTo},

    [System.Object]
    ${RetentionDurationDisplayHint},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-RoleGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-SupervisoryReviewPolicyV2
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AddReviewers},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Comment},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Reviewers},

    [System.Object]
    ${RetentionPeriodInDays},

    [System.Object]
    ${RemoveReviewers},

    [switch]
    ${AsJob})

}
function Set-SupervisoryReviewRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ContentSources},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ContentContainsSensitiveInformation},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Condition},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ContentMatchesDataModel},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CcsiDataModelOperator},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SamplingRate},

    [switch]
    ${AsJob})

}
function Set-TeamsRetentionCompliancePolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RemoveTeamsChannelLocation},

    [System.Object]
    ${RemoveTeamsChatLocation},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${AddTeamsChatLocationException},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Identity},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AddTeamsChatLocation},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AddTeamsChannelLocationException},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RemoveTeamsChannelLocationException},

    [System.Object]
    ${RemoveTeamsChatLocationException},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AddTeamsChannelLocation},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${RetryDistribution},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${RestrictiveRetention},

    [switch]
    ${AsJob})

}
function Set-TeamsRetentionComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RetentionDuration},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RetentionComplianceAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-UnifiedAuditLogRetentionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RetentionDuration},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Operations},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UserIds},

    [System.Object]
    ${RecordTypes},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Start-ComplianceSearch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${RetryOnError},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Start-InformationBarrierPoliciesApplication
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Stop-ComplianceSearch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Stop-InformationBarrierPoliciesApplication
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-DataClassification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${TestTextExtractionResults},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TextToClassify},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${ClassificationNames},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-InformationBarrierPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Update-ComplianceCaseMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Members},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Case},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Update-eDiscoveryCaseAdmin
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Users},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Update-RoleGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Members},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Validate-RetentionRuleQuery
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${KqlQueryString},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
#endregion
#region SharePointOnline
function Add-SPOGeoAdministrator
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='Group', Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${GroupAlias},

    [Parameter(ParameterSetName='User', Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${UserPrincipalName},

    [Parameter(ParameterSetName='ObjectId', Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [guid]
    ${ObjectId})

}
function Add-SPOHubSiteAssociation
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true)]
    [Object]
    ${HubSite})

}
function Add-SPOHubToHubAssociation
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNull()]
    [guid]
    ${Source},

    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    [guid]
    ${Target})

}
function Add-SPOOrgAssetsLibrary
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${LibraryUrl},

    [string]
    ${ThumbnailUrl},

    [Microsoft.SharePoint.Administration.OrgAssetType, Microsoft.SharePoint.Client, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${OrgAssetType},

    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${CdnType})

}
function Add-SPOSiteCollectionAppCatalog
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true)]
    [Object]
    ${Site})

}
function Add-SPOSiteDesign
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Title},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${WebTemplate},

    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteScriptPipeBind[]]
    ${SiteScripts},

    [string]
    ${Description},

    [string]
    ${PreviewImageUrl},

    [string]
    ${PreviewImageAltText},

    [switch]
    ${IsDefault},

    [guid]
    ${DesignPackageId})

}
function Add-SPOSiteDesignTask
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [guid]
    ${SiteDesignId},

    [Parameter(Mandatory=$true, Position=1)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${WebUrl})

}
function Add-SPOSiteScript
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Title},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Content},

    [string]
    ${Description})

}
function Add-SPOSiteScriptPackage
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Title},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${ContentPath},

    [string]
    ${Description})

}
function Add-SPOTenantCdnOrigin
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${OriginUrl},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${CdnType})

}
function Add-SPOTheme
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Alias('Name')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.PowerShell.SpoThemePipeBind]
    ${Identity},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.PowerShell.SpoThemePalettePipeBind]
    ${Palette},

    [Parameter(Mandatory=$true)]
    [bool]
    ${IsInverted},

    [switch]
    ${Overwrite})

}
function Add-SPOUser
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true, Position=2)]
    [string]
    ${LoginName},

    [Parameter(Mandatory=$true, Position=3)]
    [string]
    ${Group})

}
function Approve-SPOTenantServicePrincipalPermissionGrant
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [string]
    ${Resource},

    [Parameter(Mandatory=$true, Position=2)]
    [string]
    ${Scope})

}
function Approve-SPOTenantServicePrincipalPermissionRequest
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true)]
    [guid]
    ${RequestId})

}
function Connect-SPOService
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.PowerShell.UrlCmdletPipeBind]
    ${Url},

    [Parameter(Position=1, ValueFromPipeline=$true)]
    [Microsoft.Online.SharePoint.PowerShell.CredentialCmdletPipeBind]
    ${Credential},

    [Parameter(Position=2)]
    [string]
    ${ClientTag},

    [Parameter(ParameterSetName='AuthenticationLocation', Position=3)]
    [Microsoft.Online.SharePoint.PowerShell.AADCrossTenantAuthenticationLocation]
    ${Region},

    [Parameter(ParameterSetName='AuthenticationUrl', Mandatory=$true, Position=3)]
    [string]
    ${AuthenticationUrl})

}
function ConvertTo-SPOMigrationEncryptedPackage
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='ImplicitSourceParameterSet', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.Migration.MigrationPackageLocation]
    ${MigrationSourceLocations},

    [Parameter(ParameterSetName='ExplicitSourceParameterSet', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SourceFilesPath},

    [Parameter(ParameterSetName='ExplicitSourceParameterSet', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SourcePackagePath},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.Migration.EncryptionParameters]
    ${EncryptionParameters},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetFilesPath},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetPackagePath},

    [switch]
    ${NoLogFile})

}
function ConvertTo-SPOMigrationTargetedPackage
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SourceFilesPath},

    [Parameter(Mandatory=$true, Position=1)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SourcePackagePath},

    [Parameter(Position=2)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${OutputPackagePath},

    [Parameter(Mandatory=$true, Position=3)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetWebUrl},

    [Parameter(ParameterSetName='DocumentLibraryImport', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetDocumentLibraryPath},

    [Parameter(ParameterSetName='DocumentLibraryImport')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetDocumentLibrarySubFolderPath},

    [Parameter(ParameterSetName='ListImport', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetListPath},

    [ValidateNotNullOrEmpty()]
    [string]
    ${UserMappingFile},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.PowerShell.CredentialCmdletPipeBind]
    ${Credentials},

    [Microsoft.Online.SharePoint.PowerShell.CredentialCmdletPipeBind]
    ${AzureADUserCredentials},

    [switch]
    ${NoAzureADLookup},

    [Microsoft.Online.SharePoint.Migration.TargetEnvironment]
    ${TargetEnvironment},

    [switch]
    ${ParallelImport},

    [long]
    ${PartitionSizeInBytes},

    [switch]
    ${NoLogFile})

}
function Deny-SPOTenantServicePrincipalPermissionRequest
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true)]
    [guid]
    ${RequestId})

}
function Disable-SPOTenantServicePrincipal
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param()

}
function Disconnect-SPOService
{
    [CmdletBinding()]
param()

}
function Enable-SPOCommSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${SiteUrl},

    [guid]
    ${DesignPackageId})

}
function Enable-SPOTenantServicePrincipal
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param()

}
function Export-SPOQueryLogs
{
    [CmdletBinding(DefaultParameterSetName='All')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${LoginName},

    [System.Nullable[datetime]]
    ${StartTime},

    [string]
    ${OutputFolder})

}
function Export-SPOUserInfo
{
    [CmdletBinding(DefaultParameterSetName='All')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${LoginName},

    [Parameter(Mandatory=$true)]
    [Object]
    ${Site},

    [string]
    ${OutputFolder})

}
function Export-SPOUserProfile
{
    [CmdletBinding(DefaultParameterSetName='All')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${LoginName},

    [string]
    ${OutputFolder})

}
function Get-SPOAppErrors
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [guid]
    ${ProductId},

    [Parameter(Position=2)]
    [datetime]
    ${StartTimeInUtc},

    [Parameter(Position=3)]
    [datetime]
    ${EndTimeInUtc})

}
function Get-SPOAppInfo
{
    [CmdletBinding()]
param(
    [Parameter(Position=1)]
    [guid]
    ${ProductId},

    [Parameter(Position=2)]
    [string]
    ${Name})

}
function Get-SPOBrowserIdleSignOut
{
    [CmdletBinding()]
param()

}
function Get-SPOBuiltInDesignPackageVisibility
{
    [CmdletBinding()]
param(
    [System.Nullable`1[[Microsoft.SharePoint.Administration.DesignPackageType, Microsoft.SharePoint.Client, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${DesignPackage})

}
function Get-SPOCrossGeoMovedUsers
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [ValidateSet('MoveIn','MoveOut')]
    [string]
    ${Direction})

}
function Get-SPOCrossGeoMoveReport
{
    [CmdletBinding()]
param(
    [ValidateRange(1, 1000)]
    [uint32]
    ${Limit},

    [datetime]
    ${MoveStartTime},

    [datetime]
    ${MoveEndTime},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.PowerShell.JobType]
    ${MoveJobType},

    [Microsoft.Online.SharePoint.PowerShell.MoveState]
    ${MoveState},

    [Microsoft.Online.SharePoint.PowerShell.MoveDirection]
    ${MoveDirection})

}
function Get-SPOCrossGeoUsers
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [bool]
    ${ValidDataLocation})

}
function Get-SPODataEncryptionPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity})

}
function Get-SPODeletedSite
{
    [CmdletBinding(DefaultParameterSetName='ParameterSetAllSites')]
param(
    [Parameter(Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity},

    [string]
    ${Limit},

    [Parameter(ParameterSetName='ParameterSetAllSites')]
    [switch]
    ${IncludePersonalSite},

    [Parameter(ParameterSetName='ParameterSetPersonalSitesOnly', Mandatory=$true)]
    [switch]
    ${IncludeOnlyPersonalSite})

}
function Get-SPOExternalUser
{
    [CmdletBinding(DefaultParameterSetName='All')]
param(
    [Parameter(ParameterSetName='All', Position=1)]
    [int]
    ${Position},

    [Parameter(ParameterSetName='All', Position=2)]
    [int]
    ${PageSize},

    [Parameter(ParameterSetName='All', Position=3)]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='All', Position=4)]
    [Microsoft.Online.SharePoint.TenantManagement.SortOrder, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${SortOrder},

    [Parameter(ParameterSetName='All', Position=5)]
    [string]
    ${SiteUrl},

    [Parameter(ParameterSetName='All', Position=6)]
    [bool]
    ${ShowOnlyUsersWithAcceptingAccountNotMatchInvitedAccount})

}
function Get-SPOGeoAdministrator
{
    [CmdletBinding()]
param()

}
function Get-SPOGeoMoveCrossCompatibilityStatus
{
    [CmdletBinding()]
param()

}
function Get-SPOGeoStorageQuota
{
    [CmdletBinding()]
param(
    [switch]
    ${AllLocations})

}
function Get-SPOHideDefaultThemes
{
    [CmdletBinding()]
param()

}
function Get-SPOHomeSite
{
    [CmdletBinding()]
param()

}
function Get-SPOHubSite
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity})

}
function Get-SPOKnowledgeHubSite
{
    [CmdletBinding()]
param()

}
function Get-SPOMigrationJobProgress
{
    [CmdletBinding()]
param(
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetWebUrl},

    [Parameter(ParameterSetName='AzureLocationsInline', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${AzureQueueUri},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.PowerShell.CredentialCmdletPipeBind]
    ${Credentials},

    [Parameter(ParameterSetName='AzureLocationsImplicit', Mandatory=$true)]
    [Microsoft.Online.SharePoint.Migration.MigrationPackageAzureLocations]
    ${MigrationPackageAzureLocations},

    [guid[]]
    ${JobIds},

    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.Migration.EncryptionParameters]
    ${EncryptionParameters},

    [switch]
    ${DontWaitForEndJob},

    [switch]
    ${NoLogFile})

}
function Get-SPOMigrationJobStatus
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetWebUrl},

    [ValidateNotNullOrEmpty()]
    [guid]
    ${JobId},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.PowerShell.CredentialCmdletPipeBind]
    ${Credentials},

    [switch]
    ${NoLogFile})

}
function Get-SPOMultiGeoCompanyAllowedDataLocation
{
    [CmdletBinding()]
param()

}
function Get-SPOMultiGeoExperience
{
    [CmdletBinding()]
param()

}
function Get-SPOOrgAssetsLibrary
{
    [CmdletBinding()]
param()

}
function Get-SPOOrgNewsSite
{
    [CmdletBinding()]
param()

}
function Get-SPOPublicCdnOrigins
{
    [CmdletBinding()]
param()

}
function Get-SPOSite
{
    [CmdletBinding(DefaultParameterSetName='ParamSet1')]
param(
    [Parameter(ParameterSetName='ParamSet1', Position=0, ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='ParamSet3', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity},

    [Parameter(ParameterSetName='ParamSet2')]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='ParamSet1')]
    [Parameter(ParameterSetName='ParamSet2')]
    [string]
    ${Limit},

    [Parameter(ParameterSetName='ParamSet1')]
    [Parameter(ParameterSetName='ParamSet2')]
    [switch]
    ${Detailed},

    [Parameter(ParameterSetName='ParamSet3')]
    [switch]
    ${DisableSharingForNonOwnersStatus},

    [Parameter(ParameterSetName='ParamSet2')]
    [string]
    ${Template},

    [Parameter(ParameterSetName='ParamSet2')]
    [System.Nullable[bool]]
    ${IncludePersonalSite},

    [Parameter(ParameterSetName='ParamSet2')]
    [System.Nullable[bool]]
    ${GroupIdDefined})

}
function Get-SPOSiteCollectionAppCatalogs
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [Object]
    ${Site})

}
function Get-SPOSiteContentMoveState
{
    [CmdletBinding(DefaultParameterSetName='MoveReport')]
param(
    [Parameter(ParameterSetName='SourceSiteUrl', Mandatory=$true)]
    [string]
    ${SourceSiteUrl},

    [Parameter(ParameterSetName='SiteMoveId', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [guid]
    ${SiteMoveId},

    [Parameter(ParameterSetName='MoveReport')]
    [ValidateRange(1, 1000)]
    [uint32]
    ${Limit},

    [Parameter(ParameterSetName='MoveReport')]
    [datetime]
    ${MoveStartTime},

    [Parameter(ParameterSetName='MoveReport')]
    [datetime]
    ${MoveEndTime},

    [Parameter(ParameterSetName='MoveReport')]
    [Microsoft.Online.SharePoint.PowerShell.MoveState]
    ${MoveState},

    [Parameter(ParameterSetName='MoveReport')]
    [Microsoft.Online.SharePoint.PowerShell.MoveDirection]
    ${MoveDirection})

}
function Get-SPOSiteDataEncryptionPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity})

}
function Get-SPOSiteDesign
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true)]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignPipeBind]
    ${Identity})

}
function Get-SPOSiteDesignRights
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNull()]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignPipeBind]
    ${Identity})

}
function Get-SPOSiteDesignRun
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${WebUrl},

    [Parameter(Position=1, ValueFromPipeline=$true)]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignPipeBind]
    ${SiteDesignId})

}
function Get-SPOSiteDesignRunStatus
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignRun]
    ${Run})

}
function Get-SPOSiteDesignTask
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true)]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignTaskPipeBind]
    ${Identity},

    [Parameter(Position=1)]
    [string]
    ${WebUrl})

}
function Get-SPOSiteGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [Object]
    ${Site},

    [Parameter(Position=2)]
    [string]
    ${Group},

    [int]
    ${Limit})

}
function Get-SPOSiteRenameState
{
    [CmdletBinding(DefaultParameterSetName='SourceSiteUrl', SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(ParameterSetName='SourceSiteUrl', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [Object]
    ${Identity},

    [Parameter(ParameterSetName='ParentId', Mandatory=$true)]
    [guid]
    ${ParentOperationId},

    [Parameter(ParameterSetName='RenameReport')]
    [Parameter(ParameterSetName='ParentId')]
    [System.Nullable[Microsoft.Online.SharePoint.PowerShell.RenameState]]
    ${State})

}
function Get-SPOSiteScript
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true)]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteScriptPipeBind]
    ${Identity})

}
function Get-SPOSiteScriptFromList
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [string]
    ${ListUrl})

}
function Get-SPOSiteScriptFromWeb
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${WebUrl},

    [string[]]
    ${IncludedLists},

    [switch]
    ${IncludeBranding},

    [switch]
    ${IncludeTheme},

    [switch]
    ${IncludeRegionalSettings},

    [switch]
    ${IncludeSiteExternalSharingCapability},

    [switch]
    ${IncludeLinksToExportedItems})

}
function Get-SPOSiteUserInvitations
{
    [CmdletBinding(DefaultParameterSetName='All')]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true, Position=2)]
    [string]
    ${EmailAddress})

}
function Get-SPOStorageEntity
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true)]
    [string]
    ${Key})

}
function Get-SPOTenant
{
    [CmdletBinding()]
param()

}
function Get-SPOTenantCdnEnabled
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${CdnType})

}
function Get-SPOTenantCdnOrigins
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${CdnType})

}
function Get-SPOTenantCdnPolicies
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${CdnType})

}
function Get-SPOTenantContentTypeReplicationParameters
{
    [CmdletBinding()]
param()

}
function Get-SPOTenantLogEntry
{
    [CmdletBinding(DefaultParameterSetName='SiteSubscriptionId')]
param(
    [Parameter(ParameterSetName='CorrelationId', Mandatory=$true)]
    [guid]
    ${CorrelationId},

    [Parameter(ParameterSetName='Source', Mandatory=$true)]
    [int]
    ${Source},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${User},

    [Parameter(Position=0)]
    [datetime]
    ${StartTimeInUtc},

    [Parameter(Position=1)]
    [datetime]
    ${EndTimeInUtc},

    [Parameter(Position=2)]
    [ValidateRange(1, 5000)]
    [uint32]
    ${MaxRows})

}
function Get-SPOTenantLogLastAvailableTimeInUtc
{
    [CmdletBinding()]
param()

}
function Get-SPOTenantServicePrincipalPermissionGrants
{
    [CmdletBinding()]
param()

}
function Get-SPOTenantServicePrincipalPermissionRequests
{
    [CmdletBinding()]
param()

}
function Get-SPOTenantSyncClientRestriction
{
    [CmdletBinding()]
param()

}
function Get-SPOTenantTaxonomyReplicationParameters
{
    [CmdletBinding()]
param()

}
function Get-SPOTheme
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true)]
    [string]
    ${Name})

}
function Get-SPOUnifiedGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${GroupAlias})

}
function Get-SPOUnifiedGroupMoveState
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${GroupAlias})

}
function Get-SPOUser
{
    [CmdletBinding(DefaultParameterSetName='All')]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [Object]
    ${Site},

    [Parameter(ParameterSetName='ByGroup', Position=2)]
    [string]
    ${Group},

    [Parameter(ParameterSetName='ByLogin', Position=2)]
    [string]
    ${LoginName},

    [Parameter(ParameterSetName='ByGroup', Position=3)]
    [Parameter(ParameterSetName='All', Position=3)]
    [string]
    ${Limit})

}
function Get-SPOUserAndContentMoveState
{
    [CmdletBinding(DefaultParameterSetName='MoveReport')]
param(
    [Parameter(ParameterSetName='UserPrincipalName', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${UserPrincipalName},

    [Parameter(ParameterSetName='OdbMoveId', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [guid]
    ${OdbMoveId},

    [Parameter(ParameterSetName='MoveReport')]
    [ValidateRange(1, 1000)]
    [uint32]
    ${Limit},

    [Parameter(ParameterSetName='MoveReport')]
    [datetime]
    ${MoveStartTime},

    [Parameter(ParameterSetName='MoveReport')]
    [datetime]
    ${MoveEndTime},

    [Parameter(ParameterSetName='MoveReport')]
    [Microsoft.Online.SharePoint.PowerShell.MoveState]
    ${MoveState},

    [Parameter(ParameterSetName='MoveReport')]
    [Microsoft.Online.SharePoint.PowerShell.MoveDirection]
    ${MoveDirection})

}
function Get-SPOUserOneDriveLocation
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${UserPrincipalName})

}
function Get-SPOWebTemplate
{
    [CmdletBinding()]
param(
    [Parameter(Position=0)]
    [uint32]
    ${LocaleId},

    [int]
    ${CompatibilityLevel},

    [string]
    ${Name},

    [string]
    ${Title})

}
function Grant-SPOHubSiteRights
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Alias('HubSite')]
    [Object]
    ${Identity},

    [Parameter(Mandatory=$true)]
    [string[]]
    ${Principals},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.PowerShell.SPOHubSiteUserRightsClient]
    ${Rights})

}
function Grant-SPOSiteDesignRights
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNull()]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignPipeBind]
    ${Identity},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${Principals},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignPrincipalRights]
    ${Rights})

}
function Invoke-SPOMigrationEncryptUploadSubmit
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='ImplicitSourceParameterSet', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.Migration.MigrationPackageLocation]
    ${MigrationSourceLocations},

    [Parameter(ParameterSetName='ExplicitSourceParameterSet', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SourceFilesPath},

    [Parameter(ParameterSetName='ExplicitSourceParameterSet', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SourcePackagePath},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.PowerShell.CredentialCmdletPipeBind]
    ${Credentials},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetWebUrl},

    [switch]
    ${NoLogFile},

    [switch]
    ${ParallelUpload})

}
function Invoke-SPOSiteDesign
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
    [ValidateNotNull()]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignPipeBind]
    ${Identity},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${WebUrl})

}
function Invoke-SPOSiteSwap
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${SourceUrl},

    [Parameter(Mandatory=$true, Position=1)]
    [string]
    ${TargetUrl},

    [Parameter(Mandatory=$true, Position=2)]
    [string]
    ${ArchiveUrl},

    [switch]
    ${DisableRedirection},

    [switch]
    ${NoWait})

}
function New-SPOMigrationEncryptionParameters
{
    [CmdletBinding()]
param()

}
function New-SPOMigrationPackage
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SourceFilesPath},

    [Parameter(Mandatory=$true, Position=1)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${OutputPackagePath},

    [Parameter(Position=2)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetWebUrl},

    [Parameter(Position=3)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetDocumentLibraryPath},

    [Parameter(Position=4)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetDocumentLibrarySubFolderPath},

    [switch]
    ${IncludeFileSharePermissions},

    [switch]
    ${ReplaceInvalidCharacters},

    [switch]
    ${IgnoreHidden},

    [switch]
    ${NoLogFile},

    [switch]
    ${NoAzureADLookup})

}
function New-SPOPublicCdnOrigin
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [string]
    ${Url})

}
function New-SPOSdnProvider
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [string]
    ${Identity},

    [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true)]
    [string]
    ${License})

}
function New-SPOSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.PowerShell.UrlCmdletPipeBind]
    ${Url},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Owner},

    [Parameter(Mandatory=$true)]
    [long]
    ${StorageQuota},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Title},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Template},

    [uint32]
    ${LocaleId},

    [int]
    ${CompatibilityLevel},

    [double]
    ${ResourceQuota},

    [int]
    ${TimeZoneId},

    [switch]
    ${NoWait})

}
function New-SPOSiteGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true, Position=2)]
    [string]
    ${Group},

    [Parameter(Mandatory=$true, Position=4)]
    [string[]]
    ${PermissionLevels})

}
function Register-SPODataEncryptionPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity},

    [Parameter(Mandatory=$true)]
    [string]
    ${PrimaryKeyVaultName},

    [Parameter(Mandatory=$true)]
    [string]
    ${PrimaryKeyName},

    [Parameter(Mandatory=$true)]
    [guid]
    ${PrimaryKeyVersion},

    [Parameter(Mandatory=$true)]
    [string]
    ${SecondaryKeyVaultName},

    [Parameter(Mandatory=$true)]
    [string]
    ${SecondaryKeyName},

    [Parameter(Mandatory=$true)]
    [guid]
    ${SecondaryKeyVersion})

}
function Register-SPOHubSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true)]
    [AllowEmptyCollection()]
    [AllowNull()]
    [string[]]
    ${Principals})

}
function Remove-SPODeletedSite
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity},

    [switch]
    ${NoWait})

}
function Remove-SPOExternalUser
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(ParameterSetName='All', Mandatory=$true, Position=1)]
    [string[]]
    ${UniqueIDs})

}
function Remove-SPOGeoAdministrator
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='Group', Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${GroupAlias},

    [Parameter(ParameterSetName='User', Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${UserPrincipalName},

    [Parameter(ParameterSetName='ObjectId', Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [guid]
    ${ObjectId})

}
function Remove-SPOHomeSite
{
    [CmdletBinding()]
param()

}
function Remove-SPOHubSiteAssociation
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Site})

}
function Remove-SPOHubToHubAssociation
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNull()]
    [guid]
    ${HubSiteId})

}
function Remove-SPOKnowledgeHubSite
{
    [CmdletBinding()]
param()

}
function Remove-SPOMigrationJob
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetWebUrl},

    [Parameter(Mandatory=$true, Position=1)]
    [ValidateNotNullOrEmpty()]
    [guid]
    ${JobId},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.PowerShell.CredentialCmdletPipeBind]
    ${Credentials},

    [switch]
    ${NoLogFile})

}
function Remove-SPOMultiGeoCompanyAllowedDataLocation
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Location})

}
function Remove-SPOOrgAssetsLibrary
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [string]
    ${LibraryUrl},

    [guid]
    ${ListId})

}
function Remove-SPOOrgNewsSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${OrgNewsSiteUrl})

}
function Remove-SPOPublicCdnOrigin
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [string]
    ${Identity})

}
function Remove-SPOSdnProvider
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param()

}
function Remove-SPOSite
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity},

    [switch]
    ${NoWait})

}
function Remove-SPOSiteCollectionAppCatalog
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [Object]
    ${Site})

}
function Remove-SPOSiteCollectionAppCatalogById
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [guid]
    ${SiteId})

}
function Remove-SPOSiteDesign
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNull()]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignPipeBind]
    ${Identity})

}
function Remove-SPOSiteDesignTask
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignTaskPipeBind]
    ${Identity})

}
function Remove-SPOSiteGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true, Position=2)]
    [string]
    ${Identity})

}
function Remove-SPOSiteScript
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNull()]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteScriptPipeBind]
    ${Identity})

}
function Remove-SPOSiteUserInvitations
{
    [CmdletBinding(DefaultParameterSetName='All')]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true, Position=2)]
    [string]
    ${EmailAddress},

    [Parameter(Position=3)]
    [switch]
    ${CountOnly})

}
function Remove-SPOStorageEntity
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true)]
    [string]
    ${Key})

}
function Remove-SPOTenantCdnOrigin
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${OriginUrl},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${CdnType})

}
function Remove-SPOTenantSyncClientRestriction
{
    [CmdletBinding()]
param()

}
function Remove-SPOTheme
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Alias('Name')]
    [Microsoft.Online.SharePoint.PowerShell.SpoThemePipeBind]
    ${Identity})

}
function Remove-SPOUser
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [Object]
    ${Site},

    [Parameter(ParameterSetName='ByLogin', Mandatory=$true, Position=2)]
    [string]
    ${LoginName},

    [Parameter(Position=3)]
    [string]
    ${Group})

}
function Remove-SPOUserInfo
{
    [CmdletBinding(DefaultParameterSetName='All')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${LoginName},

    [Parameter(Mandatory=$true)]
    [Object]
    ${Site},

    [string]
    ${RedactName})

}
function Remove-SPOUserProfile
{
    [CmdletBinding(DefaultParameterSetName='All')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${LoginName},

    [string]
    ${UserId})

}
function Repair-SPOSite
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity},

    [guid]
    ${RuleId},

    [switch]
    ${RunAlways})

}
function Request-SPOPersonalSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
    [ValidateNotNull()]
    [string[]]
    ${UserEmails},

    [switch]
    ${NoWait})

}
function Request-SPOUpgradeEvaluationSite
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity},

    [switch]
    ${NoUpgrade},

    [switch]
    ${NoEmail})

}
function Restore-SPODataEncryptionPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity},

    [Parameter(Mandatory=$true)]
    [string]
    ${PrimaryKeyVaultName},

    [Parameter(Mandatory=$true)]
    [string]
    ${PrimaryKeyName},

    [Parameter(Mandatory=$true)]
    [guid]
    ${PrimaryKeyVersion},

    [Parameter(Mandatory=$true)]
    [string]
    ${SecondaryKeyVaultName},

    [Parameter(Mandatory=$true)]
    [string]
    ${SecondaryKeyName},

    [Parameter(Mandatory=$true)]
    [guid]
    ${SecondaryKeyVersion})

}
function Restore-SPODeletedSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNullOrEmpty()]
    [Object]
    ${Identity},

    [switch]
    ${NoWait})

}
function Revoke-SPOHubSiteRights
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Alias('HubSite')]
    [Object]
    ${Identity},

    [Parameter(Mandatory=$true)]
    [string[]]
    ${Principals})

}
function Revoke-SPOSiteDesignRights
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNull()]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignPipeBind]
    ${Identity},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${Principals})

}
function Revoke-SPOTenantServicePrincipalPermission
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${ObjectId})

}
function Revoke-SPOUserSession
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${User})

}
function Set-SPOBrowserIdleSignOut
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [bool]
    ${Enabled},

    [timespan]
    ${WarnAfter},

    [timespan]
    ${SignOutAfter})

}
function Set-SPOBuiltInDesignPackageVisibility
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [bool]
    ${IsVisible},

    [Parameter(Mandatory=$true)]
    [Microsoft.SharePoint.Administration.DesignPackageType, Microsoft.SharePoint.Client, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${DesignPackage})

}
function Set-SPOGeoStorageQuota
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${GeoLocation},

    [Parameter(Mandatory=$true)]
    [long]
    ${StorageQuotaMB})

}
function Set-SPOHideDefaultThemes
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [bool]
    ${HideDefaultThemes})

}
function Set-SPOHomeSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${HomeSiteUrl})

}
function Set-SPOHubSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Alias('HubSite')]
    [Object]
    ${Identity},

    [string]
    ${Title},

    [string]
    ${LogoUrl},

    [string]
    ${Description},

    [System.Nullable[guid]]
    ${SiteDesignId},

    [System.Nullable[bool]]
    ${RequiresJoinApproval},

    [System.Nullable[bool]]
    ${HideNameInNavigation},

    [System.Nullable[bool]]
    ${EnablePermissionsSync})

}
function Set-SPOKnowledgeHubSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${KnowledgeHubSiteUrl})

}
function Set-SPOMigrationPackageAzureSource
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='ImplicitSourceExplicitAzure', Mandatory=$true)]
    [Parameter(ParameterSetName='ImplicitSourceImplicitAzure', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.Migration.MigrationPackageLocation]
    ${MigrationSourceLocations},

    [Parameter(ParameterSetName='ExplicitSourceExplicitAzure', Mandatory=$true)]
    [Parameter(ParameterSetName='ExplicitSourceImplicitAzure', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SourceFilesPath},

    [Parameter(ParameterSetName='ExplicitSourceExplicitAzure', Mandatory=$true)]
    [Parameter(ParameterSetName='ExplicitSourceImplicitAzure', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SourcePackagePath},

    [Parameter(ParameterSetName='ExplicitSourceExplicitAzure')]
    [Parameter(ParameterSetName='ImplicitSourceExplicitAzure')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${FileContainerName},

    [Parameter(ParameterSetName='ExplicitSourceExplicitAzure')]
    [Parameter(ParameterSetName='ImplicitSourceExplicitAzure')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${PackageContainerName},

    [Parameter(ParameterSetName='ExplicitSourceExplicitAzure')]
    [Parameter(ParameterSetName='ImplicitSourceExplicitAzure')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${AzureQueueName},

    [Parameter(ParameterSetName='ExplicitSourceExplicitAzure', Mandatory=$true)]
    [Parameter(ParameterSetName='ImplicitSourceExplicitAzure', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${AccountName},

    [Parameter(ParameterSetName='ExplicitSourceExplicitAzure', Mandatory=$true)]
    [Parameter(ParameterSetName='ImplicitSourceExplicitAzure', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${AccountKey},

    [Parameter(ParameterSetName='ExplicitSourceImplicitAzure', Mandatory=$true)]
    [Parameter(ParameterSetName='ImplicitSourceImplicitAzure', Mandatory=$true)]
    [Microsoft.Online.SharePoint.Migration.MigrationPackageAzureLocations]
    ${MigrationPackageAzureLocations},

    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.Migration.EncryptionParameters]
    ${EncryptionParameters},

    [switch]
    ${NoUpload},

    [switch]
    ${NoSnapshotCreation},

    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.Migration.MigrationFileEncryptionInfo[]]
    ${EncryptionMetaInfo},

    [switch]
    ${NoLogFile},

    [switch]
    ${Overwrite},

    [switch]
    ${ParallelUpload})

}
function Set-SPOMultiGeoCompanyAllowedDataLocation
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Location},

    [Parameter(Mandatory=$true, Position=1)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${InitialDomain})

}
function Set-SPOMultiGeoExperience
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [switch]
    ${AllInstances})

}
function Set-SPOOrgAssetsLibrary
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${LibraryUrl},

    [string]
    ${ThumbnailUrl},

    [Microsoft.SharePoint.Administration.OrgAssetType, Microsoft.SharePoint.Client, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${OrgAssetType})

}
function Set-SPOOrgNewsSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${OrgNewsSiteUrl})

}
function Set-SPOSite
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNullOrEmpty()]
    [Object]
    ${Identity},

    [Parameter(ParameterSetName='ParamSet1')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Owner},

    [Parameter(ParameterSetName='ParamSet1')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Title},

    [Parameter(ParameterSetName='ParamSet1')]
    [long]
    ${StorageQuota},

    [Parameter(ParameterSetName='ParamSet1')]
    [long]
    ${StorageQuotaWarningLevel},

    [Parameter(ParameterSetName='ParamSet1')]
    [double]
    ${ResourceQuota},

    [Parameter(ParameterSetName='ParamSet1')]
    [double]
    ${ResourceQuotaWarningLevel},

    [Parameter(ParameterSetName='ParamSet1')]
    [uint32]
    ${LocaleId},

    [Parameter(ParameterSetName='ParamSet1')]
    [bool]
    ${AllowSelfServiceUpgrade},

    [Parameter(ParameterSetName='ParamSet1')]
    [switch]
    ${NoWait},

    [Parameter(ParameterSetName='ParamSet1')]
    [string]
    ${LockState},

    [Parameter(ParameterSetName='ParamSet1')]
    [bool]
    ${DenyAddAndCustomizePages},

    [Parameter(ParameterSetName='ParamSet2', Mandatory=$true)]
    [bool]
    ${EnablePWA},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SharingCapabilities, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${SharingCapability},

    [Parameter(ParameterSetName='ParamSet1')]
    [bool]
    ${ShowPeoplePickerSuggestionsForGuestUsers},

    [Parameter(ParameterSetName='ParamSet1')]
    [switch]
    ${StorageQuotaReset},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantAdministration.SandboxedCodeActivationCapabilities, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${SandboxedCodeActivationCapability},

    [Parameter(ParameterSetName='ParamSet3')]
    [switch]
    ${DisableSharingForNonOwners},

    [Parameter(ParameterSetName='ParamSet5')]
    [switch]
    ${RemoveLabel},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantAdministration.CompanyWideSharingLinksPolicy, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${DisableCompanyWideSharingLinks},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SharingDomainRestrictionModes, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${SharingDomainRestrictionMode},

    [Parameter(ParameterSetName='ParamSet1')]
    [string]
    ${SharingAllowedDomainList},

    [Parameter(ParameterSetName='ParamSet1')]
    [string]
    ${SharingBlockedDomainList},

    [Parameter(ParameterSetName='ParamSet1')]
    [Parameter(ParameterSetName='AuthContextParameterSet')]
    [Microsoft.Online.SharePoint.TenantManagement.SPOConditionalAccessPolicyType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${ConditionalAccessPolicy},

    [Parameter(ParameterSetName='ParamSet1')]
    [bool]
    ${AllowDownloadingNonWebViewableFiles},

    [Parameter(ParameterSetName='ParamSet1')]
    [Microsoft.Online.SharePoint.TenantManagement.SPOLimitedAccessFileType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${LimitedAccessFileType},

    [Parameter(ParameterSetName='ParamSet1')]
    [bool]
    ${AllowEditing},

    [Parameter(ParameterSetName='ParamSet1')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SensitivityLabel},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantAdministration.AppViewsPolicy, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${DisableAppViews},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantAdministration.FlowsPolicy, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${DisableFlows},

    [Parameter(ParameterSetName='AuthContextParameterSet')]
    [string]
    ${ProtectionLevelName},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantAdministration.RestrictedToRegion, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${RestrictedToGeo},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable[bool]]
    ${CommentsOnSitePagesDisabled},

    [Parameter(ParameterSetName='ParamSet1')]
    [switch]
    ${UpdateUserTypeFromAzureAD},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable[bool]]
    ${SocialBarOnSitePagesDisabled},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable[guid]]
    ${HubSiteId},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SharingLinkType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${DefaultSharingLinkType},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SharingPermissionType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${DefaultLinkPermission},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable[bool]]
    ${DefaultLinkToExistingAccess},

    [Parameter(ParameterSetName='ParamSet1')]
    [switch]
    ${DefaultLinkToExistingAccessReset},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable[int]]
    ${AnonymousLinkExpirationInDays},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable[bool]]
    ${OverrideTenantAnonymousLinkExpirationPolicy},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable[int]]
    ${ExternalUserExpirationInDays},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable[bool]]
    ${OverrideTenantExternalUserExpirationPolicy},

    [Parameter(ParameterSetName='ParamSet1')]
    [AllowEmptyCollection()]
    [guid[]]
    ${InformationSegment},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.BlockDownloadLinksFileTypes, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${BlockDownloadLinksFileType})

}
function Set-SPOSiteDesign
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNull()]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignPipeBind]
    ${Identity},

    [string]
    ${Title},

    [string]
    ${WebTemplate},

    [Microsoft.Online.SharePoint.PowerShell.SPOSiteScriptPipeBind[]]
    ${SiteScripts},

    [string]
    ${Description},

    [string]
    ${PreviewImageUrl},

    [string]
    ${PreviewImageAltText},

    [System.Nullable[bool]]
    ${IsDefault},

    [System.Nullable[int]]
    ${Version},

    [System.Nullable[guid]]
    ${DesignPackageId})

}
function Set-SPOSiteGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true, Position=2)]
    [string]
    ${Identity},

    [Parameter(Position=3)]
    [string]
    ${Name},

    [Parameter(Position=5)]
    [string[]]
    ${PermissionLevelsToAdd},

    [Parameter(Position=6)]
    [string[]]
    ${PermissionLevelsToRemove},

    [Parameter(Position=7)]
    [string]
    ${Owner})

}
function Set-SPOSiteOffice365Group
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNullOrEmpty()]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true, Position=1)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${DisplayName},

    [Parameter(Mandatory=$true, Position=2)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Alias},

    [Parameter(Position=3)]
    [switch]
    ${IsPublic},

    [Parameter(Position=4)]
    [string]
    ${Description},

    [Parameter(Position=5)]
    [string]
    ${Classification},

    [Parameter(Position=6)]
    [switch]
    ${KeepOldHomepage})

}
function Set-SPOSiteScript
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteScriptPipeBind]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Title},

    [Parameter(ValueFromPipeline=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Content},

    [string]
    ${Description},

    [System.Nullable[int]]
    ${Version})

}
function Set-SPOSiteScriptPackage
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteScriptPipeBind]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Title},

    [ValidateNotNullOrEmpty()]
    [string]
    ${ContentPath},

    [string]
    ${Description},

    [System.Nullable[int]]
    ${Version})

}
function Set-SPOStorageEntity
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true)]
    [string]
    ${Key},

    [Parameter(Mandatory=$true)]
    [string]
    ${Value},

    [Parameter(Mandatory=$true)]
    [string]
    ${Comments},

    [Parameter(Mandatory=$true)]
    [string]
    ${Description})

}
function Set-SPOTenant
{
    [CmdletBinding(DefaultParameterSetName='None')]
param(
    [int]
    ${MinCompatibilityLevel},

    [int]
    ${MaxCompatibilityLevel},

    [System.Nullable[bool]]
    ${ExternalServicesEnabled},

    [string]
    ${NoAccessRedirectUrl},

    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SharingCapabilities, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${SharingCapability},

    [System.Nullable[bool]]
    ${DisplayStartASiteOption},

    [string]
    ${StartASiteFormUrl},

    [System.Nullable[bool]]
    ${ShowEveryoneClaim},

    [System.Nullable[bool]]
    ${ShowAllUsersClaim},

    [System.Nullable[bool]]
    ${ShowEveryoneExceptExternalUsersClaim},

    [System.Nullable[bool]]
    ${SearchResolveExactEmailOrUPN},

    [System.Nullable[bool]]
    ${OfficeClientADALDisabled},

    [System.Nullable[bool]]
    ${LegacyAuthProtocolsEnabled},

    [System.Nullable[bool]]
    ${RequireAcceptingAccountMatchInvitedAccount},

    [System.Nullable[bool]]
    ${ProvisionSharedWithEveryoneFolder},

    [string]
    ${SignInAccelerationDomain},

    [System.Nullable[bool]]
    ${EnableGuestSignInAcceleration},

    [System.Nullable[bool]]
    ${UsePersistentCookiesForExplorerView},

    [Parameter(ParameterSetName='ParameterSetContentTypeSyncSiteTemplatesList', Mandatory=$true)]
    [ValidateSet('MySites')]
    [string[]]
    ${ContentTypeSyncSiteTemplatesList},

    [Parameter(ParameterSetName='ParameterSetContentTypeSyncSiteTemplatesList')]
    [switch]
    ${ExcludeSiteTemplate},

    [System.Nullable[bool]]
    ${BccExternalSharingInvitations},

    [string]
    ${BccExternalSharingInvitationsList},

    [System.Nullable[bool]]
    ${UserVoiceForFeedbackEnabled},

    [System.Nullable[bool]]
    ${PublicCdnEnabled},

    [string]
    ${PublicCdnAllowedFileTypes},

    [System.Nullable[int]]
    ${RequireAnonymousLinksExpireInDays},

    [string]
    ${SharingAllowedDomainList},

    [string]
    ${SharingBlockedDomainList},

    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SharingDomainRestrictionModes, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${SharingDomainRestrictionMode},

    [System.Nullable[long]]
    ${OneDriveStorageQuota},

    [System.Nullable[bool]]
    ${OneDriveForGuestsEnabled},

    [System.Nullable[bool]]
    ${IPAddressEnforcement},

    [string]
    ${IPAddressAllowList},

    [System.Nullable[int]]
    ${IPAddressWACTokenLifetime},

    [System.Nullable[bool]]
    ${EnablePromotedFileHandlers},

    [System.Nullable[bool]]
    ${UseFindPeopleInPeoplePicker},

    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SharingLinkType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${DefaultSharingLinkType},

    [System.Nullable`1[[Microsoft.SharePoint.Client.SharingState, Microsoft.SharePoint.Client, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${ODBMembersCanShare},

    [System.Nullable`1[[Microsoft.SharePoint.Client.SharingState, Microsoft.SharePoint.Client, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${ODBAccessRequests},

    [System.Nullable[bool]]
    ${PreventExternalUsersFromResharing},

    [System.Nullable[bool]]
    ${ShowPeoplePickerSuggestionsForGuestUsers},

    [System.Nullable`1[[Microsoft.SharePoint.Client.AnonymousLinkType, Microsoft.SharePoint.Client, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${FileAnonymousLinkType},

    [System.Nullable`1[[Microsoft.SharePoint.Client.AnonymousLinkType, Microsoft.SharePoint.Client, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${FolderAnonymousLinkType},

    [System.Nullable[bool]]
    ${NotifyOwnersWhenItemsReshared},

    [System.Nullable[bool]]
    ${NotifyOwnersWhenInvitationsAccepted},

    [System.Nullable[bool]]
    ${NotificationsInOneDriveForBusinessEnabled},

    [System.Nullable[bool]]
    ${NotificationsInSharePointEnabled},

    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SpecialCharactersState, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${SpecialCharactersStateInFileFolderNames},

    [System.Nullable[bool]]
    ${OwnerAnonymousNotification},

    [System.Nullable[bool]]
    ${CommentsOnSitePagesDisabled},

    [System.Nullable[bool]]
    ${CommentsOnFilesDisabled},

    [System.Nullable[bool]]
    ${SocialBarOnSitePagesDisabled},

    [System.Nullable[int]]
    ${OrphanedPersonalSitesRetentionPeriod},

    [System.Nullable[bool]]
    ${PermissiveBrowserFileHandlingOverride},

    [System.Nullable[bool]]
    ${DisallowInfectedFileDownload},

    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SharingPermissionType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${DefaultLinkPermission},

    [string]
    ${CustomizedExternalSharingServiceUrl},

    [string]
    ${ConditionalAccessPolicyErrorHelpLink},

    [Parameter(ParameterSetName='ParamSetMultipleSites')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SPOConditionalAccessPolicyType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${ConditionalAccessPolicy},

    [Parameter(ParameterSetName='ParamSetMultipleSites')]
    [System.Nullable[bool]]
    ${AllowDownloadingNonWebViewableFiles},

    [Parameter(ParameterSetName='ParamSetMultipleSites')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SPOLimitedAccessFileType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${LimitedAccessFileType},

    [Parameter(ParameterSetName='ParamSetMultipleSites')]
    [System.Nullable[bool]]
    ${AllowEditing},

    [System.Nullable[bool]]
    ${ApplyAppEnforcedRestrictionsToAdHocRecipients},

    [System.Nullable[bool]]
    ${FilePickerExternalImageSearchEnabled},

    [System.Nullable[bool]]
    ${EmailAttestationRequired},

    [System.Nullable[int]]
    ${EmailAttestationReAuthDays},

    [System.Nullable[bool]]
    ${SyncPrivacyProfileProperties},

    [guid[]]
    ${DisabledWebPartIds},

    [System.Nullable[bool]]
    ${EnableMinimumVersionRequirement},

    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SensitiveByDefaultState, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${MarkNewFilesSensitiveByDefault},

    [System.Nullable[bool]]
    ${EnableAIPIntegration},

    [System.Nullable[bool]]
    ${SyncAadB2BManagementPolicy},

    [System.Nullable[bool]]
    ${AllowCommentsTextOnEmailEnabled},

    [System.Nullable[bool]]
    ${EnableAzureADB2BIntegration},

    [Parameter(ParameterSetName='ParamSetMultipleSites', Position=0, ValueFromPipeline=$true)]
    [Object[]]
    ${Sites},

    [System.Nullable[bool]]
    ${ExternalUserExpirationRequired},

    [System.Nullable[int]]
    ${ExternalUserExpireInDays},

    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.BlockDownloadLinksFileTypes, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${BlockDownloadLinksFileType})

}
function Set-SPOTenantCdnEnabled
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [bool]
    ${Enable},

    [Microsoft.Online.SharePoint.PowerShell.SPOTenantCdnTypeClient]
    ${CdnType},

    [switch]
    ${NoDefaultOrigins})

}
function Set-SPOTenantCdnPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnPolicyType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${PolicyType},

    [Parameter(Mandatory=$true)]
    [string]
    ${PolicyValue},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${CdnType})

}
function Set-SPOTenantContentTypeReplicationParameters
{
    [CmdletBinding(DefaultParameterSetName='ReplicateSelectedContentTypes')]
param(
    [Parameter(ParameterSetName='ReplicateAllContentTypes', Mandatory=$true)]
    [switch]
    ${ReplicateAllContentTypes},

    [Parameter(ParameterSetName='ReplicateSelectedContentTypes', Mandatory=$true)]
    [AllowEmptyCollection()]
    [string[]]
    ${ReplicatedContentTypes})

}
function Set-SPOTenantSyncClientRestriction
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='Blocking')]
    [switch]
    ${Enable},

    [Parameter(ParameterSetName='Blocking')]
    [string]
    ${DomainGuids},

    [Parameter(ParameterSetName='Blocking')]
    [switch]
    ${BlockMacSync},

    [Parameter(ParameterSetName='FileExclusion')]
    [string]
    ${ExcludedFileExtensions},

    [Parameter(ParameterSetName='GrooveBlockOptions')]
    [ValidateSet('OptOut','HardOptIn','SoftOptIn')]
    [string]
    ${GrooveBlockOption},

    [Parameter(ParameterSetName='ReportProblemDialogFeature', Mandatory=$true)]
    [bool]
    ${DisableReportProblemDialog})

}
function Set-SPOTenantTaxonomyReplicationParameters
{
    [CmdletBinding(DefaultParameterSetName='ReplicateSelectedGroups')]
param(
    [Parameter(ParameterSetName='ReplicateAllGroups', Mandatory=$true)]
    [switch]
    ${ReplicateAllGroups},

    [Parameter(ParameterSetName='ReplicateSelectedGroups', Mandatory=$true)]
    [AllowEmptyCollection()]
    [string[]]
    ${ReplicatedGroups})

}
function Set-SPOUnifiedGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${GroupAlias},

    [Parameter(Mandatory=$true, Position=1)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${PreferredDataLocation})

}
function Set-SPOUser
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true, Position=2)]
    [string]
    ${LoginName},

    [Parameter(ParameterSetName='ByLogin', Position=3)]
    [bool]
    ${IsSiteCollectionAdmin},

    [Parameter(ParameterSetName='ByLogin', Position=3)]
    [switch]
    ${UpdateUserTypeFromAzureAD})

}
function Set-SPOWebTheme
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Alias('Identity','Name')]
    [Microsoft.Online.SharePoint.PowerShell.SpoThemePipeBind]
    ${Theme},

    [Parameter(Mandatory=$true, Position=1)]
    [Object]
    ${Web})

}
function Start-SPOSiteContentMove
{
    [CmdletBinding(DefaultParameterSetName='UrlAndDestinationDataLocation')]
param(
    [Parameter(ParameterSetName='UrlAndDestinationUrl', Mandatory=$true, Position=0)]
    [Parameter(ParameterSetName='UrlAndDestinationDataLocation', Mandatory=$true, Position=0)]
    [string]
    ${SourceSiteUrl},

    [Parameter(ParameterSetName='UrlAndDestinationDataLocation', Mandatory=$true, Position=1)]
    [string]
    ${DestinationDataLocation},

    [Parameter(ParameterSetName='UrlAndDestinationUrl', Mandatory=$true, Position=1)]
    [string]
    ${DestinationUrl},

    [Parameter(Position=2)]
    [datetime]
    ${PreferredMoveBeginDate},

    [Parameter(Position=3)]
    [datetime]
    ${PreferredMoveEndDate},

    [Parameter(Position=4)]
    [string]
    ${Reserved},

    [Parameter(Position=5)]
    [switch]
    ${ValidationOnly},

    [Parameter(Position=6)]
    [switch]
    ${Force},

    [Parameter(Position=7)]
    [switch]
    ${SuppressMarketplaceAppCheck},

    [Parameter(Position=8)]
    [switch]
    ${SuppressWorkflow2013Check},

    [Parameter(Position=9)]
    [switch]
    ${SuppressAllWarnings},

    [Parameter(Position=10)]
    [switch]
    ${SuppressBcsCheck})

}
function Start-SPOSiteRename
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(ParameterSetName='StartNewSiteRename', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [Object]
    ${Identity},

    [Parameter(ParameterSetName='StartNewSiteRename', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${NewSiteUrl},

    [Parameter(ParameterSetName='StartNewSiteRename')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${NewSiteTitle},

    [Parameter(ParameterSetName='StartNewSiteRename')]
    [switch]
    ${SuppressMarketplaceAppCheck},

    [Parameter(ParameterSetName='StartNewSiteRename')]
    [switch]
    ${SuppressWorkflow2013Check},

    [Parameter(ParameterSetName='StartNewSiteRename')]
    [switch]
    ${SuppressAllWarnings},

    [Parameter(ParameterSetName='StartNewSiteRename')]
    [switch]
    ${SuppressBcsCheck},

    [Parameter(ParameterSetName='StartNewSiteRename')]
    [switch]
    ${ValidationOnly},

    [Parameter(ParameterSetName='StartNewSiteRename')]
    [string]
    ${Reserved})

}
function Start-SPOUnifiedGroupMove
{
    [CmdletBinding(DefaultParameterSetName='GroupAliasAndDestinationDataLocation')]
param(
    [Parameter(ParameterSetName='GroupAliasAndDestinationDataLocation', Mandatory=$true, Position=0)]
    [string]
    ${GroupAlias},

    [Parameter(ParameterSetName='GroupAliasAndDestinationDataLocation', Mandatory=$true, Position=1)]
    [string]
    ${DestinationDataLocation},

    [Parameter(Position=2)]
    [datetime]
    ${PreferredMoveBeginDate},

    [Parameter(Position=3)]
    [datetime]
    ${PreferredMoveEndDate},

    [Parameter(Position=4)]
    [string]
    ${Reserved},

    [Parameter(Position=5)]
    [switch]
    ${ValidationOnly},

    [Parameter(Position=6)]
    [switch]
    ${Force},

    [Parameter(Position=7)]
    [switch]
    ${SuppressMarketplaceAppCheck},

    [Parameter(Position=8)]
    [switch]
    ${SuppressWorkflow2013Check},

    [Parameter(Position=9)]
    [switch]
    ${SuppressAllWarnings},

    [Parameter(Position=10)]
    [switch]
    ${SuppressBcsCheck})

}
function Start-SPOUserAndContentMove
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [string]
    ${UserPrincipalName},

    [Parameter(Mandatory=$true, Position=2)]
    [string]
    ${DestinationDataLocation},

    [Parameter(Position=3)]
    [datetime]
    ${PreferredMoveBeginDate},

    [Parameter(Position=4)]
    [datetime]
    ${PreferredMoveEndDate},

    [Parameter(Position=5)]
    [string]
    ${Notify},

    [Parameter(Position=6)]
    [string]
    ${Reserved},

    [Parameter(Position=7)]
    [switch]
    ${ValidationOnly})

}
function Stop-SPOSiteContentMove
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${SourceSiteUrl})

}
function Stop-SPOUserAndContentMove
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [string]
    ${UserPrincipalName})

}
function Submit-SPOMigrationJob
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetWebUrl},

    [Parameter(ParameterSetName='AzureLocationsInline', Mandatory=$true, Position=1)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${FileContainerUri},

    [Parameter(ParameterSetName='AzureLocationsInline', Mandatory=$true, Position=2)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${PackageContainerUri},

    [Parameter(ParameterSetName='AzureLocationsInline')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${AzureQueueUri},

    [Parameter(ParameterSetName='AzureLocationsPipebind', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
    [Microsoft.Online.SharePoint.Migration.MigrationPackageAzureLocations]
    ${MigrationPackageAzureLocations},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.PowerShell.CredentialCmdletPipeBind]
    ${Credentials},

    [switch]
    ${NoLogFile},

    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.Migration.EncryptionParameters]
    ${EncryptionParameters})

}
function Test-SPOSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity},

    [guid]
    ${RuleId},

    [switch]
    ${RunAlways})

}
function Unregister-SPOHubSite
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Alias('HubSite')]
    [Object]
    ${Identity},

    [switch]
    ${Force})

}
function Update-SPODataEncryptionPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity},

    [Parameter(Mandatory=$true)]
    [string]
    ${KeyVaultName},

    [Parameter(Mandatory=$true)]
    [string]
    ${KeyName},

    [Parameter(Mandatory=$true)]
    [guid]
    ${KeyVersion},

    [Parameter(Mandatory=$true)]
    [Microsoft.SharePoint.Client.CustomerKeyVaultKeyType, Microsoft.SharePoint.Client, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${KeyType})

}
function Update-UserType
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [string]
    ${LoginName})

}
function Upgrade-SPOSite
{
    [CmdletBinding(DefaultParameterSetName='SPSiteById', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity},

    [switch]
    ${VersionUpgrade},

    [switch]
    ${QueueOnly},

    [switch]
    ${NoEmail})

}
#endregion
#region SkypeForBusiness
function Clear-CsOnlineTelephoneNumberReservation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ReservationId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${InventoryType},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function ConvertTo-JsonForPSWS
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${InputObject},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Depth},

    [switch]
    ${Compress},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-CsMeetingRoom
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-CsOnlineDialInConferencingUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SendEmailFromDisplayName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${TenantDomain},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SendEmailToAddress},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${SendEmailFromAddress},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${SendEmail},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-CsOnlineSipDomain
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-CsMeetingRoom
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${OriginatorSid},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SipAddressType},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [System.Object]
    ${SipDomain},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('HostingProvider')]
    [System.Object]
    ${HostingProviderProxyFqdn},

    [System.Object]
    ${SipAddress},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RegistrarPool},

    [System.Object]
    ${ProxyPool},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-CsOnlineDialInConferencingUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowPstnOnlyMeetings},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ServiceNumber},

    [System.Object]
    ${SendEmailFromDisplayName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('Passcode')]
    [System.Object]
    ${ConferenceId},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${TenantDomain},

    [System.Object]
    ${TollFreeServiceNumber},

    [System.Object]
    ${SendEmailToAddress},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${SendEmailFromAddress},

    [switch]
    ${SendEmail},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowTollFreeDialIn},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${ReplaceProvider},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${AsJob})

}
function Enable-CsOnlineSipDomain
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Export-CsAutoAttendantHolidays
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Export-CsOrganizationalAutoAttendantHolidays
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PrimaryUri},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${ApplicationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Find-CsGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${MaxResults},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${SearchQuery},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${MailEnabledOnly},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExactMatchOnly},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Find-CsOnlineApplicationInstance
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${MaxResults},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${UnAssociatedOnly},

    [System.Object]
    ${SearchQuery},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${ExactMatchOnly},

    [switch]
    ${AssociatedOnly},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsAudioConferencingProvider
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${NameFilter},

    [System.Object]
    ${Skip},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SortBy},

    [System.Object]
    ${First},

    [switch]
    ${ExcludeContent},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Descending},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${IncludeStatus},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsAutoAttendantHolidays
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Years},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Names},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsAutoAttendantStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${IncludeResources},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsAutoAttendantSupportedLanguage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsAutoAttendantSupportedTimeZone
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsAutoAttendantTenantInformation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsBroadcastMeetingConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ExposeSDNConfigurationJsonBlob},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsBroadcastMeetingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsCallingLineIdentity
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsCallQueue
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${NameFilter},

    [System.Object]
    ${Skip},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${First},

    [switch]
    ${ExcludeContent},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Descending},

    [System.Object]
    ${Expand},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Sort},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsClientPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsCloudCallDataConnection
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsCloudMeetingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsConferencingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${ApplicableTo},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [System.Object]
    ${Include},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsDefaultCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsDialPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsEffectiveTenantDialPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${OU},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsExternalAccessPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${ApplicableTo},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [System.Object]
    ${Include},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsExternalUserCommunicationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsGlobalCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsGraphPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsHostedVoicemailPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsHostingProvider
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsHuntGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PrimaryUri},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsHuntGroupTenantInformation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsHybridMediationServer
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsHybridPSTNAppliance
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Filter},

    [System.Object]
    ${SiteName},

    [switch]
    ${AsJob})

}
function Get-CsHybridPSTNSite
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsImFilterConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsInboundBlockedNumberPattern
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsIPPhonePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsMeetingConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsMeetingMigrationStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartTime},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${MigrationType},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${SummaryOnly},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${State},

    [System.Object]
    ${EndTime},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsMeetingRoom
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${LdapFilter},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${OU},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsMobilityPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${ApplicableTo},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [System.Object]
    ${Include},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsNetworkConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOAuthConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineApplicationEndpoint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RunFullProvisioningFlow},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${IsInternalRun},

    [System.Object]
    ${Tenant},

    [Alias('SipUri')]
    [System.Object]
    ${Uri},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${PhoneNumber},

    [System.Object]
    ${Ring},

    [System.Object]
    ${Audience},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineApplicationInstance
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Skip},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Identities},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineApplicationInstanceAssociation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineApplicationInstanceAssociationStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDialInConferencingBridge
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${TenantDomain},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDialInConferencingLanguagesSupported
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDialinConferencingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDialInConferencingServiceNumber
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${BridgeName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TenantDomain},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${BridgeId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${City},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDialinConferencingTenantConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDialInConferencingTenantSettings
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDialInConferencingUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${BridgeName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ServiceNumber},

    [System.Object]
    ${TenantDomain},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${LdapFilter},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${BridgeId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDialInConferencingUserInfo
{

param(
    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${First},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${SearchQuery},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Skip},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Filter},

    [switch]
    ${SortDescending},

    [System.Object]
    ${Select},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDialInConferencingUserState
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TenantDomain},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Provider},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${LicenseState},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDialOutPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDirectoryTenant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDirectoryTenantNumberCities
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineEnhancedEmergencyServiceDisclaimer
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Version},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${CountryOrRegion},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineLisCivicAddress
{

param(
    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${CountryOrRegion},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${NumberOfResultsToSkip},

    [switch]
    ${PopulateNumberOfVoiceUsers},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${PopulateNumberOfTelephoneNumbers},

    [System.Object]
    ${CivicAddressId},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Tenant},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${LocationId},

    [System.Object]
    ${City},

    [System.Object]
    ${ValidationStatus},

    [switch]
    ${Force},

    [System.Object]
    ${AssignmentStatus},

    [switch]
    ${AsJob})

}
function Get-CsOnlineLisLocation
{

param(
    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Tenant},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${NumberOfResultsToSkip},

    [switch]
    ${PopulateNumberOfVoiceUsers},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${PopulateNumberOfTelephoneNumbers},

    [System.Object]
    ${CivicAddressId},

    [System.Object]
    ${Location},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CountryOrRegion},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${LocationId},

    [System.Object]
    ${City},

    [System.Object]
    ${ValidationStatus},

    [switch]
    ${Force},

    [System.Object]
    ${AssignmentStatus},

    [switch]
    ${AsJob})

}
function Get-CsOnlineLisPort
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${PortID},

    [System.Object]
    ${TenantId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ChassisID},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NCSApiUrl},

    [System.Object]
    ${TargetStore},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineLisSubnet
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TenantId},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Subnet},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${TargetStore},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NCSApiUrl},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineLisSwitch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TenantId},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ChassisID},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NCSApiUrl},

    [System.Object]
    ${TargetStore},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineLisWirelessAccessPoint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TenantId},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${BSSID},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NCSApiUrl},

    [System.Object]
    ${TargetStore},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineNumberPortInOrder
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${PortInOrderId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineNumberPortOutOrderPin
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlinePSTNGateway
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlinePstnUsage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineSchedule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Id},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineSipDomain
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${DomainStatus},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineTelephoneNumber
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('CityCode')]
    [System.Object]
    ${CapitalOrMajorCity},

    [switch]
    ${ExpandLocation},

    [System.Object]
    ${NumberType},

    [System.Object]
    ${InventoryType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Assigned},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ActivationState},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TelephoneNumber},

    [System.Object]
    ${TelephoneNumberStartsWith},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Country},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${TelephoneNumberGreaterThan},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IsNotAssigned},

    [System.Object]
    ${TelephoneNumberLessThan},

    [switch]
    ${AsJob})

}
function Get-CsOnlineTelephoneNumberAvailableCount
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${InventoryType},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineTelephoneNumberInventoryAreas
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Tenant},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${InventoryType},

    [Alias('Country')]
    [System.Object]
    ${CountryOrRegion},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('Region')]
    [System.Object]
    ${RegionalGroup},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Area},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineTelephoneNumberInventoryCities
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Tenant},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('City')]
    [System.Object]
    ${CapitalOrMajorCity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${InventoryType},

    [Alias('Country')]
    [System.Object]
    ${CountryOrRegion},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('Region')]
    [System.Object]
    ${RegionalGroup},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Area},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineTelephoneNumberInventoryCountries
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Tenant},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${InventoryType},

    [Alias('Country')]
    [System.Object]
    ${CountryOrRegion},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('Region')]
    [System.Object]
    ${RegionalGroup},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineTelephoneNumberInventoryRegions
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${InventoryType},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('Region')]
    [System.Object]
    ${RegionalGroup},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineTelephoneNumberInventoryTypes
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineTelephoneNumberReservationsInformation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${LdapFilter},

    [System.Object]
    ${Filter},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('OnLyncServer')]
    [switch]
    ${OnModernServer},

    [switch]
    ${OnOfficeCommunicationServer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${OU},

    [System.Object]
    ${DomainController},

    [switch]
    ${UnassignedUser},

    [System.Object]
    ${ResultSize},

    [switch]
    ${UsePreferredDC},

    [switch]
    ${SkipUserPolicies},

    [switch]
    ${AsJob})

}
function Get-CsOnlineVoicemailPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineVoicemailUserSettings
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineVoiceRoute
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineVoiceRoutingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineVoiceUser
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ExpandLocation},

    [System.Object]
    ${Identity},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SearchQuery},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${NumberAssigned},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${First},

    [System.Object]
    ${Skip},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${PSTNConnectivity},

    [System.Object]
    ${LocationId},

    [System.Object]
    ${CivicAddressId},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${NumberNotAssigned},

    [switch]
    ${GetPendingUsers},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${GetFromAAD},

    [System.Object]
    ${EnterpriseVoiceStatus},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Get-CsOrganizationalAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${First},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PrimaryUri},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${IncludeStatus},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Skip},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${ApplicationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOrganizationalAutoAttendantHolidays
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PrimaryUri},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Names},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Years},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${ApplicationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOrganizationalAutoAttendantStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PrimaryUri},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${IncludeResources},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${ApplicationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOrganizationalAutoAttendantSupportedLanguage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOrganizationalAutoAttendantSupportedTimeZone
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOrganizationalAutoAttendantTenantInformation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsPresencePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsPrivacyConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsPushNotificationConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsAppPermissionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsAppSetupPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsCallingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsCallParkPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsChannelsPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsClientConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsComplianceRecordingApplication
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsComplianceRecordingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsEducationAssignmentsAppPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsEmergencyCallingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsEmergencyCallRoutingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsFeedbackPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsGuestCallingConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsGuestMeetingConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsGuestMessagingConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsIPPhonePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsMeetingBroadcastConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${ExposeSDNConfigurationJsonBlob},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsMeetingBroadcastPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsMeetingConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsMeetingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsMessagingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsMigrationConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsNotificationAndFeedsPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsPinnedApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsTargetingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsTranslationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsUpgradeConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsUpgradePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsUpgradeStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsVerticalPackagePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsVideoInteropServicePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantBlockedCallingNumbers
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantBlockedNumberExceptionPattern
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantDialPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantFederationConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantHybridConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantLicensingConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantMigrationConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantNetworkConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantNetworkRegion
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantNetworkSite
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [switch]
    ${ExpandSubnets},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantNetworkSubnet
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantPublicProvider
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Tenant},

    [switch]
    ${AsJob})

}
function Get-CsTenantTrustedIPAddress
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantUpdateTimeWindow
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsUCPhoneConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsUserAcp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${LdapFilter},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsUserLocationStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsUserPstnSettings
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsUserServicesPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsUserSession
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${StartTime},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${EndTime},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsVideoInteropServiceProvider
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsVoiceNormalizationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsVoiceRoutingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsBroadcastMeetingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsCallingLineIdentity
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsClientPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsCloudMeetingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsConferencingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsDialoutPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsExternalAccessPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsExternalUserCommunicationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsGraphPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsHostedVoicemailPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsIPPhonePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsMobilityPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsOnlineVoicemailPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsOnlineVoiceRoutingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AdditionalParameters},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${PolicyType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsAppPermissionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsAppSetupPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsCallingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsCallParkPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsChannelsPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsComplianceRecordingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsEmergencyCallingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsEmergencyCallRoutingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsFeedbackPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsIPPhonePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsMeetingBroadcastPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsMeetingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsMessagingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsUpgradePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${MigrateMeetingsToTeams},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsVerticalPackagePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsVideoInteropServicePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTenantDialPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsVoiceRoutingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Import-CsAutoAttendantHolidays
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Input},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Import-CsOnlineAudioFile
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${FileName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Content},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AudioFileExpiryInterval},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${ApplicationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Import-CsOrganizationalAutoAttendantHolidays
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PrimaryUri},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Input},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${ApplicationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Invoke-CsUcsRollback
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Invoke-CsUserPreferredDataLocationSync
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DataLocation},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsAutoAttendant
{

param(
    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Operator},

    [System.Object]
    ${DefaultCallFlow},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${InclusionScope},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${EnableVoiceResponse},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${CallHandlingAssociations},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${VoiceId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${GreetingsSettingAuthorizedUsers},

    [System.Object]
    ${TimeZoneId},

    [System.Object]
    ${CallFlows},

    [System.Object]
    ${LanguageId},

    [switch]
    ${Force},

    [System.Object]
    ${ExclusionScope},

    [switch]
    ${AsJob})

}
function New-CsAutoAttendantCallableEntity
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Type},

    [switch]
    ${EnableTranscription},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsAutoAttendantCallFlow
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Greetings},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Menu},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsAutoAttendantCallHandlingAssociation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CallFlowId},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Disable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Type},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${ScheduleId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsAutoAttendantDialScope
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${GroupScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${GroupIds},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsAutoAttendantMenu
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Prompts},

    [switch]
    ${EnableDialByName},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${DirectorySearchMethod},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${MenuOptions},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsAutoAttendantMenuOption
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CallTarget},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Prompt},

    [System.Object]
    ${VoiceResponses},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DtmfResponse},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsAutoAttendantPrompt
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ActiveType},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${TextToSpeechPrompt},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${AudioFilePrompt},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsCallingLineIdentity
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ServiceNumber},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${CallingIDSubstitute},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${EnableUserOverride},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${BlockIncomingPstnCallerID},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsCallQueue
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RoutingMethod},

    [System.Object]
    ${AllowOptOut},

    [System.Object]
    ${PresenceBasedRouting},

    [System.Object]
    ${AgentAlertTime},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TimeoutActionTarget},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${OverflowThreshold},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${UseDefaultMusicOnHold},

    [System.Object]
    ${MusicOnHoldAudioFileId},

    [System.Object]
    ${OverflowActionTarget},

    [System.Object]
    ${Users},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${TimeoutAction},

    [System.Object]
    ${ConferenceMode},

    [System.Object]
    ${OverflowSharedVoicemailTextToSpeechPrompt},

    [System.Object]
    ${OverflowAction},

    [System.Object]
    ${DistributionLists},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TimeoutSharedVoicemailTextToSpeechPrompt},

    [System.Object]
    ${EnableOverflowSharedVoicemailTranscription},

    [System.Object]
    ${WelcomeMusicAudioFileId},

    [System.Object]
    ${LanguageId},

    [System.Object]
    ${TimeoutThreshold},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OverflowSharedVoicemailAudioFilePrompt},

    [System.Object]
    ${EnableTimeoutSharedVoicemailTranscription},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Name},

    [System.Object]
    ${TimeoutSharedVoicemailAudioFilePrompt},

    [switch]
    ${AsJob})

}
function New-CsClientPolicy
{

param(
    [System.Object]
    ${DisableMeetingSubjectAndLocation},

    [System.Object]
    ${DisableEmailComparisonCheck},

    [System.Object]
    ${DisableSavingIM},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${TabURL},

    [System.Object]
    ${EnableIMAutoArchiving},

    [System.Object]
    ${EnableMediaRedirection},

    [System.Object]
    ${EnableSQMData},

    [System.Object]
    ${MaximumDGsAllowedInContactList},

    [System.Object]
    ${EnableAppearOffline},

    [System.Object]
    ${SPSearchCenterInternalURL},

    [System.Object]
    ${RequireContentPin},

    [System.Object]
    ${DisableHandsetOnLockedMachine},

    [System.Object]
    ${P2PAppSharingEncryption},

    [System.Object]
    ${EnableHotdesking},

    [System.Object]
    ${EnableServerConversationHistory},

    [System.Object]
    ${RateMyCallAllowCustomUserFeedback},

    [System.Object]
    ${TelemetryTier},

    [System.Object]
    ${DisableInkIM},

    [System.Object]
    ${EnableSkypeUI},

    [System.Object]
    ${CustomLinkInErrorMessages},

    [System.Object]
    ${EnableNotificationForNewSubscribers},

    [System.Object]
    ${DisableContactCardOrganizationTab},

    [System.Object]
    ${EnableHighPerformanceConferencingAppSharing},

    [System.Object]
    ${DisableHtmlIm},

    [System.Object]
    ${EnableOnlineFeedback},

    [System.Object]
    ${IMLatencySpinnerDelay},

    [System.Object]
    ${IMLatencyErrorThreshold},

    [System.Object]
    ${HotdeskingTimeout},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DisablePresenceNote},

    [System.Object]
    ${ConferenceIMIdleTimeout},

    [System.Object]
    ${HelpEnvironment},

    [System.Object]
    ${BlockConversationFromFederatedContacts},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ShowSharepointPhotoEditLink},

    [System.Object]
    ${Description},

    [System.Object]
    ${DisablePoorNetworkWarnings},

    [System.Object]
    ${EnableUnencryptedFileTransfer},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PlayAbbreviatedDialTone},

    [System.Object]
    ${EnableURL},

    [System.Object]
    ${DisablePoorDeviceWarnings},

    [System.Object]
    ${CustomizedHelpUrl},

    [System.Object]
    ${DisableFederatedPromptDisplayName},

    [System.Object]
    ${SearchPrefixFlags},

    [System.Object]
    ${MaximumNumberOfContacts},

    [System.Object]
    ${RateMyCallDisplayPercentage},

    [System.Object]
    ${DisableEmoticons},

    [System.Object]
    ${DisplayPhoto},

    [System.Object]
    ${DisableCalendarPresence},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${ExcludedContactFolders},

    [System.Object]
    ${ShowRecentContacts},

    [switch]
    ${InMemory},

    [System.Object]
    ${EnableExchangeDelegateSync},

    [System.Object]
    ${EnableClientMusicOnHold},

    [System.Object]
    ${EnableMeetingEngagement},

    [System.Object]
    ${EnableTracing},

    [System.Object]
    ${IMWarning},

    [System.Object]
    ${SPSearchInternalURL},

    [System.Object]
    ${CalendarStatePublicationInterval},

    [System.Object]
    ${DisableOneNote12Integration},

    [System.Object]
    ${EnableHighPerformanceP2PAppSharing},

    [System.Object]
    ${EnableConversationWindowTabs},

    [System.Object]
    ${EnableViewBasedSubscriptionMode},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${MaxPhotoSizeKB},

    [System.Object]
    ${WebServicePollInterval},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${EnableOnlineFeedbackScreenshots},

    [System.Object]
    ${EnableExchangeContactSync},

    [System.Object]
    ${EnableFullScreenVideo},

    [System.Object]
    ${DisableOnlineContextualSearch},

    [System.Object]
    ${SPSearchCenterExternalURL},

    [System.Object]
    ${DisablePhonePresence},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${SPSearchExternalURL},

    [System.Object]
    ${CustomStateUrl},

    [System.Object]
    ${SupportModernFilePicker},

    [System.Object]
    ${EnableEnterpriseCustomizedHelp},

    [System.Object]
    ${EnableEventLogging},

    [System.Object]
    ${DisableRTFIM},

    [System.Object]
    ${DGRefreshInterval},

    [System.Object]
    ${MAPIPollInterval},

    [System.Object]
    ${TracingLevel},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${EnableCallLogAutoArchiving},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${EnableExchangeContactsFolder},

    [System.Object]
    ${DisablePICPromptDisplayName},

    [System.Object]
    ${DisableFreeBusyInfo},

    [switch]
    ${Force},

    [System.Object]
    ${AutoDiscoveryRetryInterval},

    [System.Object]
    ${PolicyEntry},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AttendantSafeTransfer},

    [System.Object]
    ${MusicOnHoldAudioFile},

    [System.Object]
    ${ShowManagePrivacyRelationships},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisableFeedsTab},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AddressBookAvailability},

    [System.Object]
    ${EnableVOIPCallDefault},

    [System.Object]
    ${EnableClientAutoPopulateWithTeam},

    [System.Object]
    ${PublicationBatchDelay},

    [switch]
    ${AsJob})

}
function New-CsCloudCallDataConnection
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsConferencingPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${VideoBitRateKb},

    [System.Object]
    ${AllowExternalUserControl},

    [System.Object]
    ${Description},

    [System.Object]
    ${EnableReliableConferenceDeletion},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AllowParticipantControl},

    [switch]
    ${InMemory},

    [System.Object]
    ${EnableFileTransfer},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AllowIPAudio},

    [System.Object]
    ${AllowSharedNotes},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ApplicationSharingMode},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${DisablePowerPointAnnotations},

    [switch]
    ${Force},

    [System.Object]
    ${EnableDialInConferencing},

    [System.Object]
    ${EnableAppDesktopSharing},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowLargeMeetings},

    [System.Object]
    ${AllowExternalUsersToSaveContent},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${MaxMeetingSize},

    [System.Object]
    ${EnableOnlineMeetingPromptForLyncResources},

    [System.Object]
    ${AllowConferenceRecording},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AllowAnonymousParticipantsInMeetings},

    [System.Object]
    ${TotalReceiveVideoBitRateKb},

    [System.Object]
    ${AllowNonEnterpriseVoiceUsersToDialOut},

    [System.Object]
    ${AllowAnnotations},

    [System.Object]
    ${AllowAnonymousUsersToDialOut},

    [System.Object]
    ${AppSharingBitRateKb},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EnableP2PFileTransfer},

    [System.Object]
    ${AllowQandA},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${FileTransferBitRateKb},

    [System.Object]
    ${AllowMultiView},

    [System.Object]
    ${EnableP2PVideo},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${MaxVideoConferenceResolution},

    [System.Object]
    ${CloudRecordingServiceSupport},

    [System.Object]
    ${AllowExternalUsersToRecordMeeting},

    [System.Object]
    ${AllowIPVideo},

    [System.Object]
    ${EnableP2PRecording},

    [System.Object]
    ${EnableMultiViewJoin},

    [System.Object]
    ${AudioBitRateKb},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AllowFederatedParticipantJoinAsSameEnterprise},

    [System.Object]
    ${EnableDataCollaboration},

    [System.Object]
    ${AllowUserToScheduleMeetingsWithAppSharing},

    [System.Object]
    ${AllowOfficeContent},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AllowPolls},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${AsJob})

}
function New-CsDefaultCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Id},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Parent},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsEdgeAllowAllKnownDomains
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function New-CsEdgeAllowList
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AllowedDomain},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function New-CsEdgeDomainPattern
{

param(
    [System.Object]
    ${Domain},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function New-CsExternalAccessPolicy
{

param(
    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EnablePublicCloudAccess},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${EnableXmppAccess},

    [System.Object]
    ${EnableFederationAccess},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${EnableOutsideAccess},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${EnablePublicCloudAudioVideoAccess},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${AsJob})

}
function New-CsExternalUserCommunicationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${EnableFileTransfer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AllowTitleVisibility},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AllowPresenceVisibility},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${EnableP2PFileTransfer},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsGlobalCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Id},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Parent},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsHuntGroup
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AgentAlertTime},

    [System.Object]
    ${MusicOnHoldFileContent},

    [System.Object]
    ${Domain},

    [System.Object]
    ${AllowOptOut},

    [System.Object]
    ${Ring},

    [System.Object]
    ${MusicOnHoldFileName},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TimeoutActionTarget},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ClientAudience},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${OverflowThreshold},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${HuntGroupServiceCallbackUri},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${UseDefaultMusicOnHold},

    [System.Object]
    ${OverflowActionTarget},

    [System.Object]
    ${RoutingMethod},

    [System.Object]
    ${TimeoutAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${DistributionLists},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TimeoutThreshold},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${WelcomeMusicFileName},

    [System.Object]
    ${OverflowAction},

    [System.Object]
    ${WelcomeMusicFileContent},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${LineUri},

    [switch]
    ${AsJob})

}
function New-CsHybridPSTNSite
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${OsUpdateTimeWindow},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${EdgeFQDN},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${BitsUpdateTimeWindow},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${EnableAutoUpdate},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsHybridTelephoneNumber
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${TelephoneNumber},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsInboundBlockedNumberPattern
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Force},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Pattern},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsMobilityPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RequireWiFiForSharing},

    [System.Object]
    ${EncryptAppData},

    [System.Object]
    ${Description},

    [System.Object]
    ${Identity},

    [switch]
    ${InMemory},

    [System.Object]
    ${AllowCustomerExperienceImprovementProgram},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [System.Object]
    ${EnableMobility},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowDeviceContactsSync},

    [System.Object]
    ${VoiceSettings},

    [System.Object]
    ${AllowSaveIMHistory},

    [System.Object]
    ${RequireWIFIForIPVideo},

    [System.Object]
    ${AllowSaveCallLogs},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EnableOutsideVoice},

    [System.Object]
    ${AllowSaveCredentials},

    [System.Object]
    ${EnableIPAudioVideo},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowAutomaticPstnFallback},

    [System.Object]
    ${RequireIntune},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AllowExchangeConnectivity},

    [System.Object]
    ${EnablePushNotifications},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AsJob})

}
function New-CsNetworkMediaBypassConfiguration
{

param(
    [System.Object]
    ${BypassID},

    [System.Object]
    ${ExternalBypassMode},

    [System.Object]
    ${InternalBypassMode},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AlwaysBypass},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EnableDefaultBypassID},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${EnabledForAudioVideoConferences},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOnlineApplicationEndpoint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${RunFullProvisioningFlow},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${CallbackUri},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${IsInternalRun},

    [System.Object]
    ${Tenant},

    [Alias('SipUri')]
    [System.Object]
    ${Uri},

    [System.Object]
    ${ApplicationId},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${PhoneNumber},

    [System.Object]
    ${Ring},

    [System.Object]
    ${Audience},

    [System.Object]
    ${Region},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${AsJob})

}
function New-CsOnlineApplicationInstance
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${UserPrincipalName},

    [System.Object]
    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ApplicationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOnlineApplicationInstanceAssociation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ConfigurationType},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${ConfigurationId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Identities},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOnlineAudioFile
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Content},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${FileName},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOnlineBulkAssignmentInput
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${TelephoneNumber},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${LocationID},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOnlineDateTimeRange
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${End},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Start},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOnlineLisCivicAddress
{

param(
    [System.Object]
    ${PostalCode},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Description},

    [System.Object]
    ${Confidence},

    [System.Object]
    ${CountryOrRegion},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [System.Object]
    ${CityAlias},

    [System.Object]
    ${PostDirectional},

    [System.Object]
    ${StreetSuffix},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${StreetName},

    [System.Object]
    ${City},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${HouseNumber},

    [System.Object]
    ${CompanyTaxId},

    [System.Object]
    ${StateOrProvince},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${HouseNumberSuffix},

    [System.Object]
    ${ValidationStatus},

    [System.Object]
    ${Latitude},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Longitude},

    [System.Object]
    ${CompanyName},

    [System.Object]
    ${PreDirectional},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Elin},

    [switch]
    ${AsJob})

}
function New-CsOnlineLisLocation
{

param(
    [System.Object]
    ${PostalCode},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Description},

    [System.Object]
    ${Confidence},

    [Alias('Country')]
    [System.Object]
    ${CountryOrRegion},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [System.Object]
    ${CityAlias},

    [System.Object]
    ${PostDirectional},

    [System.Object]
    ${StreetSuffix},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${StreetName},

    [System.Object]
    ${City},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CivicAddressId},

    [System.Object]
    ${CompanyTaxId},

    [Alias('State')]
    [System.Object]
    ${StateOrProvince},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${HouseNumberSuffix},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Latitude},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Location},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${HouseNumber},

    [System.Object]
    ${Longitude},

    [Alias('Name')]
    [System.Object]
    ${CompanyName},

    [System.Object]
    ${PreDirectional},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Elin},

    [switch]
    ${AsJob})

}
function New-CsOnlineNumberPortInOrder
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${IsManual},

    [System.Object]
    ${LOABase64PayLoad},

    [System.Object]
    ${SubscriberStreetName},

    [System.Object]
    ${SubscriberCountry},

    [System.Object]
    ${InventoryType},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${LOAContentType},

    [System.Object]
    ${SubscriberCounty},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${TelephoneNumberRanges},

    [System.Object]
    ${SubscriberAdditionalInfo},

    [System.Object]
    ${SubscriberArea},

    [System.Object]
    ${SubscriberBusinessName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${RequestedFocDateEnd},

    [System.Object]
    ${SubscriberBuildingNumberSuffix},

    [System.Object]
    ${LosingTelcoPin},

    [System.Object]
    ${SubscriberAddressLine3},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${FriendlyName},

    [switch]
    ${IsPartialPort},

    [switch]
    ${Force},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RequestedFocDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${BillingTelephoneNumber},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SubscriberCity},

    [System.Object]
    ${SubscriberPreDirectional},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SubscriberZipCode},

    [System.Object]
    ${TelephoneNumbers},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SubscriberAddressLine2},

    [System.Object]
    ${SubscriberStreetSuffix},

    [System.Object]
    ${SubscriberCompanyName},

    [System.Object]
    ${RangeHolder},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${SubscriberAddressLine1},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SubscriberCityAlias},

    [System.Object]
    ${SubscriberLastName},

    [System.Object]
    ${LosingTelcoAccountId},

    [System.Object]
    ${SubscriberBuildingNumber},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SubscriberDescription},

    [System.Object]
    ${RequestedFocDateBegin},

    [System.Object]
    ${EmailAddresses},

    [System.Object]
    ${SubscriberPostDirectional},

    [System.Object]
    ${LOAAuthorizingPerson},

    [System.Object]
    ${SubscriberFirstName},

    [switch]
    ${AsJob})

}
function New-CsOnlinePSTNGateway
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${GenerateRingingWhileLocatingUser},

    [System.Object]
    ${Fqdn},

    [switch]
    ${InMemory},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${GatewaySiteId},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${FailoverTimeSeconds},

    [System.Object]
    ${Identity},

    [switch]
    ${Force},

    [System.Object]
    ${OutbundTeamsNumberTranslationRules},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${PidfLoSupported},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${BypassMode},

    [System.Object]
    ${FailoverResponseCodes},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${SendSipOptions},

    [System.Object]
    ${ProxySbc},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${InboundPstnNumberTranslationRules},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SipSignalingPort},

    [System.Object]
    ${MediaRelayRoutingLocationOverride},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OutboundPstnNumberTranslationRules},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${MediaBypass},

    [System.Object]
    ${GatewaySiteLbrEnabled},

    [System.Object]
    ${ForwardCallHistory},

    [System.Object]
    ${MaxConcurrentSessions},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ForwardPai},

    [System.Object]
    ${InboundTeamsNumberTranslationRules},

    [switch]
    ${AsJob})

}
function New-CsOnlineSchedule
{

param(
    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${FridayHours},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Tenant},

    [switch]
    ${WeeklyRecurrentSchedule},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${DateTimeRanges},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${MondayHours},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${TuesdayHours},

    [switch]
    ${FixedSchedule},

    [System.Object]
    ${WednesdayHours},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${Complement},

    [System.Object]
    ${SundayHours},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${SaturdayHours},

    [System.Object]
    ${ThursdayHours},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${AsJob})

}
function New-CsOnlineTimeRange
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${End},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Start},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOnlineVoicemailPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ShareData},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${MaximumRecordingLength},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${EnableTranscription},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EnableEditingCallAnswerRulesSetting},

    [System.Object]
    ${EnableTranscriptionProfanityMasking},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${EnableTranscriptionTranslation},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOnlineVoiceRoute
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${OnlinePstnGatewayList},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${InMemory},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${NumberPattern},

    [System.Object]
    ${OnlinePstnUsages},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOnlineVoiceRoutingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RouteType},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${OnlinePstnUsages},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Description},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOrganizationalAutoAttendant
{

param(
    [System.Object]
    ${TimeZoneId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExclusionScope},

    [System.Object]
    ${Schedules},

    [System.Object]
    ${Ring},

    [System.Object]
    ${LineUris},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${EnableVoiceResponse},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DefaultCallFlow},

    [System.Object]
    ${Operator},

    [System.Object]
    ${CallHandlingAssociations},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ApplicationId},

    [System.Object]
    ${VoiceId},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${CallbackUri},

    [System.Object]
    ${LanguageId},

    [System.Object]
    ${CallFlows},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ClientAudience},

    [System.Object]
    ${InclusionScope},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Domain},

    [switch]
    ${AsJob})

}
function New-CsOrganizationalAutoAttendantCallableEntity
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Type},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOrganizationalAutoAttendantCallFlow
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Greetings},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Menu},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOrganizationalAutoAttendantCallHandlingAssociation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CallFlowId},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Disable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Type},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${ScheduleId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOrganizationalAutoAttendantDialScope
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${GroupScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${GroupIds},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOrganizationalAutoAttendantMenu
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Prompts},

    [switch]
    ${EnableDialByName},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${MenuOptions},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOrganizationalAutoAttendantMenuOption
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CallTarget},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${VoiceResponses},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DtmfResponse},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOrganizationalAutoAttendantPrompt
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ActiveType},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${TextToSpeechPrompt},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${AudioFilePrompt},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTeamsAppPermissionPolicy
{

param(
    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [System.Object]
    ${GlobalCatalogAppsType},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${PrivateCatalogAppsType},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${DefaultCatalogAppsType},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${GlobalCatalogApps},

    [System.Object]
    ${DefaultCatalogApps},

    [System.Object]
    ${PrivateCatalogApps},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${AsJob})

}
function New-CsTeamsAppSetupPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AppPresetList},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${PinnedAppBarApps},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AllowUserPinning},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowSideLoading},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTeamsCallingPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowWebPSTNCalling},

    [System.Object]
    ${Description},

    [System.Object]
    ${Identity},

    [switch]
    ${InMemory},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowCallGroups},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SafeTransferEnabled},

    [System.Object]
    ${BusyOnBusyEnabledType},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AllowVoicemail},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${MusicOnHoldEnabledType},

    [System.Object]
    ${PreventTollBypass},

    [System.Object]
    ${AllowCallForwardingToUser},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowCallForwardingToPhone},

    [System.Object]
    ${AllowPrivateCalling},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AllowDelegation},

    [switch]
    ${AsJob})

}
function New-CsTeamsCallParkPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowCallPark},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTeamsChannelsPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AllowPrivateChannelCreation},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowPrivateTeamDiscovery},

    [System.Object]
    ${AllowOrgWideTeamCreation},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTeamsComplianceRecordingApplication
{

param(
    [System.Object]
    ${RequiredBeforeCallEstablishment},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Id},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RequiredDuringCall},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ConcurrentInvitationCount},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Parent},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ComplianceRecordingPairedApplications},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RequiredBeforeMeetingJoin},

    [System.Object]
    ${RequiredDuringMeeting},

    [switch]
    ${Force},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${AsJob})

}
function New-CsTeamsComplianceRecordingPairedApplication
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Id},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function New-CsTeamsComplianceRecordingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${WarnUserOnRemoval},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${ComplianceRecordingApplications},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Enabled},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTeamsEmergencyCallingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${NotificationGroup},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${NotificationDialOutNumber},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NotificationMode},

    [switch]
    ${Force},

    [System.Object]
    ${ExternalLocationLookupMode},

    [switch]
    ${AsJob})

}
function New-CsTeamsEmergencyCallRoutingPolicy
{

param(
    [System.Object]
    ${EmergencyNumbers},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowEnhancedEmergencyServices},

    [switch]
    ${Force},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${AsJob})

}
function New-CsTeamsEmergencyNumber
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EmergencyDialString},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${EmergencyDialMask},

    [System.Object]
    ${OnlinePSTNUsage},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTeamsFeedbackPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UserInitiatedMode},

    [System.Object]
    ${ReceiveSurveysMode},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTeamsIPPhonePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${HotDeskingIdleTimeoutInMinutes},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AllowHotDesking},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SignInMode},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [System.Object]
    ${SearchOnCommonAreaPhoneMode},

    [switch]
    ${AsJob})

}
function New-CsTeamsMeetingBroadcastPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [System.Object]
    ${BroadcastRecordingMode},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${BroadcastAttendeeVisibilityMode},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AllowBroadcastTranscription},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowBroadcastScheduling},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTeamsMeetingPolicy
{

param(
    [System.Object]
    ${IPAudioMode},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${IPVideoMode},

    [System.Object]
    ${Description},

    [System.Object]
    ${Identity},

    [switch]
    ${InMemory},

    [System.Object]
    ${AllowMeetNow},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AllowIPAudio},

    [System.Object]
    ${AllowSharedNotes},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AutoAdmittedUsers},

    [System.Object]
    ${AllowOutlookAddIn},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [System.Object]
    ${LiveCaptionsEnabledType},

    [System.Object]
    ${AllowPrivateMeetingScheduling},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowOrganizersToOverrideLobbySettings},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowExternalParticipantGiveRequestControl},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${MediaBitRateKb},

    [System.Object]
    ${AllowAnonymousUsersToStartMeeting},

    [System.Object]
    ${AllowPSTNUsersToBypassLobby},

    [System.Object]
    ${PreferredMeetingProviderForIslandsMode},

    [System.Object]
    ${AllowTranscription},

    [System.Object]
    ${AllowChannelMeetingScheduling},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AllowAnonymousUsersToDialOut},

    [System.Object]
    ${VideoFiltersMode},

    [System.Object]
    ${MeetingChatEnabledType},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AllowPrivateMeetNow},

    [System.Object]
    ${ScreenSharingMode},

    [System.Object]
    ${AllowPowerPointSharing},

    [System.Object]
    ${AllowIPVideo},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowParticipantGiveRequestControl},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AllowCloudRecording},

    [System.Object]
    ${AllowWhiteboard},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${AsJob})

}
function New-CsTeamsMessagingPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowOwnerDeleteMessage},

    [System.Object]
    ${Description},

    [System.Object]
    ${AllowUserChat},

    [System.Object]
    ${Identity},

    [switch]
    ${InMemory},

    [System.Object]
    ${AllowUserDeleteMessage},

    [System.Object]
    ${ChannelsInChatListEnabledType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [System.Object]
    ${AllowStickers},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowUrlPreviews},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AllowImmersiveReader},

    [System.Object]
    ${AllowUserTranslation},

    [System.Object]
    ${AllowUserEditMessage},

    [System.Object]
    ${AudioMessageEnabledType},

    [System.Object]
    ${AllowRemoveUser},

    [System.Object]
    ${ReadReceiptsEnabledType},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AllowMemes},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowPriorityMessages},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${GiphyRatingType},

    [System.Object]
    ${AllowGiphy},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AsJob})

}
function New-CsTeamsPinnedApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Id},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Parent},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Order},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTeamsTranslationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Pattern},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Translation},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTenantBlockedNumberExceptionPattern
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Force},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Pattern},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTenantCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Id},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Parent},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTenantDialPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${OptimizeDeviceDialing},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${NormalizationRules},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SimpleName},

    [System.Object]
    ${ExternalAccessPrefix},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTenantNetworkRegion
{

param(
    [System.Object]
    ${BypassID},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CentralSite},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${NetworkRegionID},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTenantNetworkSite
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [System.Object]
    ${EmergencyCallRoutingPolicy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${OnlineVoiceRoutingPolicy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EnableLocationBasedRouting},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${NetworkRegionID},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SiteAddress},

    [System.Object]
    ${Identity},

    [System.Object]
    ${EmergencyCallingPolicy},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NetworkSiteID},

    [switch]
    ${Force},

    [System.Object]
    ${LocationPolicy},

    [switch]
    ${AsJob})

}
function New-CsTenantNetworkSubnet
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${SubnetID},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MaskBits},

    [System.Object]
    ${NetworkSiteID},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTenantTrustedIPAddress
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${IPAddress},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MaskBits},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTenantUpdateTimeWindow
{

param(
    [System.Object]
    ${DayOfMonth},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${DaysOfWeek},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Monthly},

    [System.Object]
    ${StartTime},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Weekly},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Duration},

    [System.Object]
    ${WeeksOfMonth},

    [switch]
    ${Daily},

    [switch]
    ${Force},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${AsJob})

}
function New-CsVideoInteropServiceProvider
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TenantKey},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AadApplicationIds},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${InstructionUri},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AllowAppGuestJoinsAsAuthenticated},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsVoiceNormalizationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Pattern},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Parent},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Translation},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${IsInternalExtension},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Register-CsHybridPSTNAppliance
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${MediationServerIPAddress},

    [System.Object]
    ${MediationServerFqdn},

    [switch]
    ${Force},

    [System.Object]
    ${SiteName},

    [switch]
    ${AsJob})

}
function Register-CsOnlineDialInConferencingServiceNumber
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${BridgeName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TenantDomain},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${BridgeId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Remove-CsAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsCallingLineIdentity
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsCallQueue
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsClientPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsConferencingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsDefaultCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsExternalAccessPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsExternalUserCommunicationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsGlobalCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsHuntGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PrimaryUri},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsHybridPSTNSite
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsHybridTelephoneNumber
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${TelephoneNumber},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsInboundBlockedNumberPattern
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsMobilityPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineApplicationEndpoint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RunFullProvisioningFlow},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${IsInternalRun},

    [System.Object]
    ${Tenant},

    [Alias('SipUri')]
    [System.Object]
    ${Uri},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${PhoneNumber},

    [System.Object]
    ${Ring},

    [System.Object]
    ${Audience},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineApplicationInstanceAssociation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Identities},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineDialInConferencingTenantSettings
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineLisCivicAddress
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${CivicAddressId},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineLisLocation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${LocationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineLisPort
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${PortID},

    [System.Object]
    ${TenantId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ChassisID},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NCSApiUrl},

    [System.Object]
    ${TargetStore},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineLisSubnet
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TenantId},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Subnet},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${TargetStore},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NCSApiUrl},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineLisSwitch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TenantId},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ChassisID},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NCSApiUrl},

    [System.Object]
    ${TargetStore},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineLisWirelessAccessPoint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TenantId},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${BSSID},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NCSApiUrl},

    [System.Object]
    ${TargetStore},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineNumberPortInOrder
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${PortInOrderId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlinePSTNGateway
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineSchedule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Id},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineTelephoneNumber
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${TelephoneNumber},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineVoicemailPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineVoiceRoute
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineVoiceRoutingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOrganizationalAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PrimaryUri},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${ApplicationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsAppPermissionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsAppSetupPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsCallingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsCallParkPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsChannelsPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsComplianceRecordingApplication
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsComplianceRecordingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsEmergencyCallingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsEmergencyCallRoutingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsFeedbackPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsIPPhonePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsMeetingBroadcastPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsMeetingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsMessagingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsNotificationAndFeedsPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsPinnedApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsTargetingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsTranslationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTenantBlockedNumberExceptionPattern
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTenantCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTenantDialPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTenantNetworkConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTenantNetworkRegion
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTenantNetworkSite
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTenantNetworkSubnet
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTenantTrustedIPAddress
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTenantUpdateTimeWindow
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsUserAcp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ParticipantPasscode},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${TollNumber},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsVideoInteropServiceProvider
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsVoiceNormalizationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Search-CsOnlineTelephoneNumberInventory
{

param(
    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${InventoryType},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Tenant},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('City')]
    [System.Object]
    ${CapitalOrMajorCity},

    [System.Object]
    ${TelephoneNumber},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Quantity},

    [Alias('Country')]
    [System.Object]
    ${CountryOrRegion},

    [System.Object]
    ${AreaCode},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('Region')]
    [System.Object]
    ${RegionalGroup},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Area},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${AsJob})

}
function Select-CsOnlineTelephoneNumberInventory
{

param(
    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${ReservationId},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Tenant},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('City')]
    [System.Object]
    ${CapitalOrMajorCity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('Country')]
    [System.Object]
    ${CountryOrRegion},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('Region')]
    [System.Object]
    ${RegionalGroup},

    [System.Object]
    ${LocationId},

    [System.Object]
    ${TelephoneNumbers},

    [System.Object]
    ${Area},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${AsJob})

}
function Set-CsAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsBroadcastMeetingConfiguration
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${EnableSdnProviderForBroadcastMeeting},

    [System.Object]
    ${SdnAzureSubscriptionId},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Instance},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${SdnProviderName},

    [switch]
    ${Force},

    [System.Object]
    ${SdnApiTemplateUrl},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${EnableAnonymousBroadcastMeeting},

    [System.Object]
    ${EnableTechPreviewFeatures},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SdnFallbackAttendeeThresholdCountForBroadcastMeeting},

    [System.Object]
    ${SdnApiToken},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${EnableBroadcastMeeting},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${BroadcastMeetingSupportUrl},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${EnableOpenBroadcastMeeting},

    [System.Object]
    ${EnableBroadcastMeetingRecording},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${EnforceBroadcastMeetingRecording},

    [System.Object]
    ${SdnLicenseId},

    [switch]
    ${AsJob})

}
function Set-CsCallingLineIdentity
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ServiceNumber},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${CallingIDSubstitute},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${EnableUserOverride},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${BlockIncomingPstnCallerID},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsCallQueue
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RoutingMethod},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AllowOptOut},

    [System.Object]
    ${PresenceBasedRouting},

    [System.Object]
    ${AgentAlertTime},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TimeoutActionTarget},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${OverflowThreshold},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${UseDefaultMusicOnHold},

    [System.Object]
    ${MusicOnHoldAudioFileId},

    [System.Object]
    ${OverflowActionTarget},

    [System.Object]
    ${Users},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${TimeoutAction},

    [System.Object]
    ${ConferenceMode},

    [System.Object]
    ${OverflowSharedVoicemailTextToSpeechPrompt},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${OverflowAction},

    [System.Object]
    ${DistributionLists},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TimeoutSharedVoicemailTextToSpeechPrompt},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${EnableOverflowSharedVoicemailTranscription},

    [System.Object]
    ${WelcomeMusicAudioFileId},

    [System.Object]
    ${LanguageId},

    [System.Object]
    ${TimeoutThreshold},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OverflowSharedVoicemailAudioFilePrompt},

    [System.Object]
    ${EnableTimeoutSharedVoicemailTranscription},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Name},

    [System.Object]
    ${LineUri},

    [System.Object]
    ${TimeoutSharedVoicemailAudioFilePrompt},

    [switch]
    ${AsJob})

}
function Set-CsCceApplianceConfigurationReplicationStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsCceApplianceDeploymentStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Version},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${Error},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Status},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsCceApplianceStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Version},

    [System.Object]
    ${ConfigurationSnapshot},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${Error},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Status},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsClientPolicy
{

param(
    [System.Object]
    ${DisableMeetingSubjectAndLocation},

    [System.Object]
    ${DisableEmailComparisonCheck},

    [System.Object]
    ${DisableSavingIM},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${TabURL},

    [System.Object]
    ${EnableIMAutoArchiving},

    [System.Object]
    ${EnableMediaRedirection},

    [System.Object]
    ${EnableSQMData},

    [System.Object]
    ${MaximumDGsAllowedInContactList},

    [System.Object]
    ${EnableAppearOffline},

    [System.Object]
    ${SPSearchCenterInternalURL},

    [System.Object]
    ${RequireContentPin},

    [System.Object]
    ${DisableHandsetOnLockedMachine},

    [System.Object]
    ${P2PAppSharingEncryption},

    [System.Object]
    ${EnableHotdesking},

    [System.Object]
    ${EnableServerConversationHistory},

    [System.Object]
    ${RateMyCallAllowCustomUserFeedback},

    [System.Object]
    ${TelemetryTier},

    [System.Object]
    ${DisableInkIM},

    [System.Object]
    ${EnableSkypeUI},

    [System.Object]
    ${CustomLinkInErrorMessages},

    [System.Object]
    ${EnableNotificationForNewSubscribers},

    [System.Object]
    ${DisableContactCardOrganizationTab},

    [System.Object]
    ${EnableHighPerformanceConferencingAppSharing},

    [System.Object]
    ${DisableHtmlIm},

    [System.Object]
    ${EnableOnlineFeedback},

    [System.Object]
    ${IMLatencySpinnerDelay},

    [System.Object]
    ${IMLatencyErrorThreshold},

    [System.Object]
    ${HotdeskingTimeout},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DisablePresenceNote},

    [System.Object]
    ${ConferenceIMIdleTimeout},

    [System.Object]
    ${HelpEnvironment},

    [System.Object]
    ${BlockConversationFromFederatedContacts},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ShowSharepointPhotoEditLink},

    [System.Object]
    ${Description},

    [System.Object]
    ${DisablePoorNetworkWarnings},

    [System.Object]
    ${EnableUnencryptedFileTransfer},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PlayAbbreviatedDialTone},

    [System.Object]
    ${EnableURL},

    [System.Object]
    ${DisablePoorDeviceWarnings},

    [System.Object]
    ${CustomizedHelpUrl},

    [System.Object]
    ${DisableFederatedPromptDisplayName},

    [System.Object]
    ${SearchPrefixFlags},

    [System.Object]
    ${MaximumNumberOfContacts},

    [System.Object]
    ${RateMyCallDisplayPercentage},

    [System.Object]
    ${DisableEmoticons},

    [System.Object]
    ${DisplayPhoto},

    [System.Object]
    ${DisableCalendarPresence},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${ExcludedContactFolders},

    [System.Object]
    ${ShowRecentContacts},

    [System.Object]
    ${EnableExchangeDelegateSync},

    [System.Object]
    ${EnableClientMusicOnHold},

    [System.Object]
    ${EnableMeetingEngagement},

    [System.Object]
    ${EnableTracing},

    [System.Object]
    ${IMWarning},

    [System.Object]
    ${SPSearchInternalURL},

    [System.Object]
    ${CalendarStatePublicationInterval},

    [System.Object]
    ${DisableOneNote12Integration},

    [System.Object]
    ${EnableHighPerformanceP2PAppSharing},

    [System.Object]
    ${EnableConversationWindowTabs},

    [System.Object]
    ${EnableViewBasedSubscriptionMode},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${MaxPhotoSizeKB},

    [System.Object]
    ${WebServicePollInterval},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${EnableOnlineFeedbackScreenshots},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EnableExchangeContactSync},

    [System.Object]
    ${EnableFullScreenVideo},

    [System.Object]
    ${DisableOnlineContextualSearch},

    [System.Object]
    ${SPSearchCenterExternalURL},

    [System.Object]
    ${DisablePhonePresence},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${SPSearchExternalURL},

    [System.Object]
    ${CustomStateUrl},

    [System.Object]
    ${SupportModernFilePicker},

    [System.Object]
    ${EnableEnterpriseCustomizedHelp},

    [System.Object]
    ${EnableEventLogging},

    [System.Object]
    ${DisableRTFIM},

    [System.Object]
    ${DGRefreshInterval},

    [System.Object]
    ${MAPIPollInterval},

    [System.Object]
    ${TracingLevel},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${EnableCallLogAutoArchiving},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${EnableExchangeContactsFolder},

    [System.Object]
    ${DisablePICPromptDisplayName},

    [System.Object]
    ${DisableFreeBusyInfo},

    [switch]
    ${Force},

    [System.Object]
    ${AutoDiscoveryRetryInterval},

    [System.Object]
    ${PolicyEntry},

    [System.Object]
    ${Instance},

    [System.Object]
    ${AttendantSafeTransfer},

    [System.Object]
    ${MusicOnHoldAudioFile},

    [System.Object]
    ${ShowManagePrivacyRelationships},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisableFeedsTab},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AddressBookAvailability},

    [System.Object]
    ${EnableVOIPCallDefault},

    [System.Object]
    ${EnableClientAutoPopulateWithTeam},

    [System.Object]
    ${PublicationBatchDelay},

    [switch]
    ${AsJob})

}
function Set-CsConferencingPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${VideoBitRateKb},

    [System.Object]
    ${AllowExternalUserControl},

    [System.Object]
    ${Description},

    [System.Object]
    ${EnableReliableConferenceDeletion},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AllowParticipantControl},

    [System.Object]
    ${EnableFileTransfer},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Instance},

    [System.Object]
    ${AllowIPAudio},

    [System.Object]
    ${AllowSharedNotes},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ApplicationSharingMode},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${DisablePowerPointAnnotations},

    [switch]
    ${Force},

    [System.Object]
    ${EnableDialInConferencing},

    [System.Object]
    ${EnableAppDesktopSharing},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowLargeMeetings},

    [System.Object]
    ${AllowExternalUsersToSaveContent},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${MaxMeetingSize},

    [System.Object]
    ${EnableOnlineMeetingPromptForLyncResources},

    [System.Object]
    ${AllowConferenceRecording},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AllowAnonymousParticipantsInMeetings},

    [System.Object]
    ${TotalReceiveVideoBitRateKb},

    [System.Object]
    ${AllowNonEnterpriseVoiceUsersToDialOut},

    [System.Object]
    ${AllowAnnotations},

    [System.Object]
    ${AllowAnonymousUsersToDialOut},

    [System.Object]
    ${AppSharingBitRateKb},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EnableP2PFileTransfer},

    [System.Object]
    ${AllowQandA},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${FileTransferBitRateKb},

    [System.Object]
    ${AllowMultiView},

    [System.Object]
    ${EnableP2PVideo},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${MaxVideoConferenceResolution},

    [System.Object]
    ${CloudRecordingServiceSupport},

    [System.Object]
    ${AllowExternalUsersToRecordMeeting},

    [System.Object]
    ${AllowIPVideo},

    [System.Object]
    ${EnableP2PRecording},

    [System.Object]
    ${EnableMultiViewJoin},

    [System.Object]
    ${AudioBitRateKb},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AllowFederatedParticipantJoinAsSameEnterprise},

    [System.Object]
    ${EnableDataCollaboration},

    [System.Object]
    ${AllowUserToScheduleMeetingsWithAppSharing},

    [System.Object]
    ${AllowOfficeContent},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AllowPolls},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${AsJob})

}
function Set-CsDefaultCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsExternalAccessPolicy
{

param(
    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EnablePublicCloudAccess},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${EnableXmppAccess},

    [System.Object]
    ${EnableFederationAccess},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${EnableOutsideAccess},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${EnablePublicCloudAudioVideoAccess},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsExternalUserCommunicationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${EnableFileTransfer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AllowTitleVisibility},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AllowPresenceVisibility},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${EnableP2PFileTransfer},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsGlobalCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsHuntGroup
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AgentAlertTime},

    [System.Object]
    ${MusicOnHoldFileContent},

    [System.Object]
    ${AllowOptOut},

    [System.Object]
    ${MusicOnHoldFileName},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TimeoutActionTarget},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ClientAudience},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${OverflowThreshold},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${HuntGroupServiceCallbackUri},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${UseDefaultMusicOnHold},

    [System.Object]
    ${PrimaryUri},

    [System.Object]
    ${OverflowActionTarget},

    [System.Object]
    ${RoutingMethod},

    [System.Object]
    ${TimeoutAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${DistributionLists},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${TimeoutThreshold},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${WelcomeMusicFileName},

    [System.Object]
    ${OverflowAction},

    [System.Object]
    ${WelcomeMusicFileContent},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${LineUri},

    [switch]
    ${AsJob})

}
function Set-CsHybridMediationServer
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AccessProxyExternalFqdn},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Fqdn},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsHybridPSTNAppliance
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${MaintenanceMode},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MediationServerGruu},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsHybridPSTNSite
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${OsUpdateTimeWindow},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${EdgeFQDN},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${BitsUpdateTimeWindow},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${EnableAutoUpdate},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsInboundBlockedNumberPattern
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Force},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Pattern},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsIPPhonePolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PowerSavePostOfficeHoursTimeoutMS},

    [System.Object]
    ${Identity},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Instance},

    [System.Object]
    ${EnableBetterTogetherOverEthernet},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [System.Object]
    ${KeyboardLockMaxPinRetry},

    [System.Object]
    ${LocalProvisioningServerAddress},

    [System.Object]
    ${PowerSaveDuringOfficeHoursTimeoutMS},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${LocalProvisioningServerType},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${PrioritizedCodecsList},

    [System.Object]
    ${UserDialTimeoutMS},

    [System.Object]
    ${BetterTogetherOverEthernetPairingMode},

    [System.Object]
    ${DateTimeFormat},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${LocalProvisioningServerPassword},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EnableDeviceUpdate},

    [System.Object]
    ${EnableOneTouchVoicemail},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${LocalProvisioningServerUser},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${EnableExchangeCalendaring},

    [System.Object]
    ${EnablePowerSaveMode},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-CsMeetingConfiguration
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PstnCallersBypassLobby},

    [System.Object]
    ${Identity},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Instance},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${DesignateAsPresenter},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AllowConferenceRecording},

    [System.Object]
    ${UserUriFormatForStUser},

    [System.Object]
    ${AssignedConferenceTypeByDefault},

    [System.Object]
    ${LogoURL},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${RequireRoomSystemsAuthorization},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${CustomFooterText},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${HelpURL},

    [System.Object]
    ${AllowCloudRecordingService},

    [System.Object]
    ${AdmitAnonymousUsersByDefault},

    [System.Object]
    ${LegalURL},

    [System.Object]
    ${EnableAssignedConferenceType},

    [System.Object]
    ${EnableMeetingReport},

    [switch]
    ${AsJob})

}
function Set-CsMeetingRoom
{

param(
    [System.Object]
    ${RemoteCallControlTelephonyEnabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SipAddress},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ExchangeArchivingPolicy},

    [Alias('CsEnabled')]
    [System.Object]
    ${Enabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${LineServerURI},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AcpInfo},

    [System.Object]
    ${DomainController},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${PassThru},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AudioVideoDisabled},

    [System.Object]
    ${PrivateLine},

    [System.Object]
    ${HostedVoiceMail},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${EnterpriseVoiceEnabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${LineURI},

    [switch]
    ${AsJob})

}
function Set-CsMobilityPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RequireWiFiForSharing},

    [System.Object]
    ${EncryptAppData},

    [System.Object]
    ${Description},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AllowCustomerExperienceImprovementProgram},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Instance},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [System.Object]
    ${EnableMobility},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowDeviceContactsSync},

    [System.Object]
    ${VoiceSettings},

    [System.Object]
    ${AllowSaveIMHistory},

    [System.Object]
    ${RequireWIFIForIPVideo},

    [System.Object]
    ${AllowSaveCallLogs},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EnableOutsideVoice},

    [System.Object]
    ${AllowSaveCredentials},

    [System.Object]
    ${EnableIPAudioVideo},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowAutomaticPstnFallback},

    [System.Object]
    ${RequireIntune},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AllowExchangeConnectivity},

    [System.Object]
    ${EnablePushNotifications},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AsJob})

}
function Set-CsNetworkConfiguration
{

param(
    [System.Object]
    ${NetworkRegions},

    [System.Object]
    ${InterNetworkRegionRoutes},

    [switch]
    ${Force},

    [System.Object]
    ${InterNetworkSitePolicies},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${MediaBypassSettings},

    [System.Object]
    ${BWPolicyProfiles},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${EnableBandwidthPolicyCheck},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Tenant},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${NetworkSites},

    [System.Object]
    ${Subnets},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${NetworkRegionLinks},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsOAuthConfiguration
{

param(
    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ExchangeAutodiscoverAllowedDomains},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ServiceName},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AdditionalAudienceUrls},

    [System.Object]
    ${Realm},

    [System.Object]
    ${ClientAuthorizationOAuthServerIdentity},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ClientAdalAuthOverride},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExchangeAutodiscoverUrl},

    [System.Object]
    ${AlternateAudienceUrl},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsOnlineApplicationEndpoint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RunFullProvisioningFlow},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${CallbackUri},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${IsInternalRun},

    [System.Object]
    ${Tenant},

    [Alias('SipUri')]
    [System.Object]
    ${Uri},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${PhoneNumber},

    [System.Object]
    ${Ring},

    [System.Object]
    ${Audience},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOnlineApplicationInstance
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OnpremPhoneNumber},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ApplicationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOnlineDialInConferencingBridge
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${DefaultServiceNumber},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${TenantDomain},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${SetDefault},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsOnlineDialInConferencingServiceNumber
{

param(
    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Instance},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PrimaryLanguage},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SecondaryLanguages},

    [switch]
    ${RestoreDefaultLanguages},

    [switch]
    ${Force},

    [System.Object]
    ${BotType},

    [switch]
    ${AsJob})

}
function Set-CsOnlineDialInConferencingTenantSettings
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${IncludeTollFreeNumberInMeetingInvites},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Instance},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EntryExitAnnouncementsType},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [System.Object]
    ${MigrateServiceNumbersOnCrossForestMove},

    [System.Object]
    ${AutomaticallySendEmailsToUsers},

    [System.Object]
    ${AllowedDialOutExternalDomains},

    [System.Object]
    ${AutomaticallyReplaceAcpProvider},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${AllowFederatedUsersToDialOutToSelf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SendEmailFromAddress},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${SendEmailFromOverride},

    [System.Object]
    ${EnableNameRecording},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AutomaticallyMigrateUserMeetings},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PinLength},

    [System.Object]
    ${UseUniqueConferenceIds},

    [System.Object]
    ${AllowFederatedUsersToDialOutToThirdParty},

    [System.Object]
    ${AllowPSTNOnlyMeetingsByDefault},

    [System.Object]
    ${EnableEntryExitNotifications},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${EnableDialOutJoinConfirmation},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SendEmailFromDisplayName},

    [switch]
    ${AsJob})

}
function Set-CsOnlineDialInConferencingUser
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${TollFreeServiceNumber},

    [System.Object]
    ${Identity},

    [System.Object]
    ${BridgeName},

    [switch]
    ${SendEmail},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ServiceNumber},

    [Alias('ResetPasscode')]
    [switch]
    ${ResetConferenceId},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SendEmailFromAddress},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${ResetLeaderPin},

    [Alias('Passcode')]
    [System.Object]
    ${ConferenceId},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${SendEmailToAddress},

    [System.Object]
    ${BridgeId},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${TenantDomain},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowTollFreeDialIn},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SendEmailFromDisplayName},

    [System.Object]
    ${AllowPSTNOnlyMeetings},

    [switch]
    ${AsJob})

}
function Set-CsOnlineDialInConferencingUserDefaultNumber
{

param(
    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${BridgeName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Force},

    [System.Object]
    ${TenantDomain},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ToNumber},

    [System.Object]
    ${CapitalOrMajorCity},

    [System.Object]
    ${FromNumber},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${BridgeId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${NumberType},

    [System.Object]
    ${CountryOrRegion},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${RescheduleMeetings},

    [System.Object]
    ${AreaOrState},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${AsJob})

}
function Set-CsOnlineDirectoryUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Ring},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOnlineEnhancedEmergencyServiceDisclaimer
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Version},

    [switch]
    ${ForceAccept},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${CountryOrRegion},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOnlineLisCivicAddress
{

param(
    [System.Object]
    ${PostalCode},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Description},

    [System.Object]
    ${Confidence},

    [System.Object]
    ${CountryOrRegion},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [System.Object]
    ${CityAlias},

    [System.Object]
    ${PostDirectional},

    [System.Object]
    ${StreetSuffix},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${StreetName},

    [System.Object]
    ${City},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CivicAddressId},

    [System.Object]
    ${CompanyTaxId},

    [System.Object]
    ${StateOrProvince},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${HouseNumberSuffix},

    [System.Object]
    ${ValidationStatus},

    [System.Object]
    ${Latitude},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${HouseNumber},

    [System.Object]
    ${Longitude},

    [System.Object]
    ${CompanyName},

    [System.Object]
    ${PreDirectional},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Elin},

    [switch]
    ${AsJob})

}
function Set-CsOnlineLisLocation
{

param(
    [System.Object]
    ${PostalCode},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Description},

    [System.Object]
    ${Confidence},

    [System.Object]
    ${CompanyTaxId},

    [System.Object]
    ${CountryOrRegion},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [System.Object]
    ${CityAlias},

    [System.Object]
    ${PostDirectional},

    [System.Object]
    ${StreetSuffix},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${StreetName},

    [System.Object]
    ${City},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${HouseNumber},

    [System.Object]
    ${LocationId},

    [System.Object]
    ${StateOrProvince},

    [System.Object]
    ${CivicAddressId},

    [System.Object]
    ${HouseNumberSuffix},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Latitude},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Location},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Longitude},

    [System.Object]
    ${CompanyName},

    [System.Object]
    ${PreDirectional},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Elin},

    [switch]
    ${AsJob})

}
function Set-CsOnlineLisPort
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${PortID},

    [System.Object]
    ${TenantId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ChassisID},

    [System.Object]
    ${NCSApiUrl},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Description},

    [System.Object]
    ${LocationId},

    [System.Object]
    ${TargetStore},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOnlineLisSubnet
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TenantId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Subnet},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Description},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${TargetStore},

    [System.Object]
    ${NCSApiUrl},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${LocationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOnlineLisSwitch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TenantId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Description},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ChassisID},

    [System.Object]
    ${NCSApiUrl},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${LocationId},

    [System.Object]
    ${TargetStore},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOnlineLisWirelessAccessPoint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TenantId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Description},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${BSSID},

    [System.Object]
    ${NCSApiUrl},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${LocationId},

    [System.Object]
    ${TargetStore},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOnlineNumberPortInOrder
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${LOABase64PayLoad},

    [System.Object]
    ${SubscriberStreetName},

    [System.Object]
    ${SubscriberCountry},

    [System.Object]
    ${LOAContentType},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [System.Object]
    ${SubscriberArea},

    [System.Object]
    ${SubscriberBusinessName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${LosingTelcoPin},

    [System.Object]
    ${SubscriberAddressLine3},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${FriendlyName},

    [System.Object]
    ${IsPartialPort},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RequestedFocDate},

    [System.Object]
    ${BillingTelephoneNumber},

    [System.Object]
    ${SubscriberCity},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SubscriberAddressLine2},

    [System.Object]
    ${PortInOrderId},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${SubscriberAddressLine1},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SubscriberLastName},

    [System.Object]
    ${LosingTelcoAccountId},

    [System.Object]
    ${SubscriberBuildingNumber},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EmailAddresses},

    [System.Object]
    ${LOAAuthorizingPerson},

    [System.Object]
    ${SubscriberFirstName},

    [System.Object]
    ${SubscriberZipCode},

    [switch]
    ${AsJob})

}
function Set-CsOnlineNumberPortOutOrderPin
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PortOrderPin},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOnlinePSTNGateway
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${GenerateRingingWhileLocatingUser},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${Instance},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${FailoverTimeSeconds},

    [switch]
    ${Force},

    [System.Object]
    ${OutbundTeamsNumberTranslationRules},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${GatewaySiteId},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${PidfLoSupported},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${BypassMode},

    [System.Object]
    ${FailoverResponseCodes},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${SendSipOptions},

    [System.Object]
    ${ProxySbc},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${InboundPstnNumberTranslationRules},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SipSignalingPort},

    [System.Object]
    ${MediaRelayRoutingLocationOverride},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OutboundPstnNumberTranslationRules},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${MediaBypass},

    [System.Object]
    ${GatewaySiteLbrEnabled},

    [System.Object]
    ${ForwardCallHistory},

    [System.Object]
    ${MaxConcurrentSessions},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ForwardPai},

    [System.Object]
    ${InboundTeamsNumberTranslationRules},

    [switch]
    ${AsJob})

}
function Set-CsOnlinePstnUsage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Usage},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsOnlineSchedule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsOnlineVoiceApplicationInstance
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${TelephoneNumber},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOnlineVoicemailPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ShareData},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${MaximumRecordingLength},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${EnableTranscription},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EnableEditingCallAnswerRulesSetting},

    [System.Object]
    ${EnableTranscriptionProfanityMasking},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${EnableTranscriptionTranslation},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsOnlineVoicemailUserSettings
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${PromptLanguage},

    [System.Object]
    ${Identity},

    [System.Object]
    ${DefaultGreetingPromptOverwrite},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [System.Object]
    ${DefaultOofGreetingPromptOverwrite},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${OofGreetingFollowAutomaticRepliesEnabled},

    [System.Object]
    ${ShareData},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${CallAnswerRule},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${OofGreetingFollowCalendarEnabled},

    [System.Object]
    ${TransferTarget},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${OofGreetingEnabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${VoicemailEnabled},

    [switch]
    ${AsJob})

}
function Set-CsOnlineVoiceRoute
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${OnlinePstnGatewayList},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${NumberPattern},

    [System.Object]
    ${OnlinePstnUsages},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsOnlineVoiceRoutingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${RouteType},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${OnlinePstnUsages},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Description},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsOnlineVoiceUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${TelephoneNumber},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${LocationID},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOnlineVoiceUserBulk
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${NumberAssignmentDetails},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOrganizationalAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsPrivacyConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${EnablePrivacyMode},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${PublishLocationDataDefault},

    [System.Object]
    ${AutoInitiateContacts},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DisplayPublishedPhotoDefault},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsPushNotificationConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EnableApplePushNotificationService},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${EnableMicrosoftPushNotificationService},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsAppPermissionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [System.Object]
    ${GlobalCatalogAppsType},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${PrivateCatalogAppsType},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${DefaultCatalogAppsType},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${PrivateCatalogApps},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${GlobalCatalogApps},

    [System.Object]
    ${DefaultCatalogApps},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsAppSetupPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AppPresetList},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${PinnedAppBarApps},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AllowUserPinning},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowSideLoading},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsCallingPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowWebPSTNCalling},

    [System.Object]
    ${Description},

    [System.Object]
    ${Identity},

    [System.Object]
    ${PreventTollBypass},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Instance},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowCallGroups},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SafeTransferEnabled},

    [System.Object]
    ${BusyOnBusyEnabledType},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AllowVoicemail},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${MusicOnHoldEnabledType},

    [System.Object]
    ${AllowCallForwardingToUser},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowCallForwardingToPhone},

    [System.Object]
    ${AllowPrivateCalling},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AllowDelegation},

    [switch]
    ${AsJob})

}
function Set-CsTeamsCallParkPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowCallPark},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsChannelsPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AllowPrivateChannelCreation},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${AllowPrivateTeamDiscovery},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowOrgWideTeamCreation},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsClientConfiguration
{

param(
    [System.Object]
    ${AllowEmailIntoChannel},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RestrictedSenderList},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Instance},

    [System.Object]
    ${AllowGoogleDrive},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AllowSkypeBusinessInterop},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AllowScopedPeopleSearchandAccess},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowShareFile},

    [System.Object]
    ${AllowGuestUser},

    [System.Object]
    ${AllowOrganizationTab},

    [System.Object]
    ${ResourceAccountContentAccess},

    [System.Object]
    ${AllowEgnyte},

    [System.Object]
    ${AllowBox},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AllowResourceAccountSendMessage},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ContentPin},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AllowDropBox},

    [switch]
    ${Force},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${AsJob})

}
function Set-CsTeamsComplianceRecordingApplication
{

param(
    [System.Object]
    ${RequiredBeforeCallEstablishment},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RequiredDuringCall},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ConcurrentInvitationCount},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ComplianceRecordingPairedApplications},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RequiredBeforeMeetingJoin},

    [System.Object]
    ${RequiredDuringMeeting},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsComplianceRecordingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${WarnUserOnRemoval},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${ComplianceRecordingApplications},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Enabled},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsEducationAssignmentsAppPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TurnItInApiKey},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${TurnItInApiUrl},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ParentDigestEnabledType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${TurnItInEnabledType},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MakeCodeEnabledType},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsEmergencyCallingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${NotificationGroup},

    [System.Object]
    ${ExternalLocationLookupMode},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${NotificationDialOutNumber},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NotificationMode},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsEmergencyCallRoutingPolicy
{

param(
    [System.Object]
    ${EmergencyNumbers},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowEnhancedEmergencyServices},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsFeedbackPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${ReceiveSurveysMode},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UserInitiatedMode},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsGuestCallingConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowPrivateCalling},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsGuestMeetingConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ScreenSharingMode},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AllowMeetNow},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowIPVideo},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsGuestMessagingConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AllowMemes},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AllowImmersiveReader},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AllowGiphy},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${AllowStickers},

    [System.Object]
    ${AllowUserEditMessage},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AllowUserDeleteMessage},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${AllowUserChat},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${GiphyRatingType},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsIPPhonePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${HotDeskingIdleTimeoutInMinutes},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SearchOnCommonAreaPhoneMode},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AllowHotDesking},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SignInMode},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsMeetingBroadcastConfiguration
{

param(
    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SupportURL},

    [System.Object]
    ${AllowSdnProviderForBroadcastMeeting},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${SdnProviderName},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SdnApiToken},

    [System.Object]
    ${SdnApiTemplateUrl},

    [System.Object]
    ${SdnLicenseId},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsMeetingBroadcastPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [System.Object]
    ${BroadcastRecordingMode},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${BroadcastAttendeeVisibilityMode},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AllowBroadcastTranscription},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowBroadcastScheduling},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsMeetingConfiguration
{

param(
    [System.Object]
    ${ClientVideoPortRange},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DisableAnonymousJoin},

    [System.Object]
    ${Identity},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Instance},

    [System.Object]
    ${ClientAppSharingPortRange},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${EnableQoS},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${LogoURL},

    [System.Object]
    ${ClientAppSharingPort},

    [System.Object]
    ${ClientVideoPort},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ClientAudioPortRange},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ClientMediaPortRangeEnabled},

    [System.Object]
    ${ClientAudioPort},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${CustomFooterText},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${HelpURL},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${LegalURL},

    [switch]
    ${AsJob})

}
function Set-CsTeamsMeetingPolicy
{

param(
    [System.Object]
    ${IPAudioMode},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${IPVideoMode},

    [System.Object]
    ${Description},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AllowMeetNow},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Instance},

    [System.Object]
    ${AllowIPAudio},

    [System.Object]
    ${AllowSharedNotes},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AutoAdmittedUsers},

    [System.Object]
    ${AllowOutlookAddIn},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [System.Object]
    ${LiveCaptionsEnabledType},

    [System.Object]
    ${AllowPrivateMeetingScheduling},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowOrganizersToOverrideLobbySettings},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowExternalParticipantGiveRequestControl},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${MediaBitRateKb},

    [System.Object]
    ${AllowAnonymousUsersToStartMeeting},

    [System.Object]
    ${AllowPSTNUsersToBypassLobby},

    [System.Object]
    ${PreferredMeetingProviderForIslandsMode},

    [System.Object]
    ${AllowTranscription},

    [System.Object]
    ${AllowChannelMeetingScheduling},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AllowAnonymousUsersToDialOut},

    [System.Object]
    ${VideoFiltersMode},

    [System.Object]
    ${MeetingChatEnabledType},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AllowPrivateMeetNow},

    [System.Object]
    ${ScreenSharingMode},

    [System.Object]
    ${AllowPowerPointSharing},

    [System.Object]
    ${AllowIPVideo},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowParticipantGiveRequestControl},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AllowCloudRecording},

    [System.Object]
    ${AllowWhiteboard},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${AsJob})

}
function Set-CsTeamsMessagingPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowOwnerDeleteMessage},

    [System.Object]
    ${Description},

    [System.Object]
    ${AllowUserChat},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AllowGiphy},

    [System.Object]
    ${Instance},

    [System.Object]
    ${AllowUserDeleteMessage},

    [System.Object]
    ${ChannelsInChatListEnabledType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [System.Object]
    ${AllowStickers},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowUrlPreviews},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AllowImmersiveReader},

    [System.Object]
    ${AllowUserTranslation},

    [System.Object]
    ${AllowUserEditMessage},

    [System.Object]
    ${AudioMessageEnabledType},

    [System.Object]
    ${AllowRemoveUser},

    [System.Object]
    ${ReadReceiptsEnabledType},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AllowMemes},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowPriorityMessages},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${GiphyRatingType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AsJob})

}
function Set-CsTeamsMigrationConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EnableLegacyClientInterop},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsNotificationAndFeedsPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${SuggestedFeedsEnabledType},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${TrendingFeedsEnabledType},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsPinnedApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Order},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsTargetingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SuggestedPresetTags},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${CustomTagsMode},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${TeamOwnersEditWhoCanManageTagsMode},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ManageTagsPermissionMode},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsTranslationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Pattern},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Translation},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsUpgradeConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${SfBMeetingJoinUx},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${DownloadTeams},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsUpgradeStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${Details},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${State},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsTenantBlockedCallingNumbers
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${InboundExemptNumberPatterns},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${InboundBlockedNumberPatterns},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantBlockedNumberExceptionPattern
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Force},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Pattern},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantDialPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${OptimizeDeviceDialing},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${NormalizationRules},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ExternalAccessPrefix},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${SimpleName},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantFederationConfiguration
{

param(
    [System.Object]
    ${AllowedDomainsAsAList},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${SharedSipAddressSpace},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${BlockedDomains},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${TreatDiscoveredPartnersAsUnverified},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AllowFederatedUsers},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AllowedDomains},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AllowPublicUsers},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantHybridConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${HybridConfigServiceInternalUrl},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${UseOnPremDialPlan},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${HybridConfigServiceExternalUrl},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PeerDestination},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantMigrationConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${MeetingMigrationEnabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantNetworkConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Subnets},

    [System.Object]
    ${NetworkSites},

    [System.Object]
    ${NetworkRegions},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantNetworkRegion
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${CentralSite},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${NetworkRegionID},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantNetworkSite
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${EmergencyCallRoutingPolicy},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${OnlineVoiceRoutingPolicy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EnableLocationBasedRouting},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${NetworkRegionID},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${LocationPolicy},

    [System.Object]
    ${Identity},

    [System.Object]
    ${EmergencyCallingPolicy},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantNetworkSubnet
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MaskBits},

    [System.Object]
    ${NetworkSiteID},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantPublicProvider
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Provider},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsTenantTrustedIPAddress
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MaskBits},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantUpdateTimeWindow
{

param(
    [System.Object]
    ${DayOfMonth},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${DaysOfWeek},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Monthly},

    [System.Object]
    ${StartTime},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Weekly},

    [System.Object]
    ${Tenant},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Duration},

    [System.Object]
    ${WeeksOfMonth},

    [switch]
    ${Daily},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsUCPhoneConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${VoiceDiffServTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Voice8021p},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${MinPhonePinLength},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EnforcePhoneLock},

    [System.Object]
    ${PhoneLockTimeout},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${LoggingLevel},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SIPSecurityMode},

    [System.Object]
    ${CalendarPollInterval},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsUser
{

param(
    [System.Object]
    ${RemoteCallControlTelephonyEnabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SipAddress},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ExchangeArchivingPolicy},

    [Alias('CsEnabled')]
    [System.Object]
    ${Enabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${LineServerURI},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${OnPremLineURI},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AcpInfo},

    [System.Object]
    ${DomainController},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${PassThru},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AudioVideoDisabled},

    [System.Object]
    ${PrivateLine},

    [System.Object]
    ${HostedVoiceMail},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${EnterpriseVoiceEnabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${LineURI},

    [switch]
    ${AsJob})

}
function Set-CsUserAcp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${TollFreeNumbers},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ParticipantPasscode},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Url},

    [System.Object]
    ${TollNumber},

    [System.Object]
    ${Domain},

    [System.Object]
    ${IsDefault},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsUserPstnSettings
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowInternationalCalls},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${HybridPSTNSite},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsUserServicesPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${MigrationDelayInDays},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${EnableAwaySinceIndication},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UcsAllowed},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsVideoInteropServiceProvider
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TenantKey},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AadApplicationIds},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${InstructionUri},

    [System.Object]
    ${AllowAppGuestJoinsAsAuthenticated},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsVoiceNormalizationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Pattern},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Translation},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${IsInternalExtension},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Start-CsExMeetingMigration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TargetMeetingType},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${CleanupSipDisabled},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SourceMeetingType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Switch-CsOnlineApplicationEndpoint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ObjectId},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Sync-CsOnlineApplicationInstance
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CallbackUri},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ObjectId},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-CsEffectiveTenantDialPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${EffectiveTenantDialPlanName},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DialedNumber},

    [System.Object]
    ${Identity},

    [switch]
    ${TenantScopeOnly},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-CsInboundBlockedNumberPattern
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TenantId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${FQDN},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PhoneNumber},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-CsOnlineCarrierPortabilityIn
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${TelephoneNumbers},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-CsOnlineLisCivicAddress
{

param(
    [System.Object]
    ${PostalCode},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Description},

    [System.Object]
    ${CountryOrRegion},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${PostDirectional},

    [System.Object]
    ${StreetSuffix},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${StreetName},

    [System.Object]
    ${City},

    [System.Object]
    ${CivicAddressId},

    [System.Object]
    ${CompanyTaxId},

    [System.Object]
    ${StateOrProvince},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${HouseNumberSuffix},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${HouseNumber},

    [System.Object]
    ${CompanyName},

    [System.Object]
    ${PreDirectional},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Test-CsOnlinePortabilityIn
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${TelephoneNumberRanges},

    [System.Object]
    ${TelephoneNumbers},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-CsVoiceNormalizationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${DialedNumber},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${NormalizationRule},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Unregister-CsHybridPSTNAppliance
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Unregister-CsOnlineDialInConferencingServiceNumber
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${BridgeName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TenantDomain},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${RemoveDefaultServiceNumber},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${BridgeId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Update-CsAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Update-CsOrganizationalAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PrimaryUri},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${ApplicationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Update-CsTenantMeetingUrl
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
#endregion
