[CmdletBinding()]
param(
)
$M365DSCTestFolder = Join-Path -Path $PSScriptRoot `
                        -ChildPath "..\..\Unit" `
                        -Resolve
$CmdletModule = (Join-Path -Path $M365DSCTestFolder `
            -ChildPath "\Stubs\Microsoft365.psm1" `
            -Resolve)
$GenericStubPath = (Join-Path -Path $M365DSCTestFolder `
    -ChildPath "\Stubs\Generic.psm1" `
    -Resolve)
Import-Module -Name (Join-Path -Path $M365DSCTestFolder `
        -ChildPath "\UnitTestHelper.psm1" `
        -Resolve)

$Global:DscHelper = New-M365DscUnitTestHelper -StubModule $CmdletModule `
    -DscResource "IntuneExploitProtectionPolicyWindows10SettingCatalog" -GenericStubModule $GenericStubPath

Describe -Name $Global:DscHelper.DescribeHeader -Fixture {
    InModuleScope -ModuleName $Global:DscHelper.ModuleName -ScriptBlock {
        Invoke-Command -ScriptBlock $Global:DscHelper.InitializeScript -NoNewScope

        BeforeAll {
            $secpasswd = ConvertTo-SecureString "Pass@word1" -AsPlainText -Force
            $Credential = New-Object System.Management.Automation.PSCredential ("tenantadmin", $secpasswd)

            Mock -CommandName Update-M365DSCExportAuthenticationResults -MockWith {
                return @{}
            }

            Mock -CommandName Get-M365DSCExportContentForResource -MockWith {

            }

            Mock -CommandName Confirm-M365DSCDependencies -MockWith {

            }

            Mock -CommandName New-M365DSCConnection -MockWith {
                return "Credentials"
            }

            Mock -CommandName New-IntuneDeviceConfigurationPolicy -MockWith {
            }
            Mock -CommandName Update-IntuneDeviceConfigurationPolicy -MockWith {
            }
            Mock -CommandName Remove-MgDeviceManagementConfigurationPolicy -MockWith {
            }

            Mock -CommandName Get-MgDeviceManagementConfigurationPolicyTemplate -MockWith {
                return @{
                    TemplateId = 'd02f2162-fcac-48db-9b7b-b0a3f160d2c2_1'
                }
            }

            Mock -CommandName Get-MgDeviceManagementConfigurationPolicyAssignment -MockWith {
                return @{
                    Id = "12345-12345-12345-12345-12345"
                    Source = "direct"
                    SourceId = "12345-12345-12345-12345-12345"
                    Target = @{
                        DeviceAndAppManagementAssignmentFilterId = "12345-12345-12345-12345-12345"
                        DeviceAndAppManagementAssignmentFilterType = 'none'
                        AdditionalProperties = @(
                            @{
                                '@odata.type' = '#microsoft.graph.exclusionGroupAssignmentTarget'
                                groupId = '26d60dd1-fab6-47bf-8656-358194c1a49d'
                            }
                        )
                    }
                }
            }
        }

        # Test contexts
        Context -Name "When the category doesn't already exist" -Fixture {
            BeforeAll {
                $testParams = @{
                    Credential                        = $Credential;
                    Description                       = "Test description";
                    disallowexploitprotectionoverride = "1";
                    DisplayName                       = "Test Exploit Protection";
                    Ensure                            = "Present";
                    Identity                          = "36002266-8153-48e3-9716-d4546ae34ff7";
                    Assignments                       = @(
                        (New-CimInstance -ClassName MSFT_DeviceManagementConfigurationPolicyAssignments -Property @{
                            DataType = "#microsoft.graph.exclusionGroupAssignmentTarget"
                            DeviceAndAppManagementAssignmentFilterType = "none"
                            DeviceAndAppManagementAssignmentFilterId = "12345-12345-12345-12345-12345"
                            GroupId = "26d60dd1-fab6-47bf-8656-358194c1a49d"
                        } -ClientOnly)
                    )
                }

                Mock -CommandName Get-MgDeviceManagementConfigurationPolicy -MockWith {
                    return $null
                }

                Mock -CommandName New-DeviceConfigurationPolicy -MockWith {
                    return $null
                }
                Mock -CommandName Get-MgDeviceManagementConfigurationPolicyTemplateSettingTemplate -MockWith {
                    return @(
                        @{
                            id                   = "0"
                            SettingDefinitions   = $null
                            SettingInstanceTemplate = @{
                                    SettingDefinitionId               = "device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride"
                                    SettingInstanceTemplateReference  = @{
                                        SettingInstanceTemplateId = "e4be83c7-691b-488d-b068-2d82a1cced8e"
                                    }
                                    AdditionalProperties = @{
                                            '@odata.type' = '#microsoft.graph.deviceManagementConfigurationChoiceSettingInstanceTemplate'
                                            choiceSettingValue = @{
                                                settingValueTemplateReference = @(
                                                    @{
                                                        settingValueTemplateId = 'ddd5a881-2956-4a44-a95b-8e4a69c70170'
                                                    }
                                                )
                                            }
                                    }
                                }
                            AdditionalProperties = @{}
                        }
                    )
                }

            }

            It "Should return absent from the Get method" {
                (Get-TargetResource @testParams).Ensure | Should -Be 'Absent'
            }

            It "Should return false from the Test method" {
                Test-TargetResource @testParams | Should -Be $false
            }

            It "Should create the category from the Set method" {
                Set-TargetResource @testParams
                Should -Invoke -CommandName New-IntuneDeviceConfigurationPolicy -Exactly 1
            }
        }

        Context -Name "When the policy already exists and is NOT in the Desired State" -Fixture {
            BeforeAll {
                $testParams = @{
                    Credential                        = $Credential;
                    Description                       = "My Test";
                    disallowexploitprotectionoverride = "1";
                    DisplayName                       = "Test Exploit Protection";
                    Ensure                            = "Present";
                    Identity                          = "36002266-8153-48e3-9716-d4546ae34ff7";
                    Assignments                       = @(
                        (New-CimInstance -ClassName MSFT_DeviceManagementConfigurationPolicyAssignments -Property @{
                            DataType = "#microsoft.graph.exclusionGroupAssignmentTarget"
                            DeviceAndAppManagementAssignmentFilterType = "none"
                            DeviceAndAppManagementAssignmentFilterId = "12345-12345-12345-12345-12345"
                            GroupId = "26d60dd1-fab6-47bf-8656-358194c1a49d"
                        } -ClientOnly)
                    )
                }

                Mock -CommandName Get-MgDeviceManagementConfigurationPolicy -MockWith {
                    return @{
                        Id          = '12345-12345-12345-12345-12345'
                        Description = "My Test";
                        Name        = "Test Exploit Protection";
                    }
                }

                Mock -CommandName Get-MgDeviceManagementConfigurationPolicySetting -MockWith {
                    return @{
                        id                   = "0"
                        SettingDefinitions   = $null
                        SettingInstance      = @(
                            @{
                                SettingDefinitionId               = "device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride"
                                SettingInstanceTemplateReference  = @{
                                    SettingInstanceTemplateId = "e4be83c7-691b-488d-b068-2d82a1cced8e"
                                }
                                AdditionalProperties = @(
                                    @{
                                        '@odata.type' = '#microsoft.graph.deviceManagementConfigurationChoiceSettingInstance'
                                        choiceSettingValue = @{
                                            value = 'device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride_0' #drift
                                            settingValueTemplateReference = @(
                                                @{
                                                    settingValueTemplateId = 'ddd5a881-2956-4a44-a95b-8e4a69c70170'
                                                    useTemplateDefault = $false
                                                }
                                            )
                                            children = @{}
                                        }
                                    }
                                )
                            }
                        )
                        AdditionalProperties = @{}
                    }
                }
                Mock -CommandName Get-MgDeviceManagementConfigurationPolicyTemplateSettingTemplate -MockWith {
                    return @(
                        @{
                            id                   = "0"
                            SettingDefinitions   = $null
                            SettingInstanceTemplate = @{
                                    SettingDefinitionId               = "device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride"
                                    SettingInstanceTemplateReference  = @{
                                        SettingInstanceTemplateId = "e4be83c7-691b-488d-b068-2d82a1cced8e"
                                    }
                                    AdditionalProperties = @{
                                            '@odata.type' = '#microsoft.graph.deviceManagementConfigurationChoiceSettingInstanceTemplate'
                                            choiceSettingValue = @{
                                                settingValueTemplateReference = @(
                                                    @{
                                                        settingValueTemplateId = 'ddd5a881-2956-4a44-a95b-8e4a69c70170'
                                                    }
                                                )
                                            }
                                    }
                                }
                            AdditionalProperties = @{}
                        }
                    )
                }
            }

            It "Should return Present from the Get method" {
                (Get-TargetResource @testParams).Ensure | Should -Be 'Present'
            }

            It "Should return false from the Test method" {
                Test-TargetResource @testParams | Should -Be $false
            }

            It "Should update the category from the Set method" {
                Set-TargetResource @testParams
                Should -Invoke -CommandName Update-IntuneDeviceConfigurationPolicy -Exactly 1
            }
        }

        Context -Name "When the policy already exists and IS in the Desired State" -Fixture {
            BeforeAll {
                $testParams = @{
                    Credential                        = $Credential;
                    Description                       = "My Test";
                    disallowexploitprotectionoverride = "1";
                    DisplayName                       = "Test Exploit Protection";
                    Ensure                            = "Present";
                    Identity                          = "12345-12345-12345-12345-12345";
                    Assignments                       = @(
                        (New-CimInstance -ClassName MSFT_DeviceManagementConfigurationPolicyAssignments -Property @{
                            DataType = "#microsoft.graph.exclusionGroupAssignmentTarget"
                            DeviceAndAppManagementAssignmentFilterType = "none"
                            DeviceAndAppManagementAssignmentFilterId = "12345-12345-12345-12345-12345"
                            GroupId = "26d60dd1-fab6-47bf-8656-358194c1a49d"
                        } -ClientOnly)
                    )
                }

                Mock -CommandName Get-MgDeviceManagementConfigurationPolicy -MockWith {
                    return @{
                        Id          = '12345-12345-12345-12345-12345'
                        Description = "My Test";
                        Name        = "Test Exploit Protection";
                    }
                }
                Mock -CommandName Get-MgDeviceManagementConfigurationPolicyAssignment -MockWith {
                    return @(
                        @{
                            Target = @{
                                AdditionalProperties = @{
                                    '@odata.type'="#microsoft.graph.exclusionGroupAssignmentTarget"
                                    groupId="26d60dd1-fab6-47bf-8656-358194c1a49d"
                                }
                                DeviceAndAppManagementAssignmentFilterType="none"
                                DeviceAndAppManagementAssignmentFilterId="12345-12345-12345-12345-12345"
                            }
                        }
                    )
                }

                Mock -CommandName Get-MgDeviceManagementConfigurationPolicySetting -MockWith {
                    return @{
                        id                   = "0"
                        SettingDefinitions   = $null
                        SettingInstance      = @(
                            @{
                                SettingDefinitionId               = "device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride"
                                SettingInstanceTemplateReference  = @{
                                    SettingInstanceTemplateId = "e4be83c7-691b-488d-b068-2d82a1cced8e"
                                }
                                AdditionalProperties = @(
                                    @{
                                        '@odata.type' = '#microsoft.graph.deviceManagementConfigurationChoiceSettingInstance'
                                        choiceSettingValue = @{
                                            value = 'device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride_1'
                                            settingValueTemplateReference = @(
                                                @{
                                                    settingValueTemplateId = 'ddd5a881-2956-4a44-a95b-8e4a69c70170'
                                                    useTemplateDefault = $false
                                                }
                                            )
                                            children = @{}
                                        }
                                    }
                                )
                            }
                        )
                        AdditionalProperties = @{}
                    }
                }
                Mock -CommandName Get-MgDeviceManagementConfigurationPolicyTemplateSettingTemplate -MockWith {
                    return @(
                        @{
                            id                   = "0"
                            SettingDefinitions   = $null
                            SettingInstanceTemplate = @{
                                    SettingDefinitionId               = "device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride"
                                    SettingInstanceTemplateReference  = @{
                                        SettingInstanceTemplateId = "e4be83c7-691b-488d-b068-2d82a1cced8e"
                                    }
                                    AdditionalProperties = @{
                                            '@odata.type' = '#microsoft.graph.deviceManagementConfigurationChoiceSettingInstanceTemplate'
                                            choiceSettingValue = @{
                                                settingValueTemplateReference = @(
                                                    @{
                                                        settingValueTemplateId = 'ddd5a881-2956-4a44-a95b-8e4a69c70170'
                                                    }
                                                )
                                            }
                                    }
                                }
                            AdditionalProperties = @{}
                        }
                    )
                }
            }

            It "Should return true from the Test method" {
                Test-TargetResource @testParams | Should -Be $true
            }
        }

        Context -Name "When the policy exists and it SHOULD NOT" -Fixture {
            BeforeAll {
                $testParams = @{
                    Credential                        = $Credential;
                    Description                       = "My Test";
                    disallowexploitprotectionoverride = "1";
                    DisplayName                       = "Test Exploit Protection";
                    Ensure                            = "Absent";
                    Identity                          = "36002266-8153-48e3-9716-d4546ae34ff7";
                    Assignments                       = @(
                        (New-CimInstance -ClassName MSFT_DeviceManagementConfigurationPolicyAssignments -Property @{
                            DataType = "#microsoft.graph.exclusionGroupAssignmentTarget"
                            DeviceAndAppManagementAssignmentFilterType = "none"
                            DeviceAndAppManagementAssignmentFilterId = "12345-12345-12345-12345-12345"
                            GroupId = "26d60dd1-fab6-47bf-8656-358194c1a49d"
                        } -ClientOnly)
                    )
                }

                Mock -CommandName Get-MgDeviceManagementConfigurationPolicy -MockWith {
                    return @{
                        Id          = '12345-12345-12345-12345-12345'
                        Description = "My Test";
                        Name        = "Test Exploit Protection";
                    }
                }

                Mock -CommandName Get-MgDeviceManagementConfigurationPolicySetting -MockWith {
                    return @{
                        id                   = "0"
                        SettingDefinitions   = $null
                        SettingInstance      = @(
                            @{
                                SettingDefinitionId               = "device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride"
                                SettingInstanceTemplateReference  = @{
                                    SettingInstanceTemplateId = "e4be83c7-691b-488d-b068-2d82a1cced8e"
                                }
                                AdditionalProperties = @(
                                    @{
                                        '@odata.type' = '#microsoft.graph.deviceManagementConfigurationChoiceSettingInstance'
                                        choiceSettingValue = @{
                                            value = 'device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride_1'
                                            settingValueTemplateReference = @(
                                                @{
                                                    settingValueTemplateId = 'ddd5a881-2956-4a44-a95b-8e4a69c70170'
                                                    useTemplateDefault = $false
                                                }
                                            )
                                            children = @{}
                                        }
                                    }
                                )
                            }
                        )
                        AdditionalProperties = @{}
                    }
                }
                Mock -CommandName Get-MgDeviceManagementConfigurationPolicyTemplateSettingTemplate -MockWith {
                    return @(
                        @{
                            id                   = "0"
                            SettingDefinitions   = $null
                            SettingInstanceTemplate = @{
                                    SettingDefinitionId               = "device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride"
                                    SettingInstanceTemplateReference  = @{
                                        SettingInstanceTemplateId = "e4be83c7-691b-488d-b068-2d82a1cced8e"
                                    }
                                    AdditionalProperties = @{
                                            '@odata.type' = '#microsoft.graph.deviceManagementConfigurationChoiceSettingInstanceTemplate'
                                            choiceSettingValue = @{
                                                settingValueTemplateReference = @(
                                                    @{
                                                        settingValueTemplateId = 'ddd5a881-2956-4a44-a95b-8e4a69c70170'
                                                    }
                                                )
                                            }
                                    }
                                }
                            AdditionalProperties = @{}
                        }
                    )
                }
            }

            It "Should return Present from the Get method" {
                (Get-TargetResource @testParams).Ensure | Should -Be 'Present'
            }

            It "Should return true from the Test method" {
                Test-TargetResource @testParams | Should -Be $false
            }

            It "Should remove the category from the Set method" {
                Set-TargetResource @testParams
                Should -Invoke -CommandName Remove-MgDeviceManagementConfigurationPolicy -Exactly 1
            }
        }

        Context -Name "ReverseDSC Tests" -Fixture {
            BeforeAll {
                $Global:CurrentModeIsExport = $true
                $testParams = @{
                    Credential                        = $Credential;
                }

                Mock -CommandName Get-MgDeviceManagementConfigurationPolicy -MockWith {
                    return @(
                        @{
                            Id          = '12345-12345-12345-12345-12345'
                            Description = "My Test";
                            Name = "Test Exploit Protection";
                        }
                    )
                }

                Mock -CommandName Get-MgDeviceManagementConfigurationPolicySetting -MockWith {
                    return @{
                        id                   = "0"
                        SettingDefinitions   = $null
                        SettingInstance      = @(
                            @{
                                SettingDefinitionId               = "device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride"
                                SettingInstanceTemplateReference  = @{
                                    SettingInstanceTemplateId = "e4be83c7-691b-488d-b068-2d82a1cced8e"
                                }
                                AdditionalProperties = @(
                                    @{
                                        '@odata.type' = '#microsoft.graph.deviceManagementConfigurationChoiceSettingInstance'
                                        choiceSettingValue = @{
                                            value = 'device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride_1'
                                            settingValueTemplateReference = @(
                                                @{
                                                    settingValueTemplateId = 'ddd5a881-2956-4a44-a95b-8e4a69c70170'
                                                    useTemplateDefault = $false
                                                }
                                            )
                                            children = @{}
                                        }
                                    }
                                )
                            }
                        )
                        AdditionalProperties = @{}
                    }
                }
                Mock -CommandName Get-MgDeviceManagementConfigurationPolicyTemplateSettingTemplate -MockWith {
                    return @(
                        @{
                            id                   = "0"
                            SettingDefinitions   = $null
                            SettingInstanceTemplate = @{
                                    SettingDefinitionId               = "device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride"
                                    SettingInstanceTemplateReference  = @{
                                        SettingInstanceTemplateId = "e4be83c7-691b-488d-b068-2d82a1cced8e"
                                    }
                                    AdditionalProperties = @{
                                            '@odata.type' = '#microsoft.graph.deviceManagementConfigurationChoiceSettingInstanceTemplate'
                                            choiceSettingValue = @{
                                                settingValueTemplateReference = @(
                                                    @{
                                                        settingValueTemplateId = 'ddd5a881-2956-4a44-a95b-8e4a69c70170'
                                                    }
                                                )
                                            }
                                    }
                                }
                            AdditionalProperties = @{}
                        }
                    )
                }
            }

            It "Should Reverse Engineer resource from the Export method" {
                Export-TargetResource @testParams
            }
        }
    }
}

Invoke-Command -ScriptBlock $Global:DscHelper.CleanupScript -NoNewScope
